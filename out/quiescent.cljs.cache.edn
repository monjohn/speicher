;; Analyzed by ClojureScript 0.0-2674
{:defs {WrapperComponent {:doc "Wrapper component used to mix-in lifecycle access", :file "out/quiescent.cljs", :line 48, :column 1, :end-line 48, :end-column 23, :test true, :name quiescent/WrapperComponent}, *component* {:doc "Within a component render function, will be bound to the raw\n  ReactJS component.", :file "out/quiescent.cljs", :line 15, :column 1, :end-line 15, :end-column 28, :dynamic true, :test true, :name quiescent/*component*}, wrapper {:protocol-inline nil, :name quiescent/wrapper, :variadic true, :file "out/quiescent.cljs", :end-column 15, :method-params ([child kvs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic true, :max-fixed-arity 1}), :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([child & kvs])), :doc "Create a wrapper function for a compoment implementing multiple\n  lifecycle functions. Lifecycle functions are specified as any number\n  of additional key-value pairs passed as arguments to this function.\n\n  Valid keys and values include:\n\n  :onUpdate - will call the provided function,\n              passing the rendered DOM node as a single arg\n  :onMount - will call the provided function,\n             passing the rendered DOM node as a single arg\n  :onWillUpdate - will call the provided function with no arguments\n  :onWillMount - will call the provided function with no arguments\n  :onWillUnmount - will call the provided function with no arguments", :test true}, on-mount {:protocol-inline nil, :name quiescent/on-mount, :variadic false, :file "out/quiescent.cljs", :end-column 16, :method-params ([child f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 112, :end-line 112, :max-fixed-arity 2, :fn-var true, :arglists (quote ([child f])), :doc "Wrap a component, specifying a function to be called on the\n  componentDidMount lifecycle event.\n\n  The function will be passed the rendered DOM node.", :test true}, js-props {:protocol-inline nil, :name quiescent/js-props, :variadic false, :file "out/quiescent.cljs", :end-column 16, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil object}, :variadic false, :max-fixed-arity 1}), :line 3, :end-line 3, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj])), :doc "Utility function. Takes an object which is (possibly) a\n  ClojureScript map. If the value is a ClojureScript map, convert it\n  to a JavaScript properties object. Otherwise, return the argument\n  unchanged.", :test true}, on-will-mount {:protocol-inline nil, :name quiescent/on-will-mount, :variadic false, :file "out/quiescent.cljs", :end-column 21, :method-params ([child f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 129, :end-line 129, :max-fixed-arity 2, :fn-var true, :arglists (quote ([child f])), :doc "Wrap a component, specifying a function to be called on the\n  componentWillMount lifecycle event.\n\n  The function will be called with no arguments.", :test true}, on-will-unmount {:protocol-inline nil, :name quiescent/on-will-unmount, :variadic false, :file "out/quiescent.cljs", :end-column 23, :method-params ([child f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 154, :end-line 154, :max-fixed-arity 2, :fn-var true, :arglists (quote ([child f])), :doc "Wrap a component, specifying a function to be called on the\n  componentWillUnmount lifecycle event.\n\n  The function will be called with no arguments.", :test true}, component {:protocol-inline nil, :name quiescent/component, :variadic false, :file "out/quiescent.cljs", :end-column 17, :method-params ([renderer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([renderer])), :doc "Return a function that will return a ReactJS component, using the\n  provided function as the implementation for React's 'render' method\n  on the component.\n\n  The given render function should take a single immutable value as\n  its first argument, and return a single ReactJS component.\n  Additional arguments to the component constructor will be passed as\n  additional arguments to the render function whenever it is invoked,\n  but will *not* be included in any calculations regarding whether the\n  component should re-render.", :test true}, on-render {:protocol-inline nil, :name quiescent/on-render, :variadic false, :file "out/quiescent.cljs", :end-column 17, :method-params ([child f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 120, :end-line 120, :max-fixed-arity 2, :fn-var true, :arglists (quote ([child f])), :doc "Wrap a component, specifying a function to be called on the\n  componentDidMount AND the componentDidUpdate lifecycle events.\n\n  The function will be passed the rendered DOM node.", :test true}, on-update {:protocol-inline nil, :name quiescent/on-update, :variadic false, :file "out/quiescent.cljs", :end-column 17, :method-params ([child f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 104, :end-line 104, :max-fixed-arity 2, :fn-var true, :arglists (quote ([child f])), :doc "Wrap a component, specifying a function to be called on the\n  componentDidUpdate lifecycle event.\n\n  The function will be passed the rendered DOM node.", :test true}, render {:protocol-inline nil, :name quiescent/render, :variadic false, :file "out/quiescent.cljs", :end-column 14, :method-params ([component node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 162, :end-line 162, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component node])), :doc "Given a ReactJS component, immediately render it, rooted to the\n  specified DOM node.", :test true}, on-will-update {:protocol-inline nil, :name quiescent/on-will-update, :variadic false, :file "out/quiescent.cljs", :end-column 22, :method-params ([child f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 137, :end-line 137, :max-fixed-arity 2, :fn-var true, :arglists (quote ([child f])), :doc "Wrap a component, specifying a function to be called on the\n  componentWillUpdate lifecycle event.\n\n  The function will be called with no arguments.", :test true}, on-will-render {:protocol-inline nil, :name quiescent/on-will-render, :variadic false, :file "out/quiescent.cljs", :end-column 22, :method-params ([child f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 145, :end-line 145, :max-fixed-arity 2, :fn-var true, :arglists (quote ([child f])), :doc "Wrap a component, specifying a function to be called on the\n  componentWillMount AND the componentWillUpdate lifecycle events.\n\n  The function will be called with no arguments.", :test true}}, :name quiescent, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires nil, :imports nil}