if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

/**
 * React v0.12.2
 */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.React=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var ReactChildren = _dereq_("./ReactChildren");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactDOM = _dereq_("./ReactDOM");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDefaultInjection = _dereq_("./ReactDefaultInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTypes = _dereq_("./ReactPropTypes");
var ReactServerRendering = _dereq_("./ReactServerRendering");
var ReactTextComponent = _dereq_("./ReactTextComponent");

var assign = _dereq_("./Object.assign");
var deprecated = _dereq_("./deprecated");
var onlyChild = _dereq_("./onlyChild");

ReactDefaultInjection.inject();

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;

if ("production" !== "development") {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
}

// TODO: Drop legacy elements once classes no longer export these factories
createElement = ReactLegacyElement.wrapCreateElement(
  createElement
);
createFactory = ReactLegacyElement.wrapCreateFactory(
  createFactory
);

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    only: onlyChild
  },
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactCompositeComponent.createClass,
  createElement: createElement,
  createFactory: createFactory,
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  render: render,
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidClass: ReactLegacyElement.isValidClass,
  isValidElement: ReactElement.isValidElement,
  withContext: ReactContext.withContext,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign,

  // Deprecations (remove for 0.13)
  renderComponent: deprecated(
    'React',
    'renderComponent',
    'render',
    this,
    render
  ),
  renderComponentToString: deprecated(
    'React',
    'renderComponentToString',
    'renderToString',
    this,
    ReactServerRendering.renderToString
  ),
  renderComponentToStaticMarkup: deprecated(
    'React',
    'renderComponentToStaticMarkup',
    'renderToStaticMarkup',
    this,
    ReactServerRendering.renderToStaticMarkup
  ),
  isValidComponent: deprecated(
    'React',
    'isValidComponent',
    'isValidElement',
    this,
    ReactElement.isValidElement
  )
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    Component: ReactComponent,
    CurrentOwner: ReactCurrentOwner,
    DOMComponent: ReactDOMComponent,
    DOMPropertyOperations: DOMPropertyOperations,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    MultiChild: ReactMultiChild,
    TextComponent: ReactTextComponent
  });
}

if ("production" !== "development") {
  var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // If we're in Chrome, look for the devtools marker and provide a download
    // link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        console.debug(
          'Download the React DevTools for a better development experience: ' +
          'http://fb.me/react-devtools'
        );
      }
    }

    var expectedFeatures = [
      // shims
      Array.isArray,
      Array.prototype.every,
      Array.prototype.forEach,
      Array.prototype.indexOf,
      Array.prototype.map,
      Date.now,
      Function.prototype.bind,
      Object.keys,
      String.prototype.split,
      String.prototype.trim,

      // shams
      Object.create,
      Object.freeze
    ];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error(
          'One or more ES5 shim/shams expected by React are not available: ' +
          'http://fb.me/react-warning-polyfills'
        );
        break;
      }
    }
  }
}

// Version exists only in the open-source version of React, not in Facebook's
// internal version.
React.version = '0.12.2';

module.exports = React;

},{"./DOMPropertyOperations":12,"./EventPluginUtils":20,"./ExecutionEnvironment":22,"./Object.assign":27,"./ReactChildren":31,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactDOM":37,"./ReactDOMComponent":39,"./ReactDefaultInjection":49,"./ReactElement":52,"./ReactElementValidator":53,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./ReactPropTypes":72,"./ReactServerRendering":76,"./ReactTextComponent":78,"./deprecated":106,"./onlyChild":137}],2:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

"use strict";

var focusNode = _dereq_("./focusNode");

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      focusNode(this.getDOMNode());
    }
  }
};

module.exports = AutoFocusMixin;

},{"./focusNode":111}],3:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var SyntheticInputEvent = _dereq_("./SyntheticInputEvent");

var keyOf = _dereq_("./keyOf");

var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !('documentMode' in document || isPresto())
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  }
};

// Track characters inserted via keypress and composition events.
var fallbackChars = null;

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey)
  );
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var chars;

    if (canUseTextInputEvent) {
      switch (topLevelType) {
        case topLevelTypes.topKeyPress:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return;
          }

          hasSpaceKeypress = true;
          chars = SPACEBAR_CHAR;
          break;

        case topLevelTypes.topTextInput:
          // Record the characters to be added to the DOM.
          chars = nativeEvent.data;

          // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to blacklist it.
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return;
          }

          // Otherwise, carry on.
          break;

        default:
          // For other native event types, do nothing.
          return;
      }
    } else {
      switch (topLevelType) {
        case topLevelTypes.topPaste:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          fallbackChars = null;
          break;
        case topLevelTypes.topKeyPress:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
            fallbackChars = String.fromCharCode(nativeEvent.which);
          }
          break;
        case topLevelTypes.topCompositionEnd:
          fallbackChars = nativeEvent.data;
          break;
      }

      // If no changes have occurred to the fallback string, no relevant
      // event has fired and we're done.
      if (fallbackChars === null) {
        return;
      }

      chars = fallbackChars;
    }

    // If no characters are being inserted, no BeforeInput event should
    // be fired.
    if (!chars) {
      return;
    }

    var event = SyntheticInputEvent.getPooled(
      eventTypes.beforeInput,
      topLevelTargetID,
      nativeEvent
    );

    event.data = chars;
    fallbackChars = null;
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }
};

module.exports = BeforeInputEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./SyntheticInputEvent":89,"./keyOf":133}],4:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

"use strict";

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  strokeOpacity: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],5:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var camelizeStyleName = _dereq_("./camelizeStyleName");
var dangerousStyleValue = _dereq_("./dangerousStyleValue");
var hyphenateStyleName = _dereq_("./hyphenateStyleName");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

var processStyleName = memoizeStringOnly(function(styleName) {
  return hyphenateStyleName(styleName);
});

var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== "development") {
  var warnedStyleNames = {};

  var warnHyphenatedStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== "development" ? warning(
      false,
      'Unsupported style property ' + name + '. Did you mean ' +
      camelizeStyleName(name) + '?'
    ) : null);
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

},{"./CSSProperty":4,"./ExecutionEnvironment":22,"./camelizeStyleName":100,"./dangerousStyleValue":105,"./hyphenateStyleName":124,"./memoizeStringOnly":135,"./warning":145}],6:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function(callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      ("production" !== "development" ? invariant(
        callbacks.length === contexts.length,
        "Mismatched list of contexts in callback queue"
      ) : invariant(callbacks.length === contexts.length));
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;

},{"./Object.assign":27,"./PooledClass":28,"./invariant":126}],7:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactUpdates = _dereq_("./ReactUpdates");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var isEventSupported = _dereq_("./isEventSupported");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    !('documentMode' in document) || document.documentMode > 8
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    !('documentMode' in document) || document.documentMode > 9
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactUpdates":79,"./SyntheticEvent":87,"./isEventSupported":127,"./isTextInputElement":129,"./keyOf":133}],8:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

"use strict";

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],9:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CompositionEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticCompositionEvent = _dereq_("./SyntheticCompositionEvent");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var keyOf = _dereq_("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var useCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. In Korean, for example,
// the compositionend event contains only one character regardless of
// how many characters have been composed since compositionstart.
// We therefore use the fallback data while still using the native
// events as triggers.
var useFallbackData = (
  !useCompositionEvent ||
  (
    'documentMode' in document &&
    document.documentMode > 8 &&
    document.documentMode <= 11
  )
);

var topLevelTypes = EventConstants.topLevelTypes;
var currentComposition = null;

// Events and their corresponding property names.
var eventTypes = {
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Helper class stores information about selection and document state
 * so we can figure out what changed at a later date.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this.root = root;
  this.startSelection = ReactInputSelection.getSelection(root);
  this.startValue = this.getText();
}

/**
 * Get current text of input.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getText = function() {
  return this.root.value || this.root[getTextContentAccessor()];
};

/**
 * Text that has changed since the start of composition.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getData = function() {
  var endValue = this.getText();
  var prefixLength = this.startSelection.start;
  var suffixLength = this.startValue.length - this.startSelection.end;

  return endValue.substr(
    prefixLength,
    endValue.length - suffixLength - prefixLength
  );
};

/**
 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and
 * `onCompositionEnd` events on inputs, textareas and contentEditable
 * nodes.
 */
var CompositionEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var eventType;
    var data;

    if (useCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }

    if (useFallbackData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = new FallbackCompositionState(topLevelTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          data = currentComposition.getData();
          currentComposition = null;
        }
      }
    }

    if (eventType) {
      var event = SyntheticCompositionEvent.getPooled(
        eventType,
        topLevelTargetID,
        nativeEvent
      );
      if (data) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = data;
      }
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }
  }
};

module.exports = CompositionEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactInputSelection":59,"./SyntheticCompositionEvent":85,"./getTextContentAccessor":121,"./keyOf":133}],10:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

"use strict";

var Danger = _dereq_("./Danger");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var invariant = _dereq_("./invariant");

/**
 * The DOM property to use when setting text content.
 *
 * @type {string}
 * @private
 */
var textContentAccessor = getTextContentAccessor();

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.
  parentNode.insertBefore(
    childNode,
    parentNode.childNodes[index] || null
  );
}

var updateTextContent;
if (textContentAccessor === 'textContent') {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    node.textContent = text;
  };
} else {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    // In order to preserve newlines correctly, we can't use .innerText to set
    // the contents (see #1080), so we empty the element then append a text node
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    if (text) {
      var doc = node.ownerDocument || document;
      node.appendChild(doc.createTextNode(text));
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: updateTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; update = updates[i]; i++) {
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        ("production" !== "development" ? invariant(
          updatedChild,
          'processUpdates(): Unable to find child %s of element. This ' +
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
          'browser), usually due to forgetting a <tbody> when using tables, ' +
          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements '+
          'in an <svg> parent. Try inspecting the child nodes of the element ' +
          'with React ID `%s`.',
          updatedIndex,
          parentID
        ) : invariant(updatedChild));

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; update = updates[k]; k++) {
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          updateTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

},{"./Danger":13,"./ReactMultiChildUpdateTypes":65,"./getTextContentAccessor":121,"./invariant":126}],11:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

"use strict";

var invariant = _dereq_("./invariant");

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== "development" ? invariant(
        !DOMProperty.isStandardName.hasOwnProperty(propName),
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        DOMProperty.getPossibleStandardName[attributeName] = propName;
        DOMProperty.getAttributeName[propName] = attributeName;
      } else {
        DOMProperty.getAttributeName[propName] = lowerCased;
      }

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames.hasOwnProperty(propName) ?
          DOMPropertyNames[propName] :
          propName;

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
      } else {
        DOMProperty.getMutationMethod[propName] = null;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
      DOMProperty.mustUseProperty[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
      DOMProperty.hasSideEffects[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
      DOMProperty.hasBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
      DOMProperty.hasNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
      DOMProperty.hasPositiveNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
      DOMProperty.hasOverloadedBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

      ("production" !== "development" ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== "development" ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== "development" ? invariant(
        !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
        'numeric value, but not a combination: %s',
        propName
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
        !!DOMProperty.hasNumericValue[propName] +
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be numeric or parse as a
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasNumericValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * Whether the property can be used as a flag as well as with a value. Removed
   * when strictly equal to false; present without a value when strictly equal
   * to true; present with a value otherwise.
   * @type {Object}
   */
  hasOverloadedBooleanValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

},{"./invariant":126}],12:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

function shouldIgnoreValue(name, value) {
  return value == null ||
    (DOMProperty.hasBooleanValue[name] && !value) ||
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
}

var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
  return escapeTextForBrowser(name) + '="';
});

if ("production" !== "development") {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = (
      DOMProperty.isCustomAttribute(lowerCasedName) ?
        lowerCasedName :
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
        DOMProperty.getPossibleStandardName[lowerCasedName] :
        null
    );

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    ("production" !== "development" ? warning(
      standardName == null,
      'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'
    ) : null);

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +
      escapeTextForBrowser(id) + '"';
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
        return escapeTextForBrowser(attributeName);
      }
      return processAttributeNameAndPrefix(attributeName) +
        escapeTextForBrowser(value) + '"';
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return processAttributeNameAndPrefix(name) +
        escapeTextForBrowser(value) + '"';
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== ('' + value)) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          propName
        );
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

},{"./DOMProperty":11,"./escapeTextForBrowser":109,"./memoizeStringOnly":135,"./warning":145}],13:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createNodesFromMarkup = _dereq_("./createNodesFromMarkup");
var emptyFunction = _dereq_("./emptyFunction");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
      'thread. Make sure `window` and `document` are available globally ' +
      'before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== "development" ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      for (var resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (i = 0; i < renderNodes.length; ++i) {
        var renderNode = renderNodes[i];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== "development" ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== "development") {
          console.error(
            "Danger: Discarding unexpected node:",
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== "development" ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== "development" ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. Make sure `window` and `document` are available ' +
      'globally before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== "development" ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== "development" ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See renderComponentToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

},{"./ExecutionEnvironment":22,"./createNodesFromMarkup":104,"./emptyFunction":107,"./getMarkupWrap":118,"./invariant":126}],14:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

"use strict";

 var keyOf = _dereq_("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({CompositionEventPlugin: null}),
  keyOf({BeforeInputEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":133}],15:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

var ReactMount = _dereq_("./ReactMount");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactMount":63,"./SyntheticMouseEvent":91,"./keyOf":133}],16:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTextInput: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":132}],17:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== "development") {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  },

  registerDefault: function() {}
};

module.exports = EventListener;

},{"./emptyFunction":107}],18:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

"use strict";

var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var EventPluginUtils = _dereq_("./EventPluginUtils");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var invalid = !InstanceHandle||
    !InstanceHandle.traverseTwoPhase ||
    !InstanceHandle.traverseEnterLeave;
  if (invalid) {
    throw new Error('InstanceHandle not injected before use!');
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== "development") {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== "development") {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== "development" ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== "development" ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

},{"./EventPluginRegistry":19,"./EventPluginUtils":20,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],19:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== "development" ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== "development" ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== "development" ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== "development" ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
      'once. You are likely trying to load more than one copy of React.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== "development" ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

},{"./invariant":126}],20:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var invariant = _dereq_("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== "development") {
      ("production" !== "development" ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== "development") {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== "development" ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, executeDispatch) {
  forEachEventDispatch(event, executeDispatch);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== "development" ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

},{"./EventConstants":16,"./invariant":126}],21:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== "development") {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners =
      accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners =
        accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

},{"./EventConstants":16,"./EventPluginHub":18,"./accumulateInto":97,"./forEachAccumulated":112}],22:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = !!(
  typeof window !== 'undefined' &&
  window.document &&
  window.document.createElement
);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],23:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE =
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = (
    implementation &&
    implementation.hasFeature &&
    implementation.hasFeature(
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
      '1.1'
    )
  );
}


var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints
    autoCorrect: null, // Supported in Mobile Safari for keyboard hints
    itemProp: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE, // Microdata: http://schema.org/docs/gs.html
    itemType: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    property: null // Supports OG in meta tags
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    encType: 'enctype',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;

},{"./DOMProperty":11,"./ExecutionEnvironment":22}],24:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

"use strict";

var ReactPropTypes = _dereq_("./ReactPropTypes");

var invariant = _dereq_("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== "development" ? invariant(
    input.props.checkedLink == null || input.props.valueLink == null,
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `value` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultValue`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      checked: function(props, propName, componentName) {
        if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `checked` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultChecked`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

},{"./ReactPropTypes":72,"./invariant":126}],25:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LocalEventTrapMixin
 */

"use strict";

var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

function remove(event) {
  event.remove();
}

var LocalEventTrapMixin = {
  trapBubbledEvent:function(topLevelType, handlerBaseName) {
    ("production" !== "development" ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      this.getDOMNode()
    );
    this._localEventListeners =
      accumulateInto(this._localEventListeners, listener);
  },

  // trapCapturedEvent would look nearly identical. We don't implement that
  // method because it isn't currently needed.

  componentWillUnmount:function() {
    if (this._localEventListeners) {
      forEachAccumulated(this._localEventListeners, remove);
    }
  }
};

module.exports = LocalEventTrapMixin;

},{"./ReactBrowserEventEmitter":30,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],26:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var emptyFunction = _dereq_("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":16,"./emptyFunction":107}],27:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
};

module.exports = assign;

},{}],28:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== "development" ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

},{"./invariant":126}],29:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

"use strict";

var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactMount = _dereq_("./ReactMount");

var invariant = _dereq_("./invariant");

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function() {
    ("production" !== "development" ? invariant(
      this.isMounted(),
      'getDOMNode(): A component must be mounted to have a DOM node.'
    ) : invariant(this.isMounted()));
    if (ReactEmptyComponent.isNullComponentID(this._rootNodeID)) {
      return null;
    }
    return ReactMount.getNode(this._rootNodeID);
  }
};

module.exports = ReactBrowserComponentMixin;

},{"./ReactEmptyComponent":54,"./ReactMount":63,"./invariant":126}],30:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var ReactEventEmitterMixin = _dereq_("./ReactEventEmitterMixin");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var assign = _dereq_("./Object.assign");
var isEventSupported = _dereq_("./isEventSupported");

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTextInput: 'textInput',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
        ReactBrowserEventEmitter.handleTopLevel
      );
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      ReactBrowserEventEmitter.ReactEventListener &&
      ReactBrowserEventEmitter.ReactEventListener.isEnabled()
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!(
            isListening.hasOwnProperty(dependency) &&
            isListening[dependency]
          )) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'wheel',
              mountAt
            );
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'mousewheel',
              mountAt
            );
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt
            );
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topScroll,
              'scroll',
              mountAt
            );
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topScroll,
              'scroll',
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
            );
          }
        } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topFocus,
              'focus',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topBlur,
              'blur',
              mountAt
            );
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topFocus,
              'focusin',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topBlur,
              'focusout',
              mountAt
            );
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            dependency,
            topEventMapping[dependency],
            mountAt
          );
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function(){
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

module.exports = ReactBrowserEventEmitter;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPluginRegistry":19,"./Object.assign":27,"./ReactEventEmitterMixin":56,"./ViewportMetrics":96,"./isEventSupported":127}],31:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;

  var keyUnique = !mapResult.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'ReactChildren.map(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);

  if (keyUnique) {
    var mappedChild =
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
    mapResult[name] = mappedChild;
  }
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return mapResult;
}

function forEachSingleChildDummy(traverseContext, child, name, i) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  count: countChildren
};

module.exports = ReactChildren;

},{"./PooledClass":28,"./traverseAllChildren":144,"./warning":145}],32:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");

/**
 * Every React component is in one of these life cycles.
 */
var ComponentLifeCycle = keyMirror({
  /**
   * Mounted components have a DOM node representation and are capable of
   * receiving new props.
   */
  MOUNTED: null,
  /**
   * Unmounted components are inactive and cannot receive new props.
   */
  UNMOUNTED: null
});

var injected = false;

/**
 * Optionally injectable environment dependent cleanup hook. (server vs.
 * browser etc). Example: A browser system caches DOM nodes based on component
 * ID and must remove that cache entry when this instance is unmounted.
 *
 * @private
 */
var unmountIDFromEnvironment = null;

/**
 * The "image" of a component tree, is the platform specific (typically
 * serialized) data that represents a tree of lower level UI building blocks.
 * On the web, this "image" is HTML markup which describes a construction of
 * low level `div` and `span` nodes. Other platforms may have different
 * encoding of this "image". This must be injected.
 *
 * @private
 */
var mountImageIntoNode = null;

/**
 * Components are the basic units of composition in React.
 *
 * Every component accepts a set of keyed input parameters known as "props" that
 * are initialized by the constructor. Once a component is mounted, the props
 * can be mutated using `setProps` or `replaceProps`.
 *
 * Every component is capable of the following operations:
 *
 *   `mountComponent`
 *     Initializes the component, renders markup, and registers event listeners.
 *
 *   `receiveComponent`
 *     Updates the rendered DOM nodes to match the given component.
 *
 *   `unmountComponent`
 *     Releases any resources allocated by this component.
 *
 * Components can also be "owned" by other components. Being owned by another
 * component means being constructed by that component. This is different from
 * being the child of a component, which means having a DOM representation that
 * is a child of the DOM representation of that component.
 *
 * @class ReactComponent
 */
var ReactComponent = {

  injection: {
    injectEnvironment: function(ReactComponentEnvironment) {
      ("production" !== "development" ? invariant(
        !injected,
        'ReactComponent: injectEnvironment() can only be called once.'
      ) : invariant(!injected));
      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;
      unmountIDFromEnvironment =
        ReactComponentEnvironment.unmountIDFromEnvironment;
      ReactComponent.BackendIDOperations =
        ReactComponentEnvironment.BackendIDOperations;
      injected = true;
    }
  },

  /**
   * @internal
   */
  LifeCycle: ComponentLifeCycle,

  /**
   * Injected module that provides ability to mutate individual properties.
   * Injected into the base class because many different subclasses need access
   * to this.
   *
   * @internal
   */
  BackendIDOperations: null,

  /**
   * Base functionality for every ReactComponent constructor. Mixed into the
   * `ReactComponent` prototype, but exposed statically for easy access.
   *
   * @lends {ReactComponent.prototype}
   */
  Mixin: {

    /**
     * Checks whether or not this component is mounted.
     *
     * @return {boolean} True if mounted, false otherwise.
     * @final
     * @protected
     */
    isMounted: function() {
      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
    },

    /**
     * Sets a subset of the props.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    setProps: function(partialProps, callback) {
      // Merge with the pending element if it exists, otherwise with existing
      // element props.
      var element = this._pendingElement || this._currentElement;
      this.replaceProps(
        assign({}, element.props, partialProps),
        callback
      );
    },

    /**
     * Replaces all of the props.
     *
     * @param {object} props New props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    replaceProps: function(props, callback) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'replaceProps(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      ("production" !== "development" ? invariant(
        this._mountDepth === 0,
        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +
        'component with a parent. This is an anti-pattern since props will ' +
        'get reactively updated when rendered. Instead, change the owner\'s ' +
        '`render` method to pass the correct value as props to the component ' +
        'where it is created.'
      ) : invariant(this._mountDepth === 0));
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        this._pendingElement || this._currentElement,
        props
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Schedule a partial update to the props. Only used for internal testing.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @internal
     */
    _setPropsInternal: function(partialProps, callback) {
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      var element = this._pendingElement || this._currentElement;
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        element,
        assign({}, element.props, partialProps)
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Base constructor for all React components.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.construct.call(this, ...)`.
     *
     * @param {ReactElement} element
     * @internal
     */
    construct: function(element) {
      // This is the public exposed props object after it has been processed
      // with default props. The element's props represents the true internal
      // state of the props.
      this.props = element.props;
      // Record the component responsible for creating this component.
      // This is accessible through the element but we maintain an extra
      // field for compatibility with devtools and as a way to make an
      // incremental update. TODO: Consider deprecating this field.
      this._owner = element._owner;

      // All components start unmounted.
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;

      // See ReactUpdates.
      this._pendingCallbacks = null;

      // We keep the old element and a reference to the pending element
      // to track updates.
      this._currentElement = element;
      this._pendingElement = null;
    },

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * NOTE: This does not insert any nodes into the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {number} mountDepth number of components in the owner hierarchy.
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @internal
     */
    mountComponent: function(rootID, transaction, mountDepth) {
      ("production" !== "development" ? invariant(
        !this.isMounted(),
        'mountComponent(%s, ...): Can only mount an unmounted component. ' +
        'Make sure to avoid storing components between renders or reusing a ' +
        'single component instance in multiple places.',
        rootID
      ) : invariant(!this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        var owner = this._currentElement._owner;
        ReactOwner.addComponentAsRefTo(this, ref, owner);
      }
      this._rootNodeID = rootID;
      this._lifeCycleState = ComponentLifeCycle.MOUNTED;
      this._mountDepth = mountDepth;
      // Effectively: return '';
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * NOTE: This does not remove any nodes from the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.unmountComponent.call(this)`.
     *
     * @internal
     */
    unmountComponent: function() {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'unmountComponent(): Can only unmount a mounted component.'
      ) : invariant(this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        ReactOwner.removeComponentAsRefFrom(this, ref, this._owner);
      }
      unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
    },

    /**
     * Given a new instance of this component, updates the rendered DOM nodes
     * as if that instance was rendered instead.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.
     *
     * @param {object} nextComponent Next set of properties.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function(nextElement, transaction) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'receiveComponent(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      this._pendingElement = nextElement;
      this.performUpdateIfNecessary(transaction);
    },

    /**
     * If `_pendingElement` is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function(transaction) {
      if (this._pendingElement == null) {
        return;
      }
      var prevElement = this._currentElement;
      var nextElement = this._pendingElement;
      this._currentElement = nextElement;
      this.props = nextElement.props;
      this._owner = nextElement._owner;
      this._pendingElement = null;
      this.updateComponent(transaction, prevElement);
    },

    /**
     * Updates the component's currently mounted representation.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {object} prevElement
     * @internal
     */
    updateComponent: function(transaction, prevElement) {
      var nextElement = this._currentElement;

      // If either the owner or a `ref` has changed, make sure the newest owner
      // has stored a reference to `this`, and the previous owner (if different)
      // has forgotten the reference to `this`. We use the element instead
      // of the public this.props because the post processing cannot determine
      // a ref. The ref conceptually lives on the element.

      // TODO: Should this even be possible? The owner cannot change because
      // it's forbidden by shouldUpdateReactComponent. The ref can change
      // if you swap the keys of but not the refs. Reconsider where this check
      // is made. It probably belongs where the key checking and
      // instantiateReactComponent is done.

      if (nextElement._owner !== prevElement._owner ||
          nextElement.ref !== prevElement.ref) {
        if (prevElement.ref != null) {
          ReactOwner.removeComponentAsRefFrom(
            this, prevElement.ref, prevElement._owner
          );
        }
        // Correct, even if the owner is the same, and only the ref has changed.
        if (nextElement.ref != null) {
          ReactOwner.addComponentAsRefTo(
            this,
            nextElement.ref,
            nextElement._owner
          );
        }
      }
    },

    /**
     * Mounts this component and inserts it into the DOM.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @internal
     * @see {ReactMount.render}
     */
    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {
      var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
      transaction.perform(
        this._mountComponentIntoNode,
        this,
        rootID,
        container,
        transaction,
        shouldReuseMarkup
      );
      ReactUpdates.ReactReconcileTransaction.release(transaction);
    },

    /**
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {ReactReconcileTransaction} transaction
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @private
     */
    _mountComponentIntoNode: function(
        rootID,
        container,
        transaction,
        shouldReuseMarkup) {
      var markup = this.mountComponent(rootID, transaction, 0);
      mountImageIntoNode(markup, container, shouldReuseMarkup);
    },

    /**
     * Checks if this component is owned by the supplied `owner` component.
     *
     * @param {ReactComponent} owner Component to check.
     * @return {boolean} True if `owners` owns this component.
     * @final
     * @internal
     */
    isOwnedBy: function(owner) {
      return this._owner === owner;
    },

    /**
     * Gets another component, that shares the same owner as this one, by ref.
     *
     * @param {string} ref of a sibling Component.
     * @return {?ReactComponent} the actual sibling Component.
     * @final
     * @internal
     */
    getSiblingByRef: function(ref) {
      var owner = this._owner;
      if (!owner || !owner.refs) {
        return null;
      }
      return owner.refs[ref];
    }
  }
};

module.exports = ReactComponent;

},{"./Object.assign":27,"./ReactElement":52,"./ReactOwner":67,"./ReactUpdates":79,"./invariant":126,"./keyMirror":132}],33:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

"use strict";

var ReactDOMIDOperations = _dereq_("./ReactDOMIDOperations");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");
var ReactReconcileTransaction = _dereq_("./ReactReconcileTransaction");

var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");


var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;


/**
 * Abstracts away all functionality of `ReactComponent` requires knowledge of
 * the browser context.
 */
var ReactComponentBrowserEnvironment = {
  ReactReconcileTransaction: ReactReconcileTransaction,

  BackendIDOperations: ReactDOMIDOperations,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  },

  /**
   * @param {string} markup Markup string to place into the DOM Element.
   * @param {DOMElement} container DOM Element to insert markup into.
   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the
   * container if possible.
   */
  mountImageIntoNode: ReactPerf.measure(
    'ReactComponentBrowserEnvironment',
    'mountImageIntoNode',
    function(markup, container, shouldReuseMarkup) {
      ("production" !== "development" ? invariant(
        container && (
          container.nodeType === ELEMENT_NODE_TYPE ||
            container.nodeType === DOC_NODE_TYPE
        ),
        'mountComponentIntoNode(...): Target container is not valid.'
      ) : invariant(container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
          container.nodeType === DOC_NODE_TYPE
      )));

      if (shouldReuseMarkup) {
        if (ReactMarkupChecksum.canReuseMarkup(
          markup,
          getReactRootElementInContainer(container))) {
          return;
        } else {
          ("production" !== "development" ? invariant(
            container.nodeType !== DOC_NODE_TYPE,
            'You\'re trying to render a component to the document using ' +
            'server rendering but the checksum was invalid. This usually ' +
            'means you rendered a different component type or props on ' +
            'the client from the one on the server, or your render() ' +
            'methods are impure. React cannot handle this case due to ' +
            'cross-browser quirks by rendering at the document root. You ' +
            'should look for environment dependent code in your components ' +
            'and ensure the props are the same client and server side.'
          ) : invariant(container.nodeType !== DOC_NODE_TYPE));

          if ("production" !== "development") {
            console.warn(
              'React attempted to use reuse markup in a container but the ' +
              'checksum was invalid. This generally means that you are ' +
              'using server rendering and the markup generated on the ' +
              'server was not what the client was expecting. React injected ' +
              'new markup to compensate which works but you have lost many ' +
              'of the benefits of server rendering. Instead, figure out ' +
              'why the markup being generated is different on the client ' +
              'or server.'
            );
          }
        }
      }

      ("production" !== "development" ? invariant(
        container.nodeType !== DOC_NODE_TYPE,
        'You\'re trying to render a component to the document but ' +
          'you didn\'t use server rendering. We can\'t do this ' +
          'without using server rendering due to cross-browser quirks. ' +
          'See renderComponentToString() for server rendering.'
      ) : invariant(container.nodeType !== DOC_NODE_TYPE));

      setInnerHTML(container, markup);
    }
  )
};

module.exports = ReactComponentBrowserEnvironment;

},{"./ReactDOMIDOperations":41,"./ReactMarkupChecksum":62,"./ReactMount":63,"./ReactPerf":68,"./ReactReconcileTransaction":74,"./getReactRootElementInContainer":120,"./invariant":126,"./setInnerHTML":140}],34:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactErrorUtils = _dereq_("./ReactErrorUtils");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTransferer = _dereq_("./ReactPropTransferer");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var mapObject = _dereq_("./mapObject");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var MIXINS_KEY = keyOf({mixins: null});

/**
 * Policies that describe methods in `ReactCompositeComponentInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base ReactCompositeComponent class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactCompositeComponent`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactCompositeComponentInterface
 * @internal
 */
var ReactCompositeComponentInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function(Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(Constructor, childContextTypes) {
    validateTypeDef(
      Constructor,
      childContextTypes,
      ReactPropTypeLocations.childContext
    );
    Constructor.childContextTypes = assign(
      {},
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(Constructor, contextTypes) {
    validateTypeDef(
      Constructor,
      contextTypes,
      ReactPropTypeLocations.context
    );
    Constructor.contextTypes = assign(
      {},
      Constructor.contextTypes,
      contextTypes
    );
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function(Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
        Constructor.getDefaultProps,
        getDefaultProps
      );
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function(Constructor, propTypes) {
    validateTypeDef(
      Constructor,
      propTypes,
      ReactPropTypeLocations.prop
    );
    Constructor.propTypes = assign(
      {},
      Constructor.propTypes,
      propTypes
    );
  },
  statics: function(Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  }
};

function getDeclarationErrorAddendum(component) {
  var owner = component._owner || null;
  if (owner && owner.constructor && owner.constructor.displayName) {
    return ' Check the render method of `' + owner.constructor.displayName +
      '`.';
  }
  return '';
}

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      ("production" !== "development" ? invariant(
        typeof typeDef[propName] == 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactCompositeComponent',
        ReactPropTypeLocationNames[location],
        propName
      ) : invariant(typeof typeDef[propName] == 'function'));
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ?
    ReactCompositeComponentInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactCompositeComponentInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactCompositeComponentInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

function validateLifeCycleOnReplaceState(instance) {
  var compositeLifeCycleState = instance._compositeLifeCycleState;
  ("production" !== "development" ? invariant(
    instance.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
    'replaceState(...): Can only update a mounted or mounting component.'
  ) : invariant(instance.isMounted() ||
    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
  ("production" !== "development" ? invariant(
    ReactCurrentOwner.current == null,
    'replaceState(...): Cannot update during an existing state transition ' +
    '(such as within `render`). Render methods should be a pure function ' +
    'of props and state.'
  ) : invariant(ReactCurrentOwner.current == null));
  ("production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
    'replaceState(...): Cannot update while unmounting component. This ' +
    'usually means you called setState() on an unmounted component.'
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building `ReactCompositeComponent` classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  ("production" !== "development" ? invariant(
    !ReactLegacyElement.isValidFactory(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactLegacyElement.isValidFactory(spec)));
  ("production" !== "development" ? invariant(
    !ReactElement.isValidElement(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactElement.isValidElement(spec)));

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactCompositeComponent methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isCompositeComponentMethod =
        ReactCompositeComponentInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isCompositeComponentMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactCompositeComponentInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== "development" ? invariant(
            isCompositeComponentMethod && (
              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
              specPolicy === SpecPolicy.DEFINE_MANY
            ),
            'ReactCompositeComponent: Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isCompositeComponentMethod && (
            specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
            specPolicy === SpecPolicy.DEFINE_MANY
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== "development") {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    ("production" !== "development" ? invariant(
      !isReserved,
      'ReactCompositeComponent: You are attempting to define a reserved ' +
      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
      'as an instance property instead; it will still be accessible on the ' +
      'constructor.',
      name
    ) : invariant(!isReserved));

    var isInherited = name in Constructor;
    ("production" !== "development" ? invariant(
      !isInherited,
      'ReactCompositeComponent: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be ' +
      'due to a mixin.',
      name
    ) : invariant(!isInherited));
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeObjectsWithNoDuplicateKeys(one, two) {
  ("production" !== "development" ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  mapObject(two, function(value, key) {
    ("production" !== "development" ? invariant(
      one[key] === undefined,
      'mergeObjectsWithNoDuplicateKeys(): ' +
      'Tried to merge two objects with the same key: `%s`. This conflict ' +
      'may be due to a mixin; in particular, this may be caused by two ' +
      'getInitialState() or getDefaultProps() methods returning objects ' +
      'with clashing keys.',
      key
    ) : invariant(one[key] === undefined));
    one[key] = value;
  });
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    return mergeObjectsWithNoDuplicateKeys(a, b);
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * `ReactCompositeComponent` maintains an auxiliary life cycle state in
 * `this._compositeLifeCycleState` (which can be null).
 *
 * This is different from the life cycle state maintained by `ReactComponent` in
 * `this._lifeCycleState`. The following diagram shows how the states overlap in
 * time. There are times when the CompositeLifeCycle is null - at those times it
 * is only meaningful to look at ComponentLifeCycle alone.
 *
 * Top Row: ReactComponent.ComponentLifeCycle
 * Low Row: ReactComponent.CompositeLifeCycle
 *
 * +-------+---------------------------------+--------+
 * |  UN   |             MOUNTED             |   UN   |
 * |MOUNTED|                                 | MOUNTED|
 * +-------+---------------------------------+--------+
 * |       ^--------+   +-------+   +--------^        |
 * |       |        |   |       |   |        |        |
 * |    0--|MOUNTING|-0-|RECEIVE|-0-|   UN   |--->0   |
 * |       |        |   |PROPS  |   |MOUNTING|        |
 * |       |        |   |       |   |        |        |
 * |       |        |   |       |   |        |        |
 * |       +--------+   +-------+   +--------+        |
 * |       |                                 |        |
 * +-------+---------------------------------+--------+
 */
var CompositeLifeCycle = keyMirror({
  /**
   * Components in the process of being mounted respond to state changes
   * differently.
   */
  MOUNTING: null,
  /**
   * Components in the process of being unmounted are guarded against state
   * changes.
   */
  UNMOUNTING: null,
  /**
   * Components that are mounted and receiving new props respond to state
   * changes differently.
   */
  RECEIVING_PROPS: null
});

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function(element) {
    // Children can be either an array or more than one argument
    ReactComponent.Mixin.construct.apply(this, arguments);
    ReactOwner.Mixin.construct.apply(this, arguments);

    this.state = null;
    this._pendingState = null;

    // This is the public post-processed context. The real context and pending
    // context lives on the element.
    this.context = null;

    this._compositeLifeCycleState = null;
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    return ReactComponent.Mixin.isMounted.call(this) &&
      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;

      if (this.__reactAutoBindMap) {
        this._bindAutoBindMethods();
      }

      this.context = this._processContext(this._currentElement._context);
      this.props = this._processProps(this.props);

      this.state = this.getInitialState ? this.getInitialState() : null;
      ("production" !== "development" ? invariant(
        typeof this.state === 'object' && !Array.isArray(this.state),
        '%s.getInitialState(): must return an object or null',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));

      this._pendingState = null;
      this._pendingForceUpdate = false;

      if (this.componentWillMount) {
        this.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingState` without triggering a re-render.
        if (this._pendingState) {
          this.state = this._pendingState;
          this._pendingState = null;
        }
      }

      this._renderedComponent = instantiateReactComponent(
        this._renderValidatedComponent(),
        this._currentElement.type // The wrapping type
      );

      // Done with mounting, `setState` will now trigger UI changes.
      this._compositeLifeCycleState = null;
      var markup = this._renderedComponent.mountComponent(
        rootID,
        transaction,
        mountDepth + 1
      );
      if (this.componentDidMount) {
        transaction.getReactMountReady().enqueue(this.componentDidMount, this);
      }
      return markup;
    }
  ),

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
    if (this.componentWillUnmount) {
      this.componentWillUnmount();
    }
    this._compositeLifeCycleState = null;

    this._renderedComponent.unmountComponent();
    this._renderedComponent = null;

    ReactComponent.Mixin.unmountComponent.call(this);

    // Some existing components rely on this.props even after they've been
    // destroyed (in event handlers).
    // TODO: this.props = null;
    // TODO: this.state = null;
  },

  /**
   * Sets a subset of the state. Always use this or `replaceState` to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  setState: function(partialState, callback) {
    ("production" !== "development" ? invariant(
      typeof partialState === 'object' || partialState == null,
      'setState(...): takes an object of state variables to update.'
    ) : invariant(typeof partialState === 'object' || partialState == null));
    if ("production" !== "development"){
      ("production" !== "development" ? warning(
        partialState != null,
        'setState(...): You passed an undefined or null state object; ' +
        'instead, use forceUpdate().'
      ) : null);
    }
    // Merge with `_pendingState` if it exists, otherwise with existing state.
    this.replaceState(
      assign({}, this._pendingState || this.state, partialState),
      callback
    );
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {object} completeState Next state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  replaceState: function(completeState, callback) {
    validateLifeCycleOnReplaceState(this);
    this._pendingState = completeState;
    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {
      // If we're in a componentWillMount handler, don't enqueue a rerender
      // because ReactUpdates assumes we're in a browser context (which is wrong
      // for server rendering) and we're about to do a render anyway.
      // TODO: The callback here is ignored when setState is called from
      // componentWillMount. Either fix it or disallow doing so completely in
      // favor of getInitialState.
      ReactUpdates.enqueueUpdate(this, callback);
    }
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = null;
    var contextTypes = this.constructor.contextTypes;
    if (contextTypes) {
      maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      if ("production" !== "development") {
        this._checkPropTypes(
          contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function(currentContext) {
    var childContext = this.getChildContext && this.getChildContext();
    var displayName = this.constructor.displayName || 'ReactCompositeComponent';
    if (childContext) {
      ("production" !== "development" ? invariant(
        typeof this.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        displayName
      ) : invariant(typeof this.constructor.childContextTypes === 'object'));
      if ("production" !== "development") {
        this._checkPropTypes(
          this.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== "development" ? invariant(
          name in this.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          displayName,
          name
        ) : invariant(name in this.constructor.childContextTypes));
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    if ("production" !== "development") {
      var propTypes = this.constructor.propTypes;
      if (propTypes) {
        this._checkPropTypes(propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.constructor.displayName;
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error =
          propTypes[propName](props, propName, componentName, location);
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // renderComponent calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);
          ("production" !== "development" ? warning(false, error.message + addendum) : null);
        }
      }
    }
  },

  /**
   * If any of `_pendingElement`, `_pendingState`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(transaction) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    // Do not trigger a state transition if we are in the middle of mounting or
    // receiving props because both of those will already be doing this.
    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||
        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {
      return;
    }

    if (this._pendingElement == null &&
        this._pendingState == null &&
        !this._pendingForceUpdate) {
      return;
    }

    var nextContext = this.context;
    var nextProps = this.props;
    var nextElement = this._currentElement;
    if (this._pendingElement != null) {
      nextElement = this._pendingElement;
      nextContext = this._processContext(nextElement._context);
      nextProps = this._processProps(nextElement.props);
      this._pendingElement = null;

      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
      if (this.componentWillReceiveProps) {
        this.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    this._compositeLifeCycleState = null;

    var nextState = this._pendingState || this.state;
    this._pendingState = null;

    var shouldUpdate =
      this._pendingForceUpdate ||
      !this.shouldComponentUpdate ||
      this.shouldComponentUpdate(nextProps, nextState, nextContext);

    if ("production" !== "development") {
      if (typeof shouldUpdate === "undefined") {
        console.warn(
          (this.constructor.displayName || 'ReactCompositeComponent') +
          '.shouldComponentUpdate(): Returned undefined instead of a ' +
          'boolean value. Make sure to return true or false.'
        );
      }
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(
        nextElement,
        nextProps,
        nextState,
        nextContext,
        transaction
      );
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state.
      this._currentElement = nextElement;
      this.props = nextProps;
      this.state = nextState;
      this.context = nextContext;

      // Owner cannot change because shouldUpdateReactComponent doesn't allow
      // it. TODO: Remove this._owner completely.
      this._owner = nextElement._owner;
    }
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @private
   */
  _performComponentUpdate: function(
    nextElement,
    nextProps,
    nextState,
    nextContext,
    transaction
  ) {
    var prevElement = this._currentElement;
    var prevProps = this.props;
    var prevState = this.state;
    var prevContext = this.context;

    if (this.componentWillUpdate) {
      this.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this.props = nextProps;
    this.state = nextState;
    this.context = nextContext;

    // Owner cannot change because shouldUpdateReactComponent doesn't allow
    // it. TODO: Remove this._owner completely.
    this._owner = nextElement._owner;

    this.updateComponent(
      transaction,
      prevElement
    );

    if (this.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),
        this
      );
    }
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'updateComponent',
    function(transaction, prevParentElement) {
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevParentElement
      );

      var prevComponentInstance = this._renderedComponent;
      var prevElement = prevComponentInstance._currentElement;
      var nextElement = this._renderValidatedComponent();
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        prevComponentInstance.receiveComponent(nextElement, transaction);
      } else {
        // These two IDs are actually the same! But nothing should rely on that.
        var thisID = this._rootNodeID;
        var prevComponentID = prevComponentInstance._rootNodeID;
        prevComponentInstance.unmountComponent();
        this._renderedComponent = instantiateReactComponent(
          nextElement,
          this._currentElement.type
        );
        var nextMarkup = this._renderedComponent.mountComponent(
          thisID,
          transaction,
          this._mountDepth + 1
        );
        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(
          prevComponentID,
          nextMarkup
        );
      }
    }
  ),

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  forceUpdate: function(callback) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    ("production" !== "development" ? invariant(
      this.isMounted() ||
        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
      'forceUpdate(...): Can only force an update on mounted or mounting ' +
        'components.'
    ) : invariant(this.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
    ("production" !== "development" ? invariant(
      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
      ReactCurrentOwner.current == null,
      'forceUpdate(...): Cannot force an update while unmounting component ' +
      'or within a `render` function.'
    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
    ReactCurrentOwner.current == null));
    this._pendingForceUpdate = true;
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * @private
   */
  _renderValidatedComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    '_renderValidatedComponent',
    function() {
      var renderedComponent;
      var previousContext = ReactContext.current;
      ReactContext.current = this._processChildContext(
        this._currentElement._context
      );
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = this.render();
        if (renderedComponent === null || renderedComponent === false) {
          renderedComponent = ReactEmptyComponent.getEmptyComponent();
          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);
        } else {
          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);
        }
      } finally {
        ReactContext.current = previousContext;
        ReactCurrentOwner.current = null;
      }
      ("production" !== "development" ? invariant(
        ReactElement.isValidElement(renderedComponent),
        '%s.render(): A valid ReactComponent must be returned. You may have ' +
          'returned undefined, an array or some other invalid object.',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(ReactElement.isValidElement(renderedComponent)));
      return renderedComponent;
    }
  ),

  /**
   * @private
   */
  _bindAutoBindMethods: function() {
    for (var autoBindKey in this.__reactAutoBindMap) {
      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        continue;
      }
      var method = this.__reactAutoBindMap[autoBindKey];
      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(
        method,
        this.constructor.displayName + '.' + autoBindKey
      ));
    }
  },

  /**
   * Binds a method to the component.
   *
   * @param {function} method Method to be bound.
   * @private
   */
  _bindAutoBindMethod: function(method) {
    var component = this;
    var boundMethod = method.bind(component);
    if ("production" !== "development") {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): React component methods may only be bound to the ' +
            'component instance. See ' + componentName
          );
        } else if (!args.length) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): You are binding a component method to the component. ' +
            'React does this for you automatically in a high-performance ' +
            'way, so you can safely remove this call. See ' + componentName
          );
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }
};

var ReactCompositeComponentBase = function() {};
assign(
  ReactCompositeComponentBase.prototype,
  ReactComponent.Mixin,
  ReactOwner.Mixin,
  ReactPropTransferer.Mixin,
  ReactCompositeComponentMixin
);

/**
 * Module for creating composite components.
 *
 * @class ReactCompositeComponent
 * @extends ReactComponent
 * @extends ReactOwner
 * @extends ReactPropTransferer
 */
var ReactCompositeComponent = {

  LifeCycle: CompositeLifeCycle,

  Base: ReactCompositeComponentBase,

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function(props) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted. This will later be used
      // by the stand-alone class implementation.
    };
    Constructor.prototype = new ReactCompositeComponentBase();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(
      mixSpecIntoComponent.bind(null, Constructor)
    );

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    ("production" !== "development" ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== "development") {
      if (Constructor.prototype.componentShouldUpdate) {
        monitorCodeUse(
          'react_component_should_update_warning',
          { component: spec.displayName }
        );
        console.warn(
          (spec.displayName || 'A component') + ' has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.'
         );
      }
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactCompositeComponentInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    if ("production" !== "development") {
      return ReactLegacyElement.wrapFactory(
        ReactElementValidator.createFactory(Constructor)
      );
    }
    return ReactLegacyElement.wrapFactory(
      ReactElement.createFactory(Constructor)
    );
  },

  injection: {
    injectMixin: function(mixin) {
      injectedMixins.push(mixin);
    }
  }
};

module.exports = ReactCompositeComponent;

},{"./Object.assign":27,"./ReactComponent":32,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactElementValidator":53,"./ReactEmptyComponent":54,"./ReactErrorUtils":55,"./ReactLegacyElement":61,"./ReactOwner":67,"./ReactPerf":68,"./ReactPropTransferer":69,"./ReactPropTypeLocationNames":70,"./ReactPropTypeLocations":71,"./ReactUpdates":79,"./instantiateReactComponent":125,"./invariant":126,"./keyMirror":132,"./keyOf":133,"./mapObject":134,"./monitorCodeUse":136,"./shouldUpdateReactComponent":142,"./warning":145}],35:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactContext
 */

"use strict";

var assign = _dereq_("./Object.assign");

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: {},

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = assign({}, previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

},{"./Object.assign":27}],36:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

"use strict";

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],37:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");

var mapObject = _dereq_("./mapObject");

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if ("production" !== "development") {
    return ReactLegacyElement.markNonLegacyFactory(
      ReactElementValidator.createFactory(tag)
    );
  }
  return ReactLegacyElement.markNonLegacyFactory(
    ReactElement.createFactory(tag)
  );
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOM;

},{"./ReactElement":52,"./ReactElementValidator":53,"./ReactLegacyElement":61,"./mapObject":134}],38:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var keyMirror = _dereq_("./keyMirror");

// Store a reference to the <button> `ReactDOMComponent`. TODO: use string
var button = ReactElement.createFactory(ReactDOM.button.type);

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMButton',

  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":2,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./keyMirror":132}],39:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMProperty = _dereq_("./DOMProperty");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponent = _dereq_("./ReactComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var invariant = _dereq_("./invariant");
var isEventSupported = _dereq_("./isEventSupported");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  ("production" !== "development" ? invariant(
    props.children == null || props.dangerouslySetInnerHTML == null,
    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));
  if ("production" !== "development") {
    if (props.contentEditable && props.children != null) {
      console.warn(
        'A component is `contentEditable` and contains `children` managed by ' +
        'React. It is now your responsibility to guarantee that none of those '+
        'nodes are unexpectedly modified or duplicated. This is probably not ' +
        'intentional.'
      );
    }
  }
  ("production" !== "development" ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  if ("production" !== "development") {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    if (registrationName === 'onScroll' &&
        !isEventSupported('scroll', true)) {
      monitorCodeUse('react_no_scroll_event');
      console.warn('This browser doesn\'t support the `onScroll` event');
    }
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// We accept any tag to be rendered but since this gets injected into abitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    ("production" !== "development" ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;
  }
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag;
  this.tagName = tag.toUpperCase();
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} The computed markup.
   */
  mountComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      assertValidProps(this.props);
      var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
      return (
        this._createOpenTagMarkupAndPutListeners(transaction) +
        this._createContentMarkup(transaction) +
        closeTag
      );
    }
  ),

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this.props;
    var ret = '<' + this._tag;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = props.style = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = this.props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
      var childrenToUse = contentToUse != null ? null : this.props.children;
      if (contentToUse != null) {
        return escapeTextForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction
        );
        return mountImages.join('');
      }
    }
    return '';
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'updateComponent',
    function(transaction, prevElement) {
      assertValidProps(this._currentElement.props);
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevElement
      );
      this._updateDOMProperties(prevElement.props, transaction);
      this._updateDOMChildren(prevElement.props, transaction);
    }
  ),

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = lastProps[propKey];
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = nextProps.style = assign({}, nextProp);
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      ReactComponent.BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction) {
    var nextProps = this.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        ReactComponent.BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponent.Mixin.unmountComponent.call(this);
  }

};

assign(
  ReactDOMComponent.prototype,
  ReactComponent.Mixin,
  ReactDOMComponent.Mixin,
  ReactMultiChild.Mixin,
  ReactBrowserComponentMixin
);

module.exports = ReactDOMComponent;

},{"./CSSPropertyOperations":5,"./DOMProperty":11,"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./escapeTextForBrowser":109,"./invariant":126,"./isEventSupported":127,"./keyOf":133,"./monitorCodeUse":136}],40:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMForm
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <form> `ReactDOMComponent`. TODO: use string
var form = ReactElement.createFactory(ReactDOM.form.type);

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMForm',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return form(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],41:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMChildrenOperations = _dereq_("./DOMChildrenOperations");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updatePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertantly setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      if (value != null) {
        DOMPropertyOperations.setValueForProperty(node, name, value);
      } else {
        DOMPropertyOperations.deleteValueForProperty(node, name);
      }
    }
  ),

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'deletePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
      DOMPropertyOperations.deleteValueForProperty(node, name, value);
    }
  ),

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateStylesByID',
    function(id, styles) {
      var node = ReactMount.getNode(id);
      CSSPropertyOperations.setValueForStyles(node, styles);
    }
  ),

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateInnerHTMLByID',
    function(id, html) {
      var node = ReactMount.getNode(id);
      setInnerHTML(node, html);
    }
  ),

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateTextContentByID',
    function(id, content) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.updateTextContent(node, content);
    }
  ),

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyReplaceNodeWithMarkupByID',
    function(id, markup) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
    }
  ),

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyProcessChildrenUpdates',
    function(updates, markup) {
      for (var i = 0; i < updates.length; i++) {
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
      }
      DOMChildrenOperations.processUpdates(updates, markup);
    }
  )
};

module.exports = ReactDOMIDOperations;

},{"./CSSPropertyOperations":5,"./DOMChildrenOperations":10,"./DOMPropertyOperations":12,"./ReactMount":63,"./ReactPerf":68,"./invariant":126,"./setInnerHTML":140}],42:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMImg
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <img> `ReactDOMComponent`. TODO: use string
var img = ReactElement.createFactory(ReactDOM.img.type);

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],43:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

// Store a reference to the <input> `ReactDOMComponent`. TODO: use string
var input = ReactElement.createFactory(ReactDOM.input.type);

var instancesByReactID = {};

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMInput',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      initialChecked: this.props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.initialValue;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.initialChecked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== "development" ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== "development" ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactMount":63,"./ReactUpdates":79,"./invariant":126}],44:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

"use strict";

var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var warning = _dereq_("./warning");

// Store a reference to the <option> `ReactDOMComponent`. TODO: use string
var option = ReactElement.createFactory(ReactDOM.option.type);

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMOption',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select> instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

},{"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./warning":145}],45:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");

// Store a reference to the <select> `ReactDOMComponent`. TODO: use string
var select = ReactElement.createFactory(ReactDOM.select.type);

function updateWithPendingValueIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.setState({value: this._pendingValue});
    this._pendingValue = 0;
  }
}

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * If `value` is supplied, updates <option> elements on mount and update.
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {?*} propValue For uncontrolled components, null/undefined. For
 * controlled components, a string (or with `multiple`, a list of strings).
 * @private
 */
function updateOptions(component, propValue) {
  var multiple = component.props.multiple;
  var value = propValue != null ? propValue : component.state.value;
  var options = component.getDOMNode().options;
  var selectedValue, i, l;
  if (multiple) {
    selectedValue = {};
    for (i = 0, l = value.length; i < l; ++i) {
      selectedValue['' + value[i]] = true;
    }
  } else {
    selectedValue = '' + value;
  }
  for (i = 0, l = options.length; i < l; i++) {
    var selected = multiple ?
      selectedValue.hasOwnProperty(options[i].value) :
      options[i].value === selectedValue;

    if (selected !== options[i].selected) {
      options[i].selected = selected;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * string. If `multiple` is true, the prop must be an array of strings.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMSelect',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  getInitialState: function() {
    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};
  },

  componentWillMount: function() {
    this._pendingValue = null;
  },

  componentWillReceiveProps: function(nextProps) {
    if (!this.props.multiple && nextProps.multiple) {
      this.setState({value: [this.state.value]});
    } else if (this.props.multiple && !nextProps.multiple) {
      this.setState({value: this.state.value[0]});
    }
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentDidMount: function() {
    updateOptions(this, LinkedValueUtils.getValue(this));
  },

  componentDidUpdate: function(prevProps) {
    var value = LinkedValueUtils.getValue(this);
    var prevMultiple = !!prevProps.multiple;
    var multiple = !!this.props.multiple;
    if (value != null || prevMultiple !== multiple) {
      updateOptions(this, value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }

    var selectedValue;
    if (this.props.multiple) {
      selectedValue = [];
      var options = event.target.options;
      for (var i = 0, l = options.length; i < l; i++) {
        if (options[i].selected) {
          selectedValue.push(options[i].value);
        }
      }
    } else {
      selectedValue = event.target.value;
    }

    this._pendingValue = selectedValue;
    ReactUpdates.asap(updateWithPendingValueIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":2,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79}],46:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var getNodeForCharacterOffset = _dereq_("./getNodeForCharacterOffset");
var getTextContentAccessor = _dereq_("./getTextContentAccessor");

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
    selection.anchorNode,
    selection.anchorOffset,
    selection.focusNode,
    selection.focusOffset
  );

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
    tempRange.startContainer,
    tempRange.startOffset,
    tempRange.endContainer,
    tempRange.endOffset
  );

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && document.selection;

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

},{"./ExecutionEnvironment":22,"./getNodeForCharacterOffset":119,"./getTextContentAccessor":121}],47:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var warning = _dereq_("./warning");

// Store a reference to the <textarea> `ReactDOMComponent`. TODO: use string
var textarea = ReactElement.createFactory(ReactDOM.textarea.type);

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMTextarea',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== "development") {
        ("production" !== "development" ? warning(
          false,
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        ) : null);
      }
      ("production" !== "development" ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== "development" ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue)
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    ("production" !== "development" ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = null;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79,"./invariant":126,"./warning":145}],48:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

"use strict";

var ReactUpdates = _dereq_("./ReactUpdates");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(
  ReactDefaultBatchingStrategyTransaction.prototype,
  Transaction.Mixin,
  {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    }
  }
);

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, a, b) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b);
    } else {
      transaction.perform(callback, null, a, b);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./Object.assign":27,"./ReactUpdates":79,"./Transaction":95,"./emptyFunction":107}],49:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

"use strict";

var BeforeInputEventPlugin = _dereq_("./BeforeInputEventPlugin");
var ChangeEventPlugin = _dereq_("./ChangeEventPlugin");
var ClientReactRootIndex = _dereq_("./ClientReactRootIndex");
var CompositionEventPlugin = _dereq_("./CompositionEventPlugin");
var DefaultEventPluginOrder = _dereq_("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = _dereq_("./EnterLeaveEventPlugin");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var HTMLDOMPropertyConfig = _dereq_("./HTMLDOMPropertyConfig");
var MobileSafariClickEventPlugin = _dereq_("./MobileSafariClickEventPlugin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponentBrowserEnvironment =
  _dereq_("./ReactComponentBrowserEnvironment");
var ReactDefaultBatchingStrategy = _dereq_("./ReactDefaultBatchingStrategy");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDOMButton = _dereq_("./ReactDOMButton");
var ReactDOMForm = _dereq_("./ReactDOMForm");
var ReactDOMImg = _dereq_("./ReactDOMImg");
var ReactDOMInput = _dereq_("./ReactDOMInput");
var ReactDOMOption = _dereq_("./ReactDOMOption");
var ReactDOMSelect = _dereq_("./ReactDOMSelect");
var ReactDOMTextarea = _dereq_("./ReactDOMTextarea");
var ReactEventListener = _dereq_("./ReactEventListener");
var ReactInjection = _dereq_("./ReactInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var SelectEventPlugin = _dereq_("./SelectEventPlugin");
var ServerReactRootIndex = _dereq_("./ServerReactRootIndex");
var SimpleEventPlugin = _dereq_("./SimpleEventPlugin");
var SVGDOMPropertyConfig = _dereq_("./SVGDOMPropertyConfig");

var createFullPageComponent = _dereq_("./createFullPageComponent");

function inject() {
  ReactInjection.EventEmitter.injectReactEventListener(
    ReactEventListener
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    CompositionEventPlugin: CompositionEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(
    ReactDOMComponent
  );

  ReactInjection.NativeComponent.injectComponentClasses({
    'button': ReactDOMButton,
    'form': ReactDOMForm,
    'img': ReactDOMImg,
    'input': ReactDOMInput,
    'option': ReactDOMOption,
    'select': ReactDOMSelect,
    'textarea': ReactDOMTextarea,

    'html': createFullPageComponent('html'),
    'head': createFullPageComponent('head'),
    'body': createFullPageComponent('body')
  });

  // This needs to happen after createFullPageComponent() otherwise the mixin
  // gets double injected.
  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(
    ReactComponentBrowserEnvironment.ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if ("production" !== "development") {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = _dereq_("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

},{"./BeforeInputEventPlugin":3,"./ChangeEventPlugin":7,"./ClientReactRootIndex":8,"./CompositionEventPlugin":9,"./DefaultEventPluginOrder":14,"./EnterLeaveEventPlugin":15,"./ExecutionEnvironment":22,"./HTMLDOMPropertyConfig":23,"./MobileSafariClickEventPlugin":26,"./ReactBrowserComponentMixin":29,"./ReactComponentBrowserEnvironment":33,"./ReactDOMButton":38,"./ReactDOMComponent":39,"./ReactDOMForm":40,"./ReactDOMImg":42,"./ReactDOMInput":43,"./ReactDOMOption":44,"./ReactDOMSelect":45,"./ReactDOMTextarea":47,"./ReactDefaultBatchingStrategy":48,"./ReactDefaultPerf":50,"./ReactEventListener":57,"./ReactInjection":58,"./ReactInstanceHandles":60,"./ReactMount":63,"./SVGDOMPropertyConfig":80,"./SelectEventPlugin":81,"./ServerReactRootIndex":82,"./SimpleEventPlugin":83,"./createFullPageComponent":103}],50:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactDefaultPerfAnalysis = _dereq_("./ReactDefaultPerfAnalysis");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var performanceNow = _dereq_("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  getMeasurementsSummaryMap: function(measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    return summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (moduleName === 'ReactDOMIDOperations' ||
        moduleName === 'ReactComponentBrowserEnvironment') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === 'mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        fnName === 'mountComponent' ||
        fnName === 'updateComponent' || // TODO: receiveComponent()?
        fnName === '_renderValidatedComponent')) {

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.constructor.displayName,
          owner: this._owner ? this._owner.constructor.displayName : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":11,"./ReactDefaultPerfAnalysis":51,"./ReactMount":63,"./ReactPerf":68,"./performanceNow":139}],51:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var assign = _dereq_("./Object.assign");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  'mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./Object.assign":27}],52:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

"use strict";

var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var warning = _dereq_("./warning");

var RESERVED_PROPS = {
  key: true,
  ref: true
};

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} object
 * @param {string} key
 */
function defineWarningProperty(object, key) {
  Object.defineProperty(object, key, {

    configurable: false,
    enumerable: true,

    get: function() {
      if (!this._store) {
        return null;
      }
      return this._store[key];
    },

    set: function(value) {
      ("production" !== "development" ? warning(
        false,
        'Don\'t set the ' + key + ' property of the component. ' +
        'Mutate the existing props object instead.'
      ) : null);
      this._store[key] = value;
    }

  });
}

/**
 * This is updated to true if the membrane is successfully created.
 */
var useMutationMembrane = false;

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} element
 */
function defineMutationMembrane(prototype) {
  try {
    var pseudoFrozenProperties = {
      props: true
    };
    for (var key in pseudoFrozenProperties) {
      defineWarningProperty(prototype, key);
    }
    useMutationMembrane = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {string|object} ref
 * @param {*} key
 * @param {*} props
 * @internal
 */
var ReactElement = function(type, key, ref, owner, context, props) {
  // Built-in properties that belong on the element
  this.type = type;
  this.key = key;
  this.ref = ref;

  // Record the component responsible for creating this element.
  this._owner = owner;

  // TODO: Deprecate withContext, and then the context becomes accessible
  // through the owner.
  this._context = context;

  if ("production" !== "development") {
    // The validation flag and props are currently mutative. We put them on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    this._store = { validated: false, props: props };

    // We're not allowed to set props directly on the object so we early
    // return and rely on the prototype membrane to forward to the backing
    // store.
    if (useMutationMembrane) {
      Object.freeze(this);
      return;
    }
  }

  this.props = props;
};

// We intentionally don't expose the function on the constructor property.
// ReactElement should be indistinguishable from a plain object.
ReactElement.prototype = {
  _isReactElement: true
};

if ("production" !== "development") {
  defineMutationMembrane(ReactElement.prototype);
}

ReactElement.createElement = function(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        config.key !== null,
        'createElement(...): Encountered component with a `key` of null. In ' +
        'a future version, this will be treated as equivalent to the string ' +
        '\'null\'; instead, provide an explicit key or use undefined.'
      ) : null);
    }
    // TODO: Change this back to `config.key === undefined`
    key = config.key == null ? null : '' + config.key;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return new ReactElement(
    type,
    key,
    ref,
    ReactCurrentOwner.current,
    ReactContext.current,
    props
  );
};

ReactElement.createFactory = function(type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
  var newElement = new ReactElement(
    oldElement.type,
    oldElement.key,
    oldElement.ref,
    oldElement._owner,
    oldElement._context,
    newProps
  );

  if ("production" !== "development") {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }
  return newElement;
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function(object) {
  // ReactTestUtils is often used outside of beforeEach where as React is
  // within it. This leads to two different instances of React on the same
  // page. To identify a element from a different React instance we use
  // a flag instead of an instanceof check.
  var isElement = !!(object && object._isReactElement);
  // if (isElement && !(object instanceof ReactElement)) {
  // This is an indicator that you're using multiple versions of React at the
  // same time. This will screw with ownership and stuff. Fix it, please.
  // TODO: We could possibly warn here.
  // }
  return isElement;
};

module.exports = ReactElement;

},{"./ReactContext":35,"./ReactCurrentOwner":36,"./warning":145}],53:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {
  'react_key_warning': {},
  'react_numeric_key_warning': {}
};
var ownerHasMonitoredObjectMap = {};

var loggedTypeFailures = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Gets the current owner's displayName for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getCurrentOwnerDisplayName() {
  var current = ReactCurrentOwner.current;
  return current && current.constructor.displayName || undefined;
}

/**
 * Warn if the component doesn't have an explicit key assigned to it.
 * This component is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validateExplicitKey(component, parentType) {
  if (component._store.validated || component.key != null) {
    return;
  }
  component._store.validated = true;

  warnAndMonitorForKeyUse(
    'react_key_warning',
    'Each child in an array should have a unique "key" prop.',
    component,
    parentType
  );
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validatePropertyKey(name, component, parentType) {
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
    return;
  }
  warnAndMonitorForKeyUse(
    'react_numeric_key_warning',
    'Child objects should have non-numeric keys so ordering is preserved.',
    component,
    parentType
  );
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} warningID The id used when logging.
 * @param {string} message The base warning that gets output.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function warnAndMonitorForKeyUse(warningID, message, component, parentType) {
  var ownerName = getCurrentOwnerDisplayName();
  var parentName = parentType.displayName;

  var useName = ownerName || parentName;
  var memoizer = ownerHasKeyUseWarning[warningID];
  if (memoizer.hasOwnProperty(useName)) {
    return;
  }
  memoizer[useName] = true;

  message += ownerName ?
    (" Check the render method of " + ownerName + ".") :
    (" Check the renderComponent call using <" + parentName + ">.");

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerName = null;
  if (component._owner && component._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    childOwnerName = component._owner.constructor.displayName;

    message += (" It was passed a child from " + childOwnerName + ".");
  }

  message += ' See http://fb.me/react-warning-keys for more information.';
  monitorCodeUse(warningID, {
    component: useName,
    componentOwner: childOwnerName
  });
  console.warn(message);
}

/**
 * Log that we're using an object map. We're considering deprecating this
 * feature and replace it with proper Map and ImmutableMap data structures.
 *
 * @internal
 */
function monitorUseOfObjectMap() {
  var currentName = getCurrentOwnerDisplayName() || '';
  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {
    return;
  }
  ownerHasMonitoredObjectMap[currentName] = true;
  monitorCodeUse('react_object_map_children');
}

/**
 * Ensure that every component either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {*} component Statically passed child of any type.
 * @param {*} parentType component's parent's type.
 * @return {boolean}
 */
function validateChildKeys(component, parentType) {
  if (Array.isArray(component)) {
    for (var i = 0; i < component.length; i++) {
      var child = component[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(component)) {
    // This component was passed in a valid location.
    component._store.validated = true;
  } else if (component && typeof component === 'object') {
    monitorUseOfObjectMap();
    for (var name in component) {
      validatePropertyKey(name, component[name], parentType);
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;
        // This will soon use the warning module
        monitorCodeUse(
          'react_failed_descriptor_type_check',
          { message: error.message }
        );
      }
    }
  }
}

var ReactElementValidator = {

  createElement: function(type, props, children) {
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    ("production" !== "development" ? warning(
      type != null,
      'React.createElement: type should not be null or undefined. It should ' +
        'be a string (for DOM elements) or a ReactClass (for composite ' +
        'components).'
    ) : null);

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }

    if (type) {
      var name = type.displayName;
      if (type.propTypes) {
        checkPropTypes(
          name,
          type.propTypes,
          element.props,
          ReactPropTypeLocations.prop
        );
      }
      if (type.contextTypes) {
        checkPropTypes(
          name,
          type.contextTypes,
          element._context,
          ReactPropTypeLocations.context
        );
      }
    }
    return element;
  },

  createFactory: function(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(
      null,
      type
    );
    validatedFactory.type = type;
    return validatedFactory;
  }

};

module.exports = ReactElementValidator;

},{"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactPropTypeLocations":71,"./monitorCodeUse":136,"./warning":145}],54:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

var component;
// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIdsRegistry = {};

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function(emptyComponent) {
    component = ReactElement.createFactory(emptyComponent);
  }
};

/**
 * @return {ReactComponent} component The injected empty component.
 */
function getEmptyComponent() {
  ("production" !== "development" ? invariant(
    component,
    'Trying to return null from a render, but no null placeholder component ' +
    'was injected.'
  ) : invariant(component));
  return component();
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIdsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIdsRegistry[id];
}

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return nullComponentIdsRegistry[id];
}

var ReactEmptyComponent = {
  deregisterNullComponentID: deregisterNullComponentID,
  getEmptyComponent: getEmptyComponent,
  injection: ReactEmptyComponentInjection,
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID
};

module.exports = ReactEmptyComponent;

},{"./ReactElement":52,"./invariant":126}],55:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],56:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

"use strict";

var EventPluginHub = _dereq_("./EventPluginHub");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":18}],57:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

"use strict";

var EventListener = _dereq_("./EventListener");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var PooledClass = _dereq_("./PooledClass");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var getEventTarget = _dereq_("./getEventTarget");
var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(
  TopLevelCallbackBookKeeping,
  PooledClass.twoArgumentPooler
);

function handleTopLevelImpl(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(bookKeeping.nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(
      bookKeeping.topLevelType,
      topLevelTarget,
      topLevelTargetID,
      bookKeeping.nativeEvent
    );
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function() {
    return ReactEventListener._enabled;
  },


  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.listen(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.capture(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  monitorScrollValue: function(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
    EventListener.listen(window, 'resize', callback);
  },

  dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
      topLevelType,
      nativeEvent
    );
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

},{"./EventListener":17,"./ExecutionEnvironment":22,"./Object.assign":27,"./PooledClass":28,"./ReactInstanceHandles":60,"./ReactMount":63,"./ReactUpdates":79,"./getEventTarget":117,"./getUnboundedScrollPosition":122}],58:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var EventPluginHub = _dereq_("./EventPluginHub");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactPerf = _dereq_("./ReactPerf");
var ReactRootIndex = _dereq_("./ReactRootIndex");
var ReactUpdates = _dereq_("./ReactUpdates");

var ReactInjection = {
  Component: ReactComponent.injection,
  CompositeComponent: ReactCompositeComponent.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":11,"./EventPluginHub":18,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactEmptyComponent":54,"./ReactNativeComponent":66,"./ReactPerf":68,"./ReactRootIndex":75,"./ReactUpdates":79}],59:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

"use strict";

var ReactDOMSelection = _dereq_("./ReactDOMSelection");

var containsNode = _dereq_("./containsNode");
var focusNode = _dereq_("./focusNode");
var getActiveElement = _dereq_("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      (elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' ||
      elem.contentEditable === 'true'
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":46,"./containsNode":101,"./focusNode":111,"./getActiveElement":113}],60:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

"use strict";

var ReactRootIndex = _dereq_("./ReactRootIndex");

var invariant = _dereq_("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== "development" ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== "development" ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  for (var i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== "development" ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== "development" ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== "development" ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== "development" ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

},{"./ReactRootIndex":75,"./invariant":126}],61:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLegacyElement
 */

"use strict";

var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var invariant = _dereq_("./invariant");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

var legacyFactoryLogs = {};
function warnForLegacyFactoryCall() {
  if (!ReactLegacyElementFactory._isLegacyCallWarningEnabled) {
    return;
  }
  var owner = ReactCurrentOwner.current;
  var name = owner && owner.constructor ? owner.constructor.displayName : '';
  if (!name) {
    name = 'Something';
  }
  if (legacyFactoryLogs.hasOwnProperty(name)) {
    return;
  }
  legacyFactoryLogs[name] = true;
  ("production" !== "development" ? warning(
    false,
    name + ' is calling a React component directly. ' +
    'Use a factory or JSX instead. See: http://fb.me/react-legacyfactory'
  ) : null);
  monitorCodeUse('react_legacy_factory_call', { version: 3, name: name });
}

function warnForPlainFunctionType(type) {
  var isReactClass =
    type.prototype &&
    typeof type.prototype.mountComponent === 'function' &&
    typeof type.prototype.receiveComponent === 'function';
  if (isReactClass) {
    ("production" !== "development" ? warning(
      false,
      'Did not expect to get a React class here. Use `Component` instead ' +
      'of `Component.type` or `this.constructor`.'
    ) : null);
  } else {
    if (!type._reactWarnedForThisType) {
      try {
        type._reactWarnedForThisType = true;
      } catch (x) {
        // just incase this is a frozen object or some special object
      }
      monitorCodeUse(
        'react_non_component_in_jsx',
        { version: 3, name: type.name }
      );
    }
    ("production" !== "development" ? warning(
      false,
      'This JSX uses a plain function. Only React components are ' +
      'valid in React\'s JSX transform.'
    ) : null);
  }
}

function warnForNonLegacyFactory(type) {
  ("production" !== "development" ? warning(
    false,
    'Do not pass React.DOM.' + type.type + ' to JSX or createFactory. ' +
    'Use the string "' + type.type + '" instead.'
  ) : null);
}

/**
 * Transfer static properties from the source to the target. Functions are
 * rebound to have this reflect the original source.
 */
function proxyStaticMethods(target, source) {
  if (typeof source !== 'function') {
    return;
  }
  for (var key in source) {
    if (source.hasOwnProperty(key)) {
      var value = source[key];
      if (typeof value === 'function') {
        var bound = value.bind(source);
        // Copy any properties defined on the function, such as `isRequired` on
        // a PropTypes validator.
        for (var k in value) {
          if (value.hasOwnProperty(k)) {
            bound[k] = value[k];
          }
        }
        target[key] = bound;
      } else {
        target[key] = value;
      }
    }
  }
}

// We use an object instead of a boolean because booleans are ignored by our
// mocking libraries when these factories gets mocked.
var LEGACY_MARKER = {};
var NON_LEGACY_MARKER = {};

var ReactLegacyElementFactory = {};

ReactLegacyElementFactory.wrapCreateFactory = function(createFactory) {
  var legacyCreateFactory = function(type) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createFactory(type);
    }

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      return createFactory(type.type);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      return createFactory(type.type);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // Unless it's a legacy factory, then this is probably a plain function,
    // that is expecting to be invoked by JSX. We can just return it as is.
    return type;
  };
  return legacyCreateFactory;
};

ReactLegacyElementFactory.wrapCreateElement = function(createElement) {
  var legacyCreateElement = function(type, props, children) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createElement.apply(this, arguments);
    }

    var args;

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      if (type._isMockFunction) {
        // If this is a mock function, people will expect it to be called. We
        // will actually call the original mock factory function instead. This
        // future proofs unit testing that assume that these are classes.
        type.type._mockedReactClassConstructor = type;
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // This is being called with a plain function we should invoke it
    // immediately as if this was used with legacy JSX.
    return type.apply(null, Array.prototype.slice.call(arguments, 1));
  };
  return legacyCreateElement;
};

ReactLegacyElementFactory.wrapFactory = function(factory) {
  ("production" !== "development" ? invariant(
    typeof factory === 'function',
    'This is suppose to accept a element factory'
  ) : invariant(typeof factory === 'function'));
  var legacyElementFactory = function(config, children) {
    // This factory should not be called when JSX is used. Use JSX instead.
    if ("production" !== "development") {
      warnForLegacyFactoryCall();
    }
    return factory.apply(this, arguments);
  };
  proxyStaticMethods(legacyElementFactory, factory.type);
  legacyElementFactory.isReactLegacyFactory = LEGACY_MARKER;
  legacyElementFactory.type = factory.type;
  return legacyElementFactory;
};

// This is used to mark a factory that will remain. E.g. we're allowed to call
// it as a function. However, you're not suppose to pass it to createElement
// or createFactory, so it will warn you if you do.
ReactLegacyElementFactory.markNonLegacyFactory = function(factory) {
  factory.isReactNonLegacyFactory = NON_LEGACY_MARKER;
  return factory;
};

// Checks if a factory function is actually a legacy factory pretending to
// be a class.
ReactLegacyElementFactory.isValidFactory = function(factory) {
  // TODO: This will be removed and moved into a class validator or something.
  return typeof factory === 'function' &&
    factory.isReactLegacyFactory === LEGACY_MARKER;
};

ReactLegacyElementFactory.isValidClass = function(factory) {
  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      false,
      'isValidClass is deprecated and will be removed in a future release. ' +
      'Use a more specific validator instead.'
    ) : null);
  }
  return ReactLegacyElementFactory.isValidFactory(factory);
};

ReactLegacyElementFactory._isLegacyCallWarningEnabled = true;

module.exports = ReactLegacyElementFactory;

},{"./ReactCurrentOwner":36,"./invariant":126,"./monitorCodeUse":136,"./warning":145}],62:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

"use strict";

var adler32 = _dereq_("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":98}],63:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactPerf = _dereq_("./ReactPerf");

var containsNode = _dereq_("./containsNode");
var deprecated = _dereq_("./deprecated");
var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var createElement = ReactLegacyElement.wrapCreateElement(
  ReactElement.createElement
);

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== "development") {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== "development" ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== "development" ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounting is the process of initializing a React component by creatings its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextComponent,
      container,
      callback) {
    var nextProps = nextComponent.props;
    ReactMount.scrollMonitor(container, function() {
      prevComponent.replaceProps(nextProps, callback);
    });

    if ("production" !== "development") {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== "development" ? invariant(
      container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
        container.nodeType === DOC_NODE_TYPE
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      container.nodeType === ELEMENT_NODE_TYPE ||
      container.nodeType === DOC_NODE_TYPE
    )));

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: ReactPerf.measure(
    'ReactMount',
    '_renderNewRootComponent',
    function(
        nextComponent,
        container,
        shouldReuseMarkup) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case.
      ("production" !== "development" ? warning(
        ReactCurrentOwner.current == null,
        '_renderNewRootComponent(): Render methods should be a pure function ' +
        'of props and state; triggering nested component updates from ' +
        'render is not allowed. If necessary, trigger nested updates in ' +
        'componentDidUpdate.'
      ) : null);

      var componentInstance = instantiateReactComponent(nextComponent, null);
      var reactRootID = ReactMount._registerComponent(
        componentInstance,
        container
      );
      componentInstance.mountComponentIntoNode(
        reactRootID,
        container,
        shouldReuseMarkup
      );

      if ("production" !== "development") {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[reactRootID] =
          getReactRootElementInContainer(container);
      }

      return componentInstance;
    }
  ),

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function(nextElement, container, callback) {
    ("production" !== "development" ? invariant(
      ReactElement.isValidElement(nextElement),
      'renderComponent(): Invalid component element.%s',
      (
        typeof nextElement === 'string' ?
          ' Instead of passing an element string, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        ReactLegacyElement.isValidFactory(nextElement) ?
          ' Instead of passing a component class, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        // Check if it quacks like a element
        typeof nextElement.props !== "undefined" ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactElement.isValidElement(nextElement)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevElement = prevComponent._currentElement;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextElement,
          container,
          callback
        );
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextElement,
      container,
      shouldReuseMarkup
    );
    callback && callback.call(component);
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    var element = createElement(constructor, props);
    return ReactMount.render(element, container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== "development" ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    ("production" !== "development" ? warning(
      ReactCurrentOwner.current == null,
      'unmountComponentAtNode(): Render methods should be a pure function of ' +
      'props and state; triggering nested component updates from render is ' +
      'not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== "development") {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    instance.unmountComponent();

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== "development") {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== "development" ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          console.warn(
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          );
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== "development" ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
      'parent. ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },


  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  purgeID: purgeID
};

// Deprecations (remove for 0.13)
ReactMount.renderComponent = deprecated(
  'ReactMount',
  'renderComponent',
  'render',
  this,
  ReactMount.render
);

module.exports = ReactMount;

},{"./DOMProperty":11,"./ReactBrowserEventEmitter":30,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactPerf":68,"./containsNode":101,"./deprecated":106,"./getReactRootElementInContainer":120,"./instantiateReactComponent":125,"./invariant":126,"./shouldUpdateReactComponent":142,"./warning":145}],64:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var flattenChildren = _dereq_("./flattenChildren");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction) {
      var children = flattenChildren(nestedChildren);
      var mountImages = [];
      var index = 0;
      this._renderedChildren = children;
      for (var name in children) {
        var child = children[name];
        if (children.hasOwnProperty(name)) {
          // The rendered children must be turned into instances as they're
          // mounted.
          var childInstance = instantiateReactComponent(child, null);
          children[name] = childInstance;
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = childInstance.mountComponent(
            rootID,
            transaction,
            this._mountDepth + 1
          );
          childInstance._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction) {
      var nextChildren = flattenChildren(nextNestedChildren);
      var prevChildren = this._renderedChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var prevElement = prevChild && prevChild._currentElement;
        var nextElement = nextChildren[name];
        if (shouldUpdateReactComponent(prevElement, nextElement)) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild.receiveComponent(nextElement, transaction);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          var nextChildInstance = instantiateReactComponent(
            nextElement,
            null
          );
          this._mountChildByNameAtIndex(
            nextChildInstance, name, nextIndex, transaction
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren[name])) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      for (var name in renderedChildren) {
        var renderedChild = renderedChildren[name];
        // TODO: When is this not true?
        if (renderedChild.unmountComponent) {
          renderedChild.unmountComponent();
        }
      }
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(child, name, index, transaction) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = child.mountComponent(
        rootID,
        transaction,
        this._mountDepth + 1
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
      this._renderedChildren = this._renderedChildren || {};
      this._renderedChildren[name] = child;
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      this.removeChild(child);
      child._mountIndex = null;
      child.unmountComponent();
      delete this._renderedChildren[name];
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactComponent":32,"./ReactMultiChildUpdateTypes":65,"./flattenChildren":110,"./instantiateReactComponent":125,"./shouldUpdateReactComponent":142}],65:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":132}],66:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

"use strict";

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags
var tagToComponentClass = {};

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function(componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Create an internal class for a specific tag.
 *
 * @param {string} tag The tag for which to create an internal instance.
 * @param {any} props The props passed to the instance constructor.
 * @return {ReactComponent} component The injected empty component.
 */
function createInstanceForTag(tag, props, parentType) {
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  if (parentType === tag) {
    // Avoid recursion
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  // Unwrap legacy factories
  return new componentClass.type(props);
}

var ReactNativeComponent = {
  createInstanceForTag: createInstanceForTag,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;

},{"./Object.assign":27,"./invariant":126}],67:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

"use strict";

var emptyObject = _dereq_("./emptyObject");
var invariant = _dereq_("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      object &&
      typeof object.attachRef === 'function' &&
      typeof object.detachRef === 'function'
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.refs[ref] === component) {
      owner.detachRef(ref);
    }
  },

  /**
   * A ReactComponent must mix this in to have refs.
   *
   * @lends {ReactOwner.prototype}
   */
  Mixin: {

    construct: function() {
      this.refs = emptyObject;
    },

    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function(ref, component) {
      ("production" !== "development" ? invariant(
        component.isOwnedBy(this),
        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',
        ref
      ) : invariant(component.isOwnedBy(this)));
      var refs = this.refs === emptyObject ? (this.refs = {}) : this.refs;
      refs[ref] = component;
    },

    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function(ref) {
      delete this.refs[ref];
    }

  }

};

module.exports = ReactOwner;

},{"./emptyObject":108,"./invariant":126}],68:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

"use strict";

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== "development") {
      var measuredFunc = null;
      var wrapper = function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

},{}],69:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTransferer
 */

"use strict";

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var invariant = _dereq_("./invariant");
var joinClasses = _dereq_("./joinClasses");
var warning = _dereq_("./warning");

var didWarn = false;

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

var transferStrategyMerge = createTransferStrategy(function(a, b) {
  // `merge` overrides the first object's (`props[key]` above) keys using the
  // second object's (`value`) keys. An object's style's existing `propA` would
  // get overridden. Flip the order here.
  return assign({}, b, a);
});

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: transferStrategyMerge
};

/**
 * Mutates the first argument by transferring the properties from the second
 * argument.
 *
 * @param {object} props
 * @param {object} newProps
 * @return {object}
 */
function transferInto(props, newProps) {
  for (var thisKey in newProps) {
    if (!newProps.hasOwnProperty(thisKey)) {
      continue;
    }

    var transferStrategy = TransferStrategies[thisKey];

    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
      transferStrategy(props, thisKey, newProps[thisKey]);
    } else if (!props.hasOwnProperty(thisKey)) {
      props[thisKey] = newProps[thisKey];
    }
  }
  return props;
}

/**
 * ReactPropTransferer are capable of transferring props to another component
 * using a `transferPropsTo` method.
 *
 * @class ReactPropTransferer
 */
var ReactPropTransferer = {

  TransferStrategies: TransferStrategies,

  /**
   * Merge two props objects using TransferStrategies.
   *
   * @param {object} oldProps original props (they take precedence)
   * @param {object} newProps new props to merge in
   * @return {object} a new object containing both sets of props merged.
   */
  mergeProps: function(oldProps, newProps) {
    return transferInto(assign({}, oldProps), newProps);
  },

  /**
   * @lends {ReactPropTransferer.prototype}
   */
  Mixin: {

    /**
     * Transfer props from this component to a target component.
     *
     * Props that do not have an explicit transfer strategy will be transferred
     * only if the target component does not already have the prop set.
     *
     * This is usually used to pass down props to a returned root component.
     *
     * @param {ReactElement} element Component receiving the properties.
     * @return {ReactElement} The supplied `component`.
     * @final
     * @protected
     */
    transferPropsTo: function(element) {
      ("production" !== "development" ? invariant(
        element._owner === this,
        '%s: You can\'t call transferPropsTo() on a component that you ' +
        'don\'t own, %s. This usually means you are calling ' +
        'transferPropsTo() on a component passed in as props or children.',
        this.constructor.displayName,
        typeof element.type === 'string' ?
        element.type :
        element.type.displayName
      ) : invariant(element._owner === this));

      if ("production" !== "development") {
        if (!didWarn) {
          didWarn = true;
          ("production" !== "development" ? warning(
            false,
            'transferPropsTo is deprecated. ' +
            'See http://fb.me/react-transferpropsto for more information.'
          ) : null);
        }
      }

      // Because elements are immutable we have to merge into the existing
      // props object rather than clone it.
      transferInto(element.props, this.props);

      return element;
    }

  }
};

module.exports = ReactPropTransferer;

},{"./Object.assign":27,"./emptyFunction":107,"./invariant":126,"./joinClasses":131,"./warning":145}],70:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

"use strict";

var ReactPropTypeLocationNames = {};

if ("production" !== "development") {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

},{}],71:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":132}],72:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");

var deprecated = _dereq_("./deprecated");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var elementTypeChecker = createElementTypeChecker();
var nodeTypeChecker = createNodeChecker();

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: elementTypeChecker,
  instanceOf: createInstanceTypeChecker,
  node: nodeTypeChecker,
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker,

  component: deprecated(
    'React.PropTypes',
    'component',
    'element',
    this,
    elementTypeChecker
  ),
  renderable: deprecated(
    'React.PropTypes',
    'renderable',
    'node',
    this,
    nodeTypeChecker
  )
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
          ("Required " + locationName + " `" + propName + "` was not specified in ")+
          ("`" + componentName + "`.")
        );
      }
    } else {
      return validate(props, propName, componentName, location);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns());
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
      );
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location);
      if (error instanceof Error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactElement.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
    );
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
      );
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  function validate(props, propName, componentName, location) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location) == null) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
      ("`" + componentName + "`.")
    );
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactNode.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
        ("supplied to `" + componentName + "`, expected `object`.")
      );
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location);
      if (error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate, 'expected `object`');
}

function isNode(propValue) {
  switch(typeof propValue) {
    case 'number':
    case 'string':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (ReactElement.isValidElement(propValue)) {
        return true;
      }
      for (var k in propValue) {
        if (!isNode(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"./ReactElement":52,"./ReactPropTypeLocationNames":70,"./deprecated":106,"./emptyFunction":107}],73:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPutListenerQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var assign = _dereq_("./Object.assign");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

assign(ReactPutListenerQueue.prototype, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30}],74:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30,"./ReactInputSelection":59,"./ReactPutListenerQueue":73,"./Transaction":95}],75:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

"use strict";

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],76:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactServerRenderingTransaction =
  _dereq_("./ReactServerRenderingTransaction");

var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToString(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, 0);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToStaticMarkup(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, 0);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactMarkupChecksum":62,"./ReactServerRenderingTransaction":77,"./instantiateReactComponent":125,"./invariant":126}],77:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var CallbackQueue = _dereq_("./CallbackQueue");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  ON_DOM_READY_QUEUEING
];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap proceedures.
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(
  ReactServerRenderingTransaction.prototype,
  Transaction.Mixin,
  Mixin
);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactPutListenerQueue":73,"./Transaction":95,"./emptyFunction":107}],78:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTextComponent
 * @typechecks static-only
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactComponent = _dereq_("./ReactComponent");
var ReactElement = _dereq_("./ReactElement");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactTextComponent = function(props) {
  // This constructor and it's argument is currently used by mocks.
};

assign(ReactTextComponent.prototype, ReactComponent.Mixin, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, mountDepth) {
    ReactComponent.Mixin.mountComponent.call(
      this,
      rootID,
      transaction,
      mountDepth
    );

    var escapedText = escapeTextForBrowser(this.props);

    if (transaction.renderToStaticMarkup) {
      // Normally we'd wrap this in a `span` for the reasons stated above, but
      // since this is a situation where React won't take over (static pages),
      // we can simply return the text as it is.
      return escapedText;
    }

    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {object} nextComponent Contains the next text content.
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextComponent, transaction) {
    var nextProps = nextComponent.props;
    if (nextProps !== this.props) {
      this.props = nextProps;
      ReactComponent.BackendIDOperations.updateTextContentByID(
        this._rootNodeID,
        nextProps
      );
    }
  }

});

var ReactTextComponentFactory = function(text) {
  // Bypass validation and configuration
  return new ReactElement(ReactTextComponent, null, null, null, null, text);
};

ReactTextComponentFactory.type = ReactTextComponent;

module.exports = ReactTextComponentFactory;

},{"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactComponent":32,"./ReactElement":52,"./escapeTextForBrowser":109}],79:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactPerf = _dereq_("./ReactPerf");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var warning = _dereq_("./warning");

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  ("production" !== "development" ? invariant(
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
    'ReactUpdates: must inject a reconcile transaction class and batching ' +
    'strategy'
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
}

var NESTED_UPDATES = {
  initialize: function() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function() {
    this.callbackQueue.reset();
  },
  close: function() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction =
    ReactUpdates.ReactReconcileTransaction.getPooled();
}

assign(
  ReactUpdatesFlushTransaction.prototype,
  Transaction.Mixin, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
      this,
      this.reconcileTransaction.perform,
      this.reconcileTransaction,
      method,
      scope,
      a
    );
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b);
}

/**
 * Array comparator for ReactComponents by owner depth
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountDepthComparator(c1, c2) {
  return c1._mountDepth - c2._mountDepth;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== "development" ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountDepthComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, ignore them
    // TODO: Queue unmounts in the same list to avoid this happening at all
    var component = dirtyComponents[i];
    if (component.isMounted()) {
      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;
      component.performUpdateIfNecessary(transaction.reconcileTransaction);

      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          transaction.callbackQueue.enqueue(
            callbacks[j],
            component
          );
        }
      }
    }
  }
}

var flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  function() {
    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
    // array and perform any updates enqueued by mount-ready handlers (i.e.,
    // componentDidUpdate) but we need to check here too in order to catch
    // updates enqueued by setState callbacks and asap calls.
    while (dirtyComponents.length || asapEnqueued) {
      if (dirtyComponents.length) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction);
        ReactUpdatesFlushTransaction.release(transaction);
      }

      if (asapEnqueued) {
        asapEnqueued = false;
        var queue = asapCallbackQueue;
        asapCallbackQueue = CallbackQueue.getPooled();
        queue.notifyAll();
        CallbackQueue.release(queue);
      }
    }
  }
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component, callback) {
  ("production" !== "development" ? invariant(
    !callback || typeof callback === "function",
    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +
    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
    'isn\'t callable.'
  ) : invariant(!callback || typeof callback === "function"));
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)
  ("production" !== "development" ? warning(
    ReactCurrentOwner.current == null,
    'enqueueUpdate(): Render methods should be a pure function of props ' +
    'and state; triggering nested component updates from render is not ' +
    'allowed. If necessary, trigger nested updates in ' +
    'componentDidUpdate.'
  ) : null);

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component, callback);
    return;
  }

  dirtyComponents.push(component);

  if (callback) {
    if (component._pendingCallbacks) {
      component._pendingCallbacks.push(callback);
    } else {
      component._pendingCallbacks = [callback];
    }
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  ("production" !== "development" ? invariant(
    batchingStrategy.isBatchingUpdates,
    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
    'updates are not being batched.'
  ) : invariant(batchingStrategy.isBatchingUpdates));
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function(ReconcileTransaction) {
    ("production" !== "development" ? invariant(
      ReconcileTransaction,
      'ReactUpdates: must provide a reconcile transaction class'
    ) : invariant(ReconcileTransaction));
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== "development" ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactCurrentOwner":36,"./ReactPerf":68,"./Transaction":95,"./invariant":126,"./warning":145}],80:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var SVGDOMPropertyConfig = {
  Properties: {
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox'
  }
};

module.exports = SVGDOMPropertyConfig;

},{"./DOMProperty":11}],81:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var getActiveElement = _dereq_("./getActiveElement");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");
var shallowEqual = _dereq_("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement != getActiveElement()) {
    return;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactInputSelection":59,"./SyntheticEvent":87,"./getActiveElement":113,"./isTextInputElement":129,"./keyOf":133,"./shallowEqual":141}],82:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

"use strict";

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],83:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticClipboardEvent = _dereq_("./SyntheticClipboardEvent");
var SyntheticEvent = _dereq_("./SyntheticEvent");
var SyntheticFocusEvent = _dereq_("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = _dereq_("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");
var SyntheticDragEvent = _dereq_("./SyntheticDragEvent");
var SyntheticTouchEvent = _dereq_("./SyntheticTouchEvent");
var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var SyntheticWheelEvent = _dereq_("./SyntheticWheelEvent");

var getEventCharCode = _dereq_("./getEventCharCode");

var invariant = _dereq_("./invariant");
var keyOf = _dereq_("./keyOf");
var warning = _dereq_("./warning");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var topLevelType in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false. This behavior will be disabled in a future release.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

    ("production" !== "development" ? warning(
      typeof returnValue !== 'boolean',
      'Returning `false` from an event handler is deprecated and will be ' +
      'ignored in a future release. Instead, manually call ' +
      'e.stopPropagation() or e.preventDefault(), as appropriate.'
    ) : null);

    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== "development" ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

},{"./EventConstants":16,"./EventPluginUtils":20,"./EventPropagators":21,"./SyntheticClipboardEvent":84,"./SyntheticDragEvent":86,"./SyntheticEvent":87,"./SyntheticFocusEvent":88,"./SyntheticKeyboardEvent":90,"./SyntheticMouseEvent":91,"./SyntheticTouchEvent":92,"./SyntheticUIEvent":93,"./SyntheticWheelEvent":94,"./getEventCharCode":114,"./invariant":126,"./keyOf":133,"./warning":145}],84:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;


},{"./SyntheticEvent":87}],85:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;


},{"./SyntheticEvent":87}],86:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":91}],87:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    event.preventDefault ? event.preventDefault() : event.returnValue = false;
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./Object.assign":27,"./PooledClass":28,"./emptyFunction":107,"./getEventTarget":117}],88:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":93}],89:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticInputEvent,
  InputEventInterface
);

module.exports = SyntheticInputEvent;


},{"./SyntheticEvent":87}],90:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventCharCode = _dereq_("./getEventCharCode");
var getEventKey = _dereq_("./getEventKey");
var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":93,"./getEventCharCode":114,"./getEventKey":115,"./getEventModifierState":116}],91:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      event.fromElement === event.srcElement ?
        event.toElement :
        event.fromElement
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":93,"./ViewportMetrics":96,"./getEventModifierState":116}],92:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":93,"./getEventModifierState":116}],93:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":87,"./getEventTarget":117}],94:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":91}],95:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM upates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== "development" ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== "development" ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR) {
          wrapper.close && wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

},{"./invariant":126}],96:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

"use strict";

var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function() {
    var scrollPosition = getUnboundedScrollPosition(window);
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{"./getUnboundedScrollPosition":122}],97:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  ("production" !== "development" ? invariant(
    next != null,
    'accumulateInto(...): Accumulated items must not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

},{"./invariant":126}],98:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

"use strict";

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonably good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],99:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function(_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

},{}],100:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

"use strict";

var camelize = _dereq_("./camelize");

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

},{"./camelize":99}],101:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = _dereq_("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":130}],102:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFrom
 * @typechecks
 */

var toArray = _dereq_("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFrom = require('createArrayFrom');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFrom(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFrom(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFrom;

},{"./toArray":143}],103:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

"use strict";

// Defeat circular references by requiring this directly.
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {string} tag The tag to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(tag) {
  var elementFactory = ReactElement.createFactory(tag);

  var FullPageComponent = ReactCompositeComponent.createClass({
    displayName: 'ReactFullPageComponent' + tag,

    componentWillUnmount: function() {
      ("production" !== "development" ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return elementFactory(this.props);
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

},{"./ReactCompositeComponent":34,"./ReactElement":52,"./invariant":126}],104:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createArrayFrom = _dereq_("./createArrayFrom");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== "development" ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== "development" ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFrom(scripts).forEach(handleScript);
  }

  var nodes = createArrayFrom(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

},{"./ExecutionEnvironment":22,"./createArrayFrom":102,"./getMarkupWrap":118,"./invariant":126}],105:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":4}],106:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

var assign = _dereq_("./Object.assign");
var warning = _dereq_("./warning");

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} namespace The namespace of the call, eg 'React'
 * @param {string} oldName The old function name, eg 'renderComponent'
 * @param {string} newName The new function name, eg 'render'
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {*} Will be the value as returned from `fn`
 */
function deprecated(namespace, oldName, newName, ctx, fn) {
  var warned = false;
  if ("production" !== "development") {
    var newFn = function() {
      ("production" !== "development" ? warning(
        warned,
        (namespace + "." + oldName + " will be deprecated in a future version. ") +
        ("Use " + namespace + "." + newName + " instead.")
      ) : null);
      warned = true;
      return fn.apply(ctx, arguments);
    };
    newFn.displayName = (namespace + "_" + oldName);
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;

},{"./Object.assign":27,"./warning":145}],107:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() { return this; };
emptyFunction.thatReturnsArgument = function(arg) { return arg; };

module.exports = emptyFunction;

},{}],108:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

"use strict";

var emptyObject = {};

if ("production" !== "development") {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

},{}],109:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextForBrowser
 * @typechecks static-only
 */

"use strict";

var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  "\"": "&quot;",
  "'": "&#x27;"
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextForBrowser;

},{}],110:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

"use strict";

var ReactTextComponent = _dereq_("./ReactTextComponent");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = !result.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'flattenChildren(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);
  if (keyUnique && child != null) {
    var type = typeof child;
    var normalizedValue;

    if (type === 'string') {
      normalizedValue = ReactTextComponent(child);
    } else if (type === 'number') {
      normalizedValue = ReactTextComponent('' + child);
    } else {
      normalizedValue = child;
    }

    result[name] = normalizedValue;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

},{"./ReactTextComponent":78,"./traverseAllChildren":144,"./warning":145}],111:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

"use strict";

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch(e) {
  }
}

module.exports = focusNode;

},{}],112:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

"use strict";

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],113:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],114:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

"use strict";

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

},{}],115:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

"use strict";

var getEventCharCode = _dereq_("./getEventCharCode");

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

},{"./getEventCharCode":114}],116:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

"use strict";

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  /*jshint validthis:true */
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

},{}],117:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

"use strict";

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],118:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var invariant = _dereq_("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'defs': true,
  'ellipse': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'defs': svgWrap,
  'ellipse': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== "development" ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

},{"./ExecutionEnvironment":22,"./invariant":126}],119:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

"use strict";

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType == 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],120:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getReactRootElementInContainer
 */

"use strict";

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],121:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":22}],122:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],123:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],124:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

"use strict";

var hyphenate = _dereq_("./hyphenate");

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{"./hyphenate":123}],125:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

"use strict";

var warning = _dereq_("./warning");

var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");

/**
 * Given an `element` create an instance that will actually be mounted.
 *
 * @param {object} element
 * @param {*} parentCompositeType The composite type that resolved this.
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(element, parentCompositeType) {
  var instance;

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      element && (typeof element.type === 'function' ||
                     typeof element.type === 'string'),
      'Only functions or strings can be mounted as React components.'
    ) : null);

    // Resolve mock instances
    if (element.type._mockedReactClassConstructor) {
      // If this is a mocked class, we treat the legacy factory as if it was the
      // class constructor for future proofing unit tests. Because this might
      // be mocked as a legacy factory, we ignore any warnings triggerd by
      // this temporary hack.
      ReactLegacyElement._isLegacyCallWarningEnabled = false;
      try {
        instance = new element.type._mockedReactClassConstructor(
          element.props
        );
      } finally {
        ReactLegacyElement._isLegacyCallWarningEnabled = true;
      }

      // If the mock implementation was a legacy factory, then it returns a
      // element. We need to turn this into a real component instance.
      if (ReactElement.isValidElement(instance)) {
        instance = new instance.type(instance.props);
      }

      var render = instance.render;
      if (!render) {
        // For auto-mocked factories, the prototype isn't shimmed and therefore
        // there is no render function on the instance. We replace the whole
        // component with an empty component instance instead.
        element = ReactEmptyComponent.getEmptyComponent();
      } else {
        if (render._isMockFunction && !render._getMockImplementation()) {
          // Auto-mocked components may have a prototype with a mocked render
          // function. For those, we'll need to mock the result of the render
          // since we consider undefined to be invalid results from render.
          render.mockImplementation(
            ReactEmptyComponent.getEmptyComponent
          );
        }
        instance.construct(element);
        return instance;
      }
    }
  }

  // Special case string values
  if (typeof element.type === 'string') {
    instance = ReactNativeComponent.createInstanceForTag(
      element.type,
      element.props,
      parentCompositeType
    );
  } else {
    // Normal case for non-mocks and non-strings
    instance = new element.type(element.props);
  }

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      typeof instance.construct === 'function' &&
      typeof instance.mountComponent === 'function' &&
      typeof instance.receiveComponent === 'function',
      'Only React Components can be mounted.'
    ) : null);
  }

  // This actually sets up the internal instance. This will become decoupled
  // from the public instance in a future diff.
  instance.construct(element);

  return instance;
}

module.exports = instantiateReactComponent;

},{"./ReactElement":52,"./ReactEmptyComponent":54,"./ReactLegacyElement":61,"./ReactNativeComponent":66,"./warning":145}],126:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if ("production" !== "development") {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

},{}],127:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":22}],128:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    typeof Node === 'function' ? object instanceof Node :
      typeof object === 'object' &&
      typeof object.nodeType === 'number' &&
      typeof object.nodeName === 'string'
  ));
}

module.exports = isNode;

},{}],129:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

"use strict";

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||
    elem.nodeName === 'TEXTAREA'
  );
}

module.exports = isTextInputElement;

},{}],130:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = _dereq_("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":128}],131:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule joinClasses
 * @typechecks static-only
 */

"use strict";

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      if (nextClass) {
        className = (className ? className + ' ' : '') + nextClass;
      }
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],132:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== "development" ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

},{"./invariant":126}],133:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],134:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;

},{}],135:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

"use strict";

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (cache.hasOwnProperty(string)) {
      return cache[string];
    } else {
      return cache[string] = callback.call(this, string);
    }
  };
}

module.exports = memoizeStringOnly;

},{}],136:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule monitorCodeUse
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Provides open-source compatible instrumentation for monitoring certain API
 * uses before we're ready to issue a warning or refactor. It accepts an event
 * name which may only contain the characters [a-z0-9_] and an optional data
 * object with further information.
 */

function monitorCodeUse(eventName, data) {
  ("production" !== "development" ? invariant(
    eventName && !/[^a-z0-9_]/.test(eventName),
    'You must provide an eventName using only the characters [a-z0-9_]'
  ) : invariant(eventName && !/[^a-z0-9_]/.test(eventName)));
}

module.exports = monitorCodeUse;

},{"./invariant":126}],137:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactElement.isValidElement(children)));
  return children;
}

module.exports = onlyChild;

},{"./ReactElement":52,"./invariant":126}],138:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance =
    window.performance ||
    window.msPerformance ||
    window.webkitPerformance;
}

module.exports = performance || {};

},{"./ExecutionEnvironment":22}],139:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

var performance = _dereq_("./performance");

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./performance":138}],140:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function(node, html) {
  node.innerHTML = html;
};

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) ||
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;

},{"./ExecutionEnvironment":22}],141:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 */

"use strict";

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B's keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],142:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

"use strict";

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  if (prevElement && nextElement &&
      prevElement.type === nextElement.type &&
      prevElement.key === nextElement.key &&
      prevElement._owner === nextElement._owner) {
    return true;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

},{}],143:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = _dereq_("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFrom.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== "development" ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== "development" ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== "development" ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

},{"./invariant":126}],144:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");

var invariant = _dereq_("./invariant");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that:
 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.
 * 2. it('should fail when supplied duplicate key', function() {
 * 3. That a single child and an array with one item have the same key pattern.
 * });
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
var traverseAllChildrenImpl =
  function(children, nameSoFar, indexSoFar, callback, traverseContext) {
    var nextName, nextIndex;
    var subtreeCount = 0;  // Count of children found in the current subtree.
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        nextName = (
          nameSoFar +
          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
          getComponentKey(child, i)
        );
        nextIndex = indexSoFar + subtreeCount;
        subtreeCount += traverseAllChildrenImpl(
          child,
          nextName,
          nextIndex,
          callback,
          traverseContext
        );
      }
    } else {
      var type = typeof children;
      var isOnlyChild = nameSoFar === '';
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows
      var storageName =
        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
      if (children == null || type === 'boolean') {
        // All of the above are perceived as null.
        callback(traverseContext, null, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'string' || type === 'number' ||
                 ReactElement.isValidElement(children)) {
        callback(traverseContext, children, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'object') {
        ("production" !== "development" ? invariant(
          !children || children.nodeType !== 1,
          'traverseAllChildren(...): Encountered an invalid child; DOM ' +
          'elements are not valid children of React components.'
        ) : invariant(!children || children.nodeType !== 1));
        for (var key in children) {
          if (children.hasOwnProperty(key)) {
            nextName = (
              nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
              wrapUserProvidedKey(key) + SUBSEPARATOR +
              getComponentKey(children[key], 0)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              children[key],
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        }
      }
    }
    return subtreeCount;
  };

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
}

module.exports = traverseAllChildren;

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./invariant":126}],145:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== "development") {
  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (!condition) {
      var argIndex = 0;
      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));
    }
  };
}

module.exports = warning;

},{"./emptyFunction":107}]},{},[1])(1)
});
var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2850";
cljs.core._STAR_unchecked_if_STAR_ = false;
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__11911__delegate = function(args) {
      return console.log.apply(console, function() {
        var G__11910 = args;
        return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(G__11910) : cljs.core.into_array.call(null, G__11910);
      }());
    };
    var G__11911 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__11912__i = 0, G__11912__a = new Array(arguments.length - 0);
        while (G__11912__i < G__11912__a.length) {
          G__11912__a[G__11912__i] = arguments[G__11912__i + 0];
          ++G__11912__i;
        }
        args = new cljs.core.IndexedSeq(G__11912__a, 0);
      }
      return G__11911__delegate.call(this, args);
    };
    G__11911.cljs$lang$maxFixedArity = 0;
    G__11911.cljs$lang$applyTo = function(arglist__11913) {
      var args = cljs.core.seq(arglist__11913);
      return G__11911__delegate(args);
    };
    G__11911.cljs$core$IFn$_invoke$arity$variadic = G__11911__delegate;
    return G__11911;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  var G__11915 = x;
  return goog.isString(G__11915);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[function() {
    var G__11917 = x__$1;
    return goog.typeOf(G__11917);
  }()]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3817__auto__ = ty;
    if (cljs.core.truth_(and__3817__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3817__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : function() {
    var G__11919 = obj;
    return goog.typeOf(G__11919);
  }();
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.importScript_(file);
  }
};
if (typeof Symbol !== "undefined" && function() {
  var G__11921 = Symbol;
  return goog.typeOf(G__11921);
}() === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.cljs$core$IFn$_invoke$arity$1(size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4716__auto___11923 = len;
  var i_11924 = 0;
  while (true) {
    if (i_11924 < n__4716__auto___11923) {
      new_arr[i_11924] = arr[i_11924];
      var G__11925 = i_11924 + 1;
      i_11924 = G__11925;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__11926 = i + 1;
      i = G__11926;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__11935__delegate = function(array, i, idxs) {
      var G__11932 = aget;
      var G__11933 = aget.cljs$core$IFn$_invoke$arity$2(array, i);
      var G__11934 = idxs;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__11932, G__11933, G__11934) : cljs.core.apply.call(null, G__11932, G__11933, G__11934);
    };
    var G__11935 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        var G__11936__i = 0, G__11936__a = new Array(arguments.length - 2);
        while (G__11936__i < G__11936__a.length) {
          G__11936__a[G__11936__i] = arguments[G__11936__i + 2];
          ++G__11936__i;
        }
        idxs = new cljs.core.IndexedSeq(G__11936__a, 0);
      }
      return G__11935__delegate.call(this, array, i, idxs);
    };
    G__11935.cljs$lang$maxFixedArity = 2;
    G__11935.cljs$lang$applyTo = function(arglist__11937) {
      var array = cljs.core.first(arglist__11937);
      arglist__11937 = cljs.core.next(arglist__11937);
      var i = cljs.core.first(arglist__11937);
      var idxs = cljs.core.rest(arglist__11937);
      return G__11935__delegate(array, i, idxs);
    };
    G__11935.cljs$core$IFn$_invoke$arity$variadic = G__11935__delegate;
    return G__11935;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        var G__11938 = null;
        if (arguments.length > 2) {
          var G__11939__i = 0, G__11939__a = new Array(arguments.length - 2);
          while (G__11939__i < G__11939__a.length) {
            G__11939__a[G__11939__i] = arguments[G__11939__i + 2];
            ++G__11939__i;
          }
          G__11938 = new cljs.core.IndexedSeq(G__11939__a, 0);
        }
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, G__11938);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__11948__delegate = function(array, idx, idx2, idxv) {
      var G__11944 = aset;
      var G__11945 = array[idx];
      var G__11946 = idx2;
      var G__11947 = idxv;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__11944, G__11945, G__11946, G__11947) : cljs.core.apply.call(null, G__11944, G__11945, G__11946, G__11947);
    };
    var G__11948 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        var G__11949__i = 0, G__11949__a = new Array(arguments.length - 3);
        while (G__11949__i < G__11949__a.length) {
          G__11949__a[G__11949__i] = arguments[G__11949__i + 3];
          ++G__11949__i;
        }
        idxv = new cljs.core.IndexedSeq(G__11949__a, 0);
      }
      return G__11948__delegate.call(this, array, idx, idx2, idxv);
    };
    G__11948.cljs$lang$maxFixedArity = 3;
    G__11948.cljs$lang$applyTo = function(arglist__11950) {
      var array = cljs.core.first(arglist__11950);
      arglist__11950 = cljs.core.next(arglist__11950);
      var idx = cljs.core.first(arglist__11950);
      arglist__11950 = cljs.core.next(arglist__11950);
      var idx2 = cljs.core.first(arglist__11950);
      var idxv = cljs.core.rest(arglist__11950);
      return G__11948__delegate(array, idx, idx2, idxv);
    };
    G__11948.cljs$core$IFn$_invoke$arity$variadic = G__11948__delegate;
    return G__11948;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        var G__11951 = null;
        if (arguments.length > 3) {
          var G__11952__i = 0, G__11952__a = new Array(arguments.length - 3);
          while (G__11952__i < G__11952__a.length) {
            G__11952__a[G__11952__i] = arguments[G__11952__i + 3];
            ++G__11952__i;
          }
          G__11951 = new cljs.core.IndexedSeq(G__11952__a, 0);
        }
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, G__11951);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    var G__11958 = function(a, x) {
      a.push(x);
      return a;
    };
    var G__11959 = [];
    var G__11960 = aseq;
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__11958, G__11959, G__11960) : cljs.core.reduce.call(null, G__11958, G__11959, G__11960);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.js_invoke = function() {
  var js_invoke__delegate = function(obj, s, args) {
    return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
  };
  var js_invoke = function(obj, s, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__11961__i = 0, G__11961__a = new Array(arguments.length - 2);
      while (G__11961__i < G__11961__a.length) {
        G__11961__a[G__11961__i] = arguments[G__11961__i + 2];
        ++G__11961__i;
      }
      args = new cljs.core.IndexedSeq(G__11961__a, 0);
    }
    return js_invoke__delegate.call(this, obj, s, args);
  };
  js_invoke.cljs$lang$maxFixedArity = 2;
  js_invoke.cljs$lang$applyTo = function(arglist__11962) {
    var obj = cljs.core.first(arglist__11962);
    arglist__11962 = cljs.core.next(arglist__11962);
    var s = cljs.core.first(arglist__11962);
    var args = cljs.core.rest(arglist__11962);
    return js_invoke__delegate(obj, s, args);
  };
  js_invoke.cljs$core$IFn$_invoke$arity$variadic = js_invoke__delegate;
  return js_invoke;
}();
cljs.core.Fn = function() {
  var obj11964 = {};
  return obj11964;
}();
cljs.core.IFn = function() {
  var obj11966 = {};
  return obj11966;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12012 = x__4473__auto__;
          return goog.typeOf(G__12012);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12014 = x__4473__auto__;
          return goog.typeOf(G__12014);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12016 = x__4473__auto__;
          return goog.typeOf(G__12016);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12018 = x__4473__auto__;
          return goog.typeOf(G__12018);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12020 = x__4473__auto__;
          return goog.typeOf(G__12020);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12022 = x__4473__auto__;
          return goog.typeOf(G__12022);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12024 = x__4473__auto__;
          return goog.typeOf(G__12024);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12026 = x__4473__auto__;
          return goog.typeOf(G__12026);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12028 = x__4473__auto__;
          return goog.typeOf(G__12028);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12030 = x__4473__auto__;
          return goog.typeOf(G__12030);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12032 = x__4473__auto__;
          return goog.typeOf(G__12032);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12034 = x__4473__auto__;
          return goog.typeOf(G__12034);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12036 = x__4473__auto__;
          return goog.typeOf(G__12036);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12038 = x__4473__auto__;
          return goog.typeOf(G__12038);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12040 = x__4473__auto__;
          return goog.typeOf(G__12040);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12042 = x__4473__auto__;
          return goog.typeOf(G__12042);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12044 = x__4473__auto__;
          return goog.typeOf(G__12044);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12046 = x__4473__auto__;
          return goog.typeOf(G__12046);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12048 = x__4473__auto__;
          return goog.typeOf(G__12048);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12050 = x__4473__auto__;
          return goog.typeOf(G__12050);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12052 = x__4473__auto__;
          return goog.typeOf(G__12052);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
  };
  var _invoke__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    if (function() {
      var and__3817__auto__ = this$;
      if (and__3817__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$22;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var x__4473__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3829__auto__ = cljs.core._invoke[function() {
          var G__12054 = x__4473__auto__;
          return goog.typeOf(G__12054);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._invoke["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return _invoke__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  _invoke.cljs$core$IFn$_invoke$arity$22 = _invoke__22;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj12056 = {};
  return obj12056;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3817__auto__ = value;
    if (and__3817__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4473__auto__ = value == null ? null : value;
    return function() {
      var or__3829__auto__ = cljs.core._clone[function() {
        var G__12060 = x__4473__auto__;
        return goog.typeOf(G__12060);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._clone["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj12062 = {};
  return obj12062;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._count[function() {
        var G__12066 = x__4473__auto__;
        return goog.typeOf(G__12066);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._count["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj12068 = {};
  return obj12068;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._empty[function() {
        var G__12072 = x__4473__auto__;
        return goog.typeOf(G__12072);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._empty["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj12074 = {};
  return obj12074;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._conj[function() {
        var G__12078 = x__4473__auto__;
        return goog.typeOf(G__12078);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._conj["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj12080 = {};
  return obj12080;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3817__auto__ = coll;
      if (and__3817__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4473__auto__ = coll == null ? null : coll;
      return function() {
        var or__3829__auto__ = cljs.core._nth[function() {
          var G__12086 = x__4473__auto__;
          return goog.typeOf(G__12086);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._nth["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3817__auto__ = coll;
      if (and__3817__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4473__auto__ = coll == null ? null : coll;
      return function() {
        var or__3829__auto__ = cljs.core._nth[function() {
          var G__12088 = x__4473__auto__;
          return goog.typeOf(G__12088);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._nth["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj12090 = {};
  return obj12090;
}();
cljs.core.ISeq = function() {
  var obj12092 = {};
  return obj12092;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._first[function() {
        var G__12096 = x__4473__auto__;
        return goog.typeOf(G__12096);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._first["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._rest[function() {
        var G__12100 = x__4473__auto__;
        return goog.typeOf(G__12100);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._rest["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj12102 = {};
  return obj12102;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._next[function() {
        var G__12106 = x__4473__auto__;
        return goog.typeOf(G__12106);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._next["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj12108 = {};
  return obj12108;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3817__auto__ = o;
      if (and__3817__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4473__auto__ = o == null ? null : o;
      return function() {
        var or__3829__auto__ = cljs.core._lookup[function() {
          var G__12114 = x__4473__auto__;
          return goog.typeOf(G__12114);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._lookup["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3817__auto__ = o;
      if (and__3817__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4473__auto__ = o == null ? null : o;
      return function() {
        var or__3829__auto__ = cljs.core._lookup[function() {
          var G__12116 = x__4473__auto__;
          return goog.typeOf(G__12116);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._lookup["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj12118 = {};
  return obj12118;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._contains_key_QMARK_[function() {
        var G__12122 = x__4473__auto__;
        return goog.typeOf(G__12122);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._assoc[function() {
        var G__12126 = x__4473__auto__;
        return goog.typeOf(G__12126);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._assoc["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj12128 = {};
  return obj12128;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._dissoc[function() {
        var G__12132 = x__4473__auto__;
        return goog.typeOf(G__12132);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._dissoc["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj12134 = {};
  return obj12134;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._key[function() {
        var G__12138 = x__4473__auto__;
        return goog.typeOf(G__12138);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._key["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._val[function() {
        var G__12142 = x__4473__auto__;
        return goog.typeOf(G__12142);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._val["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj12144 = {};
  return obj12144;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._disjoin[function() {
        var G__12148 = x__4473__auto__;
        return goog.typeOf(G__12148);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._disjoin["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj12150 = {};
  return obj12150;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._peek[function() {
        var G__12154 = x__4473__auto__;
        return goog.typeOf(G__12154);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._peek["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._pop[function() {
        var G__12158 = x__4473__auto__;
        return goog.typeOf(G__12158);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._pop["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj12160 = {};
  return obj12160;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._assoc_n[function() {
        var G__12164 = x__4473__auto__;
        return goog.typeOf(G__12164);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj12166 = {};
  return obj12166;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3817__auto__ = o;
    if (and__3817__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4473__auto__ = o == null ? null : o;
    return function() {
      var or__3829__auto__ = cljs.core._deref[function() {
        var G__12170 = x__4473__auto__;
        return goog.typeOf(G__12170);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._deref["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj12172 = {};
  return obj12172;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3817__auto__ = o;
    if (and__3817__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4473__auto__ = o == null ? null : o;
    return function() {
      var or__3829__auto__ = cljs.core._deref_with_timeout[function() {
        var G__12176 = x__4473__auto__;
        return goog.typeOf(G__12176);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj12178 = {};
  return obj12178;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3817__auto__ = o;
    if (and__3817__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4473__auto__ = o == null ? null : o;
    return function() {
      var or__3829__auto__ = cljs.core._meta[function() {
        var G__12182 = x__4473__auto__;
        return goog.typeOf(G__12182);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._meta["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj12184 = {};
  return obj12184;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3817__auto__ = o;
    if (and__3817__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4473__auto__ = o == null ? null : o;
    return function() {
      var or__3829__auto__ = cljs.core._with_meta[function() {
        var G__12188 = x__4473__auto__;
        return goog.typeOf(G__12188);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._with_meta["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj12190 = {};
  return obj12190;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3817__auto__ = coll;
      if (and__3817__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4473__auto__ = coll == null ? null : coll;
      return function() {
        var or__3829__auto__ = cljs.core._reduce[function() {
          var G__12196 = x__4473__auto__;
          return goog.typeOf(G__12196);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._reduce["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3817__auto__ = coll;
      if (and__3817__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4473__auto__ = coll == null ? null : coll;
      return function() {
        var or__3829__auto__ = cljs.core._reduce[function() {
          var G__12198 = x__4473__auto__;
          return goog.typeOf(G__12198);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._reduce["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj12200 = {};
  return obj12200;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._kv_reduce[function() {
        var G__12204 = x__4473__auto__;
        return goog.typeOf(G__12204);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj12206 = {};
  return obj12206;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3817__auto__ = o;
    if (and__3817__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4473__auto__ = o == null ? null : o;
    return function() {
      var or__3829__auto__ = cljs.core._equiv[function() {
        var G__12210 = x__4473__auto__;
        return goog.typeOf(G__12210);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._equiv["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj12212 = {};
  return obj12212;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3817__auto__ = o;
    if (and__3817__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4473__auto__ = o == null ? null : o;
    return function() {
      var or__3829__auto__ = cljs.core._hash[function() {
        var G__12216 = x__4473__auto__;
        return goog.typeOf(G__12216);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._hash["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj12218 = {};
  return obj12218;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3817__auto__ = o;
    if (and__3817__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4473__auto__ = o == null ? null : o;
    return function() {
      var or__3829__auto__ = cljs.core._seq[function() {
        var G__12222 = x__4473__auto__;
        return goog.typeOf(G__12222);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._seq["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj12224 = {};
  return obj12224;
}();
cljs.core.IList = function() {
  var obj12226 = {};
  return obj12226;
}();
cljs.core.IRecord = function() {
  var obj12228 = {};
  return obj12228;
}();
cljs.core.IReversible = function() {
  var obj12230 = {};
  return obj12230;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._rseq[function() {
        var G__12234 = x__4473__auto__;
        return goog.typeOf(G__12234);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._rseq["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj12236 = {};
  return obj12236;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._sorted_seq[function() {
        var G__12240 = x__4473__auto__;
        return goog.typeOf(G__12240);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._sorted_seq_from[function() {
        var G__12244 = x__4473__auto__;
        return goog.typeOf(G__12244);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._entry_key[function() {
        var G__12248 = x__4473__auto__;
        return goog.typeOf(G__12248);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._entry_key["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._comparator[function() {
        var G__12252 = x__4473__auto__;
        return goog.typeOf(G__12252);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._comparator["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj12254 = {};
  return obj12254;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3817__auto__ = writer;
    if (and__3817__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4473__auto__ = writer == null ? null : writer;
    return function() {
      var or__3829__auto__ = cljs.core._write[function() {
        var G__12258 = x__4473__auto__;
        return goog.typeOf(G__12258);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._write["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3817__auto__ = writer;
    if (and__3817__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4473__auto__ = writer == null ? null : writer;
    return function() {
      var or__3829__auto__ = cljs.core._flush[function() {
        var G__12262 = x__4473__auto__;
        return goog.typeOf(G__12262);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._flush["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj12264 = {};
  return obj12264;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3817__auto__ = o;
    if (and__3817__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4473__auto__ = o == null ? null : o;
    return function() {
      var or__3829__auto__ = cljs.core._pr_writer[function() {
        var G__12268 = x__4473__auto__;
        return goog.typeOf(G__12268);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj12270 = {};
  return obj12270;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3817__auto__ = d;
    if (and__3817__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4473__auto__ = d == null ? null : d;
    return function() {
      var or__3829__auto__ = cljs.core._realized_QMARK_[function() {
        var G__12274 = x__4473__auto__;
        return goog.typeOf(G__12274);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj12276 = {};
  return obj12276;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3817__auto__ = this$;
    if (and__3817__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4473__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3829__auto__ = cljs.core._notify_watches[function() {
        var G__12280 = x__4473__auto__;
        return goog.typeOf(G__12280);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3817__auto__ = this$;
    if (and__3817__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4473__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3829__auto__ = cljs.core._add_watch[function() {
        var G__12284 = x__4473__auto__;
        return goog.typeOf(G__12284);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._add_watch["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3817__auto__ = this$;
    if (and__3817__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4473__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3829__auto__ = cljs.core._remove_watch[function() {
        var G__12288 = x__4473__auto__;
        return goog.typeOf(G__12288);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj12290 = {};
  return obj12290;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._as_transient[function() {
        var G__12294 = x__4473__auto__;
        return goog.typeOf(G__12294);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._as_transient["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj12296 = {};
  return obj12296;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3817__auto__ = tcoll;
    if (and__3817__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4473__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3829__auto__ = cljs.core._conj_BANG_[function() {
        var G__12300 = x__4473__auto__;
        return goog.typeOf(G__12300);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3817__auto__ = tcoll;
    if (and__3817__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4473__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3829__auto__ = cljs.core._persistent_BANG_[function() {
        var G__12304 = x__4473__auto__;
        return goog.typeOf(G__12304);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj12306 = {};
  return obj12306;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3817__auto__ = tcoll;
    if (and__3817__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4473__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3829__auto__ = cljs.core._assoc_BANG_[function() {
        var G__12310 = x__4473__auto__;
        return goog.typeOf(G__12310);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj12312 = {};
  return obj12312;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3817__auto__ = tcoll;
    if (and__3817__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4473__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3829__auto__ = cljs.core._dissoc_BANG_[function() {
        var G__12316 = x__4473__auto__;
        return goog.typeOf(G__12316);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj12318 = {};
  return obj12318;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3817__auto__ = tcoll;
    if (and__3817__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4473__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3829__auto__ = cljs.core._assoc_n_BANG_[function() {
        var G__12322 = x__4473__auto__;
        return goog.typeOf(G__12322);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3817__auto__ = tcoll;
    if (and__3817__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4473__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3829__auto__ = cljs.core._pop_BANG_[function() {
        var G__12326 = x__4473__auto__;
        return goog.typeOf(G__12326);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj12328 = {};
  return obj12328;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3817__auto__ = tcoll;
    if (and__3817__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4473__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3829__auto__ = cljs.core._disjoin_BANG_[function() {
        var G__12332 = x__4473__auto__;
        return goog.typeOf(G__12332);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj12334 = {};
  return obj12334;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3817__auto__ = x;
    if (and__3817__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4473__auto__ = x == null ? null : x;
    return function() {
      var or__3829__auto__ = cljs.core._compare[function() {
        var G__12338 = x__4473__auto__;
        return goog.typeOf(G__12338);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._compare["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj12340 = {};
  return obj12340;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._drop_first[function() {
        var G__12344 = x__4473__auto__;
        return goog.typeOf(G__12344);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._drop_first["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj12346 = {};
  return obj12346;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._chunked_first[function() {
        var G__12350 = x__4473__auto__;
        return goog.typeOf(G__12350);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._chunked_rest[function() {
        var G__12354 = x__4473__auto__;
        return goog.typeOf(G__12354);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj12356 = {};
  return obj12356;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._chunked_next[function() {
        var G__12360 = x__4473__auto__;
        return goog.typeOf(G__12360);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj12362 = {};
  return obj12362;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3817__auto__ = x;
    if (and__3817__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4473__auto__ = x == null ? null : x;
    return function() {
      var or__3829__auto__ = cljs.core._name[function() {
        var G__12366 = x__4473__auto__;
        return goog.typeOf(G__12366);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._name["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3817__auto__ = x;
    if (and__3817__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4473__auto__ = x == null ? null : x;
    return function() {
      var or__3829__auto__ = cljs.core._namespace[function() {
        var G__12370 = x__4473__auto__;
        return goog.typeOf(G__12370);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._namespace["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj12372 = {};
  return obj12372;
}();
cljs.core.IReset = function() {
  var obj12374 = {};
  return obj12374;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3817__auto__ = o;
    if (and__3817__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4473__auto__ = o == null ? null : o;
    return function() {
      var or__3829__auto__ = cljs.core._reset_BANG_[function() {
        var G__12378 = x__4473__auto__;
        return goog.typeOf(G__12378);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj12380 = {};
  return obj12380;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3817__auto__ = o;
      if (and__3817__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4473__auto__ = o == null ? null : o;
      return function() {
        var or__3829__auto__ = cljs.core._swap_BANG_[function() {
          var G__12390 = x__4473__auto__;
          return goog.typeOf(G__12390);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3817__auto__ = o;
      if (and__3817__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4473__auto__ = o == null ? null : o;
      return function() {
        var or__3829__auto__ = cljs.core._swap_BANG_[function() {
          var G__12392 = x__4473__auto__;
          return goog.typeOf(G__12392);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3817__auto__ = o;
      if (and__3817__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4473__auto__ = o == null ? null : o;
      return function() {
        var or__3829__auto__ = cljs.core._swap_BANG_[function() {
          var G__12394 = x__4473__auto__;
          return goog.typeOf(G__12394);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3817__auto__ = o;
      if (and__3817__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4473__auto__ = o == null ? null : o;
      return function() {
        var or__3829__auto__ = cljs.core._swap_BANG_[function() {
          var G__12396 = x__4473__auto__;
          return goog.typeOf(G__12396);
        }()];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.IVolatile = function() {
  var obj12398 = {};
  return obj12398;
}();
cljs.core._vreset_BANG_ = function _vreset_BANG_(o, new_value) {
  if (function() {
    var and__3817__auto__ = o;
    if (and__3817__auto__) {
      return o.cljs$core$IVolatile$_vreset_BANG_$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__4473__auto__ = o == null ? null : o;
    return function() {
      var or__3829__auto__ = cljs.core._vreset_BANG_[function() {
        var G__12402 = x__4473__auto__;
        return goog.typeOf(G__12402);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._vreset_BANG_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.IIterable = function() {
  var obj12404 = {};
  return obj12404;
}();
cljs.core._iterator = function _iterator(coll) {
  if (function() {
    var and__3817__auto__ = coll;
    if (and__3817__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4473__auto__ = coll == null ? null : coll;
    return function() {
      var or__3829__auto__ = cljs.core._iterator[function() {
        var G__12408 = x__4473__auto__;
        return goog.typeOf(G__12408);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._iterator["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return[cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(function() {
  var G__12411 = 4294967295;
  var G__12412 = 5;
  return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__12411, G__12412) : Math.imul.call(null, G__12411, G__12412);
}() === 0)) {
  cljs.core.imul = function imul(a, b) {
    var G__12415 = a;
    var G__12416 = b;
    return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__12415, G__12416) : Math.imul.call(null, G__12415, G__12416);
  };
} else {
  cljs.core.imul = function imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353;
cljs.core.m3_C2 = 461845907;
cljs.core.m3_mix_K1 = function m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(h1 ^ k1, 13), 5) + 3864292196;
};
cljs.core.m3_fmix = function m3_fmix(h1, len) {
  var h1__$1 = h1;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__12417 = i + 2;
        var G__12418 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__12417;
        h1 = G__12418;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj12420 = {};
  return obj12420;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__12421 = i + 1;
          var G__12422 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__12421;
          hash = G__12422;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj12426 = {};
      return obj12426;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__12429 = o;
    if (G__12429) {
      var bit__4503__auto__ = G__12429.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4503__auto__ || G__12429.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return function() {
        var G__12430 = o;
        return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__12430) : Math.floor.call(null, G__12430);
      }() % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3817__auto__ = cljs.core.not(a.ns);
      if (and__3817__auto__) {
        return b.ns;
      } else {
        return and__3817__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__12437 = a.ns;
            var G__12438 = b.ns;
            return goog.array.defaultCompare(G__12437, G__12438);
          }();
          if (0 === nsc) {
            var G__12439 = a.name;
            var G__12440 = b.name;
            return goog.array.defaultCompare(G__12439, G__12440);
          } else {
            return nsc;
          }
        }
      } else {
        var G__12441 = a.name;
        var G__12442 = b.name;
        return goog.array.defaultCompare(G__12441, G__12442);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4250__auto__ = self__._hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__12444 = null;
  var G__12444__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
  };
  var G__12444__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
  };
  G__12444 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12444__2.call(this, self__, coll);
      case 3:
        return G__12444__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12444.cljs$core$IFn$_invoke$arity$2 = G__12444__2;
  G__12444.cljs$core$IFn$_invoke$arity$3 = G__12444__3;
  return G__12444;
}();
cljs.core.Symbol.prototype.apply = function(self__, args12443) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args12443)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.cljs$core$IFn$_invoke$arity$2(null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 163841;
};
cljs.core.Var.prototype.call = function() {
  var G__12492 = null;
  var G__12492__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null);
  };
  var G__12492__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a);
  };
  var G__12492__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b);
  };
  var G__12492__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c);
  };
  var G__12492__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d);
  };
  var G__12492__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e);
  };
  var G__12492__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f);
  };
  var G__12492__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g);
  };
  var G__12492__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h);
  };
  var G__12492__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__12492__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__12492__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__12492__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__12492__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__12492__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__12492__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__12492__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__12492__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__12492__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__12492__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__12492__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__12492__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12448 = function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }();
    var G__12449 = a;
    var G__12450 = b;
    var G__12451 = c;
    var G__12452 = d;
    var G__12453 = e;
    var G__12454 = f;
    var G__12455 = g;
    var G__12456 = h;
    var G__12457 = i;
    var G__12458 = j;
    var G__12459 = k;
    var G__12460 = l;
    var G__12461 = m;
    var G__12462 = n;
    var G__12463 = o;
    var G__12464 = p;
    var G__12465 = q;
    var G__12466 = r;
    var G__12467 = s;
    var G__12468 = t;
    var G__12469 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__12448, G__12449, G__12450, G__12451, G__12452, G__12453, G__12454, G__12455, G__12456, G__12457, G__12458, G__12459, G__12460, G__12461, G__12462, G__12463, G__12464, G__12465, G__12466, G__12467, G__12468, G__12469) : cljs.core.apply.call(null, G__12448, G__12449, G__12450, G__12451, G__12452, G__12453, G__12454, G__12455, G__12456, G__12457, G__12458, G__12459, G__12460, G__12461, G__12462, 
    G__12463, G__12464, G__12465, G__12466, G__12467, G__12468, G__12469);
  };
  G__12492 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__12492__1.call(this, self__);
      case 2:
        return G__12492__2.call(this, self__, a);
      case 3:
        return G__12492__3.call(this, self__, a, b);
      case 4:
        return G__12492__4.call(this, self__, a, b, c);
      case 5:
        return G__12492__5.call(this, self__, a, b, c, d);
      case 6:
        return G__12492__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__12492__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__12492__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__12492__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__12492__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__12492__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__12492__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__12492__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__12492__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__12492__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__12492__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__12492__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__12492__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__12492__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__12492__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__12492__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__12492__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__12492.cljs$core$IFn$_invoke$arity$1 = G__12492__1;
  G__12492.cljs$core$IFn$_invoke$arity$2 = G__12492__2;
  G__12492.cljs$core$IFn$_invoke$arity$3 = G__12492__3;
  G__12492.cljs$core$IFn$_invoke$arity$4 = G__12492__4;
  G__12492.cljs$core$IFn$_invoke$arity$5 = G__12492__5;
  G__12492.cljs$core$IFn$_invoke$arity$6 = G__12492__6;
  G__12492.cljs$core$IFn$_invoke$arity$7 = G__12492__7;
  G__12492.cljs$core$IFn$_invoke$arity$8 = G__12492__8;
  G__12492.cljs$core$IFn$_invoke$arity$9 = G__12492__9;
  G__12492.cljs$core$IFn$_invoke$arity$10 = G__12492__10;
  G__12492.cljs$core$IFn$_invoke$arity$11 = G__12492__11;
  G__12492.cljs$core$IFn$_invoke$arity$12 = G__12492__12;
  G__12492.cljs$core$IFn$_invoke$arity$13 = G__12492__13;
  G__12492.cljs$core$IFn$_invoke$arity$14 = G__12492__14;
  G__12492.cljs$core$IFn$_invoke$arity$15 = G__12492__15;
  G__12492.cljs$core$IFn$_invoke$arity$16 = G__12492__16;
  G__12492.cljs$core$IFn$_invoke$arity$17 = G__12492__17;
  G__12492.cljs$core$IFn$_invoke$arity$18 = G__12492__18;
  G__12492.cljs$core$IFn$_invoke$arity$19 = G__12492__19;
  G__12492.cljs$core$IFn$_invoke$arity$20 = G__12492__20;
  G__12492.cljs$core$IFn$_invoke$arity$21 = G__12492__21;
  G__12492.cljs$core$IFn$_invoke$arity$22 = G__12492__22;
  return G__12492;
}();
cljs.core.Var.prototype.apply = function(self__, args12447) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args12447)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__12470 = function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }();
  var G__12471 = a;
  var G__12472 = b;
  var G__12473 = c;
  var G__12474 = d;
  var G__12475 = e;
  var G__12476 = f;
  var G__12477 = g;
  var G__12478 = h;
  var G__12479 = i;
  var G__12480 = j;
  var G__12481 = k;
  var G__12482 = l;
  var G__12483 = m;
  var G__12484 = n;
  var G__12485 = o;
  var G__12486 = p;
  var G__12487 = q;
  var G__12488 = r;
  var G__12489 = s;
  var G__12490 = t;
  var G__12491 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__12470, G__12471, G__12472, G__12473, G__12474, G__12475, G__12476, G__12477, G__12478, G__12479, G__12480, G__12481, G__12482, G__12483, G__12484, G__12485, G__12486, G__12487, G__12488, G__12489, G__12490, G__12491) : cljs.core.apply.call(null, G__12470, G__12471, G__12472, G__12473, G__12474, G__12475, G__12476, G__12477, G__12478, G__12479, G__12480, G__12481, G__12482, G__12483, G__12484, 
  G__12485, G__12486, G__12487, G__12488, G__12489, G__12490, G__12491);
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function __GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.iterable_QMARK_ = function iterable_QMARK_(x) {
  var G__12494 = x;
  if (G__12494) {
    var bit__4510__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3829__auto__ = bit__4510__auto__;
      if (cljs.core.truth_(or__3829__auto__)) {
        return or__3829__auto__;
      } else {
        return G__12494.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__12494.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__12494);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__12494);
  }
};
cljs.core.clone = function clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__12496 = value;
  if (G__12496) {
    var bit__4510__auto__ = G__12496.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4510__auto__ || G__12496.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__12496.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__12496);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__12496);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__12498 = coll;
      if (G__12498) {
        var bit__4503__auto__ = G__12498.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4503__auto__ || G__12498.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__12500 = coll;
      if (G__12500) {
        var bit__4503__auto__ = G__12500.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4503__auto__ || G__12500.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__12502 = coll;
      if (G__12502) {
        var bit__4503__auto__ = G__12502.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4503__auto__ || G__12502.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__12504 = coll;
      if (G__12504) {
        var bit__4503__auto__ = G__12504.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4503__auto__ || G__12504.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv(x, y);
    }
  };
  var _EQ___3 = function() {
    var G__12509__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
          if (cljs.core.next(more)) {
            var G__12510 = y;
            var G__12511 = cljs.core.first(more);
            var G__12512 = cljs.core.next(more);
            x = G__12510;
            y = G__12511;
            more = G__12512;
            continue;
          } else {
            return _EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__12509 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__12513__i = 0, G__12513__a = new Array(arguments.length - 2);
        while (G__12513__i < G__12513__a.length) {
          G__12513__a[G__12513__i] = arguments[G__12513__i + 2];
          ++G__12513__i;
        }
        more = new cljs.core.IndexedSeq(G__12513__a, 0);
      }
      return G__12509__delegate.call(this, x, y, more);
    };
    G__12509.cljs$lang$maxFixedArity = 2;
    G__12509.cljs$lang$applyTo = function(arglist__12514) {
      var x = cljs.core.first(arglist__12514);
      arglist__12514 = cljs.core.next(arglist__12514);
      var y = cljs.core.first(arglist__12514);
      var more = cljs.core.rest(arglist__12514);
      return G__12509__delegate(x, y, more);
    };
    G__12509.cljs$core$IFn$_invoke$arity$variadic = G__12509__delegate;
    return G__12509;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        var G__12515 = null;
        if (arguments.length > 2) {
          var G__12516__i = 0, G__12516__a = new Array(arguments.length - 2);
          while (G__12516__i < G__12516__a.length) {
            G__12516__a[G__12516__i] = arguments[G__12516__i + 2];
            ++G__12516__i;
          }
          G__12515 = new cljs.core.IndexedSeq(G__12516__a, 0);
        }
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__12515);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function __GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = function() {
      var G__12517 = self__.iter;
      return cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(G__12517) : cljs.core.es6_iterator_seq.call(null, G__12517);
    }();
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function __GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__12518 = n + 1;
      var G__12519 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__12520 = cljs.core.next(coll__$1);
      n = G__12518;
      hash_code = G__12519;
      coll__$1 = G__12520;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__12521 = n + 1;
      var G__12522 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__12523 = cljs.core.next(coll__$1);
      n = G__12521;
      hash_code = G__12522;
      coll__$1 = G__12523;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  var G__12524 = o;
  return goog.getUid(G__12524);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    var G__12526 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__12526) : cljs.core.deref.call(null, G__12526);
  } else {
    return x;
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count(cicoll);
    if (cnt === 0) {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    } else {
      var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = function() {
            var G__12533 = val;
            var G__12534 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__12533, G__12534) : f.call(null, G__12533, G__12534);
          }();
          if (cljs.core.reduced_QMARK_(nval)) {
            return cljs.core.deref(nval);
          } else {
            var G__12539 = nval;
            var G__12540 = n + 1;
            val = G__12539;
            n = G__12540;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count(cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__12535 = val__$1;
          var G__12536 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__12535, G__12536) : f.call(null, G__12535, G__12536);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__12541 = nval;
          var G__12542 = n + 1;
          val__$1 = G__12541;
          n = G__12542;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count(cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__12537 = val__$1;
          var G__12538 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__12537, G__12538) : f.call(null, G__12537, G__12538);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__12543 = nval;
          var G__12544 = n + 1;
          val__$1 = G__12543;
          n = G__12544;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = function() {
            var G__12551 = val;
            var G__12552 = arr[n];
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__12551, G__12552) : f.call(null, G__12551, G__12552);
          }();
          if (cljs.core.reduced_QMARK_(nval)) {
            return cljs.core.deref(nval);
          } else {
            var G__12557 = nval;
            var G__12558 = n + 1;
            val = G__12557;
            n = G__12558;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__12553 = val__$1;
          var G__12554 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__12553, G__12554) : f.call(null, G__12553, G__12554);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__12559 = nval;
          var G__12560 = n + 1;
          val__$1 = G__12559;
          n = G__12560;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__12555 = val__$1;
          var G__12556 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__12555, G__12556) : f.call(null, G__12555, G__12556);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__12561 = nval;
          var G__12562 = n + 1;
          val__$1 = G__12561;
          n = G__12562;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__12564 = x;
  if (G__12564) {
    var bit__4510__auto__ = G__12564.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4510__auto__ || G__12564.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__12564.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__12564);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__12564);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__12566 = x;
  if (G__12566) {
    var bit__4510__auto__ = G__12566.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4510__auto__ || G__12566.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__12566.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__12566);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__12566);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function __GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__12567 = coll__$1;
  var G__12568 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__12567, G__12568) : cljs.core.equiv_sequential.call(null, G__12567, G__12568);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__12569 = o;
  var G__12570 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__12569, G__12570) : cljs.core.cons.call(null, G__12569, G__12570);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__12573 = coll__$1;
  var G__12574 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__12573, G__12574) : cljs.core.equiv_sequential.call(null, G__12573, G__12574);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__12575 = cljs.core.List.EMPTY;
  var G__12576 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__12575, G__12576) : cljs.core.with_meta.call(null, G__12575, G__12576);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  var G__12577 = f;
  var G__12578 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(G__12577, G__12578) : cljs.core.seq_reduce.call(null, G__12577, G__12578);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  var G__12579 = f;
  var G__12580 = start;
  var G__12581 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(G__12579, G__12580, G__12581) : cljs.core.seq_reduce.call(null, G__12579, G__12580, G__12581);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__12582 = o;
  var G__12583 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__12582, G__12583) : cljs.core.cons.call(null, G__12582, G__12583);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.second = function second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__12584 = sn;
      s = G__12584;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__0 = function() {
    return cljs.core.PersistentVector.EMPTY;
  };
  var conj__1 = function(coll) {
    return coll;
  };
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj(coll, x);
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__12589__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__12590 = conj.cljs$core$IFn$_invoke$arity$2(coll, x);
          var G__12591 = cljs.core.first(xs);
          var G__12592 = cljs.core.next(xs);
          coll = G__12590;
          x = G__12591;
          xs = G__12592;
          continue;
        } else {
          return conj.cljs$core$IFn$_invoke$arity$2(coll, x);
        }
        break;
      }
    };
    var G__12589 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        var G__12593__i = 0, G__12593__a = new Array(arguments.length - 2);
        while (G__12593__i < G__12593__a.length) {
          G__12593__a[G__12593__i] = arguments[G__12593__i + 2];
          ++G__12593__i;
        }
        xs = new cljs.core.IndexedSeq(G__12593__a, 0);
      }
      return G__12589__delegate.call(this, coll, x, xs);
    };
    G__12589.cljs$lang$maxFixedArity = 2;
    G__12589.cljs$lang$applyTo = function(arglist__12594) {
      var coll = cljs.core.first(arglist__12594);
      arglist__12594 = cljs.core.next(arglist__12594);
      var x = cljs.core.first(arglist__12594);
      var xs = cljs.core.rest(arglist__12594);
      return G__12589__delegate(coll, x, xs);
    };
    G__12589.cljs$core$IFn$_invoke$arity$variadic = G__12589__delegate;
    return G__12589;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 0:
        return conj__0.call(this);
      case 1:
        return conj__1.call(this, coll);
      case 2:
        return conj__2.call(this, coll, x);
      default:
        var G__12595 = null;
        if (arguments.length > 2) {
          var G__12596__i = 0, G__12596__a = new Array(arguments.length - 2);
          while (G__12596__i < G__12596__a.length) {
            G__12596__a[G__12596__i] = arguments[G__12596__i + 2];
            ++G__12596__i;
          }
          G__12595 = new cljs.core.IndexedSeq(G__12596__a, 0);
        }
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, G__12595);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$0 = conj__0;
  conj.cljs$core$IFn$_invoke$arity$1 = conj__1;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__12597 = cljs.core.next(s);
      var G__12598 = acc + 1;
      s = G__12597;
      acc = G__12598;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__12600 = coll;
      if (G__12600) {
        var bit__4503__auto__ = G__12600.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4503__auto__ || G__12600.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, coll)) {
            return cljs.core._count(coll);
          } else {
            return cljs.core.accumulating_seq_count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq(coll)) {
            return cljs.core.first(coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_(coll)) {
            return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
          } else {
            if (cljs.core.seq(coll)) {
              var G__12601 = cljs.core.next(coll);
              var G__12602 = n - 1;
              coll = G__12601;
              n = G__12602;
              continue;
            } else {
              throw new Error("Index out of bounds");
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq(coll)) {
            return cljs.core.first(coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_(coll)) {
            return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
          } else {
            if (cljs.core.seq(coll)) {
              var G__12603 = cljs.core.next(coll);
              var G__12604 = n - 1;
              var G__12605 = not_found;
              coll = G__12603;
              n = G__12604;
              not_found = G__12605;
              continue;
            } else {
              return not_found;
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__12610 = coll;
          if (G__12610) {
            var bit__4503__auto__ = G__12610.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4503__auto__ || G__12610.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                if (function() {
                  var G__12611 = coll;
                  if (G__12611) {
                    var bit__4510__auto__ = G__12611.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4510__auto__ || G__12611.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__12611.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__12611);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__12611);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__12612 = coll;
          if (G__12612) {
            var bit__4503__auto__ = G__12612.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4503__auto__ || G__12612.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                if (function() {
                  var G__12613 = coll;
                  if (G__12613) {
                    var bit__4510__auto__ = G__12613.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4510__auto__ || G__12613.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__12613.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__12613);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__12613);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.nthrest = function nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__12614 = n__$1 - 1;
      var G__12615 = cljs.core.rest(xs);
      n__$1 = G__12614;
      xs = G__12615;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__12618 = o;
        if (G__12618) {
          var bit__4503__auto__ = G__12618.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4503__auto__ || G__12618.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return o.cljs$core$ILookup$_lookup$arity$2(null, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__12619 = o;
        if (G__12619) {
          var bit__4503__auto__ = G__12619.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4503__auto__ || G__12619.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
            } else {
              return not_found;
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc(coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays([k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__12623__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__12624 = ret;
          var G__12625 = cljs.core.first(kvs);
          var G__12626 = cljs.core.second(kvs);
          var G__12627 = cljs.core.nnext(kvs);
          coll = G__12624;
          k = G__12625;
          v = G__12626;
          kvs = G__12627;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__12623 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        var G__12628__i = 0, G__12628__a = new Array(arguments.length - 3);
        while (G__12628__i < G__12628__a.length) {
          G__12628__a[G__12628__i] = arguments[G__12628__i + 3];
          ++G__12628__i;
        }
        kvs = new cljs.core.IndexedSeq(G__12628__a, 0);
      }
      return G__12623__delegate.call(this, coll, k, v, kvs);
    };
    G__12623.cljs$lang$maxFixedArity = 3;
    G__12623.cljs$lang$applyTo = function(arglist__12629) {
      var coll = cljs.core.first(arglist__12629);
      arglist__12629 = cljs.core.next(arglist__12629);
      var k = cljs.core.first(arglist__12629);
      arglist__12629 = cljs.core.next(arglist__12629);
      var v = cljs.core.first(arglist__12629);
      var kvs = cljs.core.rest(arglist__12629);
      return G__12623__delegate(coll, k, v, kvs);
    };
    G__12623.cljs$core$IFn$_invoke$arity$variadic = G__12623__delegate;
    return G__12623;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        var G__12630 = null;
        if (arguments.length > 3) {
          var G__12631__i = 0, G__12631__a = new Array(arguments.length - 3);
          while (G__12631__i < G__12631__a.length) {
            G__12631__a[G__12631__i] = arguments[G__12631__i + 3];
            ++G__12631__i;
          }
          G__12630 = new cljs.core.IndexedSeq(G__12631__a, 0);
        }
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, G__12630);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc(coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__12634__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
          if (cljs.core.truth_(ks)) {
            var G__12635 = ret;
            var G__12636 = cljs.core.first(ks);
            var G__12637 = cljs.core.next(ks);
            coll = G__12635;
            k = G__12636;
            ks = G__12637;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__12634 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__12638__i = 0, G__12638__a = new Array(arguments.length - 2);
        while (G__12638__i < G__12638__a.length) {
          G__12638__a[G__12638__i] = arguments[G__12638__i + 2];
          ++G__12638__i;
        }
        ks = new cljs.core.IndexedSeq(G__12638__a, 0);
      }
      return G__12634__delegate.call(this, coll, k, ks);
    };
    G__12634.cljs$lang$maxFixedArity = 2;
    G__12634.cljs$lang$applyTo = function(arglist__12639) {
      var coll = cljs.core.first(arglist__12639);
      arglist__12639 = cljs.core.next(arglist__12639);
      var k = cljs.core.first(arglist__12639);
      var ks = cljs.core.rest(arglist__12639);
      return G__12634__delegate(coll, k, ks);
    };
    G__12634.cljs$core$IFn$_invoke$arity$variadic = G__12634__delegate;
    return G__12634;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        var G__12640 = null;
        if (arguments.length > 2) {
          var G__12641__i = 0, G__12641__a = new Array(arguments.length - 2);
          while (G__12641__i < G__12641__a.length) {
            G__12641__a[G__12641__i] = arguments[G__12641__i + 2];
            ++G__12641__i;
          }
          G__12640 = new cljs.core.IndexedSeq(G__12641__a, 0);
        }
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, G__12640);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3829__auto__ = function() {
    var G__12646 = f;
    return goog.isFunction(G__12646);
  }();
  if (cljs.core.truth_(or__3829__auto__)) {
    return or__3829__auto__;
  } else {
    var G__12647 = f;
    if (G__12647) {
      var bit__4510__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3829__auto____$1 = bit__4510__auto__;
        if (cljs.core.truth_(or__3829__auto____$1)) {
          return or__3829__auto____$1;
        } else {
          return G__12647.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__12647.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__12647);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__12647);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.prototype.call = function() {
  var G__13113 = null;
  var G__13113__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__13113__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12649 = a;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__12649) : self__.afn.call(null, G__12649);
  };
  var G__13113__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12650 = a;
    var G__12651 = b;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__12650, G__12651) : self__.afn.call(null, G__12650, G__12651);
  };
  var G__13113__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12652 = a;
    var G__12653 = b;
    var G__12654 = c;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__12652, G__12653, G__12654) : self__.afn.call(null, G__12652, G__12653, G__12654);
  };
  var G__13113__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12655 = a;
    var G__12656 = b;
    var G__12657 = c;
    var G__12658 = d;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__12655, G__12656, G__12657, G__12658) : self__.afn.call(null, G__12655, G__12656, G__12657, G__12658);
  };
  var G__13113__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12659 = a;
    var G__12660 = b;
    var G__12661 = c;
    var G__12662 = d;
    var G__12663 = e;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__12659, G__12660, G__12661, G__12662, G__12663) : self__.afn.call(null, G__12659, G__12660, G__12661, G__12662, G__12663);
  };
  var G__13113__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12664 = a;
    var G__12665 = b;
    var G__12666 = c;
    var G__12667 = d;
    var G__12668 = e;
    var G__12669 = f;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__12664, G__12665, G__12666, G__12667, G__12668, G__12669) : self__.afn.call(null, G__12664, G__12665, G__12666, G__12667, G__12668, G__12669);
  };
  var G__13113__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12670 = a;
    var G__12671 = b;
    var G__12672 = c;
    var G__12673 = d;
    var G__12674 = e;
    var G__12675 = f;
    var G__12676 = g;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__12670, G__12671, G__12672, G__12673, G__12674, G__12675, G__12676) : self__.afn.call(null, G__12670, G__12671, G__12672, G__12673, G__12674, G__12675, G__12676);
  };
  var G__13113__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12677 = a;
    var G__12678 = b;
    var G__12679 = c;
    var G__12680 = d;
    var G__12681 = e;
    var G__12682 = f;
    var G__12683 = g;
    var G__12684 = h;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__12677, G__12678, G__12679, G__12680, G__12681, G__12682, G__12683, G__12684) : self__.afn.call(null, G__12677, G__12678, G__12679, G__12680, G__12681, G__12682, G__12683, G__12684);
  };
  var G__13113__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12685 = a;
    var G__12686 = b;
    var G__12687 = c;
    var G__12688 = d;
    var G__12689 = e;
    var G__12690 = f;
    var G__12691 = g;
    var G__12692 = h;
    var G__12693 = i;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__12685, G__12686, G__12687, G__12688, G__12689, G__12690, G__12691, G__12692, G__12693) : self__.afn.call(null, G__12685, G__12686, G__12687, G__12688, G__12689, G__12690, G__12691, G__12692, G__12693);
  };
  var G__13113__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12694 = a;
    var G__12695 = b;
    var G__12696 = c;
    var G__12697 = d;
    var G__12698 = e;
    var G__12699 = f;
    var G__12700 = g;
    var G__12701 = h;
    var G__12702 = i;
    var G__12703 = j;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__12694, G__12695, G__12696, G__12697, G__12698, G__12699, G__12700, G__12701, G__12702, G__12703) : self__.afn.call(null, G__12694, G__12695, G__12696, G__12697, G__12698, G__12699, G__12700, G__12701, G__12702, G__12703);
  };
  var G__13113__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12704 = a;
    var G__12705 = b;
    var G__12706 = c;
    var G__12707 = d;
    var G__12708 = e;
    var G__12709 = f;
    var G__12710 = g;
    var G__12711 = h;
    var G__12712 = i;
    var G__12713 = j;
    var G__12714 = k;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__12704, G__12705, G__12706, G__12707, G__12708, G__12709, G__12710, G__12711, G__12712, G__12713, G__12714) : self__.afn.call(null, G__12704, G__12705, G__12706, G__12707, G__12708, G__12709, G__12710, G__12711, G__12712, G__12713, G__12714);
  };
  var G__13113__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12715 = a;
    var G__12716 = b;
    var G__12717 = c;
    var G__12718 = d;
    var G__12719 = e;
    var G__12720 = f;
    var G__12721 = g;
    var G__12722 = h;
    var G__12723 = i;
    var G__12724 = j;
    var G__12725 = k;
    var G__12726 = l;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__12715, G__12716, G__12717, G__12718, G__12719, G__12720, G__12721, G__12722, G__12723, G__12724, G__12725, G__12726) : self__.afn.call(null, G__12715, G__12716, G__12717, G__12718, G__12719, G__12720, G__12721, G__12722, G__12723, G__12724, G__12725, G__12726);
  };
  var G__13113__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12727 = a;
    var G__12728 = b;
    var G__12729 = c;
    var G__12730 = d;
    var G__12731 = e;
    var G__12732 = f;
    var G__12733 = g;
    var G__12734 = h;
    var G__12735 = i;
    var G__12736 = j;
    var G__12737 = k;
    var G__12738 = l;
    var G__12739 = m;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__12727, G__12728, G__12729, G__12730, G__12731, G__12732, G__12733, G__12734, G__12735, G__12736, G__12737, G__12738, G__12739) : self__.afn.call(null, G__12727, G__12728, G__12729, G__12730, G__12731, G__12732, G__12733, G__12734, G__12735, G__12736, G__12737, G__12738, G__12739);
  };
  var G__13113__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12740 = a;
    var G__12741 = b;
    var G__12742 = c;
    var G__12743 = d;
    var G__12744 = e;
    var G__12745 = f;
    var G__12746 = g;
    var G__12747 = h;
    var G__12748 = i;
    var G__12749 = j;
    var G__12750 = k;
    var G__12751 = l;
    var G__12752 = m;
    var G__12753 = n;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__12740, G__12741, G__12742, G__12743, G__12744, G__12745, G__12746, G__12747, G__12748, G__12749, G__12750, G__12751, G__12752, G__12753) : self__.afn.call(null, G__12740, G__12741, G__12742, G__12743, G__12744, G__12745, G__12746, G__12747, G__12748, G__12749, G__12750, G__12751, G__12752, G__12753);
  };
  var G__13113__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12754 = a;
    var G__12755 = b;
    var G__12756 = c;
    var G__12757 = d;
    var G__12758 = e;
    var G__12759 = f;
    var G__12760 = g;
    var G__12761 = h;
    var G__12762 = i;
    var G__12763 = j;
    var G__12764 = k;
    var G__12765 = l;
    var G__12766 = m;
    var G__12767 = n;
    var G__12768 = o;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__12754, G__12755, G__12756, G__12757, G__12758, G__12759, G__12760, G__12761, G__12762, G__12763, G__12764, G__12765, G__12766, G__12767, G__12768) : self__.afn.call(null, G__12754, G__12755, G__12756, G__12757, G__12758, G__12759, G__12760, G__12761, G__12762, G__12763, G__12764, G__12765, G__12766, G__12767, G__12768);
  };
  var G__13113__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12769 = a;
    var G__12770 = b;
    var G__12771 = c;
    var G__12772 = d;
    var G__12773 = e;
    var G__12774 = f;
    var G__12775 = g;
    var G__12776 = h;
    var G__12777 = i;
    var G__12778 = j;
    var G__12779 = k;
    var G__12780 = l;
    var G__12781 = m;
    var G__12782 = n;
    var G__12783 = o;
    var G__12784 = p;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__12769, G__12770, G__12771, G__12772, G__12773, G__12774, G__12775, G__12776, G__12777, G__12778, G__12779, G__12780, G__12781, G__12782, G__12783, G__12784) : self__.afn.call(null, G__12769, G__12770, G__12771, G__12772, G__12773, G__12774, G__12775, G__12776, G__12777, G__12778, G__12779, G__12780, G__12781, G__12782, G__12783, G__12784);
  };
  var G__13113__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12785 = a;
    var G__12786 = b;
    var G__12787 = c;
    var G__12788 = d;
    var G__12789 = e;
    var G__12790 = f;
    var G__12791 = g;
    var G__12792 = h;
    var G__12793 = i;
    var G__12794 = j;
    var G__12795 = k;
    var G__12796 = l;
    var G__12797 = m;
    var G__12798 = n;
    var G__12799 = o;
    var G__12800 = p;
    var G__12801 = q;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__12785, G__12786, G__12787, G__12788, G__12789, G__12790, G__12791, G__12792, G__12793, G__12794, G__12795, G__12796, G__12797, G__12798, G__12799, G__12800, G__12801) : self__.afn.call(null, G__12785, G__12786, G__12787, G__12788, G__12789, G__12790, G__12791, G__12792, G__12793, G__12794, G__12795, G__12796, G__12797, G__12798, G__12799, G__12800, G__12801);
  };
  var G__13113__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12802 = a;
    var G__12803 = b;
    var G__12804 = c;
    var G__12805 = d;
    var G__12806 = e;
    var G__12807 = f;
    var G__12808 = g;
    var G__12809 = h;
    var G__12810 = i;
    var G__12811 = j;
    var G__12812 = k;
    var G__12813 = l;
    var G__12814 = m;
    var G__12815 = n;
    var G__12816 = o;
    var G__12817 = p;
    var G__12818 = q;
    var G__12819 = r;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__12802, G__12803, G__12804, G__12805, G__12806, G__12807, G__12808, G__12809, G__12810, G__12811, G__12812, G__12813, G__12814, G__12815, G__12816, G__12817, G__12818, G__12819) : self__.afn.call(null, G__12802, G__12803, G__12804, G__12805, G__12806, G__12807, G__12808, G__12809, G__12810, G__12811, G__12812, G__12813, G__12814, G__12815, G__12816, G__12817, G__12818, G__12819);
  };
  var G__13113__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12820 = a;
    var G__12821 = b;
    var G__12822 = c;
    var G__12823 = d;
    var G__12824 = e;
    var G__12825 = f;
    var G__12826 = g;
    var G__12827 = h;
    var G__12828 = i;
    var G__12829 = j;
    var G__12830 = k;
    var G__12831 = l;
    var G__12832 = m;
    var G__12833 = n;
    var G__12834 = o;
    var G__12835 = p;
    var G__12836 = q;
    var G__12837 = r;
    var G__12838 = s;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__12820, G__12821, G__12822, G__12823, G__12824, G__12825, G__12826, G__12827, G__12828, G__12829, G__12830, G__12831, G__12832, G__12833, G__12834, G__12835, G__12836, G__12837, G__12838) : self__.afn.call(null, G__12820, G__12821, G__12822, G__12823, G__12824, G__12825, G__12826, G__12827, G__12828, G__12829, G__12830, G__12831, G__12832, G__12833, G__12834, G__12835, G__12836, G__12837, G__12838);
  };
  var G__13113__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12839 = a;
    var G__12840 = b;
    var G__12841 = c;
    var G__12842 = d;
    var G__12843 = e;
    var G__12844 = f;
    var G__12845 = g;
    var G__12846 = h;
    var G__12847 = i;
    var G__12848 = j;
    var G__12849 = k;
    var G__12850 = l;
    var G__12851 = m;
    var G__12852 = n;
    var G__12853 = o;
    var G__12854 = p;
    var G__12855 = q;
    var G__12856 = r;
    var G__12857 = s;
    var G__12858 = t;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__12839, G__12840, G__12841, G__12842, G__12843, G__12844, G__12845, G__12846, G__12847, G__12848, G__12849, G__12850, G__12851, G__12852, G__12853, G__12854, G__12855, G__12856, G__12857, G__12858) : self__.afn.call(null, G__12839, G__12840, G__12841, G__12842, G__12843, G__12844, G__12845, G__12846, G__12847, G__12848, G__12849, G__12850, G__12851, G__12852, G__12853, G__12854, G__12855, G__12856, 
    G__12857, G__12858);
  };
  var G__13113__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__12859 = self__.afn;
    var G__12860 = a;
    var G__12861 = b;
    var G__12862 = c;
    var G__12863 = d;
    var G__12864 = e;
    var G__12865 = f;
    var G__12866 = g;
    var G__12867 = h;
    var G__12868 = i;
    var G__12869 = j;
    var G__12870 = k;
    var G__12871 = l;
    var G__12872 = m;
    var G__12873 = n;
    var G__12874 = o;
    var G__12875 = p;
    var G__12876 = q;
    var G__12877 = r;
    var G__12878 = s;
    var G__12879 = t;
    var G__12880 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__12859, G__12860, G__12861, G__12862, G__12863, G__12864, G__12865, G__12866, G__12867, G__12868, G__12869, G__12870, G__12871, G__12872, G__12873, G__12874, G__12875, G__12876, G__12877, G__12878, G__12879, G__12880) : cljs.core.apply.call(null, G__12859, G__12860, G__12861, G__12862, G__12863, G__12864, G__12865, G__12866, G__12867, G__12868, G__12869, G__12870, G__12871, G__12872, G__12873, 
    G__12874, G__12875, G__12876, G__12877, G__12878, G__12879, G__12880);
  };
  G__13113 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__13113__1.call(this, self__);
      case 2:
        return G__13113__2.call(this, self__, a);
      case 3:
        return G__13113__3.call(this, self__, a, b);
      case 4:
        return G__13113__4.call(this, self__, a, b, c);
      case 5:
        return G__13113__5.call(this, self__, a, b, c, d);
      case 6:
        return G__13113__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__13113__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__13113__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__13113__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__13113__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__13113__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__13113__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__13113__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__13113__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__13113__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__13113__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__13113__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__13113__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__13113__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__13113__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__13113__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__13113__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__13113.cljs$core$IFn$_invoke$arity$1 = G__13113__1;
  G__13113.cljs$core$IFn$_invoke$arity$2 = G__13113__2;
  G__13113.cljs$core$IFn$_invoke$arity$3 = G__13113__3;
  G__13113.cljs$core$IFn$_invoke$arity$4 = G__13113__4;
  G__13113.cljs$core$IFn$_invoke$arity$5 = G__13113__5;
  G__13113.cljs$core$IFn$_invoke$arity$6 = G__13113__6;
  G__13113.cljs$core$IFn$_invoke$arity$7 = G__13113__7;
  G__13113.cljs$core$IFn$_invoke$arity$8 = G__13113__8;
  G__13113.cljs$core$IFn$_invoke$arity$9 = G__13113__9;
  G__13113.cljs$core$IFn$_invoke$arity$10 = G__13113__10;
  G__13113.cljs$core$IFn$_invoke$arity$11 = G__13113__11;
  G__13113.cljs$core$IFn$_invoke$arity$12 = G__13113__12;
  G__13113.cljs$core$IFn$_invoke$arity$13 = G__13113__13;
  G__13113.cljs$core$IFn$_invoke$arity$14 = G__13113__14;
  G__13113.cljs$core$IFn$_invoke$arity$15 = G__13113__15;
  G__13113.cljs$core$IFn$_invoke$arity$16 = G__13113__16;
  G__13113.cljs$core$IFn$_invoke$arity$17 = G__13113__17;
  G__13113.cljs$core$IFn$_invoke$arity$18 = G__13113__18;
  G__13113.cljs$core$IFn$_invoke$arity$19 = G__13113__19;
  G__13113.cljs$core$IFn$_invoke$arity$20 = G__13113__20;
  G__13113.cljs$core$IFn$_invoke$arity$21 = G__13113__21;
  G__13113.cljs$core$IFn$_invoke$arity$22 = G__13113__22;
  return G__13113;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args12648) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args12648)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  var G__12881 = a;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__12881) : self__.afn.call(null, G__12881);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  var G__12882 = a;
  var G__12883 = b;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__12882, G__12883) : self__.afn.call(null, G__12882, G__12883);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  var G__12884 = a;
  var G__12885 = b;
  var G__12886 = c;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__12884, G__12885, G__12886) : self__.afn.call(null, G__12884, G__12885, G__12886);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  var G__12887 = a;
  var G__12888 = b;
  var G__12889 = c;
  var G__12890 = d;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__12887, G__12888, G__12889, G__12890) : self__.afn.call(null, G__12887, G__12888, G__12889, G__12890);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  var G__12891 = a;
  var G__12892 = b;
  var G__12893 = c;
  var G__12894 = d;
  var G__12895 = e;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__12891, G__12892, G__12893, G__12894, G__12895) : self__.afn.call(null, G__12891, G__12892, G__12893, G__12894, G__12895);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  var G__12896 = a;
  var G__12897 = b;
  var G__12898 = c;
  var G__12899 = d;
  var G__12900 = e;
  var G__12901 = f;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__12896, G__12897, G__12898, G__12899, G__12900, G__12901) : self__.afn.call(null, G__12896, G__12897, G__12898, G__12899, G__12900, G__12901);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  var G__12902 = a;
  var G__12903 = b;
  var G__12904 = c;
  var G__12905 = d;
  var G__12906 = e;
  var G__12907 = f;
  var G__12908 = g;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__12902, G__12903, G__12904, G__12905, G__12906, G__12907, G__12908) : self__.afn.call(null, G__12902, G__12903, G__12904, G__12905, G__12906, G__12907, G__12908);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  var G__12909 = a;
  var G__12910 = b;
  var G__12911 = c;
  var G__12912 = d;
  var G__12913 = e;
  var G__12914 = f;
  var G__12915 = g;
  var G__12916 = h;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__12909, G__12910, G__12911, G__12912, G__12913, G__12914, G__12915, G__12916) : self__.afn.call(null, G__12909, G__12910, G__12911, G__12912, G__12913, G__12914, G__12915, G__12916);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  var G__12917 = a;
  var G__12918 = b;
  var G__12919 = c;
  var G__12920 = d;
  var G__12921 = e;
  var G__12922 = f;
  var G__12923 = g;
  var G__12924 = h;
  var G__12925 = i;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__12917, G__12918, G__12919, G__12920, G__12921, G__12922, G__12923, G__12924, G__12925) : self__.afn.call(null, G__12917, G__12918, G__12919, G__12920, G__12921, G__12922, G__12923, G__12924, G__12925);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  var G__12926 = a;
  var G__12927 = b;
  var G__12928 = c;
  var G__12929 = d;
  var G__12930 = e;
  var G__12931 = f;
  var G__12932 = g;
  var G__12933 = h;
  var G__12934 = i;
  var G__12935 = j;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__12926, G__12927, G__12928, G__12929, G__12930, G__12931, G__12932, G__12933, G__12934, G__12935) : self__.afn.call(null, G__12926, G__12927, G__12928, G__12929, G__12930, G__12931, G__12932, G__12933, G__12934, G__12935);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  var G__12936 = a;
  var G__12937 = b;
  var G__12938 = c;
  var G__12939 = d;
  var G__12940 = e;
  var G__12941 = f;
  var G__12942 = g;
  var G__12943 = h;
  var G__12944 = i;
  var G__12945 = j;
  var G__12946 = k;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__12936, G__12937, G__12938, G__12939, G__12940, G__12941, G__12942, G__12943, G__12944, G__12945, G__12946) : self__.afn.call(null, G__12936, G__12937, G__12938, G__12939, G__12940, G__12941, G__12942, G__12943, G__12944, G__12945, G__12946);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  var G__12947 = a;
  var G__12948 = b;
  var G__12949 = c;
  var G__12950 = d;
  var G__12951 = e;
  var G__12952 = f;
  var G__12953 = g;
  var G__12954 = h;
  var G__12955 = i;
  var G__12956 = j;
  var G__12957 = k;
  var G__12958 = l;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__12947, G__12948, G__12949, G__12950, G__12951, G__12952, G__12953, G__12954, G__12955, G__12956, G__12957, G__12958) : self__.afn.call(null, G__12947, G__12948, G__12949, G__12950, G__12951, G__12952, G__12953, G__12954, G__12955, G__12956, G__12957, G__12958);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  var G__12959 = a;
  var G__12960 = b;
  var G__12961 = c;
  var G__12962 = d;
  var G__12963 = e;
  var G__12964 = f;
  var G__12965 = g;
  var G__12966 = h;
  var G__12967 = i;
  var G__12968 = j;
  var G__12969 = k;
  var G__12970 = l;
  var G__12971 = m;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__12959, G__12960, G__12961, G__12962, G__12963, G__12964, G__12965, G__12966, G__12967, G__12968, G__12969, G__12970, G__12971) : self__.afn.call(null, G__12959, G__12960, G__12961, G__12962, G__12963, G__12964, G__12965, G__12966, G__12967, G__12968, G__12969, G__12970, G__12971);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  var G__12972 = a;
  var G__12973 = b;
  var G__12974 = c;
  var G__12975 = d;
  var G__12976 = e;
  var G__12977 = f;
  var G__12978 = g;
  var G__12979 = h;
  var G__12980 = i;
  var G__12981 = j;
  var G__12982 = k;
  var G__12983 = l;
  var G__12984 = m;
  var G__12985 = n;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__12972, G__12973, G__12974, G__12975, G__12976, G__12977, G__12978, G__12979, G__12980, G__12981, G__12982, G__12983, G__12984, G__12985) : self__.afn.call(null, G__12972, G__12973, G__12974, G__12975, G__12976, G__12977, G__12978, G__12979, G__12980, G__12981, G__12982, G__12983, G__12984, G__12985);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  var G__12986 = a;
  var G__12987 = b;
  var G__12988 = c;
  var G__12989 = d;
  var G__12990 = e;
  var G__12991 = f;
  var G__12992 = g;
  var G__12993 = h;
  var G__12994 = i;
  var G__12995 = j;
  var G__12996 = k;
  var G__12997 = l;
  var G__12998 = m;
  var G__12999 = n;
  var G__13000 = o;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__12986, G__12987, G__12988, G__12989, G__12990, G__12991, G__12992, G__12993, G__12994, G__12995, G__12996, G__12997, G__12998, G__12999, G__13000) : self__.afn.call(null, G__12986, G__12987, G__12988, G__12989, G__12990, G__12991, G__12992, G__12993, G__12994, G__12995, G__12996, G__12997, G__12998, G__12999, G__13000);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  var G__13001 = a;
  var G__13002 = b;
  var G__13003 = c;
  var G__13004 = d;
  var G__13005 = e;
  var G__13006 = f;
  var G__13007 = g;
  var G__13008 = h;
  var G__13009 = i;
  var G__13010 = j;
  var G__13011 = k;
  var G__13012 = l;
  var G__13013 = m;
  var G__13014 = n;
  var G__13015 = o;
  var G__13016 = p;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__13001, G__13002, G__13003, G__13004, G__13005, G__13006, G__13007, G__13008, G__13009, G__13010, G__13011, G__13012, G__13013, G__13014, G__13015, G__13016) : self__.afn.call(null, G__13001, G__13002, G__13003, G__13004, G__13005, G__13006, G__13007, G__13008, G__13009, G__13010, G__13011, G__13012, G__13013, G__13014, G__13015, G__13016);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  var G__13017 = a;
  var G__13018 = b;
  var G__13019 = c;
  var G__13020 = d;
  var G__13021 = e;
  var G__13022 = f;
  var G__13023 = g;
  var G__13024 = h;
  var G__13025 = i;
  var G__13026 = j;
  var G__13027 = k;
  var G__13028 = l;
  var G__13029 = m;
  var G__13030 = n;
  var G__13031 = o;
  var G__13032 = p;
  var G__13033 = q;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__13017, G__13018, G__13019, G__13020, G__13021, G__13022, G__13023, G__13024, G__13025, G__13026, G__13027, G__13028, G__13029, G__13030, G__13031, G__13032, G__13033) : self__.afn.call(null, G__13017, G__13018, G__13019, G__13020, G__13021, G__13022, G__13023, G__13024, G__13025, G__13026, G__13027, G__13028, G__13029, G__13030, G__13031, G__13032, G__13033);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  var G__13034 = a;
  var G__13035 = b;
  var G__13036 = c;
  var G__13037 = d;
  var G__13038 = e;
  var G__13039 = f;
  var G__13040 = g;
  var G__13041 = h;
  var G__13042 = i;
  var G__13043 = j;
  var G__13044 = k;
  var G__13045 = l;
  var G__13046 = m;
  var G__13047 = n;
  var G__13048 = o;
  var G__13049 = p;
  var G__13050 = q;
  var G__13051 = r;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__13034, G__13035, G__13036, G__13037, G__13038, G__13039, G__13040, G__13041, G__13042, G__13043, G__13044, G__13045, G__13046, G__13047, G__13048, G__13049, G__13050, G__13051) : self__.afn.call(null, G__13034, G__13035, G__13036, G__13037, G__13038, G__13039, G__13040, G__13041, G__13042, G__13043, G__13044, G__13045, G__13046, G__13047, G__13048, G__13049, G__13050, G__13051);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  var G__13052 = a;
  var G__13053 = b;
  var G__13054 = c;
  var G__13055 = d;
  var G__13056 = e;
  var G__13057 = f;
  var G__13058 = g;
  var G__13059 = h;
  var G__13060 = i;
  var G__13061 = j;
  var G__13062 = k;
  var G__13063 = l;
  var G__13064 = m;
  var G__13065 = n;
  var G__13066 = o;
  var G__13067 = p;
  var G__13068 = q;
  var G__13069 = r;
  var G__13070 = s;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__13052, G__13053, G__13054, G__13055, G__13056, G__13057, G__13058, G__13059, G__13060, G__13061, G__13062, G__13063, G__13064, G__13065, G__13066, G__13067, G__13068, G__13069, G__13070) : self__.afn.call(null, G__13052, G__13053, G__13054, G__13055, G__13056, G__13057, G__13058, G__13059, G__13060, G__13061, G__13062, G__13063, G__13064, G__13065, G__13066, G__13067, G__13068, G__13069, G__13070);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  var G__13071 = a;
  var G__13072 = b;
  var G__13073 = c;
  var G__13074 = d;
  var G__13075 = e;
  var G__13076 = f;
  var G__13077 = g;
  var G__13078 = h;
  var G__13079 = i;
  var G__13080 = j;
  var G__13081 = k;
  var G__13082 = l;
  var G__13083 = m;
  var G__13084 = n;
  var G__13085 = o;
  var G__13086 = p;
  var G__13087 = q;
  var G__13088 = r;
  var G__13089 = s;
  var G__13090 = t;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__13071, G__13072, G__13073, G__13074, G__13075, G__13076, G__13077, G__13078, G__13079, G__13080, G__13081, G__13082, G__13083, G__13084, G__13085, G__13086, G__13087, G__13088, G__13089, G__13090) : self__.afn.call(null, G__13071, G__13072, G__13073, G__13074, G__13075, G__13076, G__13077, G__13078, G__13079, G__13080, G__13081, G__13082, G__13083, G__13084, G__13085, G__13086, G__13087, G__13088, G__13089, 
  G__13090);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__13091 = self__.afn;
  var G__13092 = a;
  var G__13093 = b;
  var G__13094 = c;
  var G__13095 = d;
  var G__13096 = e;
  var G__13097 = f;
  var G__13098 = g;
  var G__13099 = h;
  var G__13100 = i;
  var G__13101 = j;
  var G__13102 = k;
  var G__13103 = l;
  var G__13104 = m;
  var G__13105 = n;
  var G__13106 = o;
  var G__13107 = p;
  var G__13108 = q;
  var G__13109 = r;
  var G__13110 = s;
  var G__13111 = t;
  var G__13112 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__13091, G__13092, G__13093, G__13094, G__13095, G__13096, G__13097, G__13098, G__13099, G__13100, G__13101, G__13102, G__13103, G__13104, G__13105, G__13106, G__13107, G__13108, G__13109, G__13110, G__13111, G__13112) : cljs.core.apply.call(null, G__13091, G__13092, G__13093, G__13094, G__13095, G__13096, G__13097, G__13098, G__13099, G__13100, G__13101, G__13102, G__13103, G__13104, G__13105, 
  G__13106, G__13107, G__13108, G__13109, G__13110, G__13111, G__13112);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_(o) && !function() {
    var G__13117 = o;
    if (G__13117) {
      var bit__4510__auto__ = G__13117.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4510__auto__ || G__13117.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__13117.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__13117);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__13117);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3817__auto__ = !(o == null);
    if (and__3817__auto__) {
      var G__13121 = o;
      if (G__13121) {
        var bit__4510__auto__ = G__13121.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4510__auto__ || G__13121.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__13121.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__13121);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__13121);
      }
    } else {
      return and__3817__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin(coll, k);
    }
  };
  var disj__3 = function() {
    var G__13124__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.cljs$core$IFn$_invoke$arity$2(coll, k);
          if (cljs.core.truth_(ks)) {
            var G__13125 = ret;
            var G__13126 = cljs.core.first(ks);
            var G__13127 = cljs.core.next(ks);
            coll = G__13125;
            k = G__13126;
            ks = G__13127;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__13124 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__13128__i = 0, G__13128__a = new Array(arguments.length - 2);
        while (G__13128__i < G__13128__a.length) {
          G__13128__a[G__13128__i] = arguments[G__13128__i + 2];
          ++G__13128__i;
        }
        ks = new cljs.core.IndexedSeq(G__13128__a, 0);
      }
      return G__13124__delegate.call(this, coll, k, ks);
    };
    G__13124.cljs$lang$maxFixedArity = 2;
    G__13124.cljs$lang$applyTo = function(arglist__13129) {
      var coll = cljs.core.first(arglist__13129);
      arglist__13129 = cljs.core.next(arglist__13129);
      var k = cljs.core.first(arglist__13129);
      var ks = cljs.core.rest(arglist__13129);
      return G__13124__delegate(coll, k, ks);
    };
    G__13124.cljs$core$IFn$_invoke$arity$variadic = G__13124__delegate;
    return G__13124;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        var G__13130 = null;
        if (arguments.length > 2) {
          var G__13131__i = 0, G__13131__a = new Array(arguments.length - 2);
          while (G__13131__i < G__13131__a.length) {
            G__13131__a[G__13131__i] = arguments[G__13131__i + 2];
            ++G__13131__i;
          }
          G__13130 = new cljs.core.IndexedSeq(G__13131__a, 0);
        }
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, G__13130);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__13133 = x;
    if (G__13133) {
      var bit__4510__auto__ = G__13133.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4510__auto__ || G__13133.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__13133.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__13133);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__13133);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__13135 = x;
    if (G__13135) {
      var bit__4510__auto__ = G__13135.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4510__auto__ || G__13135.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__13135.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__13135);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__13135);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__13137 = x;
  if (G__13137) {
    var bit__4510__auto__ = G__13137.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4510__auto__ || G__13137.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__13137.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__13137);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__13137);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__13139 = x;
  if (G__13139) {
    var bit__4510__auto__ = G__13139.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4510__auto__ || G__13139.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__13139.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__13139);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__13139);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__13141 = x;
  if (G__13141) {
    var bit__4510__auto__ = G__13141.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4510__auto__ || G__13141.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__13141.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__13141);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__13141);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__13143 = x;
  if (G__13143) {
    var bit__4510__auto__ = G__13143.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4510__auto__ || G__13143.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__13143.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__13143);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__13143);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__13145 = x;
    if (G__13145) {
      var bit__4510__auto__ = G__13145.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4510__auto__ || G__13145.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__13145.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__13145);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__13145);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__13147 = x;
  if (G__13147) {
    var bit__4510__auto__ = G__13147.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4510__auto__ || G__13147.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__13147.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__13147);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__13147);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__13149 = x;
  if (G__13149) {
    var bit__4503__auto__ = G__13149.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4503__auto__ || G__13149.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj13155 = {};
    return obj13155;
  };
  var js_obj__1 = function() {
    var G__13158__delegate = function(keyvals) {
      var G__13156 = goog.object.create;
      var G__13157 = keyvals;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(G__13156, G__13157) : cljs.core.apply.call(null, G__13156, G__13157);
    };
    var G__13158 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        var G__13159__i = 0, G__13159__a = new Array(arguments.length - 0);
        while (G__13159__i < G__13159__a.length) {
          G__13159__a[G__13159__i] = arguments[G__13159__i + 0];
          ++G__13159__i;
        }
        keyvals = new cljs.core.IndexedSeq(G__13159__a, 0);
      }
      return G__13158__delegate.call(this, keyvals);
    };
    G__13158.cljs$lang$maxFixedArity = 0;
    G__13158.cljs$lang$applyTo = function(arglist__13160) {
      var keyvals = cljs.core.seq(arglist__13160);
      return G__13158__delegate(keyvals);
    };
    G__13158.cljs$core$IFn$_invoke$arity$variadic = G__13158__delegate;
    return G__13158;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        var G__13161 = null;
        if (arguments.length > 0) {
          var G__13162__i = 0, G__13162__a = new Array(arguments.length - 0);
          while (G__13162__i < G__13162__a.length) {
            G__13162__a[G__13162__i] = arguments[G__13162__i + 0];
            ++G__13162__i;
          }
          G__13161 = new cljs.core.IndexedSeq(G__13162__a, 0);
        }
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(G__13161);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  var G__13165_13167 = obj;
  var G__13166_13168 = function(G__13165_13167, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__13165_13167, keys);
  goog.object.forEach(G__13165_13167, G__13166_13168);
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__13169 = i__$1 + 1;
      var G__13170 = j__$1 + 1;
      var G__13171 = len__$1 - 1;
      i__$1 = G__13169;
      j__$1 = G__13170;
      len__$1 = G__13171;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__13172 = i__$1 - 1;
      var G__13173 = j__$1 - 1;
      var G__13174 = len__$1 - 1;
      i__$1 = G__13172;
      j__$1 = G__13173;
      len__$1 = G__13174;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj13176 = {};
  return obj13176;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__13178 = s;
    if (G__13178) {
      var bit__4510__auto__ = G__13178.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4510__auto__ || G__13178.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__13178.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__13178);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__13178);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__13180 = s;
  if (G__13180) {
    var bit__4510__auto__ = G__13180.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4510__auto__ || G__13180.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__13180.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__13180);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__13180);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3829__auto__ = cljs.core.fn_QMARK_(f);
  if (or__3829__auto__) {
    return or__3829__auto__;
  } else {
    var G__13184 = f;
    if (G__13184) {
      var bit__4510__auto__ = G__13184.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4510__auto__ || G__13184.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__13184.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__13184);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__13184);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && cljs.core.not(function() {
    var G__13197 = n;
    return isNaN(G__13197);
  }()) && !(n === Infinity) && function() {
    var G__13198 = n;
    return parseFloat(G__13198);
  }() === function() {
    var G__13199 = n;
    var G__13200 = 10;
    return parseInt(G__13199, G__13200);
  }();
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__13201__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first(xs);
          var etc = cljs.core.next(xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_(s, x__$1)) {
              return false;
            } else {
              var G__13202 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
              var G__13203 = etc;
              s = G__13202;
              xs = G__13203;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__13201 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13204__i = 0, G__13204__a = new Array(arguments.length - 2);
        while (G__13204__i < G__13204__a.length) {
          G__13204__a[G__13204__i] = arguments[G__13204__i + 2];
          ++G__13204__i;
        }
        more = new cljs.core.IndexedSeq(G__13204__a, 0);
      }
      return G__13201__delegate.call(this, x, y, more);
    };
    G__13201.cljs$lang$maxFixedArity = 2;
    G__13201.cljs$lang$applyTo = function(arglist__13205) {
      var x = cljs.core.first(arglist__13205);
      arglist__13205 = cljs.core.next(arglist__13205);
      var y = cljs.core.first(arglist__13205);
      var more = cljs.core.rest(arglist__13205);
      return G__13201__delegate(x, y, more);
    };
    G__13201.cljs$core$IFn$_invoke$arity$variadic = G__13201__delegate;
    return G__13201;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        var G__13206 = null;
        if (arguments.length > 2) {
          var G__13207__i = 0, G__13207__a = new Array(arguments.length - 2);
          while (G__13207__i < G__13207__a.length) {
            G__13207__a[G__13207__i] = arguments[G__13207__i + 2];
            ++G__13207__i;
          }
          G__13206 = new cljs.core.IndexedSeq(G__13207__a, 0);
        }
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13206);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type(x) === cljs.core.type(y)) {
          if (function() {
            var G__13211 = x;
            if (G__13211) {
              var bit__4503__auto__ = G__13211.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4503__auto__ || G__13211.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return x.cljs$core$IComparable$_compare$arity$2(null, y);
          } else {
            var G__13212 = x;
            var G__13213 = y;
            return goog.array.defaultCompare(G__13212, G__13213);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count(xs);
    var yl = cljs.core.count(ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        return compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
      if (d === 0 && n + 1 < len) {
        var G__13218 = xs;
        var G__13219 = ys;
        var G__13220 = len;
        var G__13221 = n + 1;
        xs = G__13218;
        ys = G__13219;
        len = G__13220;
        n = G__13221;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = function() {
        var G__13226 = x;
        var G__13227 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__13226, G__13227) : f.call(null, G__13226, G__13227);
      }();
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(function() {
            var G__13228 = y;
            var G__13229 = x;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__13228, G__13229) : f.call(null, G__13228, G__13229);
          }())) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq(coll)) {
      var a = function() {
        var G__13235 = coll;
        return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__13235) : cljs.core.to_array.call(null, G__13235);
      }();
      var G__13236_13238 = a;
      var G__13237_13239 = cljs.core.fn__GT_comparator(comp);
      goog.array.stableSort(G__13236_13238, G__13237_13239);
      return cljs.core.seq(a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
      return cljs.core.fn__GT_comparator(comp).call(null, function() {
        var G__13245 = x;
        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__13245) : keyfn.call(null, G__13245);
      }(), function() {
        var G__13246 = y;
        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__13246) : keyfn.call(null, G__13246);
      }());
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq(coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      var G__13252 = f;
      var G__13253 = cljs.core.first(s);
      var G__13254 = cljs.core.next(s);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__13252, G__13253, G__13254) : cljs.core.reduce.call(null, G__13252, G__13253, G__13254);
    } else {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq(coll);
    while (true) {
      if (coll__$1) {
        var nval = function() {
          var G__13255 = val__$1;
          var G__13256 = cljs.core.first(coll__$1);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__13255, G__13256) : f.call(null, G__13255, G__13256);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__13257 = nval;
          var G__13258 = cljs.core.next(coll__$1);
          val__$1 = G__13257;
          coll__$1 = G__13258;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = function() {
    var G__13262 = coll;
    return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__13262) : cljs.core.to_array.call(null, G__13262);
  }();
  var G__13263_13265 = a;
  goog.array.shuffle(G__13263_13265);
  var G__13264 = a;
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(G__13264) : cljs.core.vec.call(null, G__13264);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__13268 = coll;
      if (G__13268) {
        var bit__4503__auto__ = G__13268.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4503__auto__ || G__13268.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
            return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__13269 = coll;
      if (G__13269) {
        var bit__4503__auto__ = G__13269.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4503__auto__ || G__13269.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
            return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.completing = function() {
  var completing = null;
  var completing__1 = function(f) {
    return completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
  };
  var completing__2 = function(f, cf) {
    return function() {
      var G__13278 = null;
      var G__13278__0 = function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      };
      var G__13278__1 = function(x) {
        var G__13275 = x;
        return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(G__13275) : cf.call(null, G__13275);
      };
      var G__13278__2 = function(x, y) {
        var G__13276 = x;
        var G__13277 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__13276, G__13277) : f.call(null, G__13276, G__13277);
      };
      G__13278 = function(x, y) {
        switch(arguments.length) {
          case 0:
            return G__13278__0.call(this);
          case 1:
            return G__13278__1.call(this, x);
          case 2:
            return G__13278__2.call(this, x, y);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__13278.cljs$core$IFn$_invoke$arity$0 = G__13278__0;
      G__13278.cljs$core$IFn$_invoke$arity$1 = G__13278__1;
      G__13278.cljs$core$IFn$_invoke$arity$2 = G__13278__2;
      return G__13278;
    }();
  };
  completing = function(f, cf) {
    switch(arguments.length) {
      case 1:
        return completing__1.call(this, f);
      case 2:
        return completing__2.call(this, f, cf);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  completing.cljs$core$IFn$_invoke$arity$1 = completing__1;
  completing.cljs$core$IFn$_invoke$arity$2 = completing__2;
  return completing;
}();
cljs.core.transduce = function() {
  var transduce = null;
  var transduce__3 = function(xform, f, coll) {
    return transduce.cljs$core$IFn$_invoke$arity$4(xform, f, function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }(), coll);
  };
  var transduce__4 = function(xform, f, init, coll) {
    var f__$1 = function() {
      var G__13285 = f;
      return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__13285) : xform.call(null, G__13285);
    }();
    var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
    var G__13286 = ret;
    return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(G__13286) : f__$1.call(null, G__13286);
  };
  transduce = function(xform, f, init, coll) {
    switch(arguments.length) {
      case 3:
        return transduce__3.call(this, xform, f, init);
      case 4:
        return transduce__4.call(this, xform, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transduce.cljs$core$IFn$_invoke$arity$3 = transduce__3;
  transduce.cljs$core$IFn$_invoke$arity$4 = transduce__4;
  return transduce;
}();
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__13287__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_PLUS_, x + y, more);
    };
    var G__13287 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13288__i = 0, G__13288__a = new Array(arguments.length - 2);
        while (G__13288__i < G__13288__a.length) {
          G__13288__a[G__13288__i] = arguments[G__13288__i + 2];
          ++G__13288__i;
        }
        more = new cljs.core.IndexedSeq(G__13288__a, 0);
      }
      return G__13287__delegate.call(this, x, y, more);
    };
    G__13287.cljs$lang$maxFixedArity = 2;
    G__13287.cljs$lang$applyTo = function(arglist__13289) {
      var x = cljs.core.first(arglist__13289);
      arglist__13289 = cljs.core.next(arglist__13289);
      var y = cljs.core.first(arglist__13289);
      var more = cljs.core.rest(arglist__13289);
      return G__13287__delegate(x, y, more);
    };
    G__13287.cljs$core$IFn$_invoke$arity$variadic = G__13287__delegate;
    return G__13287;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        var G__13290 = null;
        if (arguments.length > 2) {
          var G__13291__i = 0, G__13291__a = new Array(arguments.length - 2);
          while (G__13291__i < G__13291__a.length) {
            G__13291__a[G__13291__i] = arguments[G__13291__i + 2];
            ++G__13291__i;
          }
          G__13290 = new cljs.core.IndexedSeq(G__13291__a, 0);
        }
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13290);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__13292__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_, x - y, more);
    };
    var G__13292 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13293__i = 0, G__13293__a = new Array(arguments.length - 2);
        while (G__13293__i < G__13293__a.length) {
          G__13293__a[G__13293__i] = arguments[G__13293__i + 2];
          ++G__13293__i;
        }
        more = new cljs.core.IndexedSeq(G__13293__a, 0);
      }
      return G__13292__delegate.call(this, x, y, more);
    };
    G__13292.cljs$lang$maxFixedArity = 2;
    G__13292.cljs$lang$applyTo = function(arglist__13294) {
      var x = cljs.core.first(arglist__13294);
      arglist__13294 = cljs.core.next(arglist__13294);
      var y = cljs.core.first(arglist__13294);
      var more = cljs.core.rest(arglist__13294);
      return G__13292__delegate(x, y, more);
    };
    G__13292.cljs$core$IFn$_invoke$arity$variadic = G__13292__delegate;
    return G__13292;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        var G__13295 = null;
        if (arguments.length > 2) {
          var G__13296__i = 0, G__13296__a = new Array(arguments.length - 2);
          while (G__13296__i < G__13296__a.length) {
            G__13296__a[G__13296__i] = arguments[G__13296__i + 2];
            ++G__13296__i;
          }
          G__13295 = new cljs.core.IndexedSeq(G__13296__a, 0);
        }
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13295);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__13297__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_STAR_, x * y, more);
    };
    var G__13297 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13298__i = 0, G__13298__a = new Array(arguments.length - 2);
        while (G__13298__i < G__13298__a.length) {
          G__13298__a[G__13298__i] = arguments[G__13298__i + 2];
          ++G__13298__i;
        }
        more = new cljs.core.IndexedSeq(G__13298__a, 0);
      }
      return G__13297__delegate.call(this, x, y, more);
    };
    G__13297.cljs$lang$maxFixedArity = 2;
    G__13297.cljs$lang$applyTo = function(arglist__13299) {
      var x = cljs.core.first(arglist__13299);
      arglist__13299 = cljs.core.next(arglist__13299);
      var y = cljs.core.first(arglist__13299);
      var more = cljs.core.rest(arglist__13299);
      return G__13297__delegate(x, y, more);
    };
    G__13297.cljs$core$IFn$_invoke$arity$variadic = G__13297__delegate;
    return G__13297;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        var G__13300 = null;
        if (arguments.length > 2) {
          var G__13301__i = 0, G__13301__a = new Array(arguments.length - 2);
          while (G__13301__i < G__13301__a.length) {
            G__13301__a[G__13301__i] = arguments[G__13301__i + 2];
            ++G__13301__i;
          }
          G__13300 = new cljs.core.IndexedSeq(G__13301__a, 0);
        }
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13300);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.cljs$core$IFn$_invoke$arity$2(1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__13306__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_SLASH_, _SLASH_.cljs$core$IFn$_invoke$arity$2(x, y), more);
    };
    var G__13306 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13307__i = 0, G__13307__a = new Array(arguments.length - 2);
        while (G__13307__i < G__13307__a.length) {
          G__13307__a[G__13307__i] = arguments[G__13307__i + 2];
          ++G__13307__i;
        }
        more = new cljs.core.IndexedSeq(G__13307__a, 0);
      }
      return G__13306__delegate.call(this, x, y, more);
    };
    G__13306.cljs$lang$maxFixedArity = 2;
    G__13306.cljs$lang$applyTo = function(arglist__13308) {
      var x = cljs.core.first(arglist__13308);
      arglist__13308 = cljs.core.next(arglist__13308);
      var y = cljs.core.first(arglist__13308);
      var more = cljs.core.rest(arglist__13308);
      return G__13306__delegate(x, y, more);
    };
    G__13306.cljs$core$IFn$_invoke$arity$variadic = G__13306__delegate;
    return G__13306;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        var G__13309 = null;
        if (arguments.length > 2) {
          var G__13310__i = 0, G__13310__a = new Array(arguments.length - 2);
          while (G__13310__i < G__13310__a.length) {
            G__13310__a[G__13310__i] = arguments[G__13310__i + 2];
            ++G__13310__i;
          }
          G__13309 = new cljs.core.IndexedSeq(G__13310__a, 0);
        }
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13309);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__13311__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next(more)) {
            var G__13312 = y;
            var G__13313 = cljs.core.first(more);
            var G__13314 = cljs.core.next(more);
            x = G__13312;
            y = G__13313;
            more = G__13314;
            continue;
          } else {
            return y < cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__13311 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13315__i = 0, G__13315__a = new Array(arguments.length - 2);
        while (G__13315__i < G__13315__a.length) {
          G__13315__a[G__13315__i] = arguments[G__13315__i + 2];
          ++G__13315__i;
        }
        more = new cljs.core.IndexedSeq(G__13315__a, 0);
      }
      return G__13311__delegate.call(this, x, y, more);
    };
    G__13311.cljs$lang$maxFixedArity = 2;
    G__13311.cljs$lang$applyTo = function(arglist__13316) {
      var x = cljs.core.first(arglist__13316);
      arglist__13316 = cljs.core.next(arglist__13316);
      var y = cljs.core.first(arglist__13316);
      var more = cljs.core.rest(arglist__13316);
      return G__13311__delegate(x, y, more);
    };
    G__13311.cljs$core$IFn$_invoke$arity$variadic = G__13311__delegate;
    return G__13311;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        var G__13317 = null;
        if (arguments.length > 2) {
          var G__13318__i = 0, G__13318__a = new Array(arguments.length - 2);
          while (G__13318__i < G__13318__a.length) {
            G__13318__a[G__13318__i] = arguments[G__13318__i + 2];
            ++G__13318__i;
          }
          G__13317 = new cljs.core.IndexedSeq(G__13318__a, 0);
        }
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13317);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__13319__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next(more)) {
            var G__13320 = y;
            var G__13321 = cljs.core.first(more);
            var G__13322 = cljs.core.next(more);
            x = G__13320;
            y = G__13321;
            more = G__13322;
            continue;
          } else {
            return y <= cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__13319 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13323__i = 0, G__13323__a = new Array(arguments.length - 2);
        while (G__13323__i < G__13323__a.length) {
          G__13323__a[G__13323__i] = arguments[G__13323__i + 2];
          ++G__13323__i;
        }
        more = new cljs.core.IndexedSeq(G__13323__a, 0);
      }
      return G__13319__delegate.call(this, x, y, more);
    };
    G__13319.cljs$lang$maxFixedArity = 2;
    G__13319.cljs$lang$applyTo = function(arglist__13324) {
      var x = cljs.core.first(arglist__13324);
      arglist__13324 = cljs.core.next(arglist__13324);
      var y = cljs.core.first(arglist__13324);
      var more = cljs.core.rest(arglist__13324);
      return G__13319__delegate(x, y, more);
    };
    G__13319.cljs$core$IFn$_invoke$arity$variadic = G__13319__delegate;
    return G__13319;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        var G__13325 = null;
        if (arguments.length > 2) {
          var G__13326__i = 0, G__13326__a = new Array(arguments.length - 2);
          while (G__13326__i < G__13326__a.length) {
            G__13326__a[G__13326__i] = arguments[G__13326__i + 2];
            ++G__13326__i;
          }
          G__13325 = new cljs.core.IndexedSeq(G__13326__a, 0);
        }
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13325);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__13327__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next(more)) {
            var G__13328 = y;
            var G__13329 = cljs.core.first(more);
            var G__13330 = cljs.core.next(more);
            x = G__13328;
            y = G__13329;
            more = G__13330;
            continue;
          } else {
            return y > cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__13327 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13331__i = 0, G__13331__a = new Array(arguments.length - 2);
        while (G__13331__i < G__13331__a.length) {
          G__13331__a[G__13331__i] = arguments[G__13331__i + 2];
          ++G__13331__i;
        }
        more = new cljs.core.IndexedSeq(G__13331__a, 0);
      }
      return G__13327__delegate.call(this, x, y, more);
    };
    G__13327.cljs$lang$maxFixedArity = 2;
    G__13327.cljs$lang$applyTo = function(arglist__13332) {
      var x = cljs.core.first(arglist__13332);
      arglist__13332 = cljs.core.next(arglist__13332);
      var y = cljs.core.first(arglist__13332);
      var more = cljs.core.rest(arglist__13332);
      return G__13327__delegate(x, y, more);
    };
    G__13327.cljs$core$IFn$_invoke$arity$variadic = G__13327__delegate;
    return G__13327;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        var G__13333 = null;
        if (arguments.length > 2) {
          var G__13334__i = 0, G__13334__a = new Array(arguments.length - 2);
          while (G__13334__i < G__13334__a.length) {
            G__13334__a[G__13334__i] = arguments[G__13334__i + 2];
            ++G__13334__i;
          }
          G__13333 = new cljs.core.IndexedSeq(G__13334__a, 0);
        }
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13333);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__13335__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next(more)) {
            var G__13336 = y;
            var G__13337 = cljs.core.first(more);
            var G__13338 = cljs.core.next(more);
            x = G__13336;
            y = G__13337;
            more = G__13338;
            continue;
          } else {
            return y >= cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__13335 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13339__i = 0, G__13339__a = new Array(arguments.length - 2);
        while (G__13339__i < G__13339__a.length) {
          G__13339__a[G__13339__i] = arguments[G__13339__i + 2];
          ++G__13339__i;
        }
        more = new cljs.core.IndexedSeq(G__13339__a, 0);
      }
      return G__13335__delegate.call(this, x, y, more);
    };
    G__13335.cljs$lang$maxFixedArity = 2;
    G__13335.cljs$lang$applyTo = function(arglist__13340) {
      var x = cljs.core.first(arglist__13340);
      arglist__13340 = cljs.core.next(arglist__13340);
      var y = cljs.core.first(arglist__13340);
      var more = cljs.core.rest(arglist__13340);
      return G__13335__delegate(x, y, more);
    };
    G__13335.cljs$core$IFn$_invoke$arity$variadic = G__13335__delegate;
    return G__13335;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        var G__13341 = null;
        if (arguments.length > 2) {
          var G__13342__i = 0, G__13342__a = new Array(arguments.length - 2);
          while (G__13342__i < G__13342__a.length) {
            G__13342__a[G__13342__i] = arguments[G__13342__i + 2];
            ++G__13342__i;
          }
          G__13341 = new cljs.core.IndexedSeq(G__13342__a, 0);
        }
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13341);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__4146__auto__ = x;
    var y__4147__auto__ = y;
    return x__4146__auto__ > y__4147__auto__ ? x__4146__auto__ : y__4147__auto__;
  };
  var max__3 = function() {
    var G__13343__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(max, function() {
        var x__4146__auto__ = x;
        var y__4147__auto__ = y;
        return x__4146__auto__ > y__4147__auto__ ? x__4146__auto__ : y__4147__auto__;
      }(), more);
    };
    var G__13343 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13344__i = 0, G__13344__a = new Array(arguments.length - 2);
        while (G__13344__i < G__13344__a.length) {
          G__13344__a[G__13344__i] = arguments[G__13344__i + 2];
          ++G__13344__i;
        }
        more = new cljs.core.IndexedSeq(G__13344__a, 0);
      }
      return G__13343__delegate.call(this, x, y, more);
    };
    G__13343.cljs$lang$maxFixedArity = 2;
    G__13343.cljs$lang$applyTo = function(arglist__13345) {
      var x = cljs.core.first(arglist__13345);
      arglist__13345 = cljs.core.next(arglist__13345);
      var y = cljs.core.first(arglist__13345);
      var more = cljs.core.rest(arglist__13345);
      return G__13343__delegate(x, y, more);
    };
    G__13343.cljs$core$IFn$_invoke$arity$variadic = G__13343__delegate;
    return G__13343;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        var G__13346 = null;
        if (arguments.length > 2) {
          var G__13347__i = 0, G__13347__a = new Array(arguments.length - 2);
          while (G__13347__i < G__13347__a.length) {
            G__13347__a[G__13347__i] = arguments[G__13347__i + 2];
            ++G__13347__i;
          }
          G__13346 = new cljs.core.IndexedSeq(G__13347__a, 0);
        }
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13346);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__4153__auto__ = x;
    var y__4154__auto__ = y;
    return x__4153__auto__ < y__4154__auto__ ? x__4153__auto__ : y__4154__auto__;
  };
  var min__3 = function() {
    var G__13348__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(min, function() {
        var x__4153__auto__ = x;
        var y__4154__auto__ = y;
        return x__4153__auto__ < y__4154__auto__ ? x__4153__auto__ : y__4154__auto__;
      }(), more);
    };
    var G__13348 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13349__i = 0, G__13349__a = new Array(arguments.length - 2);
        while (G__13349__i < G__13349__a.length) {
          G__13349__a[G__13349__i] = arguments[G__13349__i + 2];
          ++G__13349__i;
        }
        more = new cljs.core.IndexedSeq(G__13349__a, 0);
      }
      return G__13348__delegate.call(this, x, y, more);
    };
    G__13348.cljs$lang$maxFixedArity = 2;
    G__13348.cljs$lang$applyTo = function(arglist__13350) {
      var x = cljs.core.first(arglist__13350);
      arglist__13350 = cljs.core.next(arglist__13350);
      var y = cljs.core.first(arglist__13350);
      var more = cljs.core.rest(arglist__13350);
      return G__13348__delegate(x, y, more);
    };
    G__13348.cljs$core$IFn$_invoke$arity$variadic = G__13348__delegate;
    return G__13348;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        var G__13351 = null;
        if (arguments.length > 2) {
          var G__13352__i = 0, G__13352__a = new Array(arguments.length - 2);
          while (G__13352__i < G__13352__a.length) {
            G__13352__a[G__13352__i] = arguments[G__13352__i + 2];
            ++G__13352__i;
          }
          G__13351 = new cljs.core.IndexedSeq(G__13352__a, 0);
        }
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13351);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__13353__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_add, x + y, more);
    };
    var G__13353 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13354__i = 0, G__13354__a = new Array(arguments.length - 2);
        while (G__13354__i < G__13354__a.length) {
          G__13354__a[G__13354__i] = arguments[G__13354__i + 2];
          ++G__13354__i;
        }
        more = new cljs.core.IndexedSeq(G__13354__a, 0);
      }
      return G__13353__delegate.call(this, x, y, more);
    };
    G__13353.cljs$lang$maxFixedArity = 2;
    G__13353.cljs$lang$applyTo = function(arglist__13355) {
      var x = cljs.core.first(arglist__13355);
      arglist__13355 = cljs.core.next(arglist__13355);
      var y = cljs.core.first(arglist__13355);
      var more = cljs.core.rest(arglist__13355);
      return G__13353__delegate(x, y, more);
    };
    G__13353.cljs$core$IFn$_invoke$arity$variadic = G__13353__delegate;
    return G__13353;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        var G__13356 = null;
        if (arguments.length > 2) {
          var G__13357__i = 0, G__13357__a = new Array(arguments.length - 2);
          while (G__13357__i < G__13357__a.length) {
            G__13357__a[G__13357__i] = arguments[G__13357__i + 2];
            ++G__13357__i;
          }
          G__13356 = new cljs.core.IndexedSeq(G__13357__a, 0);
        }
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13356);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__13358__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_add_int, x + y, more);
    };
    var G__13358 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13359__i = 0, G__13359__a = new Array(arguments.length - 2);
        while (G__13359__i < G__13359__a.length) {
          G__13359__a[G__13359__i] = arguments[G__13359__i + 2];
          ++G__13359__i;
        }
        more = new cljs.core.IndexedSeq(G__13359__a, 0);
      }
      return G__13358__delegate.call(this, x, y, more);
    };
    G__13358.cljs$lang$maxFixedArity = 2;
    G__13358.cljs$lang$applyTo = function(arglist__13360) {
      var x = cljs.core.first(arglist__13360);
      arglist__13360 = cljs.core.next(arglist__13360);
      var y = cljs.core.first(arglist__13360);
      var more = cljs.core.rest(arglist__13360);
      return G__13358__delegate(x, y, more);
    };
    G__13358.cljs$core$IFn$_invoke$arity$variadic = G__13358__delegate;
    return G__13358;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        var G__13361 = null;
        if (arguments.length > 2) {
          var G__13362__i = 0, G__13362__a = new Array(arguments.length - 2);
          while (G__13362__i < G__13362__a.length) {
            G__13362__a[G__13362__i] = arguments[G__13362__i + 2];
            ++G__13362__i;
          }
          G__13361 = new cljs.core.IndexedSeq(G__13362__a, 0);
        }
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13361);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__13367__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_divide_int, unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(x, y), more);
    };
    var G__13367 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13368__i = 0, G__13368__a = new Array(arguments.length - 2);
        while (G__13368__i < G__13368__a.length) {
          G__13368__a[G__13368__i] = arguments[G__13368__i + 2];
          ++G__13368__i;
        }
        more = new cljs.core.IndexedSeq(G__13368__a, 0);
      }
      return G__13367__delegate.call(this, x, y, more);
    };
    G__13367.cljs$lang$maxFixedArity = 2;
    G__13367.cljs$lang$applyTo = function(arglist__13369) {
      var x = cljs.core.first(arglist__13369);
      arglist__13369 = cljs.core.next(arglist__13369);
      var y = cljs.core.first(arglist__13369);
      var more = cljs.core.rest(arglist__13369);
      return G__13367__delegate(x, y, more);
    };
    G__13367.cljs$core$IFn$_invoke$arity$variadic = G__13367__delegate;
    return G__13367;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        var G__13370 = null;
        if (arguments.length > 2) {
          var G__13371__i = 0, G__13371__a = new Array(arguments.length - 2);
          while (G__13371__i < G__13371__a.length) {
            G__13371__a[G__13371__i] = arguments[G__13371__i + 2];
            ++G__13371__i;
          }
          G__13370 = new cljs.core.IndexedSeq(G__13371__a, 0);
        }
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13370);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__13372__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_multiply, x * y, more);
    };
    var G__13372 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13373__i = 0, G__13373__a = new Array(arguments.length - 2);
        while (G__13373__i < G__13373__a.length) {
          G__13373__a[G__13373__i] = arguments[G__13373__i + 2];
          ++G__13373__i;
        }
        more = new cljs.core.IndexedSeq(G__13373__a, 0);
      }
      return G__13372__delegate.call(this, x, y, more);
    };
    G__13372.cljs$lang$maxFixedArity = 2;
    G__13372.cljs$lang$applyTo = function(arglist__13374) {
      var x = cljs.core.first(arglist__13374);
      arglist__13374 = cljs.core.next(arglist__13374);
      var y = cljs.core.first(arglist__13374);
      var more = cljs.core.rest(arglist__13374);
      return G__13372__delegate(x, y, more);
    };
    G__13372.cljs$core$IFn$_invoke$arity$variadic = G__13372__delegate;
    return G__13372;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        var G__13375 = null;
        if (arguments.length > 2) {
          var G__13376__i = 0, G__13376__a = new Array(arguments.length - 2);
          while (G__13376__i < G__13376__a.length) {
            G__13376__a[G__13376__i] = arguments[G__13376__i + 2];
            ++G__13376__i;
          }
          G__13375 = new cljs.core.IndexedSeq(G__13376__a, 0);
        }
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13375);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__13377__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_multiply_int, x * y, more);
    };
    var G__13377 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13378__i = 0, G__13378__a = new Array(arguments.length - 2);
        while (G__13378__i < G__13378__a.length) {
          G__13378__a[G__13378__i] = arguments[G__13378__i + 2];
          ++G__13378__i;
        }
        more = new cljs.core.IndexedSeq(G__13378__a, 0);
      }
      return G__13377__delegate.call(this, x, y, more);
    };
    G__13377.cljs$lang$maxFixedArity = 2;
    G__13377.cljs$lang$applyTo = function(arglist__13379) {
      var x = cljs.core.first(arglist__13379);
      arglist__13379 = cljs.core.next(arglist__13379);
      var y = cljs.core.first(arglist__13379);
      var more = cljs.core.rest(arglist__13379);
      return G__13377__delegate(x, y, more);
    };
    G__13377.cljs$core$IFn$_invoke$arity$variadic = G__13377__delegate;
    return G__13377;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        var G__13380 = null;
        if (arguments.length > 2) {
          var G__13381__i = 0, G__13381__a = new Array(arguments.length - 2);
          while (G__13381__i < G__13381__a.length) {
            G__13381__a[G__13381__i] = arguments[G__13381__i + 2];
            ++G__13381__i;
          }
          G__13380 = new cljs.core.IndexedSeq(G__13381__a, 0);
        }
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13380);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  var G__13384 = x;
  var G__13385 = n;
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(G__13384, G__13385) : cljs.core.mod.call(null, G__13384, G__13385);
};
cljs.core.unchecked_subtract = function() {
  var unchecked_subtract = null;
  var unchecked_subtract__1 = function(x) {
    return-x;
  };
  var unchecked_subtract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract__3 = function() {
    var G__13386__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_subtract, x - y, more);
    };
    var G__13386 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13387__i = 0, G__13387__a = new Array(arguments.length - 2);
        while (G__13387__i < G__13387__a.length) {
          G__13387__a[G__13387__i] = arguments[G__13387__i + 2];
          ++G__13387__i;
        }
        more = new cljs.core.IndexedSeq(G__13387__a, 0);
      }
      return G__13386__delegate.call(this, x, y, more);
    };
    G__13386.cljs$lang$maxFixedArity = 2;
    G__13386.cljs$lang$applyTo = function(arglist__13388) {
      var x = cljs.core.first(arglist__13388);
      arglist__13388 = cljs.core.next(arglist__13388);
      var y = cljs.core.first(arglist__13388);
      var more = cljs.core.rest(arglist__13388);
      return G__13386__delegate(x, y, more);
    };
    G__13386.cljs$core$IFn$_invoke$arity$variadic = G__13386__delegate;
    return G__13386;
  }();
  unchecked_subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract__1.call(this, x);
      case 2:
        return unchecked_subtract__2.call(this, x, y);
      default:
        var G__13389 = null;
        if (arguments.length > 2) {
          var G__13390__i = 0, G__13390__a = new Array(arguments.length - 2);
          while (G__13390__i < G__13390__a.length) {
            G__13390__a[G__13390__i] = arguments[G__13390__i + 2];
            ++G__13390__i;
          }
          G__13389 = new cljs.core.IndexedSeq(G__13390__a, 0);
        }
        return unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13389);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract.cljs$lang$maxFixedArity = 2;
  unchecked_subtract.cljs$lang$applyTo = unchecked_subtract__3.cljs$lang$applyTo;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract__1;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract__2;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract;
}();
cljs.core.unchecked_subtract_int = function() {
  var unchecked_subtract_int = null;
  var unchecked_subtract_int__1 = function(x) {
    return-x;
  };
  var unchecked_subtract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract_int__3 = function() {
    var G__13391__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_subtract_int, x - y, more);
    };
    var G__13391 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13392__i = 0, G__13392__a = new Array(arguments.length - 2);
        while (G__13392__i < G__13392__a.length) {
          G__13392__a[G__13392__i] = arguments[G__13392__i + 2];
          ++G__13392__i;
        }
        more = new cljs.core.IndexedSeq(G__13392__a, 0);
      }
      return G__13391__delegate.call(this, x, y, more);
    };
    G__13391.cljs$lang$maxFixedArity = 2;
    G__13391.cljs$lang$applyTo = function(arglist__13393) {
      var x = cljs.core.first(arglist__13393);
      arglist__13393 = cljs.core.next(arglist__13393);
      var y = cljs.core.first(arglist__13393);
      var more = cljs.core.rest(arglist__13393);
      return G__13391__delegate(x, y, more);
    };
    G__13391.cljs$core$IFn$_invoke$arity$variadic = G__13391__delegate;
    return G__13391;
  }();
  unchecked_subtract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract_int__1.call(this, x);
      case 2:
        return unchecked_subtract_int__2.call(this, x, y);
      default:
        var G__13394 = null;
        if (arguments.length > 2) {
          var G__13395__i = 0, G__13395__a = new Array(arguments.length - 2);
          while (G__13395__i < G__13395__a.length) {
            G__13395__a[G__13395__i] = arguments[G__13395__i + 2];
            ++G__13395__i;
          }
          G__13394 = new cljs.core.IndexedSeq(G__13395__a, 0);
        }
        return unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13394);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
  unchecked_subtract_int.cljs$lang$applyTo = unchecked_subtract_int__3.cljs$lang$applyTo;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract_int__1;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract_int__2;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    var G__13398 = q;
    return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__13398) : Math.floor.call(null, G__13398);
  } else {
    var G__13399 = q;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__13399) : Math.ceil.call(null, G__13399);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function() {
  var bit_xor = null;
  var bit_xor__2 = function(x, y) {
    return x ^ y;
  };
  var bit_xor__3 = function() {
    var G__13400__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_xor, x ^ y, more);
    };
    var G__13400 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13401__i = 0, G__13401__a = new Array(arguments.length - 2);
        while (G__13401__i < G__13401__a.length) {
          G__13401__a[G__13401__i] = arguments[G__13401__i + 2];
          ++G__13401__i;
        }
        more = new cljs.core.IndexedSeq(G__13401__a, 0);
      }
      return G__13400__delegate.call(this, x, y, more);
    };
    G__13400.cljs$lang$maxFixedArity = 2;
    G__13400.cljs$lang$applyTo = function(arglist__13402) {
      var x = cljs.core.first(arglist__13402);
      arglist__13402 = cljs.core.next(arglist__13402);
      var y = cljs.core.first(arglist__13402);
      var more = cljs.core.rest(arglist__13402);
      return G__13400__delegate(x, y, more);
    };
    G__13400.cljs$core$IFn$_invoke$arity$variadic = G__13400__delegate;
    return G__13400;
  }();
  bit_xor = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_xor__2.call(this, x, y);
      default:
        var G__13403 = null;
        if (arguments.length > 2) {
          var G__13404__i = 0, G__13404__a = new Array(arguments.length - 2);
          while (G__13404__i < G__13404__a.length) {
            G__13404__a[G__13404__i] = arguments[G__13404__i + 2];
            ++G__13404__i;
          }
          G__13403 = new cljs.core.IndexedSeq(G__13404__a, 0);
        }
        return bit_xor__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13403);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_xor.cljs$lang$maxFixedArity = 2;
  bit_xor.cljs$lang$applyTo = bit_xor__3.cljs$lang$applyTo;
  bit_xor.cljs$core$IFn$_invoke$arity$2 = bit_xor__2;
  bit_xor.cljs$core$IFn$_invoke$arity$variadic = bit_xor__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_xor;
}();
cljs.core.bit_and = function() {
  var bit_and = null;
  var bit_and__2 = function(x, y) {
    return x & y;
  };
  var bit_and__3 = function() {
    var G__13405__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_and, x & y, more);
    };
    var G__13405 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13406__i = 0, G__13406__a = new Array(arguments.length - 2);
        while (G__13406__i < G__13406__a.length) {
          G__13406__a[G__13406__i] = arguments[G__13406__i + 2];
          ++G__13406__i;
        }
        more = new cljs.core.IndexedSeq(G__13406__a, 0);
      }
      return G__13405__delegate.call(this, x, y, more);
    };
    G__13405.cljs$lang$maxFixedArity = 2;
    G__13405.cljs$lang$applyTo = function(arglist__13407) {
      var x = cljs.core.first(arglist__13407);
      arglist__13407 = cljs.core.next(arglist__13407);
      var y = cljs.core.first(arglist__13407);
      var more = cljs.core.rest(arglist__13407);
      return G__13405__delegate(x, y, more);
    };
    G__13405.cljs$core$IFn$_invoke$arity$variadic = G__13405__delegate;
    return G__13405;
  }();
  bit_and = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_and__2.call(this, x, y);
      default:
        var G__13408 = null;
        if (arguments.length > 2) {
          var G__13409__i = 0, G__13409__a = new Array(arguments.length - 2);
          while (G__13409__i < G__13409__a.length) {
            G__13409__a[G__13409__i] = arguments[G__13409__i + 2];
            ++G__13409__i;
          }
          G__13408 = new cljs.core.IndexedSeq(G__13409__a, 0);
        }
        return bit_and__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13408);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_and.cljs$lang$maxFixedArity = 2;
  bit_and.cljs$lang$applyTo = bit_and__3.cljs$lang$applyTo;
  bit_and.cljs$core$IFn$_invoke$arity$2 = bit_and__2;
  bit_and.cljs$core$IFn$_invoke$arity$variadic = bit_and__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_and;
}();
cljs.core.bit_or = function() {
  var bit_or = null;
  var bit_or__2 = function(x, y) {
    return x | y;
  };
  var bit_or__3 = function() {
    var G__13410__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_or, x | y, more);
    };
    var G__13410 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13411__i = 0, G__13411__a = new Array(arguments.length - 2);
        while (G__13411__i < G__13411__a.length) {
          G__13411__a[G__13411__i] = arguments[G__13411__i + 2];
          ++G__13411__i;
        }
        more = new cljs.core.IndexedSeq(G__13411__a, 0);
      }
      return G__13410__delegate.call(this, x, y, more);
    };
    G__13410.cljs$lang$maxFixedArity = 2;
    G__13410.cljs$lang$applyTo = function(arglist__13412) {
      var x = cljs.core.first(arglist__13412);
      arglist__13412 = cljs.core.next(arglist__13412);
      var y = cljs.core.first(arglist__13412);
      var more = cljs.core.rest(arglist__13412);
      return G__13410__delegate(x, y, more);
    };
    G__13410.cljs$core$IFn$_invoke$arity$variadic = G__13410__delegate;
    return G__13410;
  }();
  bit_or = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_or__2.call(this, x, y);
      default:
        var G__13413 = null;
        if (arguments.length > 2) {
          var G__13414__i = 0, G__13414__a = new Array(arguments.length - 2);
          while (G__13414__i < G__13414__a.length) {
            G__13414__a[G__13414__i] = arguments[G__13414__i + 2];
            ++G__13414__i;
          }
          G__13413 = new cljs.core.IndexedSeq(G__13414__a, 0);
        }
        return bit_or__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13413);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_or.cljs$lang$maxFixedArity = 2;
  bit_or.cljs$lang$applyTo = bit_or__3.cljs$lang$applyTo;
  bit_or.cljs$core$IFn$_invoke$arity$2 = bit_or__2;
  bit_or.cljs$core$IFn$_invoke$arity$variadic = bit_or__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_or;
}();
cljs.core.bit_and_not = function() {
  var bit_and_not = null;
  var bit_and_not__2 = function(x, y) {
    return x & ~y;
  };
  var bit_and_not__3 = function() {
    var G__13415__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_and_not, x & ~y, more);
    };
    var G__13415 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13416__i = 0, G__13416__a = new Array(arguments.length - 2);
        while (G__13416__i < G__13416__a.length) {
          G__13416__a[G__13416__i] = arguments[G__13416__i + 2];
          ++G__13416__i;
        }
        more = new cljs.core.IndexedSeq(G__13416__a, 0);
      }
      return G__13415__delegate.call(this, x, y, more);
    };
    G__13415.cljs$lang$maxFixedArity = 2;
    G__13415.cljs$lang$applyTo = function(arglist__13417) {
      var x = cljs.core.first(arglist__13417);
      arglist__13417 = cljs.core.next(arglist__13417);
      var y = cljs.core.first(arglist__13417);
      var more = cljs.core.rest(arglist__13417);
      return G__13415__delegate(x, y, more);
    };
    G__13415.cljs$core$IFn$_invoke$arity$variadic = G__13415__delegate;
    return G__13415;
  }();
  bit_and_not = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_and_not__2.call(this, x, y);
      default:
        var G__13418 = null;
        if (arguments.length > 2) {
          var G__13419__i = 0, G__13419__a = new Array(arguments.length - 2);
          while (G__13419__i < G__13419__a.length) {
            G__13419__a[G__13419__i] = arguments[G__13419__i + 2];
            ++G__13419__i;
          }
          G__13418 = new cljs.core.IndexedSeq(G__13419__a, 0);
        }
        return bit_and_not__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13418);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_and_not.cljs$lang$maxFixedArity = 2;
  bit_and_not.cljs$lang$applyTo = bit_and_not__3.cljs$lang$applyTo;
  bit_and_not.cljs$core$IFn$_invoke$arity$2 = bit_and_not__2;
  bit_and_not.cljs$core$IFn$_invoke$arity$variadic = bit_and_not__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_and_not;
}();
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv(x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__13424__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
          if (cljs.core.next(more)) {
            var G__13425 = y;
            var G__13426 = cljs.core.first(more);
            var G__13427 = cljs.core.next(more);
            x = G__13425;
            y = G__13426;
            more = G__13427;
            continue;
          } else {
            return _EQ__EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__13424 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__13428__i = 0, G__13428__a = new Array(arguments.length - 2);
        while (G__13428__i < G__13428__a.length) {
          G__13428__a[G__13428__i] = arguments[G__13428__i + 2];
          ++G__13428__i;
        }
        more = new cljs.core.IndexedSeq(G__13428__a, 0);
      }
      return G__13424__delegate.call(this, x, y, more);
    };
    G__13424.cljs$lang$maxFixedArity = 2;
    G__13424.cljs$lang$applyTo = function(arglist__13429) {
      var x = cljs.core.first(arglist__13429);
      arglist__13429 = cljs.core.next(arglist__13429);
      var y = cljs.core.first(arglist__13429);
      var more = cljs.core.rest(arglist__13429);
      return G__13424__delegate(x, y, more);
    };
    G__13424.cljs$core$IFn$_invoke$arity$variadic = G__13424__delegate;
    return G__13424;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        var G__13430 = null;
        if (arguments.length > 2) {
          var G__13431__i = 0, G__13431__a = new Array(arguments.length - 2);
          while (G__13431__i < G__13431__a.length) {
            G__13431__a[G__13431__i] = arguments[G__13431__i + 2];
            ++G__13431__i;
          }
          G__13430 = new cljs.core.IndexedSeq(G__13431__a, 0);
        }
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13430);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__13432 = n__$1 - 1;
      var G__13433 = cljs.core.next(xs);
      n__$1 = G__13432;
      xs = G__13433;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      var G__13437 = x;
      return goog.string.buildString(G__13437);
    }
  };
  var str__2 = function() {
    var G__13438__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.cljs$core$IFn$_invoke$arity$1(x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__13439 = sb.append(str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(more)));
          var G__13440 = cljs.core.next(more);
          sb = G__13439;
          more = G__13440;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__13438 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        var G__13441__i = 0, G__13441__a = new Array(arguments.length - 1);
        while (G__13441__i < G__13441__a.length) {
          G__13441__a[G__13441__i] = arguments[G__13441__i + 1];
          ++G__13441__i;
        }
        ys = new cljs.core.IndexedSeq(G__13441__a, 0);
      }
      return G__13438__delegate.call(this, x, ys);
    };
    G__13438.cljs$lang$maxFixedArity = 1;
    G__13438.cljs$lang$applyTo = function(arglist__13442) {
      var x = cljs.core.first(arglist__13442);
      var ys = cljs.core.rest(arglist__13442);
      return G__13438__delegate(x, ys);
    };
    G__13438.cljs$core$IFn$_invoke$arity$variadic = G__13438__delegate;
    return G__13438;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        var G__13443 = null;
        if (arguments.length > 1) {
          var G__13444__i = 0, G__13444__a = new Array(arguments.length - 1);
          while (G__13444__i < G__13444__a.length) {
            G__13444__a[G__13444__i] = arguments[G__13444__i + 1];
            ++G__13444__i;
          }
          G__13443 = new cljs.core.IndexedSeq(G__13444__a, 0);
        }
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, G__13443);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__13445 = cljs.core.next(xs);
            var G__13446 = cljs.core.next(ys);
            xs = G__13445;
            ys = G__13446;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__13447 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__13448 = cljs.core.next(s);
        res = G__13447;
        s = G__13448;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__13453 = (h + (cljs.core.hash(function() {
        var G__13451 = e;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__13451) : cljs.core.key.call(null, G__13451);
      }()) ^ cljs.core.hash(function() {
        var G__13452 = e;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__13452) : cljs.core.val.call(null, G__13452);
      }()))) % 4503599627370496;
      var G__13454 = cljs.core.next(s);
      h = G__13453;
      s = G__13454;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__13455 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__13456 = cljs.core.next(s__$1);
      h = G__13455;
      s__$1 = G__13456;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__13467_13477 = cljs.core.seq(fn_map);
  var chunk__13468_13478 = null;
  var count__13469_13479 = 0;
  var i__13470_13480 = 0;
  while (true) {
    if (i__13470_13480 < count__13469_13479) {
      var vec__13471_13481 = chunk__13468_13478.cljs$core$IIndexed$_nth$arity$2(null, i__13470_13480);
      var key_name_13482 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__13471_13481, 0, null);
      var f_13483 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__13471_13481, 1, null);
      var str_name_13484 = function() {
        var G__13472 = key_name_13482;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__13472) : cljs.core.name.call(null, G__13472);
      }();
      obj[str_name_13484] = f_13483;
      var G__13485 = seq__13467_13477;
      var G__13486 = chunk__13468_13478;
      var G__13487 = count__13469_13479;
      var G__13488 = i__13470_13480 + 1;
      seq__13467_13477 = G__13485;
      chunk__13468_13478 = G__13486;
      count__13469_13479 = G__13487;
      i__13470_13480 = G__13488;
      continue;
    } else {
      var temp__4126__auto___13489 = cljs.core.seq(seq__13467_13477);
      if (temp__4126__auto___13489) {
        var seq__13467_13490__$1 = temp__4126__auto___13489;
        if (cljs.core.chunked_seq_QMARK_(seq__13467_13490__$1)) {
          var c__4616__auto___13491 = function() {
            var G__13473 = seq__13467_13490__$1;
            return cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(G__13473) : cljs.core.chunk_first.call(null, G__13473);
          }();
          var G__13492 = function() {
            var G__13474 = seq__13467_13490__$1;
            return cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(G__13474) : cljs.core.chunk_rest.call(null, G__13474);
          }();
          var G__13493 = c__4616__auto___13491;
          var G__13494 = cljs.core.count(c__4616__auto___13491);
          var G__13495 = 0;
          seq__13467_13477 = G__13492;
          chunk__13468_13478 = G__13493;
          count__13469_13479 = G__13494;
          i__13470_13480 = G__13495;
          continue;
        } else {
          var vec__13475_13496 = cljs.core.first(seq__13467_13490__$1);
          var key_name_13497 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__13475_13496, 0, null);
          var f_13498 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__13475_13496, 1, null);
          var str_name_13499 = function() {
            var G__13476 = key_name_13497;
            return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__13476) : cljs.core.name.call(null, G__13476);
          }();
          obj[str_name_13499] = f_13498;
          var G__13500 = cljs.core.next(seq__13467_13490__$1);
          var G__13501 = null;
          var G__13502 = 0;
          var G__13503 = 0;
          seq__13467_13477 = G__13500;
          chunk__13468_13478 = G__13501;
          count__13469_13479 = G__13502;
          i__13470_13480 = G__13503;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__13505 = coll;
  if (G__13505) {
    var bit__4510__auto__ = G__13505.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4510__auto__ || G__13505.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__13505.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__13505);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__13505);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq(coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
          var G__13506 = xs__$1.cljs$core$INext$_next$arity$1(null);
          xs__$1 = G__13506;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__13507 = i - 1;
        var G__13508 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
        i = G__13507;
        r = G__13508;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      var G__13509__i = 0, G__13509__a = new Array(arguments.length - 0);
      while (G__13509__i < G__13509__a.length) {
        G__13509__a[G__13509__i] = arguments[G__13509__i + 0];
        ++G__13509__i;
      }
      xs = new cljs.core.IndexedSeq(G__13509__a, 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__13510) {
    var xs = cljs.core.seq(arglist__13510);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3829__auto__ = coll == null;
    if (or__3829__auto__) {
      return or__3829__auto__;
    } else {
      var G__13514 = coll;
      if (G__13514) {
        var bit__4503__auto__ = G__13514.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4503__auto__ || G__13514.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__13516 = x;
  if (G__13516) {
    var bit__4510__auto__ = G__13516.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4510__auto__ || G__13516.cljs$core$IList$) {
      return true;
    } else {
      if (!G__13516.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__13516);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__13516);
  }
};
cljs.core.hash_keyword = function hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3817__auto__ = cljs.core.not(a.ns);
      if (and__3817__auto__) {
        return b.ns;
      } else {
        return and__3817__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__13523 = a.ns;
            var G__13524 = b.ns;
            return goog.array.defaultCompare(G__13523, G__13524);
          }();
          if (0 === nsc) {
            var G__13525 = a.name;
            var G__13526 = b.name;
            return goog.array.defaultCompare(G__13525, G__13526);
          } else {
            return nsc;
          }
        }
      } else {
        var G__13527 = a.name;
        var G__13528 = b.name;
        return goog.array.defaultCompare(G__13527, G__13528);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4250__auto__ = self__._hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__13530 = null;
  var G__13530__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__13530__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__13530 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__13530__2.call(this, self__, coll);
      case 3:
        return G__13530__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__13530.cljs$core$IFn$_invoke$arity$2 = G__13530__2;
  G__13530.cljs$core$IFn$_invoke$arity$3 = G__13530__3;
  return G__13530;
}();
cljs.core.Keyword.prototype.apply = function(self__, args13529) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args13529)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__13532 = x;
    if (G__13532) {
      var bit__4503__auto__ = G__13532.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4503__auto__ || G__13532.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace(name), function() {
          var G__13534 = name;
          return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__13534) : cljs.core.name.call(null, G__13534);
        }(), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = function() {
      return self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    }();
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__13535 = ls.sval();
        ls = G__13535;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__13537 = s;
    if (G__13537) {
      var bit__4503__auto__ = G__13537.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4503__auto__ || G__13537.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__13538 = cljs.core.next(s__$1);
      s__$1 = G__13538;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_13539 = 0;
  var xs_13540 = cljs.core.seq(coll);
  while (true) {
    if (xs_13540) {
      ret[i_13539] = cljs.core.to_array(cljs.core.first(xs_13540));
      var G__13541 = i_13539 + 1;
      var G__13542 = cljs.core.next(xs_13540);
      i_13539 = G__13541;
      xs_13540 = G__13542;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__13545 = i + 1;
          var G__13546 = cljs.core.next(s__$1);
          i = G__13545;
          s__$1 = G__13546;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4716__auto___13547 = size;
      var i_13548 = 0;
      while (true) {
        if (i_13548 < n__4716__auto___13547) {
          a[i_13548] = init_val_or_seq;
          var G__13549 = i_13548 + 1;
          i_13548 = G__13549;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__13552 = i + 1;
          var G__13553 = cljs.core.next(s__$1);
          i = G__13552;
          s__$1 = G__13553;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4716__auto___13554 = size;
      var i_13555 = 0;
      while (true) {
        if (i_13555 < n__4716__auto___13554) {
          a[i_13555] = init_val_or_seq;
          var G__13556 = i_13555 + 1;
          i_13555 = G__13556;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__13559 = i + 1;
          var G__13560 = cljs.core.next(s__$1);
          i = G__13559;
          s__$1 = G__13560;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4716__auto___13561 = size;
      var i_13562 = 0;
      while (true) {
        if (i_13562 < n__4716__auto___13561) {
          a[i_13562] = init_val_or_seq;
          var G__13563 = i_13562 + 1;
          i_13562 = G__13563;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__13566 = i + 1;
          var G__13567 = cljs.core.next(s__$1);
          i = G__13566;
          s__$1 = G__13567;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4716__auto___13568 = size;
      var i_13569 = 0;
      while (true) {
        if (i_13569 < n__4716__auto___13568) {
          a[i_13569] = init_val_or_seq;
          var G__13570 = i_13569 + 1;
          i_13569 = G__13570;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__13571 = cljs.core.next(s__$1);
        var G__13572 = i - 1;
        var G__13573 = sum + 1;
        s__$1 = G__13571;
        i = G__13572;
        sum = G__13573;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq(x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_(s)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(s), concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
        } else {
          return cljs.core.cons(cljs.core.first(s), concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__13593__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq(xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
              return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cat(cljs.core.chunk_rest(xys__$1), zs__$1));
            } else {
              return cljs.core.cons(cljs.core.first(xys__$1), cat(cljs.core.rest(xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat(concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
    };
    var G__13593 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        var G__13594__i = 0, G__13594__a = new Array(arguments.length - 2);
        while (G__13594__i < G__13594__a.length) {
          G__13594__a[G__13594__i] = arguments[G__13594__i + 2];
          ++G__13594__i;
        }
        zs = new cljs.core.IndexedSeq(G__13594__a, 0);
      }
      return G__13593__delegate.call(this, x, y, zs);
    };
    G__13593.cljs$lang$maxFixedArity = 2;
    G__13593.cljs$lang$applyTo = function(arglist__13595) {
      var x = cljs.core.first(arglist__13595);
      arglist__13595 = cljs.core.next(arglist__13595);
      var y = cljs.core.first(arglist__13595);
      var zs = cljs.core.rest(arglist__13595);
      return G__13593__delegate(x, y, zs);
    };
    G__13593.cljs$core$IFn$_invoke$arity$variadic = G__13593__delegate;
    return G__13593;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        var G__13596 = null;
        if (arguments.length > 2) {
          var G__13597__i = 0, G__13597__a = new Array(arguments.length - 2);
          while (G__13597__i < G__13597__a.length) {
            G__13597__a[G__13597__i] = arguments[G__13597__i + 2];
            ++G__13597__i;
          }
          G__13596 = new cljs.core.IndexedSeq(G__13597__a, 0);
        }
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__13596);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq(args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons(a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons(a, cljs.core.cons(b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
  };
  var list_STAR___5 = function() {
    var G__13598__delegate = function(a, b, c, d, more) {
      return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
    };
    var G__13598 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__13599__i = 0, G__13599__a = new Array(arguments.length - 4);
        while (G__13599__i < G__13599__a.length) {
          G__13599__a[G__13599__i] = arguments[G__13599__i + 4];
          ++G__13599__i;
        }
        more = new cljs.core.IndexedSeq(G__13599__a, 0);
      }
      return G__13598__delegate.call(this, a, b, c, d, more);
    };
    G__13598.cljs$lang$maxFixedArity = 4;
    G__13598.cljs$lang$applyTo = function(arglist__13600) {
      var a = cljs.core.first(arglist__13600);
      arglist__13600 = cljs.core.next(arglist__13600);
      var b = cljs.core.first(arglist__13600);
      arglist__13600 = cljs.core.next(arglist__13600);
      var c = cljs.core.first(arglist__13600);
      arglist__13600 = cljs.core.next(arglist__13600);
      var d = cljs.core.first(arglist__13600);
      var more = cljs.core.rest(arglist__13600);
      return G__13598__delegate(a, b, c, d, more);
    };
    G__13598.cljs$core$IFn$_invoke$arity$variadic = G__13598__delegate;
    return G__13598;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        var G__13601 = null;
        if (arguments.length > 4) {
          var G__13602__i = 0, G__13602__a = new Array(arguments.length - 4);
          while (G__13602__i < G__13602__a.length) {
            G__13602__a[G__13602__i] = arguments[G__13602__i + 4];
            ++G__13602__i;
          }
          G__13601 = new cljs.core.IndexedSeq(G__13602__a, 0);
        }
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, G__13601);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___0 = function() {
    return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
  };
  var conj_BANG___1 = function(coll) {
    return coll;
  };
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_(tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__13603__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_(tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__13604 = ntcoll;
          var G__13605 = cljs.core.first(vals);
          var G__13606 = cljs.core.next(vals);
          tcoll = G__13604;
          val = G__13605;
          vals = G__13606;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__13603 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        var G__13607__i = 0, G__13607__a = new Array(arguments.length - 2);
        while (G__13607__i < G__13607__a.length) {
          G__13607__a[G__13607__i] = arguments[G__13607__i + 2];
          ++G__13607__i;
        }
        vals = new cljs.core.IndexedSeq(G__13607__a, 0);
      }
      return G__13603__delegate.call(this, tcoll, val, vals);
    };
    G__13603.cljs$lang$maxFixedArity = 2;
    G__13603.cljs$lang$applyTo = function(arglist__13608) {
      var tcoll = cljs.core.first(arglist__13608);
      arglist__13608 = cljs.core.next(arglist__13608);
      var val = cljs.core.first(arglist__13608);
      var vals = cljs.core.rest(arglist__13608);
      return G__13603__delegate(tcoll, val, vals);
    };
    G__13603.cljs$core$IFn$_invoke$arity$variadic = G__13603__delegate;
    return G__13603;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 0:
        return conj_BANG___0.call(this);
      case 1:
        return conj_BANG___1.call(this, tcoll);
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        var G__13609 = null;
        if (arguments.length > 2) {
          var G__13610__i = 0, G__13610__a = new Array(arguments.length - 2);
          while (G__13610__i < G__13610__a.length) {
            G__13610__a[G__13610__i] = arguments[G__13610__i + 2];
            ++G__13610__i;
          }
          G__13609 = new cljs.core.IndexedSeq(G__13610__a, 0);
        }
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, G__13609);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$0 = conj_BANG___0;
  conj_BANG_.cljs$core$IFn$_invoke$arity$1 = conj_BANG___1;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_(tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__13611__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__13612 = ntcoll;
          var G__13613 = cljs.core.first(kvs);
          var G__13614 = cljs.core.second(kvs);
          var G__13615 = cljs.core.nnext(kvs);
          tcoll = G__13612;
          key = G__13613;
          val = G__13614;
          kvs = G__13615;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__13611 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        var G__13616__i = 0, G__13616__a = new Array(arguments.length - 3);
        while (G__13616__i < G__13616__a.length) {
          G__13616__a[G__13616__i] = arguments[G__13616__i + 3];
          ++G__13616__i;
        }
        kvs = new cljs.core.IndexedSeq(G__13616__a, 0);
      }
      return G__13611__delegate.call(this, tcoll, key, val, kvs);
    };
    G__13611.cljs$lang$maxFixedArity = 3;
    G__13611.cljs$lang$applyTo = function(arglist__13617) {
      var tcoll = cljs.core.first(arglist__13617);
      arglist__13617 = cljs.core.next(arglist__13617);
      var key = cljs.core.first(arglist__13617);
      arglist__13617 = cljs.core.next(arglist__13617);
      var val = cljs.core.first(arglist__13617);
      var kvs = cljs.core.rest(arglist__13617);
      return G__13611__delegate(tcoll, key, val, kvs);
    };
    G__13611.cljs$core$IFn$_invoke$arity$variadic = G__13611__delegate;
    return G__13611;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        var G__13618 = null;
        if (arguments.length > 3) {
          var G__13619__i = 0, G__13619__a = new Array(arguments.length - 3);
          while (G__13619__i < G__13619__a.length) {
            G__13619__a[G__13619__i] = arguments[G__13619__i + 3];
            ++G__13619__i;
          }
          G__13618 = new cljs.core.IndexedSeq(G__13619__a, 0);
        }
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, G__13618);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_(tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__13620__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__13621 = ntcoll;
          var G__13622 = cljs.core.first(ks);
          var G__13623 = cljs.core.next(ks);
          tcoll = G__13621;
          key = G__13622;
          ks = G__13623;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__13620 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__13624__i = 0, G__13624__a = new Array(arguments.length - 2);
        while (G__13624__i < G__13624__a.length) {
          G__13624__a[G__13624__i] = arguments[G__13624__i + 2];
          ++G__13624__i;
        }
        ks = new cljs.core.IndexedSeq(G__13624__a, 0);
      }
      return G__13620__delegate.call(this, tcoll, key, ks);
    };
    G__13620.cljs$lang$maxFixedArity = 2;
    G__13620.cljs$lang$applyTo = function(arglist__13625) {
      var tcoll = cljs.core.first(arglist__13625);
      arglist__13625 = cljs.core.next(arglist__13625);
      var key = cljs.core.first(arglist__13625);
      var ks = cljs.core.rest(arglist__13625);
      return G__13620__delegate(tcoll, key, ks);
    };
    G__13620.cljs$core$IFn$_invoke$arity$variadic = G__13620__delegate;
    return G__13620;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        var G__13626 = null;
        if (arguments.length > 2) {
          var G__13627__i = 0, G__13627__a = new Array(arguments.length - 2);
          while (G__13627__i < G__13627__a.length) {
            G__13627__a[G__13627__i] = arguments[G__13627__i + 2];
            ++G__13627__i;
          }
          G__13626 = new cljs.core.IndexedSeq(G__13627__a, 0);
        }
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, G__13626);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_(tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__13628__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__13629 = ntcoll;
          var G__13630 = cljs.core.first(vals);
          var G__13631 = cljs.core.next(vals);
          tcoll = G__13629;
          val = G__13630;
          vals = G__13631;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__13628 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        var G__13632__i = 0, G__13632__a = new Array(arguments.length - 2);
        while (G__13632__i < G__13632__a.length) {
          G__13632__a[G__13632__i] = arguments[G__13632__i + 2];
          ++G__13632__i;
        }
        vals = new cljs.core.IndexedSeq(G__13632__a, 0);
      }
      return G__13628__delegate.call(this, tcoll, val, vals);
    };
    G__13628.cljs$lang$maxFixedArity = 2;
    G__13628.cljs$lang$applyTo = function(arglist__13633) {
      var tcoll = cljs.core.first(arglist__13633);
      arglist__13633 = cljs.core.next(arglist__13633);
      var val = cljs.core.first(arglist__13633);
      var vals = cljs.core.rest(arglist__13633);
      return G__13628__delegate(tcoll, val, vals);
    };
    G__13628.cljs$core$IFn$_invoke$arity$variadic = G__13628__delegate;
    return G__13628;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        var G__13634 = null;
        if (arguments.length > 2) {
          var G__13635__i = 0, G__13635__a = new Array(arguments.length - 2);
          while (G__13635__i < G__13635__a.length) {
            G__13635__a[G__13635__i] = arguments[G__13635__i + 2];
            ++G__13635__i;
          }
          G__13634 = new cljs.core.IndexedSeq(G__13635__a, 0);
        }
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, G__13634);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a4760 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4760);
      } else {
        var G__13846 = a4760;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__13846) : f.call(null, G__13846);
      }
    } else {
      var b4761 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4760, b4761);
        } else {
          var G__13847 = a4760;
          var G__13848 = b4761;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__13847, G__13848) : f.call(null, G__13847, G__13848);
        }
      } else {
        var c4762 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4760, b4761, c4762);
          } else {
            var G__13849 = a4760;
            var G__13850 = b4761;
            var G__13851 = c4762;
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__13849, G__13850, G__13851) : f.call(null, G__13849, G__13850, G__13851);
          }
        } else {
          var d4763 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4760, b4761, c4762, d4763);
            } else {
              var G__13852 = a4760;
              var G__13853 = b4761;
              var G__13854 = c4762;
              var G__13855 = d4763;
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__13852, G__13853, G__13854, G__13855) : f.call(null, G__13852, G__13853, G__13854, G__13855);
            }
          } else {
            var e4764 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4760, b4761, c4762, d4763, e4764);
              } else {
                var G__13856 = a4760;
                var G__13857 = b4761;
                var G__13858 = c4762;
                var G__13859 = d4763;
                var G__13860 = e4764;
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__13856, G__13857, G__13858, G__13859, G__13860) : f.call(null, G__13856, G__13857, G__13858, G__13859, G__13860);
              }
            } else {
              var f4765 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4760, b4761, c4762, d4763, e4764, f4765);
                } else {
                  var G__13861 = a4760;
                  var G__13862 = b4761;
                  var G__13863 = c4762;
                  var G__13864 = d4763;
                  var G__13865 = e4764;
                  var G__13866 = f4765;
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__13861, G__13862, G__13863, G__13864, G__13865, G__13866) : f.call(null, G__13861, G__13862, G__13863, G__13864, G__13865, G__13866);
                }
              } else {
                var g4766 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4760, b4761, c4762, d4763, e4764, f4765, g4766);
                  } else {
                    var G__13867 = a4760;
                    var G__13868 = b4761;
                    var G__13869 = c4762;
                    var G__13870 = d4763;
                    var G__13871 = e4764;
                    var G__13872 = f4765;
                    var G__13873 = g4766;
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(G__13867, G__13868, G__13869, G__13870, G__13871, G__13872, G__13873) : f.call(null, G__13867, G__13868, G__13869, G__13870, G__13871, G__13872, G__13873);
                  }
                } else {
                  var h4767 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4760, b4761, c4762, d4763, e4764, f4765, g4766, h4767);
                    } else {
                      var G__13874 = a4760;
                      var G__13875 = b4761;
                      var G__13876 = c4762;
                      var G__13877 = d4763;
                      var G__13878 = e4764;
                      var G__13879 = f4765;
                      var G__13880 = g4766;
                      var G__13881 = h4767;
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(G__13874, G__13875, G__13876, G__13877, G__13878, G__13879, G__13880, G__13881) : f.call(null, G__13874, G__13875, G__13876, G__13877, G__13878, G__13879, G__13880, G__13881);
                    }
                  } else {
                    var i4768 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4760, b4761, c4762, d4763, e4764, f4765, g4766, h4767, i4768);
                      } else {
                        var G__13882 = a4760;
                        var G__13883 = b4761;
                        var G__13884 = c4762;
                        var G__13885 = d4763;
                        var G__13886 = e4764;
                        var G__13887 = f4765;
                        var G__13888 = g4766;
                        var G__13889 = h4767;
                        var G__13890 = i4768;
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(G__13882, G__13883, G__13884, G__13885, G__13886, G__13887, G__13888, G__13889, G__13890) : f.call(null, G__13882, G__13883, G__13884, G__13885, G__13886, G__13887, G__13888, G__13889, G__13890);
                      }
                    } else {
                      var j4769 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4760, b4761, c4762, d4763, e4764, f4765, g4766, h4767, i4768, j4769);
                        } else {
                          var G__13891 = a4760;
                          var G__13892 = b4761;
                          var G__13893 = c4762;
                          var G__13894 = d4763;
                          var G__13895 = e4764;
                          var G__13896 = f4765;
                          var G__13897 = g4766;
                          var G__13898 = h4767;
                          var G__13899 = i4768;
                          var G__13900 = j4769;
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(G__13891, G__13892, G__13893, G__13894, G__13895, G__13896, G__13897, G__13898, G__13899, G__13900) : f.call(null, G__13891, G__13892, G__13893, G__13894, G__13895, G__13896, G__13897, G__13898, G__13899, G__13900);
                        }
                      } else {
                        var k4770 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4760, b4761, c4762, d4763, e4764, f4765, g4766, h4767, i4768, j4769, k4770);
                          } else {
                            var G__13901 = a4760;
                            var G__13902 = b4761;
                            var G__13903 = c4762;
                            var G__13904 = d4763;
                            var G__13905 = e4764;
                            var G__13906 = f4765;
                            var G__13907 = g4766;
                            var G__13908 = h4767;
                            var G__13909 = i4768;
                            var G__13910 = j4769;
                            var G__13911 = k4770;
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(G__13901, G__13902, G__13903, G__13904, G__13905, G__13906, G__13907, G__13908, G__13909, G__13910, G__13911) : f.call(null, G__13901, G__13902, G__13903, G__13904, G__13905, G__13906, G__13907, G__13908, G__13909, G__13910, G__13911);
                          }
                        } else {
                          var l4771 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4760, b4761, c4762, d4763, e4764, f4765, g4766, h4767, i4768, j4769, k4770, l4771);
                            } else {
                              var G__13912 = a4760;
                              var G__13913 = b4761;
                              var G__13914 = c4762;
                              var G__13915 = d4763;
                              var G__13916 = e4764;
                              var G__13917 = f4765;
                              var G__13918 = g4766;
                              var G__13919 = h4767;
                              var G__13920 = i4768;
                              var G__13921 = j4769;
                              var G__13922 = k4770;
                              var G__13923 = l4771;
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(G__13912, G__13913, G__13914, G__13915, G__13916, G__13917, G__13918, G__13919, G__13920, G__13921, G__13922, G__13923) : f.call(null, G__13912, G__13913, G__13914, G__13915, G__13916, G__13917, G__13918, G__13919, G__13920, G__13921, G__13922, G__13923);
                            }
                          } else {
                            var m4772 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4760, b4761, c4762, d4763, e4764, f4765, g4766, h4767, i4768, j4769, k4770, l4771, m4772);
                              } else {
                                var G__13924 = a4760;
                                var G__13925 = b4761;
                                var G__13926 = c4762;
                                var G__13927 = d4763;
                                var G__13928 = e4764;
                                var G__13929 = f4765;
                                var G__13930 = g4766;
                                var G__13931 = h4767;
                                var G__13932 = i4768;
                                var G__13933 = j4769;
                                var G__13934 = k4770;
                                var G__13935 = l4771;
                                var G__13936 = m4772;
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(G__13924, G__13925, G__13926, G__13927, G__13928, G__13929, G__13930, G__13931, G__13932, G__13933, G__13934, G__13935, G__13936) : f.call(null, G__13924, G__13925, G__13926, G__13927, G__13928, G__13929, G__13930, G__13931, G__13932, G__13933, G__13934, G__13935, G__13936);
                              }
                            } else {
                              var n4773 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4760, b4761, c4762, d4763, e4764, f4765, g4766, h4767, i4768, j4769, k4770, l4771, m4772, n4773);
                                } else {
                                  var G__13937 = a4760;
                                  var G__13938 = b4761;
                                  var G__13939 = c4762;
                                  var G__13940 = d4763;
                                  var G__13941 = e4764;
                                  var G__13942 = f4765;
                                  var G__13943 = g4766;
                                  var G__13944 = h4767;
                                  var G__13945 = i4768;
                                  var G__13946 = j4769;
                                  var G__13947 = k4770;
                                  var G__13948 = l4771;
                                  var G__13949 = m4772;
                                  var G__13950 = n4773;
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(G__13937, G__13938, G__13939, G__13940, G__13941, G__13942, G__13943, G__13944, G__13945, G__13946, G__13947, G__13948, G__13949, G__13950) : f.call(null, G__13937, G__13938, G__13939, G__13940, G__13941, G__13942, G__13943, G__13944, G__13945, G__13946, G__13947, G__13948, G__13949, G__13950);
                                }
                              } else {
                                var o4774 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4760, b4761, c4762, d4763, e4764, f4765, g4766, h4767, i4768, j4769, k4770, l4771, m4772, n4773, o4774);
                                  } else {
                                    var G__13951 = a4760;
                                    var G__13952 = b4761;
                                    var G__13953 = c4762;
                                    var G__13954 = d4763;
                                    var G__13955 = e4764;
                                    var G__13956 = f4765;
                                    var G__13957 = g4766;
                                    var G__13958 = h4767;
                                    var G__13959 = i4768;
                                    var G__13960 = j4769;
                                    var G__13961 = k4770;
                                    var G__13962 = l4771;
                                    var G__13963 = m4772;
                                    var G__13964 = n4773;
                                    var G__13965 = o4774;
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(G__13951, G__13952, G__13953, G__13954, G__13955, G__13956, G__13957, G__13958, G__13959, G__13960, G__13961, G__13962, G__13963, G__13964, G__13965) : f.call(null, G__13951, G__13952, G__13953, G__13954, G__13955, G__13956, G__13957, G__13958, G__13959, G__13960, G__13961, G__13962, G__13963, G__13964, G__13965);
                                  }
                                } else {
                                  var p4775 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4760, b4761, c4762, d4763, e4764, f4765, g4766, h4767, i4768, j4769, k4770, l4771, m4772, n4773, o4774, p4775);
                                    } else {
                                      var G__13966 = a4760;
                                      var G__13967 = b4761;
                                      var G__13968 = c4762;
                                      var G__13969 = d4763;
                                      var G__13970 = e4764;
                                      var G__13971 = f4765;
                                      var G__13972 = g4766;
                                      var G__13973 = h4767;
                                      var G__13974 = i4768;
                                      var G__13975 = j4769;
                                      var G__13976 = k4770;
                                      var G__13977 = l4771;
                                      var G__13978 = m4772;
                                      var G__13979 = n4773;
                                      var G__13980 = o4774;
                                      var G__13981 = p4775;
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(G__13966, G__13967, G__13968, G__13969, G__13970, G__13971, G__13972, G__13973, G__13974, G__13975, G__13976, G__13977, G__13978, G__13979, G__13980, G__13981) : f.call(null, G__13966, G__13967, G__13968, G__13969, G__13970, G__13971, G__13972, G__13973, G__13974, G__13975, G__13976, G__13977, G__13978, G__13979, G__13980, G__13981);
                                    }
                                  } else {
                                    var q4776 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4760, b4761, c4762, d4763, e4764, f4765, g4766, h4767, i4768, j4769, k4770, l4771, m4772, n4773, o4774, p4775, q4776);
                                      } else {
                                        var G__13982 = a4760;
                                        var G__13983 = b4761;
                                        var G__13984 = c4762;
                                        var G__13985 = d4763;
                                        var G__13986 = e4764;
                                        var G__13987 = f4765;
                                        var G__13988 = g4766;
                                        var G__13989 = h4767;
                                        var G__13990 = i4768;
                                        var G__13991 = j4769;
                                        var G__13992 = k4770;
                                        var G__13993 = l4771;
                                        var G__13994 = m4772;
                                        var G__13995 = n4773;
                                        var G__13996 = o4774;
                                        var G__13997 = p4775;
                                        var G__13998 = q4776;
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(G__13982, G__13983, G__13984, G__13985, G__13986, G__13987, G__13988, G__13989, G__13990, G__13991, G__13992, G__13993, G__13994, G__13995, G__13996, G__13997, G__13998) : f.call(null, G__13982, G__13983, G__13984, G__13985, G__13986, G__13987, G__13988, G__13989, G__13990, G__13991, G__13992, G__13993, G__13994, G__13995, G__13996, G__13997, G__13998);
                                      }
                                    } else {
                                      var r4777 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4760, b4761, c4762, d4763, e4764, f4765, g4766, h4767, i4768, j4769, k4770, l4771, m4772, n4773, o4774, p4775, q4776, r4777);
                                        } else {
                                          var G__13999 = a4760;
                                          var G__14000 = b4761;
                                          var G__14001 = c4762;
                                          var G__14002 = d4763;
                                          var G__14003 = e4764;
                                          var G__14004 = f4765;
                                          var G__14005 = g4766;
                                          var G__14006 = h4767;
                                          var G__14007 = i4768;
                                          var G__14008 = j4769;
                                          var G__14009 = k4770;
                                          var G__14010 = l4771;
                                          var G__14011 = m4772;
                                          var G__14012 = n4773;
                                          var G__14013 = o4774;
                                          var G__14014 = p4775;
                                          var G__14015 = q4776;
                                          var G__14016 = r4777;
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(G__13999, G__14000, G__14001, G__14002, G__14003, G__14004, G__14005, G__14006, G__14007, G__14008, G__14009, G__14010, G__14011, G__14012, G__14013, G__14014, G__14015, G__14016) : f.call(null, G__13999, G__14000, G__14001, G__14002, G__14003, G__14004, G__14005, G__14006, G__14007, G__14008, G__14009, G__14010, G__14011, G__14012, G__14013, G__14014, G__14015, G__14016);
                                        }
                                      } else {
                                        var s4778 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4760, b4761, c4762, d4763, e4764, f4765, g4766, h4767, i4768, j4769, k4770, l4771, m4772, n4773, o4774, p4775, q4776, r4777, s4778);
                                          } else {
                                            var G__14017 = a4760;
                                            var G__14018 = b4761;
                                            var G__14019 = c4762;
                                            var G__14020 = d4763;
                                            var G__14021 = e4764;
                                            var G__14022 = f4765;
                                            var G__14023 = g4766;
                                            var G__14024 = h4767;
                                            var G__14025 = i4768;
                                            var G__14026 = j4769;
                                            var G__14027 = k4770;
                                            var G__14028 = l4771;
                                            var G__14029 = m4772;
                                            var G__14030 = n4773;
                                            var G__14031 = o4774;
                                            var G__14032 = p4775;
                                            var G__14033 = q4776;
                                            var G__14034 = r4777;
                                            var G__14035 = s4778;
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(G__14017, G__14018, G__14019, G__14020, G__14021, G__14022, G__14023, G__14024, G__14025, G__14026, G__14027, G__14028, G__14029, G__14030, G__14031, G__14032, G__14033, G__14034, G__14035) : f.call(null, G__14017, G__14018, G__14019, G__14020, G__14021, G__14022, G__14023, G__14024, G__14025, G__14026, G__14027, G__14028, G__14029, G__14030, G__14031, G__14032, G__14033, G__14034, 
                                            G__14035);
                                          }
                                        } else {
                                          var t4779 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4760, b4761, c4762, d4763, e4764, f4765, g4766, h4767, i4768, j4769, k4770, l4771, m4772, n4773, o4774, p4775, q4776, r4777, s4778, t4779);
                                            } else {
                                              var G__14036 = a4760;
                                              var G__14037 = b4761;
                                              var G__14038 = c4762;
                                              var G__14039 = d4763;
                                              var G__14040 = e4764;
                                              var G__14041 = f4765;
                                              var G__14042 = g4766;
                                              var G__14043 = h4767;
                                              var G__14044 = i4768;
                                              var G__14045 = j4769;
                                              var G__14046 = k4770;
                                              var G__14047 = l4771;
                                              var G__14048 = m4772;
                                              var G__14049 = n4773;
                                              var G__14050 = o4774;
                                              var G__14051 = p4775;
                                              var G__14052 = q4776;
                                              var G__14053 = r4777;
                                              var G__14054 = s4778;
                                              var G__14055 = t4779;
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(G__14036, G__14037, G__14038, G__14039, G__14040, G__14041, G__14042, G__14043, G__14044, G__14045, G__14046, G__14047, G__14048, G__14049, G__14050, G__14051, G__14052, G__14053, G__14054, G__14055) : f.call(null, G__14036, G__14037, G__14038, G__14039, G__14040, G__14041, G__14042, G__14043, G__14044, G__14045, G__14046, G__14047, G__14048, G__14049, G__14050, G__14051, G__14052, 
                                              G__14053, G__14054, G__14055);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array(args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var apply__6 = function() {
    var G__14056__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to(f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array(arglist));
      }
    };
    var G__14056 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        var G__14057__i = 0, G__14057__a = new Array(arguments.length - 5);
        while (G__14057__i < G__14057__a.length) {
          G__14057__a[G__14057__i] = arguments[G__14057__i + 5];
          ++G__14057__i;
        }
        args = new cljs.core.IndexedSeq(G__14057__a, 0);
      }
      return G__14056__delegate.call(this, f, a, b, c, d, args);
    };
    G__14056.cljs$lang$maxFixedArity = 5;
    G__14056.cljs$lang$applyTo = function(arglist__14058) {
      var f = cljs.core.first(arglist__14058);
      arglist__14058 = cljs.core.next(arglist__14058);
      var a = cljs.core.first(arglist__14058);
      arglist__14058 = cljs.core.next(arglist__14058);
      var b = cljs.core.first(arglist__14058);
      arglist__14058 = cljs.core.next(arglist__14058);
      var c = cljs.core.first(arglist__14058);
      arglist__14058 = cljs.core.next(arglist__14058);
      var d = cljs.core.first(arglist__14058);
      var args = cljs.core.rest(arglist__14058);
      return G__14056__delegate(f, a, b, c, d, args);
    };
    G__14056.cljs$core$IFn$_invoke$arity$variadic = G__14056__delegate;
    return G__14056;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        var G__14059 = null;
        if (arguments.length > 5) {
          var G__14060__i = 0, G__14060__a = new Array(arguments.length - 5);
          while (G__14060__i < G__14060__a.length) {
            G__14060__a[G__14060__i] = arguments[G__14060__i + 5];
            ++G__14060__i;
          }
          G__14059 = new cljs.core.IndexedSeq(G__14060__a, 0);
        }
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, G__14059);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta(obj, function() {
      var G__14076 = cljs.core.meta(obj);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14076) : f.call(null, G__14076);
    }());
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta(obj, function() {
      var G__14077 = cljs.core.meta(obj);
      var G__14078 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14077, G__14078) : f.call(null, G__14077, G__14078);
    }());
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta(obj, function() {
      var G__14079 = cljs.core.meta(obj);
      var G__14080 = a;
      var G__14081 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__14079, G__14080, G__14081) : f.call(null, G__14079, G__14080, G__14081);
    }());
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta(obj, function() {
      var G__14082 = cljs.core.meta(obj);
      var G__14083 = a;
      var G__14084 = b;
      var G__14085 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__14082, G__14083, G__14084, G__14085) : f.call(null, G__14082, G__14083, G__14084, G__14085);
    }());
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta(obj, function() {
      var G__14086 = cljs.core.meta(obj);
      var G__14087 = a;
      var G__14088 = b;
      var G__14089 = c;
      var G__14090 = d;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__14086, G__14087, G__14088, G__14089, G__14090) : f.call(null, G__14086, G__14087, G__14088, G__14089, G__14090);
    }());
  };
  var vary_meta__7 = function() {
    var G__14091__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
    };
    var G__14091 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        var G__14092__i = 0, G__14092__a = new Array(arguments.length - 6);
        while (G__14092__i < G__14092__a.length) {
          G__14092__a[G__14092__i] = arguments[G__14092__i + 6];
          ++G__14092__i;
        }
        args = new cljs.core.IndexedSeq(G__14092__a, 0);
      }
      return G__14091__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__14091.cljs$lang$maxFixedArity = 6;
    G__14091.cljs$lang$applyTo = function(arglist__14093) {
      var obj = cljs.core.first(arglist__14093);
      arglist__14093 = cljs.core.next(arglist__14093);
      var f = cljs.core.first(arglist__14093);
      arglist__14093 = cljs.core.next(arglist__14093);
      var a = cljs.core.first(arglist__14093);
      arglist__14093 = cljs.core.next(arglist__14093);
      var b = cljs.core.first(arglist__14093);
      arglist__14093 = cljs.core.next(arglist__14093);
      var c = cljs.core.first(arglist__14093);
      arglist__14093 = cljs.core.next(arglist__14093);
      var d = cljs.core.first(arglist__14093);
      var args = cljs.core.rest(arglist__14093);
      return G__14091__delegate(obj, f, a, b, c, d, args);
    };
    G__14091.cljs$core$IFn$_invoke$arity$variadic = G__14091__delegate;
    return G__14091;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        var G__14094 = null;
        if (arguments.length > 6) {
          var G__14095__i = 0, G__14095__a = new Array(arguments.length - 6);
          while (G__14095__i < G__14095__a.length) {
            G__14095__a[G__14095__i] = arguments[G__14095__i + 6];
            ++G__14095__i;
          }
          G__14094 = new cljs.core.IndexedSeq(G__14095__a, 0);
        }
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, G__14094);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
  };
  var not_EQ___3 = function() {
    var G__14096__delegate = function(x, y, more) {
      return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
    };
    var G__14096 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__14097__i = 0, G__14097__a = new Array(arguments.length - 2);
        while (G__14097__i < G__14097__a.length) {
          G__14097__a[G__14097__i] = arguments[G__14097__i + 2];
          ++G__14097__i;
        }
        more = new cljs.core.IndexedSeq(G__14097__a, 0);
      }
      return G__14096__delegate.call(this, x, y, more);
    };
    G__14096.cljs$lang$maxFixedArity = 2;
    G__14096.cljs$lang$applyTo = function(arglist__14098) {
      var x = cljs.core.first(arglist__14098);
      arglist__14098 = cljs.core.next(arglist__14098);
      var y = cljs.core.first(arglist__14098);
      var more = cljs.core.rest(arglist__14098);
      return G__14096__delegate(x, y, more);
    };
    G__14096.cljs$core$IFn$_invoke$arity$variadic = G__14096__delegate;
    return G__14096;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        var G__14099 = null;
        if (arguments.length > 2) {
          var G__14100__i = 0, G__14100__a = new Array(arguments.length - 2);
          while (G__14100__i < G__14100__a.length) {
            G__14100__a[G__14100__i] = arguments[G__14100__i + 2];
            ++G__14100__i;
          }
          G__14099 = new cljs.core.IndexedSeq(G__14100__a, 0);
        }
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__14099);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function nil_iter() {
  if (typeof cljs.core.t14104 !== "undefined") {
  } else {
    cljs.core.t14104 = function(nil_iter, meta14105) {
      this.nil_iter = nil_iter;
      this.meta14105 = meta14105;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t14104.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t14104.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t14104.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t14104.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14106) {
      var self__ = this;
      var _14106__$1 = this;
      return self__.meta14105;
    };
    cljs.core.t14104.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14106, meta14105__$1) {
      var self__ = this;
      var _14106__$1 = this;
      return new cljs.core.t14104(self__.nil_iter, meta14105__$1);
    };
    cljs.core.t14104.cljs$lang$type = true;
    cljs.core.t14104.cljs$lang$ctorStr = "cljs.core/t14104";
    cljs.core.t14104.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
      return cljs.core._write(writer__4417__auto__, "cljs.core/t14104");
    };
    cljs.core.__GT_t14104 = function __GT_t14104(nil_iter__$1, meta14105) {
      return new cljs.core.t14104(nil_iter__$1, meta14105);
    };
  }
  return new cljs.core.t14104(nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function __GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function __GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function __GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.iterable_QMARK_(coll)) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3817__auto__ = !(lt.stepper == null);
      if (and__3817__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__3817__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__14107 = lt;
        var G__14108 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__14107, G__14108) : self__.xform.call(null, G__14107, G__14108);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__14109 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__14109) : self__.xform.call(null, G__14109);
  }
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function __GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function stepper(xform, iter) {
  var stepfn = function() {
    var stepfn = null;
    var stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return stepfn__1.call(this, result);
        case 2:
          return stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
    stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
    return stepfn;
  }();
  return new cljs.core.Stepper(function() {
    var G__14111 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__14111) : xform.call(null, G__14111);
  }(), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__14113 = cljs.core.next(iters__$1);
        iters__$1 = G__14113;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__4716__auto___14114 = self__.iters.length;
  var i_14115 = 0;
  while (true) {
    if (i_14115 < n__4716__auto___14114) {
      self__.nexts[i_14115] = self__.iters[i_14115].next();
      var G__14116 = i_14115 + 1;
      i_14115 = G__14116;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3817__auto__ = !(lt.stepper == null);
      if (and__3817__auto__) {
        return this$.hasNext();
      } else {
        return and__3817__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__14112 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__14112) : self__.xform.call(null, G__14112);
  }
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function __GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function() {
  var multi_stepper = null;
  var multi_stepper__2 = function(xform, iters) {
    return multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
  };
  var multi_stepper__3 = function(xform, iters, nexts) {
    var stepfn = function() {
      var stepfn = null;
      var stepfn__1 = function(result) {
        var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
        lt.stepper = null;
        return lt;
      };
      var stepfn__2 = function(result, input) {
        var lt = result;
        lt.first = input;
        lt.rest = cljs.core.lazy_transformer(lt.stepper);
        lt.stepper = null;
        return lt.rest;
      };
      stepfn = function(result, input) {
        switch(arguments.length) {
          case 1:
            return stepfn__1.call(this, result);
          case 2:
            return stepfn__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
      stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
      return stepfn;
    }();
    return new cljs.core.MultiStepper(function() {
      var G__14121 = stepfn;
      return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__14121) : xform.call(null, G__14121);
    }(), iters, nexts);
  };
  multi_stepper = function(xform, iters, nexts) {
    switch(arguments.length) {
      case 2:
        return multi_stepper__2.call(this, xform, iters);
      case 3:
        return multi_stepper__3.call(this, xform, iters, nexts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  multi_stepper.cljs$core$IFn$_invoke$arity$2 = multi_stepper__2;
  multi_stepper.cljs$core$IFn$_invoke$arity$3 = multi_stepper__3;
  return multi_stepper;
}();
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function __GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__14122_14126 = cljs.core.seq(colls);
  var chunk__14123_14127 = null;
  var count__14124_14128 = 0;
  var i__14125_14129 = 0;
  while (true) {
    if (i__14125_14129 < count__14124_14128) {
      var coll_14130 = chunk__14123_14127.cljs$core$IIndexed$_nth$arity$2(null, i__14125_14129);
      iters.push(cljs.core.iter(coll_14130));
      var G__14131 = seq__14122_14126;
      var G__14132 = chunk__14123_14127;
      var G__14133 = count__14124_14128;
      var G__14134 = i__14125_14129 + 1;
      seq__14122_14126 = G__14131;
      chunk__14123_14127 = G__14132;
      count__14124_14128 = G__14133;
      i__14125_14129 = G__14134;
      continue;
    } else {
      var temp__4126__auto___14135 = cljs.core.seq(seq__14122_14126);
      if (temp__4126__auto___14135) {
        var seq__14122_14136__$1 = temp__4126__auto___14135;
        if (cljs.core.chunked_seq_QMARK_(seq__14122_14136__$1)) {
          var c__4616__auto___14137 = cljs.core.chunk_first(seq__14122_14136__$1);
          var G__14138 = cljs.core.chunk_rest(seq__14122_14136__$1);
          var G__14139 = c__4616__auto___14137;
          var G__14140 = cljs.core.count(c__4616__auto___14137);
          var G__14141 = 0;
          seq__14122_14126 = G__14138;
          chunk__14123_14127 = G__14139;
          count__14124_14128 = G__14140;
          i__14125_14129 = G__14141;
          continue;
        } else {
          var coll_14142 = cljs.core.first(seq__14122_14136__$1);
          iters.push(cljs.core.iter(coll_14142));
          var G__14143 = cljs.core.next(seq__14122_14136__$1);
          var G__14144 = null;
          var G__14145 = 0;
          var G__14146 = 0;
          seq__14122_14126 = G__14143;
          chunk__14123_14127 = G__14144;
          count__14124_14128 = G__14145;
          i__14125_14129 = G__14146;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function() {
  var sequence = null;
  var sequence__1 = function(coll) {
    if (cljs.core.seq_QMARK_(coll)) {
      return coll;
    } else {
      var or__3829__auto__ = cljs.core.seq(coll);
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  };
  var sequence__2 = function(xform, coll) {
    return cljs.core.LazyTransformer.create(xform, coll);
  };
  var sequence__3 = function() {
    var G__14147__delegate = function(xform, coll, colls) {
      return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
    };
    var G__14147 = function(xform, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        var G__14148__i = 0, G__14148__a = new Array(arguments.length - 2);
        while (G__14148__i < G__14148__a.length) {
          G__14148__a[G__14148__i] = arguments[G__14148__i + 2];
          ++G__14148__i;
        }
        colls = new cljs.core.IndexedSeq(G__14148__a, 0);
      }
      return G__14147__delegate.call(this, xform, coll, colls);
    };
    G__14147.cljs$lang$maxFixedArity = 2;
    G__14147.cljs$lang$applyTo = function(arglist__14149) {
      var xform = cljs.core.first(arglist__14149);
      arglist__14149 = cljs.core.next(arglist__14149);
      var coll = cljs.core.first(arglist__14149);
      var colls = cljs.core.rest(arglist__14149);
      return G__14147__delegate(xform, coll, colls);
    };
    G__14147.cljs$core$IFn$_invoke$arity$variadic = G__14147__delegate;
    return G__14147;
  }();
  sequence = function(xform, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return sequence__1.call(this, xform);
      case 2:
        return sequence__2.call(this, xform, coll);
      default:
        var G__14150 = null;
        if (arguments.length > 2) {
          var G__14151__i = 0, G__14151__a = new Array(arguments.length - 2);
          while (G__14151__i < G__14151__a.length) {
            G__14151__a[G__14151__i] = arguments[G__14151__i + 2];
            ++G__14151__i;
          }
          G__14150 = new cljs.core.IndexedSeq(G__14151__a, 0);
        }
        return sequence__3.cljs$core$IFn$_invoke$arity$variadic(xform, coll, G__14150);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sequence.cljs$lang$maxFixedArity = 2;
  sequence.cljs$lang$applyTo = sequence__3.cljs$lang$applyTo;
  sequence.cljs$core$IFn$_invoke$arity$1 = sequence__1;
  sequence.cljs$core$IFn$_invoke$arity$2 = sequence__2;
  sequence.cljs$core$IFn$_invoke$arity$variadic = sequence__3.cljs$core$IFn$_invoke$arity$variadic;
  return sequence;
}();
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__14153 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__14153) : pred.call(null, G__14153);
      }())) {
        var G__14154 = pred;
        var G__14155 = cljs.core.next(coll);
        pred = G__14154;
        coll = G__14155;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__3829__auto__ = function() {
        var G__14159 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__14159) : pred.call(null, G__14159);
      }();
      if (cljs.core.truth_(or__3829__auto__)) {
        return or__3829__auto__;
      } else {
        var G__14160 = pred;
        var G__14161 = cljs.core.next(coll);
        pred = G__14160;
        coll = G__14161;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_(n);
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__14168 = null;
    var G__14168__0 = function() {
      return cljs.core.not(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    };
    var G__14168__1 = function(x) {
      return cljs.core.not(function() {
        var G__14165 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14165) : f.call(null, G__14165);
      }());
    };
    var G__14168__2 = function(x, y) {
      return cljs.core.not(function() {
        var G__14166 = x;
        var G__14167 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14166, G__14167) : f.call(null, G__14166, G__14167);
      }());
    };
    var G__14168__3 = function() {
      var G__14169__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__14169 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__14170__i = 0, G__14170__a = new Array(arguments.length - 2);
          while (G__14170__i < G__14170__a.length) {
            G__14170__a[G__14170__i] = arguments[G__14170__i + 2];
            ++G__14170__i;
          }
          zs = new cljs.core.IndexedSeq(G__14170__a, 0);
        }
        return G__14169__delegate.call(this, x, y, zs);
      };
      G__14169.cljs$lang$maxFixedArity = 2;
      G__14169.cljs$lang$applyTo = function(arglist__14171) {
        var x = cljs.core.first(arglist__14171);
        arglist__14171 = cljs.core.next(arglist__14171);
        var y = cljs.core.first(arglist__14171);
        var zs = cljs.core.rest(arglist__14171);
        return G__14169__delegate(x, y, zs);
      };
      G__14169.cljs$core$IFn$_invoke$arity$variadic = G__14169__delegate;
      return G__14169;
    }();
    G__14168 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__14168__0.call(this);
        case 1:
          return G__14168__1.call(this, x);
        case 2:
          return G__14168__2.call(this, x, y);
        default:
          var G__14172 = null;
          if (arguments.length > 2) {
            var G__14173__i = 0, G__14173__a = new Array(arguments.length - 2);
            while (G__14173__i < G__14173__a.length) {
              G__14173__a[G__14173__i] = arguments[G__14173__i + 2];
              ++G__14173__i;
            }
            G__14172 = new cljs.core.IndexedSeq(G__14173__a, 0);
          }
          return G__14168__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__14172);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__14168.cljs$lang$maxFixedArity = 2;
    G__14168.cljs$lang$applyTo = G__14168__3.cljs$lang$applyTo;
    G__14168.cljs$core$IFn$_invoke$arity$0 = G__14168__0;
    G__14168.cljs$core$IFn$_invoke$arity$1 = G__14168__1;
    G__14168.cljs$core$IFn$_invoke$arity$2 = G__14168__2;
    G__14168.cljs$core$IFn$_invoke$arity$variadic = G__14168__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__14168;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__14174__delegate = function(args) {
      return x;
    };
    var G__14174 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__14175__i = 0, G__14175__a = new Array(arguments.length - 0);
        while (G__14175__i < G__14175__a.length) {
          G__14175__a[G__14175__i] = arguments[G__14175__i + 0];
          ++G__14175__i;
        }
        args = new cljs.core.IndexedSeq(G__14175__a, 0);
      }
      return G__14174__delegate.call(this, args);
    };
    G__14174.cljs$lang$maxFixedArity = 0;
    G__14174.cljs$lang$applyTo = function(arglist__14176) {
      var args = cljs.core.seq(arglist__14176);
      return G__14174__delegate(args);
    };
    G__14174.cljs$core$IFn$_invoke$arity$variadic = G__14174__delegate;
    return G__14174;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__14231 = null;
      var G__14231__0 = function() {
        var G__14204 = function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14204) : f.call(null, G__14204);
      };
      var G__14231__1 = function(x) {
        var G__14205 = function() {
          var G__14206 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__14206) : g.call(null, G__14206);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14205) : f.call(null, G__14205);
      };
      var G__14231__2 = function(x, y) {
        var G__14207 = function() {
          var G__14208 = x;
          var G__14209 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__14208, G__14209) : g.call(null, G__14208, G__14209);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14207) : f.call(null, G__14207);
      };
      var G__14231__3 = function(x, y, z) {
        var G__14210 = function() {
          var G__14211 = x;
          var G__14212 = y;
          var G__14213 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__14211, G__14212, G__14213) : g.call(null, G__14211, G__14212, G__14213);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14210) : f.call(null, G__14210);
      };
      var G__14231__4 = function() {
        var G__14232__delegate = function(x, y, z, args) {
          var G__14214 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14214) : f.call(null, G__14214);
        };
        var G__14232 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__14233__i = 0, G__14233__a = new Array(arguments.length - 3);
            while (G__14233__i < G__14233__a.length) {
              G__14233__a[G__14233__i] = arguments[G__14233__i + 3];
              ++G__14233__i;
            }
            args = new cljs.core.IndexedSeq(G__14233__a, 0);
          }
          return G__14232__delegate.call(this, x, y, z, args);
        };
        G__14232.cljs$lang$maxFixedArity = 3;
        G__14232.cljs$lang$applyTo = function(arglist__14234) {
          var x = cljs.core.first(arglist__14234);
          arglist__14234 = cljs.core.next(arglist__14234);
          var y = cljs.core.first(arglist__14234);
          arglist__14234 = cljs.core.next(arglist__14234);
          var z = cljs.core.first(arglist__14234);
          var args = cljs.core.rest(arglist__14234);
          return G__14232__delegate(x, y, z, args);
        };
        G__14232.cljs$core$IFn$_invoke$arity$variadic = G__14232__delegate;
        return G__14232;
      }();
      G__14231 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__14231__0.call(this);
          case 1:
            return G__14231__1.call(this, x);
          case 2:
            return G__14231__2.call(this, x, y);
          case 3:
            return G__14231__3.call(this, x, y, z);
          default:
            var G__14235 = null;
            if (arguments.length > 3) {
              var G__14236__i = 0, G__14236__a = new Array(arguments.length - 3);
              while (G__14236__i < G__14236__a.length) {
                G__14236__a[G__14236__i] = arguments[G__14236__i + 3];
                ++G__14236__i;
              }
              G__14235 = new cljs.core.IndexedSeq(G__14236__a, 0);
            }
            return G__14231__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__14235);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__14231.cljs$lang$maxFixedArity = 3;
      G__14231.cljs$lang$applyTo = G__14231__4.cljs$lang$applyTo;
      G__14231.cljs$core$IFn$_invoke$arity$0 = G__14231__0;
      G__14231.cljs$core$IFn$_invoke$arity$1 = G__14231__1;
      G__14231.cljs$core$IFn$_invoke$arity$2 = G__14231__2;
      G__14231.cljs$core$IFn$_invoke$arity$3 = G__14231__3;
      G__14231.cljs$core$IFn$_invoke$arity$variadic = G__14231__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__14231;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__14237 = null;
      var G__14237__0 = function() {
        var G__14215 = function() {
          var G__14216 = function() {
            return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__14216) : g.call(null, G__14216);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14215) : f.call(null, G__14215);
      };
      var G__14237__1 = function(x) {
        var G__14217 = function() {
          var G__14218 = function() {
            var G__14219 = x;
            return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__14219) : h.call(null, G__14219);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__14218) : g.call(null, G__14218);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14217) : f.call(null, G__14217);
      };
      var G__14237__2 = function(x, y) {
        var G__14220 = function() {
          var G__14221 = function() {
            var G__14222 = x;
            var G__14223 = y;
            return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__14222, G__14223) : h.call(null, G__14222, G__14223);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__14221) : g.call(null, G__14221);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14220) : f.call(null, G__14220);
      };
      var G__14237__3 = function(x, y, z) {
        var G__14224 = function() {
          var G__14225 = function() {
            var G__14226 = x;
            var G__14227 = y;
            var G__14228 = z;
            return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__14226, G__14227, G__14228) : h.call(null, G__14226, G__14227, G__14228);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__14225) : g.call(null, G__14225);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14224) : f.call(null, G__14224);
      };
      var G__14237__4 = function() {
        var G__14238__delegate = function(x, y, z, args) {
          var G__14229 = function() {
            var G__14230 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
            return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__14230) : g.call(null, G__14230);
          }();
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14229) : f.call(null, G__14229);
        };
        var G__14238 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__14239__i = 0, G__14239__a = new Array(arguments.length - 3);
            while (G__14239__i < G__14239__a.length) {
              G__14239__a[G__14239__i] = arguments[G__14239__i + 3];
              ++G__14239__i;
            }
            args = new cljs.core.IndexedSeq(G__14239__a, 0);
          }
          return G__14238__delegate.call(this, x, y, z, args);
        };
        G__14238.cljs$lang$maxFixedArity = 3;
        G__14238.cljs$lang$applyTo = function(arglist__14240) {
          var x = cljs.core.first(arglist__14240);
          arglist__14240 = cljs.core.next(arglist__14240);
          var y = cljs.core.first(arglist__14240);
          arglist__14240 = cljs.core.next(arglist__14240);
          var z = cljs.core.first(arglist__14240);
          var args = cljs.core.rest(arglist__14240);
          return G__14238__delegate(x, y, z, args);
        };
        G__14238.cljs$core$IFn$_invoke$arity$variadic = G__14238__delegate;
        return G__14238;
      }();
      G__14237 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__14237__0.call(this);
          case 1:
            return G__14237__1.call(this, x);
          case 2:
            return G__14237__2.call(this, x, y);
          case 3:
            return G__14237__3.call(this, x, y, z);
          default:
            var G__14241 = null;
            if (arguments.length > 3) {
              var G__14242__i = 0, G__14242__a = new Array(arguments.length - 3);
              while (G__14242__i < G__14242__a.length) {
                G__14242__a[G__14242__i] = arguments[G__14242__i + 3];
                ++G__14242__i;
              }
              G__14241 = new cljs.core.IndexedSeq(G__14242__a, 0);
            }
            return G__14237__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__14241);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__14237.cljs$lang$maxFixedArity = 3;
      G__14237.cljs$lang$applyTo = G__14237__4.cljs$lang$applyTo;
      G__14237.cljs$core$IFn$_invoke$arity$0 = G__14237__0;
      G__14237.cljs$core$IFn$_invoke$arity$1 = G__14237__1;
      G__14237.cljs$core$IFn$_invoke$arity$2 = G__14237__2;
      G__14237.cljs$core$IFn$_invoke$arity$3 = G__14237__3;
      G__14237.cljs$core$IFn$_invoke$arity$variadic = G__14237__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__14237;
    }();
  };
  var comp__4 = function() {
    var G__14243__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__14244__delegate = function(args) {
            var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
            var fs__$2 = cljs.core.next(fs__$1);
            while (true) {
              if (fs__$2) {
                var G__14245 = cljs.core.first(fs__$2).call(null, ret);
                var G__14246 = cljs.core.next(fs__$2);
                ret = G__14245;
                fs__$2 = G__14246;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__14244 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              var G__14247__i = 0, G__14247__a = new Array(arguments.length - 0);
              while (G__14247__i < G__14247__a.length) {
                G__14247__a[G__14247__i] = arguments[G__14247__i + 0];
                ++G__14247__i;
              }
              args = new cljs.core.IndexedSeq(G__14247__a, 0);
            }
            return G__14244__delegate.call(this, args);
          };
          G__14244.cljs$lang$maxFixedArity = 0;
          G__14244.cljs$lang$applyTo = function(arglist__14248) {
            var args = cljs.core.seq(arglist__14248);
            return G__14244__delegate(args);
          };
          G__14244.cljs$core$IFn$_invoke$arity$variadic = G__14244__delegate;
          return G__14244;
        }();
      }(fs__$1);
    };
    var G__14243 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        var G__14249__i = 0, G__14249__a = new Array(arguments.length - 3);
        while (G__14249__i < G__14249__a.length) {
          G__14249__a[G__14249__i] = arguments[G__14249__i + 3];
          ++G__14249__i;
        }
        fs = new cljs.core.IndexedSeq(G__14249__a, 0);
      }
      return G__14243__delegate.call(this, f1, f2, f3, fs);
    };
    G__14243.cljs$lang$maxFixedArity = 3;
    G__14243.cljs$lang$applyTo = function(arglist__14250) {
      var f1 = cljs.core.first(arglist__14250);
      arglist__14250 = cljs.core.next(arglist__14250);
      var f2 = cljs.core.first(arglist__14250);
      arglist__14250 = cljs.core.next(arglist__14250);
      var f3 = cljs.core.first(arglist__14250);
      var fs = cljs.core.rest(arglist__14250);
      return G__14243__delegate(f1, f2, f3, fs);
    };
    G__14243.cljs$core$IFn$_invoke$arity$variadic = G__14243__delegate;
    return G__14243;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        var G__14251 = null;
        if (arguments.length > 3) {
          var G__14252__i = 0, G__14252__a = new Array(arguments.length - 3);
          while (G__14252__i < G__14252__a.length) {
            G__14252__a[G__14252__i] = arguments[G__14252__i + 3];
            ++G__14252__i;
          }
          G__14251 = new cljs.core.IndexedSeq(G__14252__a, 0);
        }
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, G__14251);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__14337 = null;
      var G__14337__0 = function() {
        var G__14295 = arg1;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14295) : f.call(null, G__14295);
      };
      var G__14337__1 = function(x) {
        var G__14296 = arg1;
        var G__14297 = x;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14296, G__14297) : f.call(null, G__14296, G__14297);
      };
      var G__14337__2 = function(x, y) {
        var G__14298 = arg1;
        var G__14299 = x;
        var G__14300 = y;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__14298, G__14299, G__14300) : f.call(null, G__14298, G__14299, G__14300);
      };
      var G__14337__3 = function(x, y, z) {
        var G__14301 = arg1;
        var G__14302 = x;
        var G__14303 = y;
        var G__14304 = z;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__14301, G__14302, G__14303, G__14304) : f.call(null, G__14301, G__14302, G__14303, G__14304);
      };
      var G__14337__4 = function() {
        var G__14338__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
        };
        var G__14338 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__14339__i = 0, G__14339__a = new Array(arguments.length - 3);
            while (G__14339__i < G__14339__a.length) {
              G__14339__a[G__14339__i] = arguments[G__14339__i + 3];
              ++G__14339__i;
            }
            args = new cljs.core.IndexedSeq(G__14339__a, 0);
          }
          return G__14338__delegate.call(this, x, y, z, args);
        };
        G__14338.cljs$lang$maxFixedArity = 3;
        G__14338.cljs$lang$applyTo = function(arglist__14340) {
          var x = cljs.core.first(arglist__14340);
          arglist__14340 = cljs.core.next(arglist__14340);
          var y = cljs.core.first(arglist__14340);
          arglist__14340 = cljs.core.next(arglist__14340);
          var z = cljs.core.first(arglist__14340);
          var args = cljs.core.rest(arglist__14340);
          return G__14338__delegate(x, y, z, args);
        };
        G__14338.cljs$core$IFn$_invoke$arity$variadic = G__14338__delegate;
        return G__14338;
      }();
      G__14337 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__14337__0.call(this);
          case 1:
            return G__14337__1.call(this, x);
          case 2:
            return G__14337__2.call(this, x, y);
          case 3:
            return G__14337__3.call(this, x, y, z);
          default:
            var G__14341 = null;
            if (arguments.length > 3) {
              var G__14342__i = 0, G__14342__a = new Array(arguments.length - 3);
              while (G__14342__i < G__14342__a.length) {
                G__14342__a[G__14342__i] = arguments[G__14342__i + 3];
                ++G__14342__i;
              }
              G__14341 = new cljs.core.IndexedSeq(G__14342__a, 0);
            }
            return G__14337__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__14341);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__14337.cljs$lang$maxFixedArity = 3;
      G__14337.cljs$lang$applyTo = G__14337__4.cljs$lang$applyTo;
      G__14337.cljs$core$IFn$_invoke$arity$0 = G__14337__0;
      G__14337.cljs$core$IFn$_invoke$arity$1 = G__14337__1;
      G__14337.cljs$core$IFn$_invoke$arity$2 = G__14337__2;
      G__14337.cljs$core$IFn$_invoke$arity$3 = G__14337__3;
      G__14337.cljs$core$IFn$_invoke$arity$variadic = G__14337__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__14337;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__14343 = null;
      var G__14343__0 = function() {
        var G__14305 = arg1;
        var G__14306 = arg2;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14305, G__14306) : f.call(null, G__14305, G__14306);
      };
      var G__14343__1 = function(x) {
        var G__14307 = arg1;
        var G__14308 = arg2;
        var G__14309 = x;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__14307, G__14308, G__14309) : f.call(null, G__14307, G__14308, G__14309);
      };
      var G__14343__2 = function(x, y) {
        var G__14310 = arg1;
        var G__14311 = arg2;
        var G__14312 = x;
        var G__14313 = y;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__14310, G__14311, G__14312, G__14313) : f.call(null, G__14310, G__14311, G__14312, G__14313);
      };
      var G__14343__3 = function(x, y, z) {
        var G__14314 = arg1;
        var G__14315 = arg2;
        var G__14316 = x;
        var G__14317 = y;
        var G__14318 = z;
        return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__14314, G__14315, G__14316, G__14317, G__14318) : f.call(null, G__14314, G__14315, G__14316, G__14317, G__14318);
      };
      var G__14343__4 = function() {
        var G__14344__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
        };
        var G__14344 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__14345__i = 0, G__14345__a = new Array(arguments.length - 3);
            while (G__14345__i < G__14345__a.length) {
              G__14345__a[G__14345__i] = arguments[G__14345__i + 3];
              ++G__14345__i;
            }
            args = new cljs.core.IndexedSeq(G__14345__a, 0);
          }
          return G__14344__delegate.call(this, x, y, z, args);
        };
        G__14344.cljs$lang$maxFixedArity = 3;
        G__14344.cljs$lang$applyTo = function(arglist__14346) {
          var x = cljs.core.first(arglist__14346);
          arglist__14346 = cljs.core.next(arglist__14346);
          var y = cljs.core.first(arglist__14346);
          arglist__14346 = cljs.core.next(arglist__14346);
          var z = cljs.core.first(arglist__14346);
          var args = cljs.core.rest(arglist__14346);
          return G__14344__delegate(x, y, z, args);
        };
        G__14344.cljs$core$IFn$_invoke$arity$variadic = G__14344__delegate;
        return G__14344;
      }();
      G__14343 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__14343__0.call(this);
          case 1:
            return G__14343__1.call(this, x);
          case 2:
            return G__14343__2.call(this, x, y);
          case 3:
            return G__14343__3.call(this, x, y, z);
          default:
            var G__14347 = null;
            if (arguments.length > 3) {
              var G__14348__i = 0, G__14348__a = new Array(arguments.length - 3);
              while (G__14348__i < G__14348__a.length) {
                G__14348__a[G__14348__i] = arguments[G__14348__i + 3];
                ++G__14348__i;
              }
              G__14347 = new cljs.core.IndexedSeq(G__14348__a, 0);
            }
            return G__14343__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__14347);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__14343.cljs$lang$maxFixedArity = 3;
      G__14343.cljs$lang$applyTo = G__14343__4.cljs$lang$applyTo;
      G__14343.cljs$core$IFn$_invoke$arity$0 = G__14343__0;
      G__14343.cljs$core$IFn$_invoke$arity$1 = G__14343__1;
      G__14343.cljs$core$IFn$_invoke$arity$2 = G__14343__2;
      G__14343.cljs$core$IFn$_invoke$arity$3 = G__14343__3;
      G__14343.cljs$core$IFn$_invoke$arity$variadic = G__14343__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__14343;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__14349 = null;
      var G__14349__0 = function() {
        var G__14319 = arg1;
        var G__14320 = arg2;
        var G__14321 = arg3;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__14319, G__14320, G__14321) : f.call(null, G__14319, G__14320, G__14321);
      };
      var G__14349__1 = function(x) {
        var G__14322 = arg1;
        var G__14323 = arg2;
        var G__14324 = arg3;
        var G__14325 = x;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__14322, G__14323, G__14324, G__14325) : f.call(null, G__14322, G__14323, G__14324, G__14325);
      };
      var G__14349__2 = function(x, y) {
        var G__14326 = arg1;
        var G__14327 = arg2;
        var G__14328 = arg3;
        var G__14329 = x;
        var G__14330 = y;
        return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__14326, G__14327, G__14328, G__14329, G__14330) : f.call(null, G__14326, G__14327, G__14328, G__14329, G__14330);
      };
      var G__14349__3 = function(x, y, z) {
        var G__14331 = arg1;
        var G__14332 = arg2;
        var G__14333 = arg3;
        var G__14334 = x;
        var G__14335 = y;
        var G__14336 = z;
        return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__14331, G__14332, G__14333, G__14334, G__14335, G__14336) : f.call(null, G__14331, G__14332, G__14333, G__14334, G__14335, G__14336);
      };
      var G__14349__4 = function() {
        var G__14350__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
        };
        var G__14350 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__14351__i = 0, G__14351__a = new Array(arguments.length - 3);
            while (G__14351__i < G__14351__a.length) {
              G__14351__a[G__14351__i] = arguments[G__14351__i + 3];
              ++G__14351__i;
            }
            args = new cljs.core.IndexedSeq(G__14351__a, 0);
          }
          return G__14350__delegate.call(this, x, y, z, args);
        };
        G__14350.cljs$lang$maxFixedArity = 3;
        G__14350.cljs$lang$applyTo = function(arglist__14352) {
          var x = cljs.core.first(arglist__14352);
          arglist__14352 = cljs.core.next(arglist__14352);
          var y = cljs.core.first(arglist__14352);
          arglist__14352 = cljs.core.next(arglist__14352);
          var z = cljs.core.first(arglist__14352);
          var args = cljs.core.rest(arglist__14352);
          return G__14350__delegate(x, y, z, args);
        };
        G__14350.cljs$core$IFn$_invoke$arity$variadic = G__14350__delegate;
        return G__14350;
      }();
      G__14349 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__14349__0.call(this);
          case 1:
            return G__14349__1.call(this, x);
          case 2:
            return G__14349__2.call(this, x, y);
          case 3:
            return G__14349__3.call(this, x, y, z);
          default:
            var G__14353 = null;
            if (arguments.length > 3) {
              var G__14354__i = 0, G__14354__a = new Array(arguments.length - 3);
              while (G__14354__i < G__14354__a.length) {
                G__14354__a[G__14354__i] = arguments[G__14354__i + 3];
                ++G__14354__i;
              }
              G__14353 = new cljs.core.IndexedSeq(G__14354__a, 0);
            }
            return G__14349__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__14353);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__14349.cljs$lang$maxFixedArity = 3;
      G__14349.cljs$lang$applyTo = G__14349__4.cljs$lang$applyTo;
      G__14349.cljs$core$IFn$_invoke$arity$0 = G__14349__0;
      G__14349.cljs$core$IFn$_invoke$arity$1 = G__14349__1;
      G__14349.cljs$core$IFn$_invoke$arity$2 = G__14349__2;
      G__14349.cljs$core$IFn$_invoke$arity$3 = G__14349__3;
      G__14349.cljs$core$IFn$_invoke$arity$variadic = G__14349__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__14349;
    }();
  };
  var partial__5 = function() {
    var G__14355__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__14356__delegate = function(args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
        };
        var G__14356 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            var G__14357__i = 0, G__14357__a = new Array(arguments.length - 0);
            while (G__14357__i < G__14357__a.length) {
              G__14357__a[G__14357__i] = arguments[G__14357__i + 0];
              ++G__14357__i;
            }
            args = new cljs.core.IndexedSeq(G__14357__a, 0);
          }
          return G__14356__delegate.call(this, args);
        };
        G__14356.cljs$lang$maxFixedArity = 0;
        G__14356.cljs$lang$applyTo = function(arglist__14358) {
          var args = cljs.core.seq(arglist__14358);
          return G__14356__delegate(args);
        };
        G__14356.cljs$core$IFn$_invoke$arity$variadic = G__14356__delegate;
        return G__14356;
      }();
    };
    var G__14355 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__14359__i = 0, G__14359__a = new Array(arguments.length - 4);
        while (G__14359__i < G__14359__a.length) {
          G__14359__a[G__14359__i] = arguments[G__14359__i + 4];
          ++G__14359__i;
        }
        more = new cljs.core.IndexedSeq(G__14359__a, 0);
      }
      return G__14355__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__14355.cljs$lang$maxFixedArity = 4;
    G__14355.cljs$lang$applyTo = function(arglist__14360) {
      var f = cljs.core.first(arglist__14360);
      arglist__14360 = cljs.core.next(arglist__14360);
      var arg1 = cljs.core.first(arglist__14360);
      arglist__14360 = cljs.core.next(arglist__14360);
      var arg2 = cljs.core.first(arglist__14360);
      arglist__14360 = cljs.core.next(arglist__14360);
      var arg3 = cljs.core.first(arglist__14360);
      var more = cljs.core.rest(arglist__14360);
      return G__14355__delegate(f, arg1, arg2, arg3, more);
    };
    G__14355.cljs$core$IFn$_invoke$arity$variadic = G__14355__delegate;
    return G__14355;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        var G__14361 = null;
        if (arguments.length > 4) {
          var G__14362__i = 0, G__14362__a = new Array(arguments.length - 4);
          while (G__14362__i < G__14362__a.length) {
            G__14362__a[G__14362__i] = arguments[G__14362__i + 4];
            ++G__14362__i;
          }
          G__14361 = new cljs.core.IndexedSeq(G__14362__a, 0);
        }
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, G__14361);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__14395 = null;
      var G__14395__1 = function(a) {
        var G__14379 = a == null ? x : a;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14379) : f.call(null, G__14379);
      };
      var G__14395__2 = function(a, b) {
        var G__14380 = a == null ? x : a;
        var G__14381 = b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14380, G__14381) : f.call(null, G__14380, G__14381);
      };
      var G__14395__3 = function(a, b, c) {
        var G__14382 = a == null ? x : a;
        var G__14383 = b;
        var G__14384 = c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__14382, G__14383, G__14384) : f.call(null, G__14382, G__14383, G__14384);
      };
      var G__14395__4 = function() {
        var G__14396__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
        };
        var G__14396 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__14397__i = 0, G__14397__a = new Array(arguments.length - 3);
            while (G__14397__i < G__14397__a.length) {
              G__14397__a[G__14397__i] = arguments[G__14397__i + 3];
              ++G__14397__i;
            }
            ds = new cljs.core.IndexedSeq(G__14397__a, 0);
          }
          return G__14396__delegate.call(this, a, b, c, ds);
        };
        G__14396.cljs$lang$maxFixedArity = 3;
        G__14396.cljs$lang$applyTo = function(arglist__14398) {
          var a = cljs.core.first(arglist__14398);
          arglist__14398 = cljs.core.next(arglist__14398);
          var b = cljs.core.first(arglist__14398);
          arglist__14398 = cljs.core.next(arglist__14398);
          var c = cljs.core.first(arglist__14398);
          var ds = cljs.core.rest(arglist__14398);
          return G__14396__delegate(a, b, c, ds);
        };
        G__14396.cljs$core$IFn$_invoke$arity$variadic = G__14396__delegate;
        return G__14396;
      }();
      G__14395 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__14395__1.call(this, a);
          case 2:
            return G__14395__2.call(this, a, b);
          case 3:
            return G__14395__3.call(this, a, b, c);
          default:
            var G__14399 = null;
            if (arguments.length > 3) {
              var G__14400__i = 0, G__14400__a = new Array(arguments.length - 3);
              while (G__14400__i < G__14400__a.length) {
                G__14400__a[G__14400__i] = arguments[G__14400__i + 3];
                ++G__14400__i;
              }
              G__14399 = new cljs.core.IndexedSeq(G__14400__a, 0);
            }
            return G__14395__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__14399);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__14395.cljs$lang$maxFixedArity = 3;
      G__14395.cljs$lang$applyTo = G__14395__4.cljs$lang$applyTo;
      G__14395.cljs$core$IFn$_invoke$arity$1 = G__14395__1;
      G__14395.cljs$core$IFn$_invoke$arity$2 = G__14395__2;
      G__14395.cljs$core$IFn$_invoke$arity$3 = G__14395__3;
      G__14395.cljs$core$IFn$_invoke$arity$variadic = G__14395__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__14395;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__14401 = null;
      var G__14401__2 = function(a, b) {
        var G__14385 = a == null ? x : a;
        var G__14386 = b == null ? y : b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14385, G__14386) : f.call(null, G__14385, G__14386);
      };
      var G__14401__3 = function(a, b, c) {
        var G__14387 = a == null ? x : a;
        var G__14388 = b == null ? y : b;
        var G__14389 = c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__14387, G__14388, G__14389) : f.call(null, G__14387, G__14388, G__14389);
      };
      var G__14401__4 = function() {
        var G__14402__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__14402 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__14403__i = 0, G__14403__a = new Array(arguments.length - 3);
            while (G__14403__i < G__14403__a.length) {
              G__14403__a[G__14403__i] = arguments[G__14403__i + 3];
              ++G__14403__i;
            }
            ds = new cljs.core.IndexedSeq(G__14403__a, 0);
          }
          return G__14402__delegate.call(this, a, b, c, ds);
        };
        G__14402.cljs$lang$maxFixedArity = 3;
        G__14402.cljs$lang$applyTo = function(arglist__14404) {
          var a = cljs.core.first(arglist__14404);
          arglist__14404 = cljs.core.next(arglist__14404);
          var b = cljs.core.first(arglist__14404);
          arglist__14404 = cljs.core.next(arglist__14404);
          var c = cljs.core.first(arglist__14404);
          var ds = cljs.core.rest(arglist__14404);
          return G__14402__delegate(a, b, c, ds);
        };
        G__14402.cljs$core$IFn$_invoke$arity$variadic = G__14402__delegate;
        return G__14402;
      }();
      G__14401 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__14401__2.call(this, a, b);
          case 3:
            return G__14401__3.call(this, a, b, c);
          default:
            var G__14405 = null;
            if (arguments.length > 3) {
              var G__14406__i = 0, G__14406__a = new Array(arguments.length - 3);
              while (G__14406__i < G__14406__a.length) {
                G__14406__a[G__14406__i] = arguments[G__14406__i + 3];
                ++G__14406__i;
              }
              G__14405 = new cljs.core.IndexedSeq(G__14406__a, 0);
            }
            return G__14401__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__14405);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__14401.cljs$lang$maxFixedArity = 3;
      G__14401.cljs$lang$applyTo = G__14401__4.cljs$lang$applyTo;
      G__14401.cljs$core$IFn$_invoke$arity$2 = G__14401__2;
      G__14401.cljs$core$IFn$_invoke$arity$3 = G__14401__3;
      G__14401.cljs$core$IFn$_invoke$arity$variadic = G__14401__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__14401;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__14407 = null;
      var G__14407__2 = function(a, b) {
        var G__14390 = a == null ? x : a;
        var G__14391 = b == null ? y : b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14390, G__14391) : f.call(null, G__14390, G__14391);
      };
      var G__14407__3 = function(a, b, c) {
        var G__14392 = a == null ? x : a;
        var G__14393 = b == null ? y : b;
        var G__14394 = c == null ? z : c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__14392, G__14393, G__14394) : f.call(null, G__14392, G__14393, G__14394);
      };
      var G__14407__4 = function() {
        var G__14408__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__14408 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__14409__i = 0, G__14409__a = new Array(arguments.length - 3);
            while (G__14409__i < G__14409__a.length) {
              G__14409__a[G__14409__i] = arguments[G__14409__i + 3];
              ++G__14409__i;
            }
            ds = new cljs.core.IndexedSeq(G__14409__a, 0);
          }
          return G__14408__delegate.call(this, a, b, c, ds);
        };
        G__14408.cljs$lang$maxFixedArity = 3;
        G__14408.cljs$lang$applyTo = function(arglist__14410) {
          var a = cljs.core.first(arglist__14410);
          arglist__14410 = cljs.core.next(arglist__14410);
          var b = cljs.core.first(arglist__14410);
          arglist__14410 = cljs.core.next(arglist__14410);
          var c = cljs.core.first(arglist__14410);
          var ds = cljs.core.rest(arglist__14410);
          return G__14408__delegate(a, b, c, ds);
        };
        G__14408.cljs$core$IFn$_invoke$arity$variadic = G__14408__delegate;
        return G__14408;
      }();
      G__14407 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__14407__2.call(this, a, b);
          case 3:
            return G__14407__3.call(this, a, b, c);
          default:
            var G__14411 = null;
            if (arguments.length > 3) {
              var G__14412__i = 0, G__14412__a = new Array(arguments.length - 3);
              while (G__14412__i < G__14412__a.length) {
                G__14412__a[G__14412__i] = arguments[G__14412__i + 3];
                ++G__14412__i;
              }
              G__14411 = new cljs.core.IndexedSeq(G__14412__a, 0);
            }
            return G__14407__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__14411);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__14407.cljs$lang$maxFixedArity = 3;
      G__14407.cljs$lang$applyTo = G__14407__4.cljs$lang$applyTo;
      G__14407.cljs$core$IFn$_invoke$arity$2 = G__14407__2;
      G__14407.cljs$core$IFn$_invoke$arity$3 = G__14407__3;
      G__14407.cljs$core$IFn$_invoke$arity$variadic = G__14407__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__14407;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function() {
  var map_indexed = null;
  var map_indexed__1 = function(f) {
    return function(rf) {
      var i = function() {
        var G__14443 = -1;
        return cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(G__14443) : cljs.core.volatile_BANG_.call(null, G__14443);
      }();
      return function(i) {
        return function() {
          var G__14473 = null;
          var G__14473__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__14473__1 = function(result) {
            var G__14444 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__14444) : rf.call(null, G__14444);
          };
          var G__14473__2 = function(result, input) {
            var G__14445 = result;
            var G__14446 = function() {
              var G__14447 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
              var G__14448 = input;
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14447, G__14448) : f.call(null, G__14447, G__14448);
            }();
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__14445, G__14446) : rf.call(null, G__14445, G__14446);
          };
          G__14473 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__14473__0.call(this);
              case 1:
                return G__14473__1.call(this, result);
              case 2:
                return G__14473__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__14473.cljs$core$IFn$_invoke$arity$0 = G__14473__0;
          G__14473.cljs$core$IFn$_invoke$arity$1 = G__14473__1;
          G__14473.cljs$core$IFn$_invoke$arity$2 = G__14473__2;
          return G__14473;
        }();
      }(i);
    };
  };
  var map_indexed__2 = function(f, coll) {
    var mapi = function mapi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq(coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(s)) {
            var c = cljs.core.chunk_first(s);
            var size = cljs.core.count(c);
            var b = cljs.core.chunk_buffer(size);
            var n__4716__auto___14474 = size;
            var i_14475 = 0;
            while (true) {
              if (i_14475 < n__4716__auto___14474) {
                cljs.core.chunk_append(b, function() {
                  var G__14469 = idx + i_14475;
                  var G__14470 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_14475);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14469, G__14470) : f.call(null, G__14469, G__14470);
                }());
                var G__14476 = i_14475 + 1;
                i_14475 = G__14476;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons(cljs.core.chunk(b), mapi(idx + size, cljs.core.chunk_rest(s)));
          } else {
            return cljs.core.cons(function() {
              var G__14471 = idx;
              var G__14472 = cljs.core.first(s);
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14471, G__14472) : f.call(null, G__14471, G__14472);
            }(), mapi(idx + 1, cljs.core.rest(s)));
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return mapi(0, coll);
  };
  map_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return map_indexed__1.call(this, f);
      case 2:
        return map_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map_indexed.cljs$core$IFn$_invoke$arity$1 = map_indexed__1;
  map_indexed.cljs$core$IFn$_invoke$arity$2 = map_indexed__2;
  return map_indexed;
}();
cljs.core.keep = function() {
  var keep = null;
  var keep__1 = function(f) {
    return function(rf) {
      return function() {
        var G__14495 = null;
        var G__14495__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__14495__1 = function(result) {
          var G__14489 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__14489) : rf.call(null, G__14489);
        };
        var G__14495__2 = function(result, input) {
          var v = function() {
            var G__14490 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14490) : f.call(null, G__14490);
          }();
          if (v == null) {
            return result;
          } else {
            var G__14491 = result;
            var G__14492 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__14491, G__14492) : rf.call(null, G__14491, G__14492);
          }
        };
        G__14495 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__14495__0.call(this);
            case 1:
              return G__14495__1.call(this, result);
            case 2:
              return G__14495__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__14495.cljs$core$IFn$_invoke$arity$0 = G__14495__0;
        G__14495.cljs$core$IFn$_invoke$arity$1 = G__14495__1;
        G__14495.cljs$core$IFn$_invoke$arity$2 = G__14495__2;
        return G__14495;
      }();
    };
  };
  var keep__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4716__auto___14496 = size;
          var i_14497 = 0;
          while (true) {
            if (i_14497 < n__4716__auto___14496) {
              var x_14498 = function() {
                var G__14493 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_14497);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14493) : f.call(null, G__14493);
              }();
              if (x_14498 == null) {
              } else {
                cljs.core.chunk_append(b, x_14498);
              }
              var G__14499 = i_14497 + 1;
              i_14497 = G__14499;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__14494 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14494) : f.call(null, G__14494);
          }();
          if (x == null) {
            return keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  keep = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep__1.call(this, f);
      case 2:
        return keep__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep.cljs$core$IFn$_invoke$arity$1 = keep__1;
  keep.cljs$core$IFn$_invoke$arity$2 = keep__2;
  return keep;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__14500 = this$__$1;
  return goog.getUid(G__14500);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__14501 = cljs.core.seq(self__.watches);
  var chunk__14502 = null;
  var count__14503 = 0;
  var i__14504 = 0;
  while (true) {
    if (i__14504 < count__14503) {
      var vec__14505 = chunk__14502.cljs$core$IIndexed$_nth$arity$2(null, i__14504);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__14505, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__14505, 1, null);
      var G__14506_14515 = key;
      var G__14507_14516 = this$__$1;
      var G__14508_14517 = oldval;
      var G__14509_14518 = newval;
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__14506_14515, G__14507_14516, G__14508_14517, G__14509_14518) : f.call(null, G__14506_14515, G__14507_14516, G__14508_14517, G__14509_14518);
      var G__14519 = seq__14501;
      var G__14520 = chunk__14502;
      var G__14521 = count__14503;
      var G__14522 = i__14504 + 1;
      seq__14501 = G__14519;
      chunk__14502 = G__14520;
      count__14503 = G__14521;
      i__14504 = G__14522;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__14501);
      if (temp__4126__auto__) {
        var seq__14501__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__14501__$1)) {
          var c__4616__auto__ = cljs.core.chunk_first(seq__14501__$1);
          var G__14523 = cljs.core.chunk_rest(seq__14501__$1);
          var G__14524 = c__4616__auto__;
          var G__14525 = cljs.core.count(c__4616__auto__);
          var G__14526 = 0;
          seq__14501 = G__14523;
          chunk__14502 = G__14524;
          count__14503 = G__14525;
          i__14504 = G__14526;
          continue;
        } else {
          var vec__14510 = cljs.core.first(seq__14501__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__14510, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__14510, 1, null);
          var G__14511_14527 = key;
          var G__14512_14528 = this$__$1;
          var G__14513_14529 = oldval;
          var G__14514_14530 = newval;
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__14511_14527, G__14512_14528, G__14513_14529, G__14514_14530) : f.call(null, G__14511_14527, G__14512_14528, G__14513_14529, G__14514_14530);
          var G__14531 = cljs.core.next(seq__14501__$1);
          var G__14532 = null;
          var G__14533 = 0;
          var G__14534 = 0;
          seq__14501 = G__14531;
          chunk__14502 = G__14532;
          count__14503 = G__14533;
          i__14504 = G__14534;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__14538__delegate = function(x, p__14535) {
      var map__14537 = p__14535;
      var map__14537__$1 = cljs.core.seq_QMARK_(map__14537) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__14537) : map__14537;
      var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14537__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14537__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__14538 = function(x, var_args) {
      var p__14535 = null;
      if (arguments.length > 1) {
        var G__14539__i = 0, G__14539__a = new Array(arguments.length - 1);
        while (G__14539__i < G__14539__a.length) {
          G__14539__a[G__14539__i] = arguments[G__14539__i + 1];
          ++G__14539__i;
        }
        p__14535 = new cljs.core.IndexedSeq(G__14539__a, 0);
      }
      return G__14538__delegate.call(this, x, p__14535);
    };
    G__14538.cljs$lang$maxFixedArity = 1;
    G__14538.cljs$lang$applyTo = function(arglist__14540) {
      var x = cljs.core.first(arglist__14540);
      var p__14535 = cljs.core.rest(arglist__14540);
      return G__14538__delegate(x, p__14535);
    };
    G__14538.cljs$core$IFn$_invoke$arity$variadic = G__14538__delegate;
    return G__14538;
  }();
  atom = function(x, var_args) {
    var p__14535 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        var G__14541 = null;
        if (arguments.length > 1) {
          var G__14542__i = 0, G__14542__a = new Array(arguments.length - 1);
          while (G__14542__i < G__14542__a.length) {
            G__14542__a[G__14542__i] = arguments[G__14542__i + 1];
            ++G__14542__i;
          }
          G__14541 = new cljs.core.IndexedSeq(G__14542__a, 0);
        }
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, G__14541);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(function() {
        var G__14545 = new_value;
        return validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(G__14545) : validate.call(null, G__14545);
      }())) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__14546 = cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null));
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__14546) : cljs.core.pr_str.call(null, G__14546);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__14553 = a.state;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__14553) : f.call(null, G__14553);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__14554 = a.state;
        var G__14555 = x;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14554, G__14555) : f.call(null, G__14554, G__14555);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__14556 = a.state;
        var G__14557 = x;
        var G__14558 = y;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__14556, G__14557, G__14558) : f.call(null, G__14556, G__14557, G__14558);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__14559__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
      }
    };
    var G__14559 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__14560__i = 0, G__14560__a = new Array(arguments.length - 4);
        while (G__14560__i < G__14560__a.length) {
          G__14560__a[G__14560__i] = arguments[G__14560__i + 4];
          ++G__14560__i;
        }
        more = new cljs.core.IndexedSeq(G__14560__a, 0);
      }
      return G__14559__delegate.call(this, a, f, x, y, more);
    };
    G__14559.cljs$lang$maxFixedArity = 4;
    G__14559.cljs$lang$applyTo = function(arglist__14561) {
      var a = cljs.core.first(arglist__14561);
      arglist__14561 = cljs.core.next(arglist__14561);
      var f = cljs.core.first(arglist__14561);
      arglist__14561 = cljs.core.next(arglist__14561);
      var x = cljs.core.first(arglist__14561);
      arglist__14561 = cljs.core.next(arglist__14561);
      var y = cljs.core.first(arglist__14561);
      var more = cljs.core.rest(arglist__14561);
      return G__14559__delegate(a, f, x, y, more);
    };
    G__14559.cljs$core$IFn$_invoke$arity$variadic = G__14559__delegate;
    return G__14559;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        var G__14562 = null;
        if (arguments.length > 4) {
          var G__14563__i = 0, G__14563__a = new Array(arguments.length - 4);
          while (G__14563__i < G__14563__a.length) {
            G__14563__a[G__14563__i] = arguments[G__14563__i + 4];
            ++G__14563__i;
          }
          G__14562 = new cljs.core.IndexedSeq(G__14563__a, 0);
        }
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, G__14562);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function __GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function() {
  var keep_indexed = null;
  var keep_indexed__1 = function(f) {
    return function(rf) {
      var ia = cljs.core.volatile_BANG_(-1);
      return function(ia) {
        return function() {
          var G__14630 = null;
          var G__14630__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__14630__1 = function(result) {
            var G__14597 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__14597) : rf.call(null, G__14597);
          };
          var G__14630__2 = function(result, input) {
            var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
            var v = function() {
              var G__14598 = i;
              var G__14599 = input;
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14598, G__14599) : f.call(null, G__14598, G__14599);
            }();
            if (v == null) {
              return result;
            } else {
              var G__14600 = result;
              var G__14601 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__14600, G__14601) : rf.call(null, G__14600, G__14601);
            }
          };
          G__14630 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__14630__0.call(this);
              case 1:
                return G__14630__1.call(this, result);
              case 2:
                return G__14630__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__14630.cljs$core$IFn$_invoke$arity$0 = G__14630__0;
          G__14630.cljs$core$IFn$_invoke$arity$1 = G__14630__1;
          G__14630.cljs$core$IFn$_invoke$arity$2 = G__14630__2;
          return G__14630;
        }();
      }(ia);
    };
  };
  var keep_indexed__2 = function(f, coll) {
    var keepi = function keepi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq(coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(s)) {
            var c = cljs.core.chunk_first(s);
            var size = cljs.core.count(c);
            var b = cljs.core.chunk_buffer(size);
            var n__4716__auto___14631 = size;
            var i_14632 = 0;
            while (true) {
              if (i_14632 < n__4716__auto___14631) {
                var x_14633 = function() {
                  var G__14626 = idx + i_14632;
                  var G__14627 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_14632);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14626, G__14627) : f.call(null, G__14626, G__14627);
                }();
                if (x_14633 == null) {
                } else {
                  cljs.core.chunk_append(b, x_14633);
                }
                var G__14634 = i_14632 + 1;
                i_14632 = G__14634;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons(cljs.core.chunk(b), keepi(idx + size, cljs.core.chunk_rest(s)));
          } else {
            var x = function() {
              var G__14628 = idx;
              var G__14629 = cljs.core.first(s);
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14628, G__14629) : f.call(null, G__14628, G__14629);
            }();
            if (x == null) {
              return keepi(idx + 1, cljs.core.rest(s));
            } else {
              return cljs.core.cons(x, keepi(idx + 1, cljs.core.rest(s)));
            }
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return keepi(0, coll);
  };
  keep_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep_indexed__1.call(this, f);
      case 2:
        return keep_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep_indexed.cljs$core$IFn$_invoke$arity$1 = keep_indexed__1;
  keep_indexed.cljs$core$IFn$_invoke$arity$2 = keep_indexed__2;
  return keep_indexed;
}();
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$(function() {
          var G__14848 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__14848) : p.call(null, G__14848);
        }());
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__3817__auto__ = function() {
            var G__14850 = x;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__14850) : p.call(null, G__14850);
          }();
          if (cljs.core.truth_(and__3817__auto__)) {
            var G__14851 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__14851) : p.call(null, G__14851);
          } else {
            return and__3817__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__3817__auto__ = function() {
            var G__14853 = x;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__14853) : p.call(null, G__14853);
          }();
          if (cljs.core.truth_(and__3817__auto__)) {
            var and__3817__auto____$1 = function() {
              var G__14855 = y;
              return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__14855) : p.call(null, G__14855);
            }();
            if (cljs.core.truth_(and__3817__auto____$1)) {
              var G__14856 = z;
              return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__14856) : p.call(null, G__14856);
            } else {
              return and__3817__auto____$1;
            }
          } else {
            return and__3817__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__15025__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(ep1.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(p, args));
        };
        var G__15025 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__15026__i = 0, G__15026__a = new Array(arguments.length - 3);
            while (G__15026__i < G__15026__a.length) {
              G__15026__a[G__15026__i] = arguments[G__15026__i + 3];
              ++G__15026__i;
            }
            args = new cljs.core.IndexedSeq(G__15026__a, 0);
          }
          return G__15025__delegate.call(this, x, y, z, args);
        };
        G__15025.cljs$lang$maxFixedArity = 3;
        G__15025.cljs$lang$applyTo = function(arglist__15027) {
          var x = cljs.core.first(arglist__15027);
          arglist__15027 = cljs.core.next(arglist__15027);
          var y = cljs.core.first(arglist__15027);
          arglist__15027 = cljs.core.next(arglist__15027);
          var z = cljs.core.first(arglist__15027);
          var args = cljs.core.rest(arglist__15027);
          return G__15025__delegate(x, y, z, args);
        };
        G__15025.cljs$core$IFn$_invoke$arity$variadic = G__15025__delegate;
        return G__15025;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            var G__15028 = null;
            if (arguments.length > 3) {
              var G__15029__i = 0, G__15029__a = new Array(arguments.length - 3);
              while (G__15029__i < G__15029__a.length) {
                G__15029__a[G__15029__i] = arguments[G__15029__i + 3];
                ++G__15029__i;
              }
              G__15028 = new cljs.core.IndexedSeq(G__15029__a, 0);
            }
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__15028);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$(function() {
          var and__3817__auto__ = function() {
            var G__14888 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14888) : p1.call(null, G__14888);
          }();
          if (cljs.core.truth_(and__3817__auto__)) {
            var G__14889 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14889) : p2.call(null, G__14889);
          } else {
            return and__3817__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__3817__auto__ = function() {
            var G__14891 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14891) : p1.call(null, G__14891);
          }();
          if (cljs.core.truth_(and__3817__auto__)) {
            var and__3817__auto____$1 = function() {
              var G__14893 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14893) : p1.call(null, G__14893);
            }();
            if (cljs.core.truth_(and__3817__auto____$1)) {
              var and__3817__auto____$2 = function() {
                var G__14895 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14895) : p2.call(null, G__14895);
              }();
              if (cljs.core.truth_(and__3817__auto____$2)) {
                var G__14896 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14896) : p2.call(null, G__14896);
              } else {
                return and__3817__auto____$2;
              }
            } else {
              return and__3817__auto____$1;
            }
          } else {
            return and__3817__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__3817__auto__ = function() {
            var G__14898 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14898) : p1.call(null, G__14898);
          }();
          if (cljs.core.truth_(and__3817__auto__)) {
            var and__3817__auto____$1 = function() {
              var G__14900 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14900) : p1.call(null, G__14900);
            }();
            if (cljs.core.truth_(and__3817__auto____$1)) {
              var and__3817__auto____$2 = function() {
                var G__14902 = z;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14902) : p1.call(null, G__14902);
              }();
              if (cljs.core.truth_(and__3817__auto____$2)) {
                var and__3817__auto____$3 = function() {
                  var G__14904 = x;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14904) : p2.call(null, G__14904);
                }();
                if (cljs.core.truth_(and__3817__auto____$3)) {
                  var and__3817__auto____$4 = function() {
                    var G__14906 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14906) : p2.call(null, G__14906);
                  }();
                  if (cljs.core.truth_(and__3817__auto____$4)) {
                    var G__14907 = z;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14907) : p2.call(null, G__14907);
                  } else {
                    return and__3817__auto____$4;
                  }
                } else {
                  return and__3817__auto____$3;
                }
              } else {
                return and__3817__auto____$2;
              }
            } else {
              return and__3817__auto____$1;
            }
          } else {
            return and__3817__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__15030__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(ep2.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(p1__14635_SHARP_) {
            var and__3817__auto__ = function() {
              var G__14912 = p1__14635_SHARP_;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14912) : p1.call(null, G__14912);
            }();
            if (cljs.core.truth_(and__3817__auto__)) {
              var G__14913 = p1__14635_SHARP_;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14913) : p2.call(null, G__14913);
            } else {
              return and__3817__auto__;
            }
          }, args));
        };
        var G__15030 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__15031__i = 0, G__15031__a = new Array(arguments.length - 3);
            while (G__15031__i < G__15031__a.length) {
              G__15031__a[G__15031__i] = arguments[G__15031__i + 3];
              ++G__15031__i;
            }
            args = new cljs.core.IndexedSeq(G__15031__a, 0);
          }
          return G__15030__delegate.call(this, x, y, z, args);
        };
        G__15030.cljs$lang$maxFixedArity = 3;
        G__15030.cljs$lang$applyTo = function(arglist__15032) {
          var x = cljs.core.first(arglist__15032);
          arglist__15032 = cljs.core.next(arglist__15032);
          var y = cljs.core.first(arglist__15032);
          arglist__15032 = cljs.core.next(arglist__15032);
          var z = cljs.core.first(arglist__15032);
          var args = cljs.core.rest(arglist__15032);
          return G__15030__delegate(x, y, z, args);
        };
        G__15030.cljs$core$IFn$_invoke$arity$variadic = G__15030__delegate;
        return G__15030;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            var G__15033 = null;
            if (arguments.length > 3) {
              var G__15034__i = 0, G__15034__a = new Array(arguments.length - 3);
              while (G__15034__i < G__15034__a.length) {
                G__15034__a[G__15034__i] = arguments[G__15034__i + 3];
                ++G__15034__i;
              }
              G__15033 = new cljs.core.IndexedSeq(G__15034__a, 0);
            }
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__15033);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$(function() {
          var and__3817__auto__ = function() {
            var G__14959 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14959) : p1.call(null, G__14959);
          }();
          if (cljs.core.truth_(and__3817__auto__)) {
            var and__3817__auto____$1 = function() {
              var G__14961 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14961) : p2.call(null, G__14961);
            }();
            if (cljs.core.truth_(and__3817__auto____$1)) {
              var G__14962 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__14962) : p3.call(null, G__14962);
            } else {
              return and__3817__auto____$1;
            }
          } else {
            return and__3817__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__3817__auto__ = function() {
            var G__14964 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14964) : p1.call(null, G__14964);
          }();
          if (cljs.core.truth_(and__3817__auto__)) {
            var and__3817__auto____$1 = function() {
              var G__14966 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14966) : p2.call(null, G__14966);
            }();
            if (cljs.core.truth_(and__3817__auto____$1)) {
              var and__3817__auto____$2 = function() {
                var G__14968 = x;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__14968) : p3.call(null, G__14968);
              }();
              if (cljs.core.truth_(and__3817__auto____$2)) {
                var and__3817__auto____$3 = function() {
                  var G__14970 = y;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14970) : p1.call(null, G__14970);
                }();
                if (cljs.core.truth_(and__3817__auto____$3)) {
                  var and__3817__auto____$4 = function() {
                    var G__14972 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14972) : p2.call(null, G__14972);
                  }();
                  if (cljs.core.truth_(and__3817__auto____$4)) {
                    var G__14973 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__14973) : p3.call(null, G__14973);
                  } else {
                    return and__3817__auto____$4;
                  }
                } else {
                  return and__3817__auto____$3;
                }
              } else {
                return and__3817__auto____$2;
              }
            } else {
              return and__3817__auto____$1;
            }
          } else {
            return and__3817__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__3817__auto__ = function() {
            var G__14975 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14975) : p1.call(null, G__14975);
          }();
          if (cljs.core.truth_(and__3817__auto__)) {
            var and__3817__auto____$1 = function() {
              var G__14977 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14977) : p2.call(null, G__14977);
            }();
            if (cljs.core.truth_(and__3817__auto____$1)) {
              var and__3817__auto____$2 = function() {
                var G__14979 = x;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__14979) : p3.call(null, G__14979);
              }();
              if (cljs.core.truth_(and__3817__auto____$2)) {
                var and__3817__auto____$3 = function() {
                  var G__14981 = y;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14981) : p1.call(null, G__14981);
                }();
                if (cljs.core.truth_(and__3817__auto____$3)) {
                  var and__3817__auto____$4 = function() {
                    var G__14983 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14983) : p2.call(null, G__14983);
                  }();
                  if (cljs.core.truth_(and__3817__auto____$4)) {
                    var and__3817__auto____$5 = function() {
                      var G__14985 = y;
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__14985) : p3.call(null, G__14985);
                    }();
                    if (cljs.core.truth_(and__3817__auto____$5)) {
                      var and__3817__auto____$6 = function() {
                        var G__14987 = z;
                        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14987) : p1.call(null, G__14987);
                      }();
                      if (cljs.core.truth_(and__3817__auto____$6)) {
                        var and__3817__auto____$7 = function() {
                          var G__14989 = z;
                          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14989) : p2.call(null, G__14989);
                        }();
                        if (cljs.core.truth_(and__3817__auto____$7)) {
                          var G__14990 = z;
                          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__14990) : p3.call(null, G__14990);
                        } else {
                          return and__3817__auto____$7;
                        }
                      } else {
                        return and__3817__auto____$6;
                      }
                    } else {
                      return and__3817__auto____$5;
                    }
                  } else {
                    return and__3817__auto____$4;
                  }
                } else {
                  return and__3817__auto____$3;
                }
              } else {
                return and__3817__auto____$2;
              }
            } else {
              return and__3817__auto____$1;
            }
          } else {
            return and__3817__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__15035__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(ep3.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(p1__14636_SHARP_) {
            var and__3817__auto__ = function() {
              var G__14997 = p1__14636_SHARP_;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__14997) : p1.call(null, G__14997);
            }();
            if (cljs.core.truth_(and__3817__auto__)) {
              var and__3817__auto____$1 = function() {
                var G__14999 = p1__14636_SHARP_;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__14999) : p2.call(null, G__14999);
              }();
              if (cljs.core.truth_(and__3817__auto____$1)) {
                var G__15000 = p1__14636_SHARP_;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__15000) : p3.call(null, G__15000);
              } else {
                return and__3817__auto____$1;
              }
            } else {
              return and__3817__auto__;
            }
          }, args));
        };
        var G__15035 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__15036__i = 0, G__15036__a = new Array(arguments.length - 3);
            while (G__15036__i < G__15036__a.length) {
              G__15036__a[G__15036__i] = arguments[G__15036__i + 3];
              ++G__15036__i;
            }
            args = new cljs.core.IndexedSeq(G__15036__a, 0);
          }
          return G__15035__delegate.call(this, x, y, z, args);
        };
        G__15035.cljs$lang$maxFixedArity = 3;
        G__15035.cljs$lang$applyTo = function(arglist__15037) {
          var x = cljs.core.first(arglist__15037);
          arglist__15037 = cljs.core.next(arglist__15037);
          var y = cljs.core.first(arglist__15037);
          arglist__15037 = cljs.core.next(arglist__15037);
          var z = cljs.core.first(arglist__15037);
          var args = cljs.core.rest(arglist__15037);
          return G__15035__delegate(x, y, z, args);
        };
        G__15035.cljs$core$IFn$_invoke$arity$variadic = G__15035__delegate;
        return G__15035;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            var G__15038 = null;
            if (arguments.length > 3) {
              var G__15039__i = 0, G__15039__a = new Array(arguments.length - 3);
              while (G__15039__i < G__15039__a.length) {
                G__15039__a[G__15039__i] = arguments[G__15039__i + 3];
                ++G__15039__i;
              }
              G__15038 = new cljs.core.IndexedSeq(G__15039__a, 0);
            }
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__15038);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__15040__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__14637_SHARP_) {
                var G__15016 = x;
                return p1__14637_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__14637_SHARP_.cljs$core$IFn$_invoke$arity$1(G__15016) : p1__14637_SHARP_.call(null, G__15016);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__14638_SHARP_) {
                var and__3817__auto__ = function() {
                  var G__15018 = x;
                  return p1__14638_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__14638_SHARP_.cljs$core$IFn$_invoke$arity$1(G__15018) : p1__14638_SHARP_.call(null, G__15018);
                }();
                if (cljs.core.truth_(and__3817__auto__)) {
                  var G__15019 = y;
                  return p1__14638_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__14638_SHARP_.cljs$core$IFn$_invoke$arity$1(G__15019) : p1__14638_SHARP_.call(null, G__15019);
                } else {
                  return and__3817__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__14639_SHARP_) {
                var and__3817__auto__ = function() {
                  var G__15021 = x;
                  return p1__14639_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__14639_SHARP_.cljs$core$IFn$_invoke$arity$1(G__15021) : p1__14639_SHARP_.call(null, G__15021);
                }();
                if (cljs.core.truth_(and__3817__auto__)) {
                  var and__3817__auto____$1 = function() {
                    var G__15023 = y;
                    return p1__14639_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__14639_SHARP_.cljs$core$IFn$_invoke$arity$1(G__15023) : p1__14639_SHARP_.call(null, G__15023);
                  }();
                  if (cljs.core.truth_(and__3817__auto____$1)) {
                    var G__15024 = z;
                    return p1__14639_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__14639_SHARP_.cljs$core$IFn$_invoke$arity$1(G__15024) : p1__14639_SHARP_.call(null, G__15024);
                  } else {
                    return and__3817__auto____$1;
                  }
                } else {
                  return and__3817__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__15041__delegate = function(x, y, z, args) {
              return cljs.core.boolean$(epn.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(ps__$1) {
                return function(p1__14640_SHARP_) {
                  return cljs.core.every_QMARK_(p1__14640_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__15041 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__15042__i = 0, G__15042__a = new Array(arguments.length - 3);
                while (G__15042__i < G__15042__a.length) {
                  G__15042__a[G__15042__i] = arguments[G__15042__i + 3];
                  ++G__15042__i;
                }
                args = new cljs.core.IndexedSeq(G__15042__a, 0);
              }
              return G__15041__delegate.call(this, x, y, z, args);
            };
            G__15041.cljs$lang$maxFixedArity = 3;
            G__15041.cljs$lang$applyTo = function(arglist__15043) {
              var x = cljs.core.first(arglist__15043);
              arglist__15043 = cljs.core.next(arglist__15043);
              var y = cljs.core.first(arglist__15043);
              arglist__15043 = cljs.core.next(arglist__15043);
              var z = cljs.core.first(arglist__15043);
              var args = cljs.core.rest(arglist__15043);
              return G__15041__delegate(x, y, z, args);
            };
            G__15041.cljs$core$IFn$_invoke$arity$variadic = G__15041__delegate;
            return G__15041;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                var G__15044 = null;
                if (arguments.length > 3) {
                  var G__15045__i = 0, G__15045__a = new Array(arguments.length - 3);
                  while (G__15045__i < G__15045__a.length) {
                    G__15045__a[G__15045__i] = arguments[G__15045__i + 3];
                    ++G__15045__i;
                  }
                  G__15044 = new cljs.core.IndexedSeq(G__15045__a, 0);
                }
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__15044);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__15040 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        var G__15046__i = 0, G__15046__a = new Array(arguments.length - 3);
        while (G__15046__i < G__15046__a.length) {
          G__15046__a[G__15046__i] = arguments[G__15046__i + 3];
          ++G__15046__i;
        }
        ps = new cljs.core.IndexedSeq(G__15046__a, 0);
      }
      return G__15040__delegate.call(this, p1, p2, p3, ps);
    };
    G__15040.cljs$lang$maxFixedArity = 3;
    G__15040.cljs$lang$applyTo = function(arglist__15047) {
      var p1 = cljs.core.first(arglist__15047);
      arglist__15047 = cljs.core.next(arglist__15047);
      var p2 = cljs.core.first(arglist__15047);
      arglist__15047 = cljs.core.next(arglist__15047);
      var p3 = cljs.core.first(arglist__15047);
      var ps = cljs.core.rest(arglist__15047);
      return G__15040__delegate(p1, p2, p3, ps);
    };
    G__15040.cljs$core$IFn$_invoke$arity$variadic = G__15040__delegate;
    return G__15040;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        var G__15048 = null;
        if (arguments.length > 3) {
          var G__15049__i = 0, G__15049__a = new Array(arguments.length - 3);
          while (G__15049__i < G__15049__a.length) {
            G__15049__a[G__15049__i] = arguments[G__15049__i + 3];
            ++G__15049__i;
          }
          G__15048 = new cljs.core.IndexedSeq(G__15049__a, 0);
        }
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, G__15048);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        var G__15255 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__15255) : p.call(null, G__15255);
      };
      var sp1__2 = function(x, y) {
        var or__3829__auto__ = function() {
          var G__15257 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__15257) : p.call(null, G__15257);
        }();
        if (cljs.core.truth_(or__3829__auto__)) {
          return or__3829__auto__;
        } else {
          var G__15258 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__15258) : p.call(null, G__15258);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3829__auto__ = function() {
          var G__15260 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__15260) : p.call(null, G__15260);
        }();
        if (cljs.core.truth_(or__3829__auto__)) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = function() {
            var G__15262 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__15262) : p.call(null, G__15262);
          }();
          if (cljs.core.truth_(or__3829__auto____$1)) {
            return or__3829__auto____$1;
          } else {
            var G__15263 = z;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__15263) : p.call(null, G__15263);
          }
        }
      };
      var sp1__4 = function() {
        var G__15424__delegate = function(x, y, z, args) {
          var or__3829__auto__ = sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__3829__auto__)) {
            return or__3829__auto__;
          } else {
            return cljs.core.some(p, args);
          }
        };
        var G__15424 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__15425__i = 0, G__15425__a = new Array(arguments.length - 3);
            while (G__15425__i < G__15425__a.length) {
              G__15425__a[G__15425__i] = arguments[G__15425__i + 3];
              ++G__15425__i;
            }
            args = new cljs.core.IndexedSeq(G__15425__a, 0);
          }
          return G__15424__delegate.call(this, x, y, z, args);
        };
        G__15424.cljs$lang$maxFixedArity = 3;
        G__15424.cljs$lang$applyTo = function(arglist__15426) {
          var x = cljs.core.first(arglist__15426);
          arglist__15426 = cljs.core.next(arglist__15426);
          var y = cljs.core.first(arglist__15426);
          arglist__15426 = cljs.core.next(arglist__15426);
          var z = cljs.core.first(arglist__15426);
          var args = cljs.core.rest(arglist__15426);
          return G__15424__delegate(x, y, z, args);
        };
        G__15424.cljs$core$IFn$_invoke$arity$variadic = G__15424__delegate;
        return G__15424;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            var G__15427 = null;
            if (arguments.length > 3) {
              var G__15428__i = 0, G__15428__a = new Array(arguments.length - 3);
              while (G__15428__i < G__15428__a.length) {
                G__15428__a[G__15428__i] = arguments[G__15428__i + 3];
                ++G__15428__i;
              }
              G__15427 = new cljs.core.IndexedSeq(G__15428__a, 0);
            }
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__15427);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3829__auto__ = function() {
          var G__15295 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__15295) : p1.call(null, G__15295);
        }();
        if (cljs.core.truth_(or__3829__auto__)) {
          return or__3829__auto__;
        } else {
          var G__15296 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__15296) : p2.call(null, G__15296);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3829__auto__ = function() {
          var G__15298 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__15298) : p1.call(null, G__15298);
        }();
        if (cljs.core.truth_(or__3829__auto__)) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = function() {
            var G__15300 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__15300) : p1.call(null, G__15300);
          }();
          if (cljs.core.truth_(or__3829__auto____$1)) {
            return or__3829__auto____$1;
          } else {
            var or__3829__auto____$2 = function() {
              var G__15302 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__15302) : p2.call(null, G__15302);
            }();
            if (cljs.core.truth_(or__3829__auto____$2)) {
              return or__3829__auto____$2;
            } else {
              var G__15303 = y;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__15303) : p2.call(null, G__15303);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3829__auto__ = function() {
          var G__15305 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__15305) : p1.call(null, G__15305);
        }();
        if (cljs.core.truth_(or__3829__auto__)) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = function() {
            var G__15307 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__15307) : p1.call(null, G__15307);
          }();
          if (cljs.core.truth_(or__3829__auto____$1)) {
            return or__3829__auto____$1;
          } else {
            var or__3829__auto____$2 = function() {
              var G__15309 = z;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__15309) : p1.call(null, G__15309);
            }();
            if (cljs.core.truth_(or__3829__auto____$2)) {
              return or__3829__auto____$2;
            } else {
              var or__3829__auto____$3 = function() {
                var G__15311 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__15311) : p2.call(null, G__15311);
              }();
              if (cljs.core.truth_(or__3829__auto____$3)) {
                return or__3829__auto____$3;
              } else {
                var or__3829__auto____$4 = function() {
                  var G__15313 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__15313) : p2.call(null, G__15313);
                }();
                if (cljs.core.truth_(or__3829__auto____$4)) {
                  return or__3829__auto____$4;
                } else {
                  var G__15314 = z;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__15314) : p2.call(null, G__15314);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__15429__delegate = function(x, y, z, args) {
          var or__3829__auto__ = sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__3829__auto__)) {
            return or__3829__auto__;
          } else {
            return cljs.core.some(function(or__3829__auto__) {
              return function(p1__15050_SHARP_) {
                var or__3829__auto____$1 = function() {
                  var G__15316 = p1__15050_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__15316) : p1.call(null, G__15316);
                }();
                if (cljs.core.truth_(or__3829__auto____$1)) {
                  return or__3829__auto____$1;
                } else {
                  var G__15317 = p1__15050_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__15317) : p2.call(null, G__15317);
                }
              };
            }(or__3829__auto__), args);
          }
        };
        var G__15429 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__15430__i = 0, G__15430__a = new Array(arguments.length - 3);
            while (G__15430__i < G__15430__a.length) {
              G__15430__a[G__15430__i] = arguments[G__15430__i + 3];
              ++G__15430__i;
            }
            args = new cljs.core.IndexedSeq(G__15430__a, 0);
          }
          return G__15429__delegate.call(this, x, y, z, args);
        };
        G__15429.cljs$lang$maxFixedArity = 3;
        G__15429.cljs$lang$applyTo = function(arglist__15431) {
          var x = cljs.core.first(arglist__15431);
          arglist__15431 = cljs.core.next(arglist__15431);
          var y = cljs.core.first(arglist__15431);
          arglist__15431 = cljs.core.next(arglist__15431);
          var z = cljs.core.first(arglist__15431);
          var args = cljs.core.rest(arglist__15431);
          return G__15429__delegate(x, y, z, args);
        };
        G__15429.cljs$core$IFn$_invoke$arity$variadic = G__15429__delegate;
        return G__15429;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            var G__15432 = null;
            if (arguments.length > 3) {
              var G__15433__i = 0, G__15433__a = new Array(arguments.length - 3);
              while (G__15433__i < G__15433__a.length) {
                G__15433__a[G__15433__i] = arguments[G__15433__i + 3];
                ++G__15433__i;
              }
              G__15432 = new cljs.core.IndexedSeq(G__15433__a, 0);
            }
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__15432);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3829__auto__ = function() {
          var G__15363 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__15363) : p1.call(null, G__15363);
        }();
        if (cljs.core.truth_(or__3829__auto__)) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = function() {
            var G__15365 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__15365) : p2.call(null, G__15365);
          }();
          if (cljs.core.truth_(or__3829__auto____$1)) {
            return or__3829__auto____$1;
          } else {
            var G__15366 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__15366) : p3.call(null, G__15366);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3829__auto__ = function() {
          var G__15368 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__15368) : p1.call(null, G__15368);
        }();
        if (cljs.core.truth_(or__3829__auto__)) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = function() {
            var G__15370 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__15370) : p2.call(null, G__15370);
          }();
          if (cljs.core.truth_(or__3829__auto____$1)) {
            return or__3829__auto____$1;
          } else {
            var or__3829__auto____$2 = function() {
              var G__15372 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__15372) : p3.call(null, G__15372);
            }();
            if (cljs.core.truth_(or__3829__auto____$2)) {
              return or__3829__auto____$2;
            } else {
              var or__3829__auto____$3 = function() {
                var G__15374 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__15374) : p1.call(null, G__15374);
              }();
              if (cljs.core.truth_(or__3829__auto____$3)) {
                return or__3829__auto____$3;
              } else {
                var or__3829__auto____$4 = function() {
                  var G__15376 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__15376) : p2.call(null, G__15376);
                }();
                if (cljs.core.truth_(or__3829__auto____$4)) {
                  return or__3829__auto____$4;
                } else {
                  var G__15377 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__15377) : p3.call(null, G__15377);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3829__auto__ = function() {
          var G__15379 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__15379) : p1.call(null, G__15379);
        }();
        if (cljs.core.truth_(or__3829__auto__)) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = function() {
            var G__15381 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__15381) : p2.call(null, G__15381);
          }();
          if (cljs.core.truth_(or__3829__auto____$1)) {
            return or__3829__auto____$1;
          } else {
            var or__3829__auto____$2 = function() {
              var G__15383 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__15383) : p3.call(null, G__15383);
            }();
            if (cljs.core.truth_(or__3829__auto____$2)) {
              return or__3829__auto____$2;
            } else {
              var or__3829__auto____$3 = function() {
                var G__15385 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__15385) : p1.call(null, G__15385);
              }();
              if (cljs.core.truth_(or__3829__auto____$3)) {
                return or__3829__auto____$3;
              } else {
                var or__3829__auto____$4 = function() {
                  var G__15387 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__15387) : p2.call(null, G__15387);
                }();
                if (cljs.core.truth_(or__3829__auto____$4)) {
                  return or__3829__auto____$4;
                } else {
                  var or__3829__auto____$5 = function() {
                    var G__15389 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__15389) : p3.call(null, G__15389);
                  }();
                  if (cljs.core.truth_(or__3829__auto____$5)) {
                    return or__3829__auto____$5;
                  } else {
                    var or__3829__auto____$6 = function() {
                      var G__15391 = z;
                      return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__15391) : p1.call(null, G__15391);
                    }();
                    if (cljs.core.truth_(or__3829__auto____$6)) {
                      return or__3829__auto____$6;
                    } else {
                      var or__3829__auto____$7 = function() {
                        var G__15393 = z;
                        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__15393) : p2.call(null, G__15393);
                      }();
                      if (cljs.core.truth_(or__3829__auto____$7)) {
                        return or__3829__auto____$7;
                      } else {
                        var G__15394 = z;
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__15394) : p3.call(null, G__15394);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__15434__delegate = function(x, y, z, args) {
          var or__3829__auto__ = sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__3829__auto__)) {
            return or__3829__auto__;
          } else {
            return cljs.core.some(function(or__3829__auto__) {
              return function(p1__15051_SHARP_) {
                var or__3829__auto____$1 = function() {
                  var G__15396 = p1__15051_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__15396) : p1.call(null, G__15396);
                }();
                if (cljs.core.truth_(or__3829__auto____$1)) {
                  return or__3829__auto____$1;
                } else {
                  var or__3829__auto____$2 = function() {
                    var G__15398 = p1__15051_SHARP_;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__15398) : p2.call(null, G__15398);
                  }();
                  if (cljs.core.truth_(or__3829__auto____$2)) {
                    return or__3829__auto____$2;
                  } else {
                    var G__15399 = p1__15051_SHARP_;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__15399) : p3.call(null, G__15399);
                  }
                }
              };
            }(or__3829__auto__), args);
          }
        };
        var G__15434 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__15435__i = 0, G__15435__a = new Array(arguments.length - 3);
            while (G__15435__i < G__15435__a.length) {
              G__15435__a[G__15435__i] = arguments[G__15435__i + 3];
              ++G__15435__i;
            }
            args = new cljs.core.IndexedSeq(G__15435__a, 0);
          }
          return G__15434__delegate.call(this, x, y, z, args);
        };
        G__15434.cljs$lang$maxFixedArity = 3;
        G__15434.cljs$lang$applyTo = function(arglist__15436) {
          var x = cljs.core.first(arglist__15436);
          arglist__15436 = cljs.core.next(arglist__15436);
          var y = cljs.core.first(arglist__15436);
          arglist__15436 = cljs.core.next(arglist__15436);
          var z = cljs.core.first(arglist__15436);
          var args = cljs.core.rest(arglist__15436);
          return G__15434__delegate(x, y, z, args);
        };
        G__15434.cljs$core$IFn$_invoke$arity$variadic = G__15434__delegate;
        return G__15434;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            var G__15437 = null;
            if (arguments.length > 3) {
              var G__15438__i = 0, G__15438__a = new Array(arguments.length - 3);
              while (G__15438__i < G__15438__a.length) {
                G__15438__a[G__15438__i] = arguments[G__15438__i + 3];
                ++G__15438__i;
              }
              G__15437 = new cljs.core.IndexedSeq(G__15438__a, 0);
            }
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__15437);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__15439__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__15052_SHARP_) {
                var G__15415 = x;
                return p1__15052_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__15052_SHARP_.cljs$core$IFn$_invoke$arity$1(G__15415) : p1__15052_SHARP_.call(null, G__15415);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__15053_SHARP_) {
                var or__3829__auto__ = function() {
                  var G__15417 = x;
                  return p1__15053_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__15053_SHARP_.cljs$core$IFn$_invoke$arity$1(G__15417) : p1__15053_SHARP_.call(null, G__15417);
                }();
                if (cljs.core.truth_(or__3829__auto__)) {
                  return or__3829__auto__;
                } else {
                  var G__15418 = y;
                  return p1__15053_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__15053_SHARP_.cljs$core$IFn$_invoke$arity$1(G__15418) : p1__15053_SHARP_.call(null, G__15418);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__15054_SHARP_) {
                var or__3829__auto__ = function() {
                  var G__15420 = x;
                  return p1__15054_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__15054_SHARP_.cljs$core$IFn$_invoke$arity$1(G__15420) : p1__15054_SHARP_.call(null, G__15420);
                }();
                if (cljs.core.truth_(or__3829__auto__)) {
                  return or__3829__auto__;
                } else {
                  var or__3829__auto____$1 = function() {
                    var G__15422 = y;
                    return p1__15054_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__15054_SHARP_.cljs$core$IFn$_invoke$arity$1(G__15422) : p1__15054_SHARP_.call(null, G__15422);
                  }();
                  if (cljs.core.truth_(or__3829__auto____$1)) {
                    return or__3829__auto____$1;
                  } else {
                    var G__15423 = z;
                    return p1__15054_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__15054_SHARP_.cljs$core$IFn$_invoke$arity$1(G__15423) : p1__15054_SHARP_.call(null, G__15423);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__15440__delegate = function(x, y, z, args) {
              var or__3829__auto__ = spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
              if (cljs.core.truth_(or__3829__auto__)) {
                return or__3829__auto__;
              } else {
                return cljs.core.some(function(or__3829__auto__, ps__$1) {
                  return function(p1__15055_SHARP_) {
                    return cljs.core.some(p1__15055_SHARP_, args);
                  };
                }(or__3829__auto__, ps__$1), ps__$1);
              }
            };
            var G__15440 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__15441__i = 0, G__15441__a = new Array(arguments.length - 3);
                while (G__15441__i < G__15441__a.length) {
                  G__15441__a[G__15441__i] = arguments[G__15441__i + 3];
                  ++G__15441__i;
                }
                args = new cljs.core.IndexedSeq(G__15441__a, 0);
              }
              return G__15440__delegate.call(this, x, y, z, args);
            };
            G__15440.cljs$lang$maxFixedArity = 3;
            G__15440.cljs$lang$applyTo = function(arglist__15442) {
              var x = cljs.core.first(arglist__15442);
              arglist__15442 = cljs.core.next(arglist__15442);
              var y = cljs.core.first(arglist__15442);
              arglist__15442 = cljs.core.next(arglist__15442);
              var z = cljs.core.first(arglist__15442);
              var args = cljs.core.rest(arglist__15442);
              return G__15440__delegate(x, y, z, args);
            };
            G__15440.cljs$core$IFn$_invoke$arity$variadic = G__15440__delegate;
            return G__15440;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                var G__15443 = null;
                if (arguments.length > 3) {
                  var G__15444__i = 0, G__15444__a = new Array(arguments.length - 3);
                  while (G__15444__i < G__15444__a.length) {
                    G__15444__a[G__15444__i] = arguments[G__15444__i + 3];
                    ++G__15444__i;
                  }
                  G__15443 = new cljs.core.IndexedSeq(G__15444__a, 0);
                }
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__15443);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__15439 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        var G__15445__i = 0, G__15445__a = new Array(arguments.length - 3);
        while (G__15445__i < G__15445__a.length) {
          G__15445__a[G__15445__i] = arguments[G__15445__i + 3];
          ++G__15445__i;
        }
        ps = new cljs.core.IndexedSeq(G__15445__a, 0);
      }
      return G__15439__delegate.call(this, p1, p2, p3, ps);
    };
    G__15439.cljs$lang$maxFixedArity = 3;
    G__15439.cljs$lang$applyTo = function(arglist__15446) {
      var p1 = cljs.core.first(arglist__15446);
      arglist__15446 = cljs.core.next(arglist__15446);
      var p2 = cljs.core.first(arglist__15446);
      arglist__15446 = cljs.core.next(arglist__15446);
      var p3 = cljs.core.first(arglist__15446);
      var ps = cljs.core.rest(arglist__15446);
      return G__15439__delegate(p1, p2, p3, ps);
    };
    G__15439.cljs$core$IFn$_invoke$arity$variadic = G__15439__delegate;
    return G__15439;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        var G__15447 = null;
        if (arguments.length > 3) {
          var G__15448__i = 0, G__15448__a = new Array(arguments.length - 3);
          while (G__15448__i < G__15448__a.length) {
            G__15448__a[G__15448__i] = arguments[G__15448__i + 3];
            ++G__15448__i;
          }
          G__15447 = new cljs.core.IndexedSeq(G__15448__a, 0);
        }
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, G__15447);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__1 = function(f) {
    return function(rf) {
      return function() {
        var G__15503 = null;
        var G__15503__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__15503__1 = function(result) {
          var G__15489 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__15489) : rf.call(null, G__15489);
        };
        var G__15503__2 = function(result, input) {
          var G__15490 = result;
          var G__15491 = function() {
            var G__15492 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15492) : f.call(null, G__15492);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__15490, G__15491) : rf.call(null, G__15490, G__15491);
        };
        var G__15503__3 = function() {
          var G__15504__delegate = function(result, input, inputs) {
            var G__15493 = result;
            var G__15494 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__15493, G__15494) : rf.call(null, G__15493, G__15494);
          };
          var G__15504 = function(result, input, var_args) {
            var inputs = null;
            if (arguments.length > 2) {
              var G__15505__i = 0, G__15505__a = new Array(arguments.length - 2);
              while (G__15505__i < G__15505__a.length) {
                G__15505__a[G__15505__i] = arguments[G__15505__i + 2];
                ++G__15505__i;
              }
              inputs = new cljs.core.IndexedSeq(G__15505__a, 0);
            }
            return G__15504__delegate.call(this, result, input, inputs);
          };
          G__15504.cljs$lang$maxFixedArity = 2;
          G__15504.cljs$lang$applyTo = function(arglist__15506) {
            var result = cljs.core.first(arglist__15506);
            arglist__15506 = cljs.core.next(arglist__15506);
            var input = cljs.core.first(arglist__15506);
            var inputs = cljs.core.rest(arglist__15506);
            return G__15504__delegate(result, input, inputs);
          };
          G__15504.cljs$core$IFn$_invoke$arity$variadic = G__15504__delegate;
          return G__15504;
        }();
        G__15503 = function(result, input, var_args) {
          var inputs = var_args;
          switch(arguments.length) {
            case 0:
              return G__15503__0.call(this);
            case 1:
              return G__15503__1.call(this, result);
            case 2:
              return G__15503__2.call(this, result, input);
            default:
              var G__15507 = null;
              if (arguments.length > 2) {
                var G__15508__i = 0, G__15508__a = new Array(arguments.length - 2);
                while (G__15508__i < G__15508__a.length) {
                  G__15508__a[G__15508__i] = arguments[G__15508__i + 2];
                  ++G__15508__i;
                }
                G__15507 = new cljs.core.IndexedSeq(G__15508__a, 0);
              }
              return G__15503__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__15507);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__15503.cljs$lang$maxFixedArity = 2;
        G__15503.cljs$lang$applyTo = G__15503__3.cljs$lang$applyTo;
        G__15503.cljs$core$IFn$_invoke$arity$0 = G__15503__0;
        G__15503.cljs$core$IFn$_invoke$arity$1 = G__15503__1;
        G__15503.cljs$core$IFn$_invoke$arity$2 = G__15503__2;
        G__15503.cljs$core$IFn$_invoke$arity$variadic = G__15503__3.cljs$core$IFn$_invoke$arity$variadic;
        return G__15503;
      }();
    };
  };
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4716__auto___15509 = size;
          var i_15510 = 0;
          while (true) {
            if (i_15510 < n__4716__auto___15509) {
              cljs.core.chunk_append(b, function() {
                var G__15495 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_15510);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15495) : f.call(null, G__15495);
              }());
              var G__15511 = i_15510 + 1;
              i_15510 = G__15511;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__15496 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15496) : f.call(null, G__15496);
          }(), map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      if (s1 && s2) {
        return cljs.core.cons(function() {
          var G__15497 = cljs.core.first(s1);
          var G__15498 = cljs.core.first(s2);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15497, G__15498) : f.call(null, G__15497, G__15498);
        }(), map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      var s3 = cljs.core.seq(c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons(function() {
          var G__15499 = cljs.core.first(s1);
          var G__15500 = cljs.core.first(s2);
          var G__15501 = cljs.core.first(s3);
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15499, G__15500, G__15501) : f.call(null, G__15499, G__15500, G__15501);
        }(), map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__15512__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
          if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
            return cljs.core.cons(map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), step(map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.cljs$core$IFn$_invoke$arity$2(function(step) {
        return function(p1__15449_SHARP_) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__15449_SHARP_);
        };
      }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
    };
    var G__15512 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        var G__15513__i = 0, G__15513__a = new Array(arguments.length - 4);
        while (G__15513__i < G__15513__a.length) {
          G__15513__a[G__15513__i] = arguments[G__15513__i + 4];
          ++G__15513__i;
        }
        colls = new cljs.core.IndexedSeq(G__15513__a, 0);
      }
      return G__15512__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__15512.cljs$lang$maxFixedArity = 4;
    G__15512.cljs$lang$applyTo = function(arglist__15514) {
      var f = cljs.core.first(arglist__15514);
      arglist__15514 = cljs.core.next(arglist__15514);
      var c1 = cljs.core.first(arglist__15514);
      arglist__15514 = cljs.core.next(arglist__15514);
      var c2 = cljs.core.first(arglist__15514);
      arglist__15514 = cljs.core.next(arglist__15514);
      var c3 = cljs.core.first(arglist__15514);
      var colls = cljs.core.rest(arglist__15514);
      return G__15512__delegate(f, c1, c2, c3, colls);
    };
    G__15512.cljs$core$IFn$_invoke$arity$variadic = G__15512__delegate;
    return G__15512;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return map__1.call(this, f);
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        var G__15515 = null;
        if (arguments.length > 4) {
          var G__15516__i = 0, G__15516__a = new Array(arguments.length - 4);
          while (G__15516__i < G__15516__a.length) {
            G__15516__a[G__15516__i] = arguments[G__15516__i + 4];
            ++G__15516__i;
          }
          G__15515 = new cljs.core.IndexedSeq(G__15516__a, 0);
        }
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, G__15515);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$1 = map__1;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function() {
  var take = null;
  var take__1 = function(n) {
    return function(rf) {
      var na = cljs.core.volatile_BANG_(n);
      return function(na) {
        return function() {
          var G__15525 = null;
          var G__15525__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__15525__1 = function(result) {
            var G__15522 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__15522) : rf.call(null, G__15522);
          };
          var G__15525__2 = function(result, input) {
            var n__$1 = cljs.core.deref(na);
            var nn = na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
            var result__$1 = n__$1 > 0 ? function() {
              var G__15523 = result;
              var G__15524 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__15523, G__15524) : rf.call(null, G__15523, G__15524);
            }() : result;
            if (!(nn > 0)) {
              return cljs.core.ensure_reduced(result__$1);
            } else {
              return result__$1;
            }
          };
          G__15525 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__15525__0.call(this);
              case 1:
                return G__15525__1.call(this, result);
              case 2:
                return G__15525__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__15525.cljs$core$IFn$_invoke$arity$0 = G__15525__0;
          G__15525.cljs$core$IFn$_invoke$arity$1 = G__15525__1;
          G__15525.cljs$core$IFn$_invoke$arity$2 = G__15525__2;
          return G__15525;
        }();
      }(na);
    };
  };
  var take__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      if (n > 0) {
        var temp__4126__auto__ = cljs.core.seq(coll);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          return cljs.core.cons(cljs.core.first(s), take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take__1.call(this, n);
      case 2:
        return take__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$1 = take__1;
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  return take;
}();
cljs.core.drop = function() {
  var drop = null;
  var drop__1 = function(n) {
    return function(rf) {
      var na = cljs.core.volatile_BANG_(n);
      return function(na) {
        return function() {
          var G__15532 = null;
          var G__15532__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__15532__1 = function(result) {
            var G__15529 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__15529) : rf.call(null, G__15529);
          };
          var G__15532__2 = function(result, input) {
            var n__$1 = cljs.core.deref(na);
            na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
            if (n__$1 > 0) {
              return result;
            } else {
              var G__15530 = result;
              var G__15531 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__15530, G__15531) : rf.call(null, G__15530, G__15531);
            }
          };
          G__15532 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__15532__0.call(this);
              case 1:
                return G__15532__1.call(this, result);
              case 2:
                return G__15532__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__15532.cljs$core$IFn$_invoke$arity$0 = G__15532__0;
          G__15532.cljs$core$IFn$_invoke$arity$1 = G__15532__1;
          G__15532.cljs$core$IFn$_invoke$arity$2 = G__15532__2;
          return G__15532;
        }();
      }(na);
    };
  };
  var drop__2 = function(n, coll) {
    var step = function(n__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq(coll__$1);
        if (n__$1 > 0 && s) {
          var G__15533 = n__$1 - 1;
          var G__15534 = cljs.core.rest(s);
          n__$1 = G__15533;
          coll__$1 = G__15534;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step(n, coll);
      };
    }(step), null, null);
  };
  drop = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return drop__1.call(this, n);
      case 2:
        return drop__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop.cljs$core$IFn$_invoke$arity$1 = drop__1;
  drop.cljs$core$IFn$_invoke$arity$2 = drop__2;
  return drop;
}();
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
      return x;
    }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__15537 = cljs.core.next(s);
      var G__15538 = cljs.core.next(lead);
      s = G__15537;
      lead = G__15538;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function() {
  var drop_while = null;
  var drop_while__1 = function(pred) {
    return function(rf) {
      var da = cljs.core.volatile_BANG_(true);
      return function(da) {
        return function() {
          var G__15551 = null;
          var G__15551__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__15551__1 = function(result) {
            var G__15545 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__15545) : rf.call(null, G__15545);
          };
          var G__15551__2 = function(result, input) {
            var drop_QMARK_ = cljs.core.deref(da);
            if (cljs.core.truth_(function() {
              var and__3817__auto__ = drop_QMARK_;
              if (cljs.core.truth_(and__3817__auto__)) {
                var G__15546 = input;
                return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__15546) : pred.call(null, G__15546);
              } else {
                return and__3817__auto__;
              }
            }())) {
              return result;
            } else {
              cljs.core.vreset_BANG_(da, null);
              var G__15547 = result;
              var G__15548 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__15547, G__15548) : rf.call(null, G__15547, G__15548);
            }
          };
          G__15551 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__15551__0.call(this);
              case 1:
                return G__15551__1.call(this, result);
              case 2:
                return G__15551__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__15551.cljs$core$IFn$_invoke$arity$0 = G__15551__0;
          G__15551.cljs$core$IFn$_invoke$arity$1 = G__15551__1;
          G__15551.cljs$core$IFn$_invoke$arity$2 = G__15551__2;
          return G__15551;
        }();
      }(da);
    };
  };
  var drop_while__2 = function(pred, coll) {
    var step = function(pred__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq(coll__$1);
        if (cljs.core.truth_(function() {
          var and__3817__auto__ = s;
          if (and__3817__auto__) {
            var G__15550 = cljs.core.first(s);
            return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__15550) : pred__$1.call(null, G__15550);
          } else {
            return and__3817__auto__;
          }
        }())) {
          var G__15552 = pred__$1;
          var G__15553 = cljs.core.rest(s);
          pred__$1 = G__15552;
          coll__$1 = G__15553;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step(pred, coll);
      };
    }(step), null, null);
  };
  drop_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return drop_while__1.call(this, pred);
      case 2:
        return drop_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_while.cljs$core$IFn$_invoke$arity$1 = drop_while__1;
  drop_while.cljs$core$IFn$_invoke$arity$2 = drop_while__2;
  return drop_while;
}();
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(x, repeat.cljs$core$IFn$_invoke$arity$1(x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, repeat.cljs$core$IFn$_invoke$arity$1(x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), repeatedly.cljs$core$IFn$_invoke$arity$1(f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return iterate(f, function() {
      var G__15562 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15562) : f.call(null, G__15562);
    }());
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      if (s1 && s2) {
        return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__15565__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
        if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
          return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__15565 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        var G__15566__i = 0, G__15566__a = new Array(arguments.length - 2);
        while (G__15566__i < G__15566__a.length) {
          G__15566__a[G__15566__i] = arguments[G__15566__i + 2];
          ++G__15566__i;
        }
        colls = new cljs.core.IndexedSeq(G__15566__a, 0);
      }
      return G__15565__delegate.call(this, c1, c2, colls);
    };
    G__15565.cljs$lang$maxFixedArity = 2;
    G__15565.cljs$lang$applyTo = function(arglist__15567) {
      var c1 = cljs.core.first(arglist__15567);
      arglist__15567 = cljs.core.next(arglist__15567);
      var c2 = cljs.core.first(arglist__15567);
      var colls = cljs.core.rest(arglist__15567);
      return G__15565__delegate(c1, c2, colls);
    };
    G__15565.cljs$core$IFn$_invoke$arity$variadic = G__15565__delegate;
    return G__15565;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        var G__15568 = null;
        if (arguments.length > 2) {
          var G__15569__i = 0, G__15569__a = new Array(arguments.length - 2);
          while (G__15569__i < G__15569__a.length) {
            G__15569__a[G__15569__i] = arguments[G__15569__i + 2];
            ++G__15569__i;
          }
          G__15568 = new cljs.core.IndexedSeq(G__15569__a, 0);
        }
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, G__15568);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function() {
  var interpose = null;
  var interpose__1 = function(sep) {
    return function(rf) {
      var started = cljs.core.volatile_BANG_(false);
      return function(started) {
        return function() {
          var G__15584 = null;
          var G__15584__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__15584__1 = function(result) {
            var G__15577 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__15577) : rf.call(null, G__15577);
          };
          var G__15584__2 = function(result, input) {
            if (cljs.core.truth_(cljs.core.deref(started))) {
              var sepr = function() {
                var G__15578 = result;
                var G__15579 = sep;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__15578, G__15579) : rf.call(null, G__15578, G__15579);
              }();
              if (cljs.core.reduced_QMARK_(sepr)) {
                return sepr;
              } else {
                var G__15580 = sepr;
                var G__15581 = input;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__15580, G__15581) : rf.call(null, G__15580, G__15581);
              }
            } else {
              cljs.core.vreset_BANG_(started, true);
              var G__15582 = result;
              var G__15583 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__15582, G__15583) : rf.call(null, G__15582, G__15583);
            }
          };
          G__15584 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__15584__0.call(this);
              case 1:
                return G__15584__1.call(this, result);
              case 2:
                return G__15584__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__15584.cljs$core$IFn$_invoke$arity$0 = G__15584__0;
          G__15584.cljs$core$IFn$_invoke$arity$1 = G__15584__1;
          G__15584.cljs$core$IFn$_invoke$arity$2 = G__15584__2;
          return G__15584;
        }();
      }(started);
    };
  };
  var interpose__2 = function(sep, coll) {
    return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
  };
  interpose = function(sep, coll) {
    switch(arguments.length) {
      case 1:
        return interpose__1.call(this, sep);
      case 2:
        return interpose__2.call(this, sep, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interpose.cljs$core$IFn$_invoke$arity$1 = interpose__1;
  interpose.cljs$core$IFn$_invoke$arity$2 = interpose__2;
  return interpose;
}();
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__1 = function(f) {
    return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
  };
  var mapcat__2 = function() {
    var G__15593__delegate = function(f, colls) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
    };
    var G__15593 = function(f, var_args) {
      var colls = null;
      if (arguments.length > 1) {
        var G__15594__i = 0, G__15594__a = new Array(arguments.length - 1);
        while (G__15594__i < G__15594__a.length) {
          G__15594__a[G__15594__i] = arguments[G__15594__i + 1];
          ++G__15594__i;
        }
        colls = new cljs.core.IndexedSeq(G__15594__a, 0);
      }
      return G__15593__delegate.call(this, f, colls);
    };
    G__15593.cljs$lang$maxFixedArity = 1;
    G__15593.cljs$lang$applyTo = function(arglist__15595) {
      var f = cljs.core.first(arglist__15595);
      var colls = cljs.core.rest(arglist__15595);
      return G__15593__delegate(f, colls);
    };
    G__15593.cljs$core$IFn$_invoke$arity$variadic = G__15593__delegate;
    return G__15593;
  }();
  mapcat = function(f, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return mapcat__1.call(this, f);
      default:
        var G__15596 = null;
        if (arguments.length > 1) {
          var G__15597__i = 0, G__15597__a = new Array(arguments.length - 1);
          while (G__15597__i < G__15597__a.length) {
            G__15597__a[G__15597__i] = arguments[G__15597__i + 1];
            ++G__15597__i;
          }
          G__15596 = new cljs.core.IndexedSeq(G__15597__a, 0);
        }
        return mapcat__2.cljs$core$IFn$_invoke$arity$variadic(f, G__15596);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 1;
  mapcat.cljs$lang$applyTo = mapcat__2.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$1 = mapcat__1;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__2.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function() {
  var filter = null;
  var filter__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__15616 = null;
        var G__15616__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__15616__1 = function(result) {
          var G__15610 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__15610) : rf.call(null, G__15610);
        };
        var G__15616__2 = function(result, input) {
          if (cljs.core.truth_(function() {
            var G__15611 = input;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__15611) : pred.call(null, G__15611);
          }())) {
            var G__15612 = result;
            var G__15613 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__15612, G__15613) : rf.call(null, G__15612, G__15613);
          } else {
            return result;
          }
        };
        G__15616 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__15616__0.call(this);
            case 1:
              return G__15616__1.call(this, result);
            case 2:
              return G__15616__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__15616.cljs$core$IFn$_invoke$arity$0 = G__15616__0;
        G__15616.cljs$core$IFn$_invoke$arity$1 = G__15616__1;
        G__15616.cljs$core$IFn$_invoke$arity$2 = G__15616__2;
        return G__15616;
      }();
    };
  };
  var filter__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4716__auto___15617 = size;
          var i_15618 = 0;
          while (true) {
            if (i_15618 < n__4716__auto___15617) {
              if (cljs.core.truth_(function() {
                var G__15614 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_15618);
                return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__15614) : pred.call(null, G__15614);
              }())) {
                cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_15618));
              } else {
              }
              var G__15619 = i_15618 + 1;
              i_15618 = G__15619;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
        } else {
          var f = cljs.core.first(s);
          var r = cljs.core.rest(s);
          if (cljs.core.truth_(function() {
            var G__15615 = f;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__15615) : pred.call(null, G__15615);
          }())) {
            return cljs.core.cons(f, filter.cljs$core$IFn$_invoke$arity$2(pred, r));
          } else {
            return filter.cljs$core$IFn$_invoke$arity$2(pred, r);
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  filter = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return filter__1.call(this, pred);
      case 2:
        return filter__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter.cljs$core$IFn$_invoke$arity$1 = filter__1;
  filter.cljs$core$IFn$_invoke$arity$2 = filter__2;
  return filter;
}();
cljs.core.remove = function() {
  var remove = null;
  var remove__1 = function(pred) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
  };
  var remove__2 = function(pred, coll) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
  };
  remove = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return remove__1.call(this, pred);
      case 2:
        return remove__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove.cljs$core$IFn$_invoke$arity$1 = remove__1;
  remove.cljs$core$IFn$_invoke$arity$2 = remove__2;
  return remove;
}();
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(function() {
        var G__15626 = node;
        return branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(G__15626) : branch_QMARK_.call(null, G__15626);
      }()) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(walk, cljs.core.array_seq([function() {
        var G__15627 = node;
        return children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(G__15627) : children.call(null, G__15627);
      }()], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__15628_SHARP_) {
    return!cljs.core.sequential_QMARK_(p1__15628_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function() {
  var into = null;
  var into__2 = function(to, from) {
    if (!(to == null)) {
      if (function() {
        var G__15631 = to;
        if (G__15631) {
          var bit__4503__auto__ = G__15631.cljs$lang$protocol_mask$partition1$ & 4;
          if (bit__4503__auto__ || G__15631.cljs$core$IEditableCollection$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
      } else {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
      }
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
    }
  };
  var into__3 = function(to, xform, from) {
    if (function() {
      var G__15632 = to;
      if (G__15632) {
        var bit__4503__auto__ = G__15632.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4503__auto__ || G__15632.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
    }
  };
  into = function(to, xform, from) {
    switch(arguments.length) {
      case 2:
        return into__2.call(this, to, xform);
      case 3:
        return into__3.call(this, to, xform, from);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into.cljs$core$IFn$_invoke$arity$2 = into__2;
  into.cljs$core$IFn$_invoke$arity$3 = into__3;
  return into;
}();
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, function() {
        var G__15634 = o;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15634) : f.call(null, G__15634);
      }());
    }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__15635__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
    };
    var G__15635 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        var G__15636__i = 0, G__15636__a = new Array(arguments.length - 4);
        while (G__15636__i < G__15636__a.length) {
          G__15636__a[G__15636__i] = arguments[G__15636__i + 4];
          ++G__15636__i;
        }
        colls = new cljs.core.IndexedSeq(G__15636__a, 0);
      }
      return G__15635__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__15635.cljs$lang$maxFixedArity = 4;
    G__15635.cljs$lang$applyTo = function(arglist__15637) {
      var f = cljs.core.first(arglist__15637);
      arglist__15637 = cljs.core.next(arglist__15637);
      var c1 = cljs.core.first(arglist__15637);
      arglist__15637 = cljs.core.next(arglist__15637);
      var c2 = cljs.core.first(arglist__15637);
      arglist__15637 = cljs.core.next(arglist__15637);
      var c3 = cljs.core.first(arglist__15637);
      var colls = cljs.core.rest(arglist__15637);
      return G__15635__delegate(f, c1, c2, c3, colls);
    };
    G__15635.cljs$core$IFn$_invoke$arity$variadic = G__15635__delegate;
    return G__15635;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        var G__15638 = null;
        if (arguments.length > 4) {
          var G__15639__i = 0, G__15639__a = new Array(arguments.length - 4);
          while (G__15639__i < G__15639__a.length) {
            G__15639__a[G__15639__i] = arguments[G__15639__i + 4];
            ++G__15639__i;
          }
          G__15638 = new cljs.core.IndexedSeq(G__15639__a, 0);
        }
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, G__15638);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(function() {
      var G__15641 = o;
      return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__15641) : pred.call(null, G__15641);
    }())) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
        if (n === cljs.core.count(p)) {
          return cljs.core.cons(p, partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
        if (n === cljs.core.count(p)) {
          return cljs.core.cons(p, partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
        } else {
          return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq(ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__15656 = m__$1;
          if (G__15656) {
            var bit__4510__auto__ = G__15656.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4510__auto__ || G__15656.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__15656.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__15656);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__15656);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__15657 = sentinel;
            var G__15658 = m__$2;
            var G__15659 = cljs.core.next(ks__$1);
            sentinel = G__15657;
            m__$1 = G__15658;
            ks__$1 = G__15659;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__15660, v) {
  var vec__15665 = p__15660;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15665, 0, null);
  var ks = cljs.core.nthnext(vec__15665, 1);
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__15666, f) {
    var vec__15704 = p__15666;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15704, 0, null);
    var ks = cljs.core.nthnext(vec__15704, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__15705 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15705) : f.call(null, G__15705);
      }());
    }
  };
  var update_in__4 = function(m, p__15667, f, a) {
    var vec__15706 = p__15667;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15706, 0, null);
    var ks = cljs.core.nthnext(vec__15706, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__15707 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__15708 = a;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15707, G__15708) : f.call(null, G__15707, G__15708);
      }());
    }
  };
  var update_in__5 = function(m, p__15668, f, a, b) {
    var vec__15709 = p__15668;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15709, 0, null);
    var ks = cljs.core.nthnext(vec__15709, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__15710 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__15711 = a;
        var G__15712 = b;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15710, G__15711, G__15712) : f.call(null, G__15710, G__15711, G__15712);
      }());
    }
  };
  var update_in__6 = function(m, p__15669, f, a, b, c) {
    var vec__15713 = p__15669;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15713, 0, null);
    var ks = cljs.core.nthnext(vec__15713, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__15714 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__15715 = a;
        var G__15716 = b;
        var G__15717 = c;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__15714, G__15715, G__15716, G__15717) : f.call(null, G__15714, G__15715, G__15716, G__15717);
      }());
    }
  };
  var update_in__7 = function() {
    var G__15719__delegate = function(m, p__15670, f, a, b, c, args) {
      var vec__15718 = p__15670;
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15718, 0, null);
      var ks = cljs.core.nthnext(vec__15718, 1);
      if (ks) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
      }
    };
    var G__15719 = function(m, p__15670, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        var G__15720__i = 0, G__15720__a = new Array(arguments.length - 6);
        while (G__15720__i < G__15720__a.length) {
          G__15720__a[G__15720__i] = arguments[G__15720__i + 6];
          ++G__15720__i;
        }
        args = new cljs.core.IndexedSeq(G__15720__a, 0);
      }
      return G__15719__delegate.call(this, m, p__15670, f, a, b, c, args);
    };
    G__15719.cljs$lang$maxFixedArity = 6;
    G__15719.cljs$lang$applyTo = function(arglist__15721) {
      var m = cljs.core.first(arglist__15721);
      arglist__15721 = cljs.core.next(arglist__15721);
      var p__15670 = cljs.core.first(arglist__15721);
      arglist__15721 = cljs.core.next(arglist__15721);
      var f = cljs.core.first(arglist__15721);
      arglist__15721 = cljs.core.next(arglist__15721);
      var a = cljs.core.first(arglist__15721);
      arglist__15721 = cljs.core.next(arglist__15721);
      var b = cljs.core.first(arglist__15721);
      arglist__15721 = cljs.core.next(arglist__15721);
      var c = cljs.core.first(arglist__15721);
      var args = cljs.core.rest(arglist__15721);
      return G__15719__delegate(m, p__15670, f, a, b, c, args);
    };
    G__15719.cljs$core$IFn$_invoke$arity$variadic = G__15719__delegate;
    return G__15719;
  }();
  update_in = function(m, p__15670, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__15670, f);
      case 4:
        return update_in__4.call(this, m, p__15670, f, a);
      case 5:
        return update_in__5.call(this, m, p__15670, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__15670, f, a, b, c);
      default:
        var G__15722 = null;
        if (arguments.length > 6) {
          var G__15723__i = 0, G__15723__a = new Array(arguments.length - 6);
          while (G__15723__i < G__15723__a.length) {
            G__15723__a[G__15723__i] = arguments[G__15723__i + 6];
            ++G__15723__i;
          }
          G__15722 = new cljs.core.IndexedSeq(G__15723__a, 0);
        }
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__15670, f, a, b, c, G__15722);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.update = function() {
  var update = null;
  var update__3 = function(m, k, f) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__15734 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15734) : f.call(null, G__15734);
    }());
  };
  var update__4 = function(m, k, f, x) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__15735 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__15736 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15735, G__15736) : f.call(null, G__15735, G__15736);
    }());
  };
  var update__5 = function(m, k, f, x, y) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__15737 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__15738 = x;
      var G__15739 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15737, G__15738, G__15739) : f.call(null, G__15737, G__15738, G__15739);
    }());
  };
  var update__6 = function(m, k, f, x, y, z) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__15740 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__15741 = x;
      var G__15742 = y;
      var G__15743 = z;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__15740, G__15741, G__15742, G__15743) : f.call(null, G__15740, G__15741, G__15742, G__15743);
    }());
  };
  var update__7 = function() {
    var G__15744__delegate = function(m, k, f, x, y, z, more) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
    };
    var G__15744 = function(m, k, f, x, y, z, var_args) {
      var more = null;
      if (arguments.length > 6) {
        var G__15745__i = 0, G__15745__a = new Array(arguments.length - 6);
        while (G__15745__i < G__15745__a.length) {
          G__15745__a[G__15745__i] = arguments[G__15745__i + 6];
          ++G__15745__i;
        }
        more = new cljs.core.IndexedSeq(G__15745__a, 0);
      }
      return G__15744__delegate.call(this, m, k, f, x, y, z, more);
    };
    G__15744.cljs$lang$maxFixedArity = 6;
    G__15744.cljs$lang$applyTo = function(arglist__15746) {
      var m = cljs.core.first(arglist__15746);
      arglist__15746 = cljs.core.next(arglist__15746);
      var k = cljs.core.first(arglist__15746);
      arglist__15746 = cljs.core.next(arglist__15746);
      var f = cljs.core.first(arglist__15746);
      arglist__15746 = cljs.core.next(arglist__15746);
      var x = cljs.core.first(arglist__15746);
      arglist__15746 = cljs.core.next(arglist__15746);
      var y = cljs.core.first(arglist__15746);
      arglist__15746 = cljs.core.next(arglist__15746);
      var z = cljs.core.first(arglist__15746);
      var more = cljs.core.rest(arglist__15746);
      return G__15744__delegate(m, k, f, x, y, z, more);
    };
    G__15744.cljs$core$IFn$_invoke$arity$variadic = G__15744__delegate;
    return G__15744;
  }();
  update = function(m, k, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return update__3.call(this, m, k, f);
      case 4:
        return update__4.call(this, m, k, f, x);
      case 5:
        return update__5.call(this, m, k, f, x, y);
      case 6:
        return update__6.call(this, m, k, f, x, y, z);
      default:
        var G__15747 = null;
        if (arguments.length > 6) {
          var G__15748__i = 0, G__15748__a = new Array(arguments.length - 6);
          while (G__15748__i < G__15748__a.length) {
            G__15748__a[G__15748__i] = arguments[G__15748__i + 6];
            ++G__15748__i;
          }
          G__15747 = new cljs.core.IndexedSeq(G__15748__a, 0);
        }
        return update__7.cljs$core$IFn$_invoke$arity$variadic(m, k, f, x, y, z, G__15747);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update.cljs$lang$maxFixedArity = 6;
  update.cljs$lang$applyTo = update__7.cljs$lang$applyTo;
  update.cljs$core$IFn$_invoke$arity$3 = update__3;
  update.cljs$core$IFn$_invoke$arity$4 = update__4;
  update.cljs$core$IFn$_invoke$arity$5 = update__5;
  update.cljs$core$IFn$_invoke$arity$6 = update__6;
  update.cljs$core$IFn$_invoke$arity$variadic = update__7.cljs$core$IFn$_invoke$arity$variadic;
  return update;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__15749 = ll - 5;
      var G__15750 = r;
      ll = G__15749;
      ret = G__15750;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__15755 = cljs.core.pv_aget(node, 0);
      var G__15756 = level - 5;
      node = G__15755;
      level = G__15756;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__15757 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__15758 = level - 5;
        node = G__15757;
        level = G__15758;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function __GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__15768 = init__$2;
              var G__15769 = j + i;
              var G__15770 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15768, G__15769, G__15770) : f.call(null, G__15768, G__15769, G__15770);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__15781 = j + 1;
              var G__15782 = init__$3;
              j = G__15781;
              init__$2 = G__15782;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__15771 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__15771) : cljs.core.deref.call(null, G__15771);
      } else {
        var G__15783 = i + len;
        var G__15784 = init__$2;
        i = G__15783;
        init__$1 = G__15784;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, function() {
    var G__15772 = self__.root;
    return cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(G__15772) : cljs.core.tv_editable_root.call(null, G__15772);
  }(), function() {
    var G__15773 = self__.tail;
    return cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(G__15773) : cljs.core.tv_editable_tail.call(null, G__15773);
  }());
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__15774 = init__$2;
              var G__15775 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15774, G__15775) : f.call(null, G__15774, G__15775);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__15785 = j + 1;
              var G__15786 = init__$3;
              j = G__15785;
              init__$2 = G__15786;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__15776 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__15776) : cljs.core.deref.call(null, G__15776);
      } else {
        var G__15787 = i + len;
        var G__15788 = init__$2;
        i = G__15787;
        init__$1 = G__15788;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__15777 = coll__$1;
      var G__15778 = cljs.core.first_array_for_longvec(coll__$1);
      var G__15779 = 0;
      var G__15780 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__15777, G__15778, G__15779, G__15780) : cljs.core.chunked_seq.call(null, G__15777, G__15778, G__15779, G__15780);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4716__auto___15789 = len;
    var i_15790 = 0;
    while (true) {
      if (i_15790 < n__4716__auto___15789) {
        new_tail[i_15790] = self__.tail[i_15790];
        var G__15791 = i_15790 + 1;
        i_15790 = G__15791;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__15792 = null;
  var G__15792__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__15792__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__15792 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15792__2.call(this, self__, k);
      case 3:
        return G__15792__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15792.cljs$core$IFn$_invoke$arity$2 = G__15792__2;
  G__15792.cljs$core$IFn$_invoke$arity$3 = G__15792__3;
  return G__15792;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args15767) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args15767)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__15793 = i + 1;
        var G__15794 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__15793;
        out = G__15794;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.vec = function vec(coll) {
  if (coll instanceof Array) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray(args.arr, true);
    } else {
      return cljs.core.vec(args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      var G__15795__i = 0, G__15795__a = new Array(arguments.length - 0);
      while (G__15795__i < G__15795__a.length) {
        G__15795__a[G__15795__i] = arguments[G__15795__i + 0];
        ++G__15795__i;
      }
      args = new cljs.core.IndexedSeq(G__15795__a, 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__15796) {
    var args = cljs.core.seq(arglist__15796);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__15797 = self__.vec;
      var G__15798 = self__.node;
      var G__15799 = self__.i;
      var G__15800 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__15797, G__15798, G__15799, G__15800) : cljs.core.chunked_seq.call(null, G__15797, G__15798, G__15799, G__15800);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__15801 = self__.vec;
    var G__15802 = self__.i + self__.off;
    var G__15803 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__15801, G__15802, G__15803) : cljs.core.subvec.call(null, G__15801, G__15802, G__15803);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__15804 = self__.vec;
    var G__15805 = self__.i + self__.off;
    var G__15806 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__15804, G__15805, G__15806) : cljs.core.subvec.call(null, G__15804, G__15805, G__15806);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__15807 = self__.vec;
      var G__15808 = self__.node;
      var G__15809 = self__.i;
      var G__15810 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__15807, G__15808, G__15809, G__15810) : cljs.core.chunked_seq.call(null, G__15807, G__15808, G__15809, G__15810);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__15811 = self__.vec;
    var G__15812 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__15813 = end;
    var G__15814 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__15811, G__15812, G__15813, G__15814) : cljs.core.chunked_seq.call(null, G__15811, G__15812, G__15813, G__15814);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  var G__15815 = self__.vec;
  var G__15816 = self__.node;
  var G__15817 = self__.i;
  var G__15818 = self__.off;
  var G__15819 = m;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(G__15815, G__15816, G__15817, G__15818, G__15819) : cljs.core.chunked_seq.call(null, G__15815, G__15816, G__15817, G__15818, G__15819);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__15820 = self__.vec;
    var G__15821 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__15822 = end;
    var G__15823 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__15820, G__15821, G__15822, G__15823) : cljs.core.chunked_seq.call(null, G__15820, G__15821, G__15822, G__15823);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__15825 = self__.meta;
  var G__15826 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__15827 = self__.start;
  var G__15828 = function() {
    var x__4146__auto__ = self__.end;
    var y__4147__auto__ = v_pos + 1;
    return x__4146__auto__ > y__4147__auto__ ? x__4146__auto__ : y__4147__auto__;
  }();
  var G__15829 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__15825, G__15826, G__15827, G__15828, G__15829) : cljs.core.build_subvec.call(null, G__15825, G__15826, G__15827, G__15828, G__15829);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__15830 = self__.meta;
    var G__15831 = self__.v;
    var G__15832 = self__.start;
    var G__15833 = self__.end - 1;
    var G__15834 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__15830, G__15831, G__15832, G__15833, G__15834) : cljs.core.build_subvec.call(null, G__15830, G__15831, G__15832, G__15833, G__15834);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  var G__15836 = meta__$1;
  var G__15837 = self__.v;
  var G__15838 = self__.start;
  var G__15839 = self__.end;
  var G__15840 = self__.__hash;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__15836, G__15837, G__15838, G__15839, G__15840) : cljs.core.build_subvec.call(null, G__15836, G__15837, G__15838, G__15839, G__15840);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__15841 = self__.meta;
  var G__15842 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__15843 = self__.start;
  var G__15844 = self__.end + 1;
  var G__15845 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__15841, G__15842, G__15843, G__15844, G__15845) : cljs.core.build_subvec.call(null, G__15841, G__15842, G__15843, G__15844, G__15845);
};
cljs.core.Subvec.prototype.call = function() {
  var G__15846 = null;
  var G__15846__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__15846__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__15846 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15846__2.call(this, self__, k);
      case 3:
        return G__15846__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15846.cljs$core$IFn$_invoke$arity$2 = G__15846__2;
  G__15846.cljs$core$IFn$_invoke$arity$3 = G__15846__3;
  return G__15846;
}();
cljs.core.Subvec.prototype.apply = function(self__, args15824) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args15824)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__15847 = meta;
      var G__15848 = v.v;
      var G__15849 = v.start + start;
      var G__15850 = v.start + end;
      var G__15851 = __hash;
      meta = G__15847;
      v = G__15848;
      start = G__15849;
      end = G__15850;
      __hash = G__15851;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec(null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj15858 = {};
    return obj15858;
  }(), cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__15866 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__15867 = level - 5;
        node = G__15866;
        level = G__15867;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.prototype.call = function() {
  var G__15871 = null;
  var G__15871__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15871__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15871 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15871__2.call(this, self__, k);
      case 3:
        return G__15871__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15871.cljs$core$IFn$_invoke$arity$2 = G__15871__2;
  G__15871.cljs$core$IFn$_invoke$arity$3 = G__15871__3;
  return G__15871;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args15868) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args15868)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next(self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next(self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__3829__auto__ = self__.front;
    if (cljs.core.truth_(or__3829__auto__)) {
      return or__3829__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__3829__auto__ = self__.rear;
      if (cljs.core.truth_(or__3829__auto__)) {
        return or__3829__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__15872 = i + incr;
        i = G__15872;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__15873 = i + 1;
      var G__15874 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__15873;
      out = G__15874;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj15878 = {};
    return obj15878;
  }();
  var l = ks.length;
  var i_15879 = 0;
  while (true) {
    if (i_15879 < l) {
      var k_15880 = ks[i_15879];
      new_obj[k_15880] = obj[k_15880];
      var G__15881 = i_15879 + 1;
      i_15879 = G__15881;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__3817__auto__ = function() {
      var G__15885 = k;
      return goog.isString(G__15885);
    }();
    if (cljs.core.truth_(and__3817__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__3817__auto__;
    }
  }())) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__15886 = init__$1;
        var G__15887 = k;
        var G__15888 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15886, G__15887, G__15888) : f.call(null, G__15886, G__15887, G__15888);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__15889 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__15889) : cljs.core.deref.call(null, G__15889);
      } else {
        var G__15895 = cljs.core.rest(keys__$1);
        var G__15896 = init__$2;
        keys__$1 = G__15895;
        init__$1 = G__15896;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__3817__auto__ = function() {
      var G__15891 = k;
      return goog.isString(G__15891);
    }();
    if (cljs.core.truth_(and__3817__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__3817__auto__;
    }
  }())) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var G__15892 = k;
    return goog.isString(G__15892);
  }())) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__3817__auto__ = function() {
      var G__15894 = k;
      return goog.isString(G__15894);
    }();
    if (cljs.core.truth_(and__3817__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__3817__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__15882_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__15882_SHARP_, self__.strobj[p1__15882_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__15897 = null;
  var G__15897__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15897__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15897 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15897__2.call(this, self__, k);
      case 3:
        return G__15897__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15897.cljs$core$IFn$_invoke$arity$2 = G__15897__2;
  G__15897.cljs$core$IFn$_invoke$arity$3 = G__15897__3;
  return G__15897;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args15883) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args15883)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj15899 = {};
  return obj15899;
}(), 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__15900 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15900, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15900, 1, null);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function __GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function __GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__15901 = i + 2;
        i = G__15901;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__15902 = i + 2;
        i = G__15902;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__15903 = i + 2;
        i = G__15903;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__15904 = i + 2;
        i = G__15904;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__15905 = i + 2;
        i = G__15905;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_(arr, m, k);
  } else {
    if (cljs.core.truth_(function() {
      var or__3829__auto__ = function() {
        var G__15909 = k;
        return goog.isString(G__15909);
      }();
      if (cljs.core.truth_(or__3829__auto__)) {
        return or__3829__auto__;
      } else {
        return typeof k === "number";
      }
    }())) {
      return cljs.core.array_map_index_of_identical_QMARK_(arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_(arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_(arr, m, k);
        } else {
          return cljs.core.array_map_index_of_equiv_QMARK_(arr, m, k);
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_15910 = 0;
  while (true) {
    if (i_15910 < l) {
      narr[i_15910] = arr[i_15910];
      var G__15911 = i_15910 + 1;
      i_15910 = G__15911;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function __GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__15913 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__15913) : cljs.core.keys.call(null, G__15913);
  }());
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__15914 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__15914) : cljs.core.vals.call(null, G__15914);
  }());
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__15915 = cljs.core.seq(coll);
  var chunk__15916 = null;
  var count__15917 = 0;
  var i__15918 = 0;
  while (true) {
    if (i__15918 < count__15917) {
      var vec__15919 = chunk__15916.cljs$core$IIndexed$_nth$arity$2(null, i__15918);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15919, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15919, 1, null);
      var G__15920_15933 = v;
      var G__15921_15934 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15920_15933, G__15921_15934) : f.call(null, G__15920_15933, G__15921_15934);
      var G__15935 = seq__15915;
      var G__15936 = chunk__15916;
      var G__15937 = count__15917;
      var G__15938 = i__15918 + 1;
      seq__15915 = G__15935;
      chunk__15916 = G__15936;
      count__15917 = G__15937;
      i__15918 = G__15938;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__15915);
      if (temp__4126__auto__) {
        var seq__15915__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__15915__$1)) {
          var c__4616__auto__ = cljs.core.chunk_first(seq__15915__$1);
          var G__15939 = cljs.core.chunk_rest(seq__15915__$1);
          var G__15940 = c__4616__auto__;
          var G__15941 = cljs.core.count(c__4616__auto__);
          var G__15942 = 0;
          seq__15915 = G__15939;
          chunk__15916 = G__15940;
          count__15917 = G__15941;
          i__15918 = G__15942;
          continue;
        } else {
          var vec__15922 = cljs.core.first(seq__15915__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15922, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15922, 1, null);
          var G__15923_15943 = v;
          var G__15924_15944 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15923_15943, G__15924_15944) : f.call(null, G__15923_15943, G__15924_15944);
          var G__15945 = cljs.core.next(seq__15915__$1);
          var G__15946 = null;
          var G__15947 = 0;
          var G__15948 = 0;
          seq__15915 = G__15945;
          chunk__15916 = G__15946;
          count__15917 = G__15947;
          i__15918 = G__15948;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__15925 = init__$1;
        var G__15926 = self__.arr[i];
        var G__15927 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15925, G__15926, G__15927) : f.call(null, G__15925, G__15926, G__15927);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__15928 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__15928) : cljs.core.deref.call(null, G__15928);
      } else {
        var G__15949 = i + 2;
        var G__15950 = init__$2;
        i = G__15949;
        init__$1 = G__15950;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__15929 = other;
    if (G__15929) {
      var bit__4503__auto__ = G__15929.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4503__auto__ || G__15929.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__15951 = i + 2;
              i = G__15951;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj15931 = {};
    return obj15931;
  }(), self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__15952 = s + 2;
            var G__15953 = d;
            s = G__15952;
            d = G__15953;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__15954 = s + 2;
            var G__15955 = d + 2;
            s = G__15954;
            d = G__15955;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__15932 = cljs.core.aclone(self__.arr);
        G__15932[idx + 1] = v;
        return G__15932;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__15956 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__15957 = cljs.core.next(es);
          ret = G__15956;
          es = G__15957;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__15958 = null;
  var G__15958__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__15958__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__15958 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15958__2.call(this, self__, k);
      case 3:
        return G__15958__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15958.cljs$core$IFn$_invoke$arity$2 = G__15958__2;
  G__15958.cljs$core$IFn$_invoke$arity$3 = G__15958__3;
  return G__15958;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args15912) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args15912)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__15959 = i + 2;
        var G__15960 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
        i = G__15959;
        ret = G__15960;
        continue;
      } else {
        return cljs.core._persistent_BANG_(ret);
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__15961_15969 = self__.arr;
      G__15961_15969.pop();
      G__15961_15969.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(function() {
          var G__15962 = self__.len;
          var G__15963 = self__.arr;
          return cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(G__15962, G__15963) : cljs.core.array__GT_transient_hash_map.call(null, G__15962, G__15963);
        }(), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__15964 = o;
      if (G__15964) {
        var bit__4510__auto__ = G__15964.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4510__auto__ || G__15964.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__15964.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__15964);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__15964);
      }
    }()) {
      return cljs.core._assoc_BANG_(tcoll__$1, function() {
        var G__15965 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__15965) : cljs.core.key.call(null, G__15965);
      }(), function() {
        var G__15966 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__15966) : cljs.core.val.call(null, G__15966);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__15970 = cljs.core.next(es);
          var G__15971 = cljs.core._assoc_BANG_(tcoll__$2, function() {
            var G__15967 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__15967) : cljs.core.key.call(null, G__15967);
          }(), function() {
            var G__15968 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__15968) : cljs.core.val.call(null, G__15968);
          }());
          es = G__15970;
          tcoll__$2 = G__15971;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__15972 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__15973 = i + 2;
      out = G__15972;
      i = G__15973;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__15976 = cljs.core.aclone(arr);
    G__15976[i] = a;
    return G__15976;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__15977 = cljs.core.aclone(arr);
    G__15977[i] = a;
    G__15977[j] = b;
    return G__15977;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__15982 = init__$1;
          var G__15983 = k;
          var G__15984 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15982, G__15983, G__15984) : f.call(null, G__15982, G__15983, G__15984);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__15985 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__15985) : cljs.core.deref.call(null, G__15985);
      } else {
        var G__15986 = i + 2;
        var G__15987 = init__$2;
        i = G__15986;
        init__$1 = G__15987;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__15988 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__15988) : cljs.core.create_inode_seq.call(null, G__15988);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_16002 = 0;
        var j_16003 = 0;
        while (true) {
          if (i_16002 < 32) {
            if ((self__.bitmap >>> i_16002 & 1) === 0) {
              var G__16004 = i_16002 + 1;
              var G__16005 = j_16003;
              i_16002 = G__16004;
              j_16003 = G__16005;
              continue;
            } else {
              nodes[i_16002] = !(self__.arr[j_16003] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_16003]), self__.arr[j_16003], self__.arr[j_16003 + 1], added_leaf_QMARK_) : self__.arr[j_16003 + 1];
              var G__16006 = i_16002 + 1;
              var G__16007 = j_16003 + 2;
              i_16002 = G__16006;
              j_16003 = G__16007;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__15989 = edit__$1;
          var G__15990 = shift + 5;
          var G__15991 = key_or_nil;
          var G__15992 = val_or_node;
          var G__15993 = hash;
          var G__15994 = key;
          var G__15995 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__15989, G__15990, G__15991, G__15992, G__15993, G__15994, G__15995) : cljs.core.create_node.call(null, G__15989, G__15990, G__15991, G__15992, G__15993, G__15994, G__15995);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_16008 = 0;
      var j_16009 = 0;
      while (true) {
        if (i_16008 < 32) {
          if ((self__.bitmap >>> i_16008 & 1) === 0) {
            var G__16010 = i_16008 + 1;
            var G__16011 = j_16009;
            i_16008 = G__16010;
            j_16009 = G__16011;
            continue;
          } else {
            nodes[i_16008] = !(self__.arr[j_16009] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_16009]), self__.arr[j_16009], self__.arr[j_16009 + 1], added_leaf_QMARK_) : self__.arr[j_16009 + 1];
            var G__16012 = i_16008 + 1;
            var G__16013 = j_16009 + 2;
            i_16008 = G__16012;
            j_16009 = G__16013;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__15996 = shift + 5;
          var G__15997 = key_or_nil;
          var G__15998 = val_or_node;
          var G__15999 = hash;
          var G__16000 = key;
          var G__16001 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__15996, G__15997, G__15998, G__15999, G__16000, G__16001) : cljs.core.create_node.call(null, G__15996, G__15997, G__15998, G__15999, G__16000, G__16001);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__16014 = i + 1;
        var G__16015 = j + 2;
        var G__16016 = bitmap | 1 << i;
        i = G__16014;
        j = G__16015;
        bitmap = G__16016;
        continue;
      } else {
        var G__16017 = i + 1;
        var G__16018 = j;
        var G__16019 = bitmap;
        i = G__16017;
        j = G__16018;
        bitmap = G__16019;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__16020 = self__.arr;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(G__16020) : cljs.core.create_array_node_seq.call(null, G__16020);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          var G__16021 = init__$2;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16021) : cljs.core.deref.call(null, G__16021);
        } else {
          var G__16022 = i + 1;
          var G__16023 = init__$2;
          i = G__16022;
          init__$1 = G__16023;
          continue;
        }
      } else {
        var G__16024 = i + 1;
        var G__16025 = init__$1;
        i = G__16024;
        init__$1 = G__16025;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__16026 = i + 2;
        i = G__16026;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__16027 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__16027) : cljs.core.create_inode_seq.call(null, G__16027);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash(key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash(key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__16028 = self__.nodes;
    var G__16029 = self__.i + 2;
    var G__16030 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__16028, G__16029, G__16030) : cljs.core.create_inode_seq.call(null, G__16028, G__16029, G__16030);
  } else {
    var G__16031 = self__.nodes;
    var G__16032 = self__.i;
    var G__16033 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__16031, G__16032, G__16033) : cljs.core.create_inode_seq.call(null, G__16031, G__16032, G__16033);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__16037 = j + 2;
                j = G__16037;
                continue;
              }
            } else {
              var G__16038 = j + 2;
              j = G__16038;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__16039 = null;
  var G__16040 = self__.nodes;
  var G__16041 = self__.i;
  var G__16042 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__16039, G__16040, G__16041, G__16042) : cljs.core.create_array_node_seq.call(null, G__16039, G__16040, G__16041, G__16042);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__16047 = j + 1;
              j = G__16047;
              continue;
            }
          } else {
            var G__16048 = j + 1;
            j = G__16048;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__16050 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__16050) : cljs.core.keys.call(null, G__16050);
  }());
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__16051 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__16051) : cljs.core.vals.call(null, G__16051);
  }());
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16052 = cljs.core.seq(coll);
  var chunk__16053 = null;
  var count__16054 = 0;
  var i__16055 = 0;
  while (true) {
    if (i__16055 < count__16054) {
      var vec__16056 = chunk__16053.cljs$core$IIndexed$_nth$arity$2(null, i__16055);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16056, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16056, 1, null);
      var G__16057_16068 = v;
      var G__16058_16069 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16057_16068, G__16058_16069) : f.call(null, G__16057_16068, G__16058_16069);
      var G__16070 = seq__16052;
      var G__16071 = chunk__16053;
      var G__16072 = count__16054;
      var G__16073 = i__16055 + 1;
      seq__16052 = G__16070;
      chunk__16053 = G__16071;
      count__16054 = G__16072;
      i__16055 = G__16073;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__16052);
      if (temp__4126__auto__) {
        var seq__16052__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__16052__$1)) {
          var c__4616__auto__ = cljs.core.chunk_first(seq__16052__$1);
          var G__16074 = cljs.core.chunk_rest(seq__16052__$1);
          var G__16075 = c__4616__auto__;
          var G__16076 = cljs.core.count(c__4616__auto__);
          var G__16077 = 0;
          seq__16052 = G__16074;
          chunk__16053 = G__16075;
          count__16054 = G__16076;
          i__16055 = G__16077;
          continue;
        } else {
          var vec__16059 = cljs.core.first(seq__16052__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16059, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16059, 1, null);
          var G__16060_16078 = v;
          var G__16061_16079 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16060_16078, G__16061_16079) : f.call(null, G__16060_16078, G__16061_16079);
          var G__16080 = cljs.core.next(seq__16052__$1);
          var G__16081 = null;
          var G__16082 = 0;
          var G__16083 = 0;
          seq__16052 = G__16080;
          chunk__16053 = G__16081;
          count__16054 = G__16082;
          i__16055 = G__16083;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? function() {
    var G__16062 = init;
    var G__16063 = null;
    var G__16064 = self__.nil_val;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16062, G__16063, G__16064) : f.call(null, G__16062, G__16063, G__16064);
  }() : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__16065 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16065) : cljs.core.deref.call(null, G__16065);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj16067 = {};
    return obj16067;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__16084 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__16085 = cljs.core.next(es);
          ret = G__16084;
          es = G__16085;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__16086 = null;
  var G__16086__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16086__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16086 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16086__2.call(this, self__, k);
      case 3:
        return G__16086__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16086.cljs$core$IFn$_invoke$arity$2 = G__16086__2;
  G__16086.cljs$core$IFn$_invoke$arity$3 = G__16086__3;
  return G__16086;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args16049) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16049)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__16087 = i + 2;
      var G__16088 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__16087;
      ret = G__16088;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__16089 = i + 1;
      var G__16090 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__16089;
      out = G__16090;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__16091 = o;
      if (G__16091) {
        var bit__4510__auto__ = G__16091.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4510__auto__ || G__16091.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__16091.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__16091);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__16091);
      }
    }()) {
      return tcoll.assoc_BANG_(function() {
        var G__16092 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__16092) : cljs.core.key.call(null, G__16092);
      }(), function() {
        var G__16093 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__16093) : cljs.core.val.call(null, G__16093);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__16096 = cljs.core.next(es);
          var G__16097 = tcoll__$1.assoc_BANG_(function() {
            var G__16094 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__16094) : cljs.core.key.call(null, G__16094);
          }(), function() {
            var G__16095 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__16095) : cljs.core.val.call(null, G__16095);
          }());
          es = G__16096;
          tcoll__$1 = G__16097;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__16098 = ascending_QMARK_ ? t.left : t.right;
      var G__16099 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__16098;
      stack__$1 = G__16099;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__16112 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16112) : cljs.core.deref.call(null, G__16112);
  } else {
    var init__$2 = function() {
      var G__16113 = init__$1;
      var G__16114 = node.key;
      var G__16115 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16113, G__16114, G__16115) : f.call(null, G__16113, G__16114, G__16115);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      var G__16116 = init__$2;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16116) : cljs.core.deref.call(null, G__16116);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        var G__16117 = init__$3;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16117) : cljs.core.deref.call(null, G__16117);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__16119 = null;
  var G__16119__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16119__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16119 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16119__2.call(this, self__, k);
      case 3:
        return G__16119__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16119.cljs$core$IFn$_invoke$arity$2 = G__16119__2;
  G__16119.cljs$core$IFn$_invoke$arity$3 = G__16119__3;
  return G__16119;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args16118) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16118)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__16121 = null;
  var G__16121__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16121__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16121 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16121__2.call(this, self__, k);
      case 3:
        return G__16121__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16121.cljs$core$IFn$_invoke$arity$2 = G__16121__2;
  G__16121.cljs$core$IFn$_invoke$arity$3 = G__16121__3;
  return G__16121;
}();
cljs.core.RedNode.prototype.apply = function(self__, args16120) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16120)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__16134 = k;
      var G__16135 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__16134, G__16135) : comp.call(null, G__16134, G__16135);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append(left, right.left), right.right, null);
        } else {
          var app = tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__16154 = k;
      var G__16155 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__16154, G__16155) : comp.call(null, G__16154, G__16155);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = function() {
    var G__16166 = k;
    var G__16167 = tk;
    return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__16166, G__16167) : comp.call(null, G__16166, G__16167);
  }();
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16169 = cljs.core.seq(coll);
  var chunk__16170 = null;
  var count__16171 = 0;
  var i__16172 = 0;
  while (true) {
    if (i__16172 < count__16171) {
      var vec__16173 = chunk__16170.cljs$core$IIndexed$_nth$arity$2(null, i__16172);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16173, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16173, 1, null);
      var G__16174_16186 = v;
      var G__16175_16187 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16174_16186, G__16175_16187) : f.call(null, G__16174_16186, G__16175_16187);
      var G__16188 = seq__16169;
      var G__16189 = chunk__16170;
      var G__16190 = count__16171;
      var G__16191 = i__16172 + 1;
      seq__16169 = G__16188;
      chunk__16170 = G__16189;
      count__16171 = G__16190;
      i__16172 = G__16191;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__16169);
      if (temp__4126__auto__) {
        var seq__16169__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__16169__$1)) {
          var c__4616__auto__ = cljs.core.chunk_first(seq__16169__$1);
          var G__16192 = cljs.core.chunk_rest(seq__16169__$1);
          var G__16193 = c__4616__auto__;
          var G__16194 = cljs.core.count(c__4616__auto__);
          var G__16195 = 0;
          seq__16169 = G__16192;
          chunk__16170 = G__16193;
          count__16171 = G__16194;
          i__16172 = G__16195;
          continue;
        } else {
          var vec__16176 = cljs.core.first(seq__16169__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16176, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16176, 1, null);
          var G__16177_16196 = v;
          var G__16178_16197 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16177_16196, G__16178_16197) : f.call(null, G__16177_16196, G__16178_16197);
          var G__16198 = cljs.core.next(seq__16169__$1);
          var G__16199 = null;
          var G__16200 = 0;
          var G__16201 = 0;
          seq__16169 = G__16198;
          chunk__16170 = G__16199;
          count__16171 = G__16200;
          i__16172 = G__16201;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__16179 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__16179) : cljs.core.keys.call(null, G__16179);
  }());
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__16180 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__16180) : cljs.core.vals.call(null, G__16180);
  }());
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__16181 = k;
        var G__16182 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__16181, G__16182) : self__.comp.call(null, G__16181, G__16182);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__16202 = t.left;
          t = G__16202;
          continue;
        } else {
          var G__16203 = t.right;
          t = G__16203;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__16204 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__16205 = cljs.core.next(es);
          ret = G__16204;
          es = G__16205;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__16206 = null;
  var G__16206__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16206__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16206 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16206__2.call(this, self__, k);
      case 3:
        return G__16206__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16206.cljs$core$IFn$_invoke$arity$2 = G__16206__2;
  G__16206.cljs$core$IFn$_invoke$arity$3 = G__16206__3;
  return G__16206;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args16168) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16168)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__16183 = k;
          var G__16184 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__16183, G__16184) : self__.comp.call(null, G__16183, G__16184);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__16207 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__16208 = t.left;
              stack = G__16207;
              t = G__16208;
              continue;
            } else {
              var G__16209 = stack;
              var G__16210 = t.right;
              stack = G__16209;
              t = G__16210;
              continue;
            }
          } else {
            if (c > 0) {
              var G__16211 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__16212 = t.right;
              stack = G__16211;
              t = G__16212;
              continue;
            } else {
              var G__16213 = stack;
              var G__16214 = t.left;
              stack = G__16213;
              t = G__16214;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  var G__16185 = entry;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__16185) : cljs.core.key.call(null, G__16185);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__16215 = cljs.core.nnext(in$);
        var G__16216 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__16215;
        out = G__16216;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__16217__i = 0, G__16217__a = new Array(arguments.length - 0);
      while (G__16217__i < G__16217__a.length) {
        G__16217__a[G__16217__i] = arguments[G__16217__i + 0];
        ++G__16217__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__16217__a, 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__16218) {
    var keyvals = cljs.core.seq(arglist__16218);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return cljs.core.PersistentArrayMap.fromArray(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array, keyvals), true, false);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__16219__i = 0, G__16219__a = new Array(arguments.length - 0);
      while (G__16219__i < G__16219__a.length) {
        G__16219__a[G__16219__i] = arguments[G__16219__i + 0];
        ++G__16219__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__16219__a, 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__16220) {
    var keyvals = cljs.core.seq(arglist__16220);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj16224 = {};
      return obj16224;
    }();
    var kvs = cljs.core.seq(keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first(kvs));
        obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
        var G__16225 = cljs.core.nnext(kvs);
        kvs = G__16225;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject(ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__16226__i = 0, G__16226__a = new Array(arguments.length - 0);
      while (G__16226__i < G__16226__a.length) {
        G__16226__a[G__16226__i] = arguments[G__16226__i + 0];
        ++G__16226__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__16226__a, 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__16227) {
    var keyvals = cljs.core.seq(arglist__16227);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__16228 = cljs.core.nnext(in$);
        var G__16229 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__16228;
        out = G__16229;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__16230__i = 0, G__16230__a = new Array(arguments.length - 0);
      while (G__16230__i < G__16230__a.length) {
        G__16230__a[G__16230__i] = arguments[G__16230__i + 0];
        ++G__16230__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__16230__a, 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__16231) {
    var keyvals = cljs.core.seq(arglist__16231);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__16232 = cljs.core.nnext(in$);
        var G__16233 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__16232;
        out = G__16233;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      var G__16234__i = 0, G__16234__a = new Array(arguments.length - 1);
      while (G__16234__i < G__16234__a.length) {
        G__16234__a[G__16234__i] = arguments[G__16234__i + 1];
        ++G__16234__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__16234__a, 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__16235) {
    var comparator = cljs.core.first(arglist__16235);
    var keyvals = cljs.core.rest(arglist__16235);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16236 = self__.mseq;
    if (G__16236) {
      var bit__4510__auto__ = G__16236.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4510__auto__ || G__16236.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16236.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__16236);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__16236);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16237 = self__.mseq;
    if (G__16237) {
      var bit__4510__auto__ = G__16237.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4510__auto__ || G__16237.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16237.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__16237);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__16237);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16238 = self__.mseq;
    if (G__16238) {
      var bit__4510__auto__ = G__16238.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4510__auto__ || G__16238.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16238.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__16238);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__16238);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__16239 = self__.mseq;
    if (G__16239) {
      var bit__4510__auto__ = G__16239.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4510__auto__ || G__16239.cljs$core$INext$) {
        return true;
      } else {
        if (!G__16239.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__16239);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__16239);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__16240_SHARP_, p2__16241_SHARP_) {
        return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
          var or__3829__auto__ = p1__16240_SHARP_;
          if (cljs.core.truth_(or__3829__auto__)) {
            return or__3829__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__16241_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      var G__16242__i = 0, G__16242__a = new Array(arguments.length - 0);
      while (G__16242__i < G__16242__a.length) {
        G__16242__a[G__16242__i] = arguments[G__16242__i + 0];
        ++G__16242__i;
      }
      maps = new cljs.core.IndexedSeq(G__16242__a, 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__16243) {
    var maps = cljs.core.seq(arglist__16243);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first(e);
        var v = cljs.core.second(e);
        if (cljs.core.contains_QMARK_(m, k)) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
            var G__16246 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
            var G__16247 = v;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16246, G__16247) : f.call(null, G__16246, G__16247);
          }());
        } else {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
            var or__3829__auto__ = m1;
            if (cljs.core.truth_(or__3829__auto__)) {
              return or__3829__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq(m2));
        };
      }(merge_entry);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      var G__16248__i = 0, G__16248__a = new Array(arguments.length - 1);
      while (G__16248__i < G__16248__a.length) {
        G__16248__a[G__16248__i] = arguments[G__16248__i + 1];
        ++G__16248__i;
      }
      maps = new cljs.core.IndexedSeq(G__16248__a, 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__16249) {
    var f = cljs.core.first(arglist__16249);
    var maps = cljs.core.rest(arglist__16249);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__16250 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__16251 = cljs.core.next(keys);
      ret = G__16250;
      keys = G__16251;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16254 = cljs.core.seq(coll);
  var chunk__16255 = null;
  var count__16256 = 0;
  var i__16257 = 0;
  while (true) {
    if (i__16257 < count__16256) {
      var vec__16258 = chunk__16255.cljs$core$IIndexed$_nth$arity$2(null, i__16257);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16258, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16258, 1, null);
      var G__16259_16264 = v;
      var G__16260_16265 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16259_16264, G__16260_16265) : f.call(null, G__16259_16264, G__16260_16265);
      var G__16266 = seq__16254;
      var G__16267 = chunk__16255;
      var G__16268 = count__16256;
      var G__16269 = i__16257 + 1;
      seq__16254 = G__16266;
      chunk__16255 = G__16267;
      count__16256 = G__16268;
      i__16257 = G__16269;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__16254);
      if (temp__4126__auto__) {
        var seq__16254__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__16254__$1)) {
          var c__4616__auto__ = cljs.core.chunk_first(seq__16254__$1);
          var G__16270 = cljs.core.chunk_rest(seq__16254__$1);
          var G__16271 = c__4616__auto__;
          var G__16272 = cljs.core.count(c__4616__auto__);
          var G__16273 = 0;
          seq__16254 = G__16270;
          chunk__16255 = G__16271;
          count__16256 = G__16272;
          i__16257 = G__16273;
          continue;
        } else {
          var vec__16261 = cljs.core.first(seq__16254__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16261, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16261, 1, null);
          var G__16262_16274 = v;
          var G__16263_16275 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16262_16274, G__16263_16275) : f.call(null, G__16262_16274, G__16263_16275);
          var G__16276 = cljs.core.next(seq__16254__$1);
          var G__16277 = null;
          var G__16278 = 0;
          var G__16279 = 0;
          seq__16254 = G__16276;
          chunk__16255 = G__16277;
          count__16256 = G__16278;
          i__16257 = G__16279;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__16252_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__16252_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__16280 = null;
  var G__16280__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16280__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16280 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16280__2.call(this, self__, k);
      case 3:
        return G__16280__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16280.cljs$core$IFn$_invoke$arity$2 = G__16280__2;
  G__16280.cljs$core$IFn$_invoke$arity$3 = G__16280__3;
  return G__16280;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args16253) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16253)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__16281 = i + 1;
        var G__16282 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__16281;
        out = G__16282;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__16283 = i + 1;
        var G__16284 = cljs.core._conj_BANG_(out, items[i]);
        i = G__16283;
        out = G__16284;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__16286 = null;
  var G__16286__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__16286__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__16286 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16286__2.call(this, self__, k);
      case 3:
        return G__16286__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16286.cljs$core$IFn$_invoke$arity$2 = G__16286__2;
  G__16286.cljs$core$IFn$_invoke$arity$3 = G__16286__3;
  return G__16286;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args16285) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16285)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16289 = cljs.core.seq(coll);
  var chunk__16290 = null;
  var count__16291 = 0;
  var i__16292 = 0;
  while (true) {
    if (i__16292 < count__16291) {
      var vec__16293 = chunk__16290.cljs$core$IIndexed$_nth$arity$2(null, i__16292);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16293, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16293, 1, null);
      var G__16294_16299 = v;
      var G__16295_16300 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16294_16299, G__16295_16300) : f.call(null, G__16294_16299, G__16295_16300);
      var G__16301 = seq__16289;
      var G__16302 = chunk__16290;
      var G__16303 = count__16291;
      var G__16304 = i__16292 + 1;
      seq__16289 = G__16301;
      chunk__16290 = G__16302;
      count__16291 = G__16303;
      i__16292 = G__16304;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__16289);
      if (temp__4126__auto__) {
        var seq__16289__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__16289__$1)) {
          var c__4616__auto__ = cljs.core.chunk_first(seq__16289__$1);
          var G__16305 = cljs.core.chunk_rest(seq__16289__$1);
          var G__16306 = c__4616__auto__;
          var G__16307 = cljs.core.count(c__4616__auto__);
          var G__16308 = 0;
          seq__16289 = G__16305;
          chunk__16290 = G__16306;
          count__16291 = G__16307;
          i__16292 = G__16308;
          continue;
        } else {
          var vec__16296 = cljs.core.first(seq__16289__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16296, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16296, 1, null);
          var G__16297_16309 = v;
          var G__16298_16310 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16297_16309, G__16298_16310) : f.call(null, G__16297_16309, G__16298_16310);
          var G__16311 = cljs.core.next(seq__16289__$1);
          var G__16312 = null;
          var G__16313 = 0;
          var G__16314 = 0;
          seq__16289 = G__16311;
          chunk__16290 = G__16312;
          count__16291 = G__16313;
          i__16292 = G__16314;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__16287_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__16287_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__16315 = null;
  var G__16315__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16315__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16315 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16315__2.call(this, self__, k);
      case 3:
        return G__16315__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16315.cljs$core$IFn$_invoke$arity$2 = G__16315__2;
  G__16315.cljs$core$IFn$_invoke$arity$3 = G__16315__3;
  return G__16315;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args16288) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16288)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4710__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4710__auto__.length) {
        var G__16316 = i + 1;
        var G__16317 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__16316;
        res = G__16317;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__16318 = in$__$1.cljs$core$INext$_next$arity$1(null);
          var G__16319 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__16318;
          out = G__16319;
          continue;
        } else {
          return out.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__16320__delegate = function(keys) {
      return cljs.core.set(keys);
    };
    var G__16320 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        var G__16321__i = 0, G__16321__a = new Array(arguments.length - 0);
        while (G__16321__i < G__16321__a.length) {
          G__16321__a[G__16321__i] = arguments[G__16321__i + 0];
          ++G__16321__i;
        }
        keys = new cljs.core.IndexedSeq(G__16321__a, 0);
      }
      return G__16320__delegate.call(this, keys);
    };
    G__16320.cljs$lang$maxFixedArity = 0;
    G__16320.cljs$lang$applyTo = function(arglist__16322) {
      var keys = cljs.core.seq(arglist__16322);
      return G__16320__delegate(keys);
    };
    G__16320.cljs$core$IFn$_invoke$arity$variadic = G__16320__delegate;
    return G__16320;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        var G__16323 = null;
        if (arguments.length > 0) {
          var G__16324__i = 0, G__16324__a = new Array(arguments.length - 0);
          while (G__16324__i < G__16324__a.length) {
            G__16324__a[G__16324__i] = arguments[G__16324__i + 0];
            ++G__16324__i;
          }
          G__16323 = new cljs.core.IndexedSeq(G__16324__a, 0);
        }
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(G__16323);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      var G__16325__i = 0, G__16325__a = new Array(arguments.length - 0);
      while (G__16325__i < G__16325__a.length) {
        G__16325__a[G__16325__i] = arguments[G__16325__i + 0];
        ++G__16325__i;
      }
      keys = new cljs.core.IndexedSeq(G__16325__a, 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__16326) {
    var keys = cljs.core.seq(arglist__16326);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      var G__16327__i = 0, G__16327__a = new Array(arguments.length - 1);
      while (G__16327__i < G__16327__a.length) {
        G__16327__a[G__16327__i] = arguments[G__16327__i + 1];
        ++G__16327__i;
      }
      keys = new cljs.core.IndexedSeq(G__16327__a, 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__16328) {
    var comparator = cljs.core.first(arglist__16328);
    var keys = cljs.core.rest(arglist__16328);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function() {
  var replace = null;
  var replace__1 = function(smap) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__16329_SHARP_) {
      var temp__4124__auto__ = cljs.core.find(smap, p1__16329_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.val(e);
      } else {
        return p1__16329_SHARP_;
      }
    });
  };
  var replace__2 = function(smap, coll) {
    if (cljs.core.vector_QMARK_(coll)) {
      var n = cljs.core.count(coll);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
        return function(v, i) {
          var temp__4124__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
          if (cljs.core.truth_(temp__4124__auto__)) {
            var e = temp__4124__auto__;
            return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
          } else {
            return v;
          }
        };
      }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
    } else {
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__16330_SHARP_) {
        var temp__4124__auto__ = cljs.core.find(smap, p1__16330_SHARP_);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.second(e);
        } else {
          return p1__16330_SHARP_;
        }
      }, coll);
    }
  };
  replace = function(smap, coll) {
    switch(arguments.length) {
      case 1:
        return replace__1.call(this, smap);
      case 2:
        return replace__2.call(this, smap, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  replace.cljs$core$IFn$_invoke$arity$1 = replace__1;
  replace.cljs$core$IFn$_invoke$arity$2 = replace__2;
  return replace;
}();
cljs.core.distinct = function() {
  var distinct = null;
  var distinct__0 = function() {
    return function(rf) {
      var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
      return function(seen) {
        return function() {
          var G__16351 = null;
          var G__16351__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__16351__1 = function(result) {
            var G__16341 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16341) : rf.call(null, G__16341);
          };
          var G__16351__2 = function(result, input) {
            if (cljs.core.contains_QMARK_(function() {
              var G__16342 = seen;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16342) : cljs.core.deref.call(null, G__16342);
            }(), input)) {
              return result;
            } else {
              seen.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen.cljs$core$IDeref$_deref$arity$1(null), input));
              var G__16343 = result;
              var G__16344 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16343, G__16344) : rf.call(null, G__16343, G__16344);
            }
          };
          G__16351 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__16351__0.call(this);
              case 1:
                return G__16351__1.call(this, result);
              case 2:
                return G__16351__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__16351.cljs$core$IFn$_invoke$arity$0 = G__16351__0;
          G__16351.cljs$core$IFn$_invoke$arity$1 = G__16351__1;
          G__16351.cljs$core$IFn$_invoke$arity$2 = G__16351__2;
          return G__16351;
        }();
      }(seen);
    };
  };
  var distinct__1 = function(coll) {
    var step = function step(xs, seen) {
      return new cljs.core.LazySeq(null, function() {
        return function(p__16349, seen__$1) {
          while (true) {
            var vec__16350 = p__16349;
            var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16350, 0, null);
            var xs__$1 = vec__16350;
            var temp__4126__auto__ = cljs.core.seq(xs__$1);
            if (temp__4126__auto__) {
              var s = temp__4126__auto__;
              if (cljs.core.contains_QMARK_(seen__$1, f)) {
                var G__16352 = cljs.core.rest(s);
                var G__16353 = seen__$1;
                p__16349 = G__16352;
                seen__$1 = G__16353;
                continue;
              } else {
                return cljs.core.cons(f, step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
              }
            } else {
              return null;
            }
            break;
          }
        }.call(null, xs, seen);
      }, null, null);
    };
    return step(coll, cljs.core.PersistentHashSet.EMPTY);
  };
  distinct = function(coll) {
    switch(arguments.length) {
      case 0:
        return distinct__0.call(this);
      case 1:
        return distinct__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct.cljs$core$IFn$_invoke$arity$0 = distinct__0;
  distinct.cljs$core$IFn$_invoke$arity$1 = distinct__1;
  return distinct;
}();
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__16354 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__16355 = cljs.core.next(s__$1);
      ret = G__16354;
      s__$1 = G__16355;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__16357 = x;
    if (G__16357) {
      var bit__4503__auto__ = G__16357.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4503__auto__ || G__16357.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__16358 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__16359 = cljs.core.next(ks);
      var G__16360 = cljs.core.next(vs);
      map = G__16358;
      ks = G__16359;
      vs = G__16360;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (function() {
      var G__16371 = x;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__16371) : k.call(null, G__16371);
    }() > function() {
      var G__16372 = y;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__16372) : k.call(null, G__16372);
    }()) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__16373__delegate = function(k, x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__16361_SHARP_, p2__16362_SHARP_) {
        return max_key.cljs$core$IFn$_invoke$arity$3(k, p1__16361_SHARP_, p2__16362_SHARP_);
      }, max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
    };
    var G__16373 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        var G__16374__i = 0, G__16374__a = new Array(arguments.length - 3);
        while (G__16374__i < G__16374__a.length) {
          G__16374__a[G__16374__i] = arguments[G__16374__i + 3];
          ++G__16374__i;
        }
        more = new cljs.core.IndexedSeq(G__16374__a, 0);
      }
      return G__16373__delegate.call(this, k, x, y, more);
    };
    G__16373.cljs$lang$maxFixedArity = 3;
    G__16373.cljs$lang$applyTo = function(arglist__16375) {
      var k = cljs.core.first(arglist__16375);
      arglist__16375 = cljs.core.next(arglist__16375);
      var x = cljs.core.first(arglist__16375);
      arglist__16375 = cljs.core.next(arglist__16375);
      var y = cljs.core.first(arglist__16375);
      var more = cljs.core.rest(arglist__16375);
      return G__16373__delegate(k, x, y, more);
    };
    G__16373.cljs$core$IFn$_invoke$arity$variadic = G__16373__delegate;
    return G__16373;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        var G__16376 = null;
        if (arguments.length > 3) {
          var G__16377__i = 0, G__16377__a = new Array(arguments.length - 3);
          while (G__16377__i < G__16377__a.length) {
            G__16377__a[G__16377__i] = arguments[G__16377__i + 3];
            ++G__16377__i;
          }
          G__16376 = new cljs.core.IndexedSeq(G__16377__a, 0);
        }
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, G__16376);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (function() {
      var G__16388 = x;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__16388) : k.call(null, G__16388);
    }() < function() {
      var G__16389 = y;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__16389) : k.call(null, G__16389);
    }()) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__16390__delegate = function(k, x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__16378_SHARP_, p2__16379_SHARP_) {
        return min_key.cljs$core$IFn$_invoke$arity$3(k, p1__16378_SHARP_, p2__16379_SHARP_);
      }, min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
    };
    var G__16390 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        var G__16391__i = 0, G__16391__a = new Array(arguments.length - 3);
        while (G__16391__i < G__16391__a.length) {
          G__16391__a[G__16391__i] = arguments[G__16391__i + 3];
          ++G__16391__i;
        }
        more = new cljs.core.IndexedSeq(G__16391__a, 0);
      }
      return G__16390__delegate.call(this, k, x, y, more);
    };
    G__16390.cljs$lang$maxFixedArity = 3;
    G__16390.cljs$lang$applyTo = function(arglist__16392) {
      var k = cljs.core.first(arglist__16392);
      arglist__16392 = cljs.core.next(arglist__16392);
      var x = cljs.core.first(arglist__16392);
      arglist__16392 = cljs.core.next(arglist__16392);
      var y = cljs.core.first(arglist__16392);
      var more = cljs.core.rest(arglist__16392);
      return G__16390__delegate(k, x, y, more);
    };
    G__16390.cljs$core$IFn$_invoke$arity$variadic = G__16390__delegate;
    return G__16390;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        var G__16393 = null;
        if (arguments.length > 3) {
          var G__16394__i = 0, G__16394__a = new Array(arguments.length - 3);
          while (G__16394__i < G__16394__a.length) {
            G__16394__a[G__16394__i] = arguments[G__16394__i + 3];
            ++G__16394__i;
          }
          G__16393 = new cljs.core.IndexedSeq(G__16394__a, 0);
        }
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, G__16393);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function __GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__1 = function(n) {
    return function(rf) {
      var a = cljs.core.array_list();
      return function(a) {
        return function() {
          var G__16411 = null;
          var G__16411__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__16411__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              return cljs.core.unreduced(function() {
                var G__16406 = result;
                var G__16407 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16406, G__16407) : rf.call(null, G__16406, G__16407);
              }());
            }();
            var G__16408 = result__$1;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16408) : rf.call(null, G__16408);
          };
          var G__16411__2 = function(result, input) {
            a.add(input);
            if (n === a.size()) {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              var G__16409 = result;
              var G__16410 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16409, G__16410) : rf.call(null, G__16409, G__16410);
            } else {
              return result;
            }
          };
          G__16411 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__16411__0.call(this);
              case 1:
                return G__16411__1.call(this, result);
              case 2:
                return G__16411__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__16411.cljs$core$IFn$_invoke$arity$0 = G__16411__0;
          G__16411.cljs$core$IFn$_invoke$arity$1 = G__16411__1;
          G__16411.cljs$core$IFn$_invoke$arity$2 = G__16411__2;
          return G__16411;
        }();
      }(a);
    };
  };
  var partition_all__2 = function(n, coll) {
    return partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 1:
        return partition_all__1.call(this, n);
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$1 = partition_all__1;
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function() {
  var take_while = null;
  var take_while__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__16424 = null;
        var G__16424__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__16424__1 = function(result) {
          var G__16419 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16419) : rf.call(null, G__16419);
        };
        var G__16424__2 = function(result, input) {
          if (cljs.core.truth_(function() {
            var G__16420 = input;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__16420) : pred.call(null, G__16420);
          }())) {
            var G__16421 = result;
            var G__16422 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16421, G__16422) : rf.call(null, G__16421, G__16422);
          } else {
            return cljs.core.reduced(result);
          }
        };
        G__16424 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__16424__0.call(this);
            case 1:
              return G__16424__1.call(this, result);
            case 2:
              return G__16424__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__16424.cljs$core$IFn$_invoke$arity$0 = G__16424__0;
        G__16424.cljs$core$IFn$_invoke$arity$1 = G__16424__1;
        G__16424.cljs$core$IFn$_invoke$arity$2 = G__16424__2;
        return G__16424;
      }();
    };
  };
  var take_while__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.truth_(function() {
          var G__16423 = cljs.core.first(s);
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__16423) : pred.call(null, G__16423);
        }())) {
          return cljs.core.cons(cljs.core.first(s), take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return take_while__1.call(this, pred);
      case 2:
        return take_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_while.cljs$core$IFn$_invoke$arity$1 = take_while__1;
  take_while.cljs$core$IFn$_invoke$arity$2 = take_while__2;
  return take_while;
}();
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__16429 = function() {
      var G__16431 = cljs.core._entry_key(sc, e);
      var G__16432 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__16431, G__16432) : comp.call(null, G__16431, G__16432);
    }();
    var G__16430 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__16429, G__16430) : test.call(null, G__16429, G__16430);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn(sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__16436 = temp__4126__auto__;
        var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16436, 0, null);
        var s = vec__16436;
        if (cljs.core.truth_(function() {
          var G__16437 = e;
          return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__16437) : include.call(null, G__16437);
        }())) {
          return s;
        } else {
          return cljs.core.next(s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__16438 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16438, 0, null);
      var s = vec__16438;
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn(sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__16442 = temp__4126__auto__;
        var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16442, 0, null);
        var s = vec__16442;
        if (cljs.core.truth_(function() {
          var G__16443 = e;
          return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__16443) : include.call(null, G__16443);
        }())) {
          return s;
        } else {
          return cljs.core.next(s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__16444 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16444, 0, null);
      var s = vec__16444;
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function __GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__16445 = (self__.end - self__.start) / self__.step;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__16445) : Math.ceil.call(null, G__16445);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = function() {
        var G__16446 = ret;
        var G__16447 = i;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16446, G__16447) : f.call(null, G__16446, G__16447);
      }();
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        var G__16448 = ret__$1;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16448) : cljs.core.deref.call(null, G__16448);
      } else {
        var G__16449 = i + self__.step;
        var G__16450 = ret__$1;
        i = G__16449;
        ret = G__16450;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function() {
  var take_nth = null;
  var take_nth__1 = function(n) {
    return function(rf) {
      var ia = cljs.core.volatile_BANG_(-1);
      return function(ia) {
        return function() {
          var G__16468 = null;
          var G__16468__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__16468__1 = function(result) {
            var G__16465 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16465) : rf.call(null, G__16465);
          };
          var G__16468__2 = function(result, input) {
            var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
            if (cljs.core.rem(i, n) === 0) {
              var G__16466 = result;
              var G__16467 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16466, G__16467) : rf.call(null, G__16466, G__16467);
            } else {
              return result;
            }
          };
          G__16468 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__16468__0.call(this);
              case 1:
                return G__16468__1.call(this, result);
              case 2:
                return G__16468__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__16468.cljs$core$IFn$_invoke$arity$0 = G__16468__0;
          G__16468.cljs$core$IFn$_invoke$arity$1 = G__16468__1;
          G__16468.cljs$core$IFn$_invoke$arity$2 = G__16468__2;
          return G__16468;
        }();
      }(ia);
    };
  };
  var take_nth__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.first(s), take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  take_nth = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take_nth__1.call(this, n);
      case 2:
        return take_nth__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_nth.cljs$core$IFn$_invoke$arity$1 = take_nth__1;
  take_nth.cljs$core$IFn$_invoke$arity$2 = take_nth__2;
  return take_nth;
}();
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function() {
  var partition_by = null;
  var partition_by__1 = function(f) {
    return function(rf) {
      var a = cljs.core.array_list();
      var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(a, pa) {
        return function() {
          var G__16490 = null;
          var G__16490__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__16490__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              return cljs.core.unreduced(function() {
                var G__16481 = result;
                var G__16482 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16481, G__16482) : rf.call(null, G__16481, G__16482);
              }());
            }();
            var G__16483 = result__$1;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16483) : rf.call(null, G__16483);
          };
          var G__16490__2 = function(result, input) {
            var pval = function() {
              var G__16484 = pa;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16484) : cljs.core.deref.call(null, G__16484);
            }();
            var val = function() {
              var G__16485 = input;
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16485) : f.call(null, G__16485);
            }();
            cljs.core.vreset_BANG_(pa, val);
            if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
              a.add(input);
              return result;
            } else {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              var ret = function() {
                var G__16486 = result;
                var G__16487 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16486, G__16487) : rf.call(null, G__16486, G__16487);
              }();
              if (cljs.core.reduced_QMARK_(ret)) {
              } else {
                a.add(input);
              }
              return ret;
            }
          };
          G__16490 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__16490__0.call(this);
              case 1:
                return G__16490__1.call(this, result);
              case 2:
                return G__16490__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__16490.cljs$core$IFn$_invoke$arity$0 = G__16490__0;
          G__16490.cljs$core$IFn$_invoke$arity$1 = G__16490__1;
          G__16490.cljs$core$IFn$_invoke$arity$2 = G__16490__2;
          return G__16490;
        }();
      }(a, pa);
    };
  };
  var partition_by__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var fst = cljs.core.first(s);
        var fv = function() {
          var G__16488 = fst;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16488) : f.call(null, G__16488);
        }();
        var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4126__auto__) {
          return function(p1__16469_SHARP_) {
            return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, function() {
              var G__16489 = p1__16469_SHARP_;
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16489) : f.call(null, G__16489);
            }());
          };
        }(fst, fv, s, temp__4126__auto__), cljs.core.next(s)));
        return cljs.core.cons(run, partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_by = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return partition_by__1.call(this, f);
      case 2:
        return partition_by__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$1 = partition_by__1;
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  return partition_by;
}();
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }());
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
          var G__16499 = init;
          var G__16500 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16499, G__16500) : f.call(null, G__16499, G__16500);
        }(), cljs.core.rest(s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__16595 = null;
      var G__16595__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }()], null);
      };
      var G__16595__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__16553 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16553) : f.call(null, G__16553);
        }()], null);
      };
      var G__16595__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__16554 = x;
          var G__16555 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16554, G__16555) : f.call(null, G__16554, G__16555);
        }()], null);
      };
      var G__16595__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__16556 = x;
          var G__16557 = y;
          var G__16558 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16556, G__16557, G__16558) : f.call(null, G__16556, G__16557, G__16558);
        }()], null);
      };
      var G__16595__4 = function() {
        var G__16596__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
        };
        var G__16596 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__16597__i = 0, G__16597__a = new Array(arguments.length - 3);
            while (G__16597__i < G__16597__a.length) {
              G__16597__a[G__16597__i] = arguments[G__16597__i + 3];
              ++G__16597__i;
            }
            args = new cljs.core.IndexedSeq(G__16597__a, 0);
          }
          return G__16596__delegate.call(this, x, y, z, args);
        };
        G__16596.cljs$lang$maxFixedArity = 3;
        G__16596.cljs$lang$applyTo = function(arglist__16598) {
          var x = cljs.core.first(arglist__16598);
          arglist__16598 = cljs.core.next(arglist__16598);
          var y = cljs.core.first(arglist__16598);
          arglist__16598 = cljs.core.next(arglist__16598);
          var z = cljs.core.first(arglist__16598);
          var args = cljs.core.rest(arglist__16598);
          return G__16596__delegate(x, y, z, args);
        };
        G__16596.cljs$core$IFn$_invoke$arity$variadic = G__16596__delegate;
        return G__16596;
      }();
      G__16595 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16595__0.call(this);
          case 1:
            return G__16595__1.call(this, x);
          case 2:
            return G__16595__2.call(this, x, y);
          case 3:
            return G__16595__3.call(this, x, y, z);
          default:
            var G__16599 = null;
            if (arguments.length > 3) {
              var G__16600__i = 0, G__16600__a = new Array(arguments.length - 3);
              while (G__16600__i < G__16600__a.length) {
                G__16600__a[G__16600__i] = arguments[G__16600__i + 3];
                ++G__16600__i;
              }
              G__16599 = new cljs.core.IndexedSeq(G__16600__a, 0);
            }
            return G__16595__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16599);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16595.cljs$lang$maxFixedArity = 3;
      G__16595.cljs$lang$applyTo = G__16595__4.cljs$lang$applyTo;
      G__16595.cljs$core$IFn$_invoke$arity$0 = G__16595__0;
      G__16595.cljs$core$IFn$_invoke$arity$1 = G__16595__1;
      G__16595.cljs$core$IFn$_invoke$arity$2 = G__16595__2;
      G__16595.cljs$core$IFn$_invoke$arity$3 = G__16595__3;
      G__16595.cljs$core$IFn$_invoke$arity$variadic = G__16595__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__16595;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__16601 = null;
      var G__16601__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }(), function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }()], null);
      };
      var G__16601__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__16559 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16559) : f.call(null, G__16559);
        }(), function() {
          var G__16560 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__16560) : g.call(null, G__16560);
        }()], null);
      };
      var G__16601__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__16561 = x;
          var G__16562 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16561, G__16562) : f.call(null, G__16561, G__16562);
        }(), function() {
          var G__16563 = x;
          var G__16564 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__16563, G__16564) : g.call(null, G__16563, G__16564);
        }()], null);
      };
      var G__16601__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__16565 = x;
          var G__16566 = y;
          var G__16567 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16565, G__16566, G__16567) : f.call(null, G__16565, G__16566, G__16567);
        }(), function() {
          var G__16568 = x;
          var G__16569 = y;
          var G__16570 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__16568, G__16569, G__16570) : g.call(null, G__16568, G__16569, G__16570);
        }()], null);
      };
      var G__16601__4 = function() {
        var G__16602__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
        };
        var G__16602 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__16603__i = 0, G__16603__a = new Array(arguments.length - 3);
            while (G__16603__i < G__16603__a.length) {
              G__16603__a[G__16603__i] = arguments[G__16603__i + 3];
              ++G__16603__i;
            }
            args = new cljs.core.IndexedSeq(G__16603__a, 0);
          }
          return G__16602__delegate.call(this, x, y, z, args);
        };
        G__16602.cljs$lang$maxFixedArity = 3;
        G__16602.cljs$lang$applyTo = function(arglist__16604) {
          var x = cljs.core.first(arglist__16604);
          arglist__16604 = cljs.core.next(arglist__16604);
          var y = cljs.core.first(arglist__16604);
          arglist__16604 = cljs.core.next(arglist__16604);
          var z = cljs.core.first(arglist__16604);
          var args = cljs.core.rest(arglist__16604);
          return G__16602__delegate(x, y, z, args);
        };
        G__16602.cljs$core$IFn$_invoke$arity$variadic = G__16602__delegate;
        return G__16602;
      }();
      G__16601 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16601__0.call(this);
          case 1:
            return G__16601__1.call(this, x);
          case 2:
            return G__16601__2.call(this, x, y);
          case 3:
            return G__16601__3.call(this, x, y, z);
          default:
            var G__16605 = null;
            if (arguments.length > 3) {
              var G__16606__i = 0, G__16606__a = new Array(arguments.length - 3);
              while (G__16606__i < G__16606__a.length) {
                G__16606__a[G__16606__i] = arguments[G__16606__i + 3];
                ++G__16606__i;
              }
              G__16605 = new cljs.core.IndexedSeq(G__16606__a, 0);
            }
            return G__16601__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16605);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16601.cljs$lang$maxFixedArity = 3;
      G__16601.cljs$lang$applyTo = G__16601__4.cljs$lang$applyTo;
      G__16601.cljs$core$IFn$_invoke$arity$0 = G__16601__0;
      G__16601.cljs$core$IFn$_invoke$arity$1 = G__16601__1;
      G__16601.cljs$core$IFn$_invoke$arity$2 = G__16601__2;
      G__16601.cljs$core$IFn$_invoke$arity$3 = G__16601__3;
      G__16601.cljs$core$IFn$_invoke$arity$variadic = G__16601__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__16601;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__16607 = null;
      var G__16607__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }(), function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }(), function() {
          return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        }()], null);
      };
      var G__16607__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__16571 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16571) : f.call(null, G__16571);
        }(), function() {
          var G__16572 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__16572) : g.call(null, G__16572);
        }(), function() {
          var G__16573 = x;
          return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__16573) : h.call(null, G__16573);
        }()], null);
      };
      var G__16607__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__16574 = x;
          var G__16575 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16574, G__16575) : f.call(null, G__16574, G__16575);
        }(), function() {
          var G__16576 = x;
          var G__16577 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__16576, G__16577) : g.call(null, G__16576, G__16577);
        }(), function() {
          var G__16578 = x;
          var G__16579 = y;
          return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__16578, G__16579) : h.call(null, G__16578, G__16579);
        }()], null);
      };
      var G__16607__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__16580 = x;
          var G__16581 = y;
          var G__16582 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16580, G__16581, G__16582) : f.call(null, G__16580, G__16581, G__16582);
        }(), function() {
          var G__16583 = x;
          var G__16584 = y;
          var G__16585 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__16583, G__16584, G__16585) : g.call(null, G__16583, G__16584, G__16585);
        }(), function() {
          var G__16586 = x;
          var G__16587 = y;
          var G__16588 = z;
          return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__16586, G__16587, G__16588) : h.call(null, G__16586, G__16587, G__16588);
        }()], null);
      };
      var G__16607__4 = function() {
        var G__16608__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
        };
        var G__16608 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__16609__i = 0, G__16609__a = new Array(arguments.length - 3);
            while (G__16609__i < G__16609__a.length) {
              G__16609__a[G__16609__i] = arguments[G__16609__i + 3];
              ++G__16609__i;
            }
            args = new cljs.core.IndexedSeq(G__16609__a, 0);
          }
          return G__16608__delegate.call(this, x, y, z, args);
        };
        G__16608.cljs$lang$maxFixedArity = 3;
        G__16608.cljs$lang$applyTo = function(arglist__16610) {
          var x = cljs.core.first(arglist__16610);
          arglist__16610 = cljs.core.next(arglist__16610);
          var y = cljs.core.first(arglist__16610);
          arglist__16610 = cljs.core.next(arglist__16610);
          var z = cljs.core.first(arglist__16610);
          var args = cljs.core.rest(arglist__16610);
          return G__16608__delegate(x, y, z, args);
        };
        G__16608.cljs$core$IFn$_invoke$arity$variadic = G__16608__delegate;
        return G__16608;
      }();
      G__16607 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__16607__0.call(this);
          case 1:
            return G__16607__1.call(this, x);
          case 2:
            return G__16607__2.call(this, x, y);
          case 3:
            return G__16607__3.call(this, x, y, z);
          default:
            var G__16611 = null;
            if (arguments.length > 3) {
              var G__16612__i = 0, G__16612__a = new Array(arguments.length - 3);
              while (G__16612__i < G__16612__a.length) {
                G__16612__a[G__16612__i] = arguments[G__16612__i + 3];
                ++G__16612__i;
              }
              G__16611 = new cljs.core.IndexedSeq(G__16612__a, 0);
            }
            return G__16607__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16611);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16607.cljs$lang$maxFixedArity = 3;
      G__16607.cljs$lang$applyTo = G__16607__4.cljs$lang$applyTo;
      G__16607.cljs$core$IFn$_invoke$arity$0 = G__16607__0;
      G__16607.cljs$core$IFn$_invoke$arity$1 = G__16607__1;
      G__16607.cljs$core$IFn$_invoke$arity$2 = G__16607__2;
      G__16607.cljs$core$IFn$_invoke$arity$3 = G__16607__3;
      G__16607.cljs$core$IFn$_invoke$arity$variadic = G__16607__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__16607;
    }();
  };
  var juxt__4 = function() {
    var G__16613__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__16614 = null;
          var G__16614__0 = function() {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__16501_SHARP_, p2__16502_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__16501_SHARP_, function() {
                  return p2__16502_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__16502_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__16502_SHARP_.call(null);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16614__1 = function(x) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__16503_SHARP_, p2__16504_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__16503_SHARP_, function() {
                  var G__16589 = x;
                  return p2__16504_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__16504_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16589) : p2__16504_SHARP_.call(null, G__16589);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16614__2 = function(x, y) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__16505_SHARP_, p2__16506_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__16505_SHARP_, function() {
                  var G__16590 = x;
                  var G__16591 = y;
                  return p2__16506_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__16506_SHARP_.cljs$core$IFn$_invoke$arity$2(G__16590, G__16591) : p2__16506_SHARP_.call(null, G__16590, G__16591);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16614__3 = function(x, y, z) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__16507_SHARP_, p2__16508_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__16507_SHARP_, function() {
                  var G__16592 = x;
                  var G__16593 = y;
                  var G__16594 = z;
                  return p2__16508_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__16508_SHARP_.cljs$core$IFn$_invoke$arity$3(G__16592, G__16593, G__16594) : p2__16508_SHARP_.call(null, G__16592, G__16593, G__16594);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__16614__4 = function() {
            var G__16615__delegate = function(x, y, z, args) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
                return function(p1__16509_SHARP_, p2__16510_SHARP_) {
                  return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__16509_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__16510_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__16615 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__16616__i = 0, G__16616__a = new Array(arguments.length - 3);
                while (G__16616__i < G__16616__a.length) {
                  G__16616__a[G__16616__i] = arguments[G__16616__i + 3];
                  ++G__16616__i;
                }
                args = new cljs.core.IndexedSeq(G__16616__a, 0);
              }
              return G__16615__delegate.call(this, x, y, z, args);
            };
            G__16615.cljs$lang$maxFixedArity = 3;
            G__16615.cljs$lang$applyTo = function(arglist__16617) {
              var x = cljs.core.first(arglist__16617);
              arglist__16617 = cljs.core.next(arglist__16617);
              var y = cljs.core.first(arglist__16617);
              arglist__16617 = cljs.core.next(arglist__16617);
              var z = cljs.core.first(arglist__16617);
              var args = cljs.core.rest(arglist__16617);
              return G__16615__delegate(x, y, z, args);
            };
            G__16615.cljs$core$IFn$_invoke$arity$variadic = G__16615__delegate;
            return G__16615;
          }();
          G__16614 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__16614__0.call(this);
              case 1:
                return G__16614__1.call(this, x);
              case 2:
                return G__16614__2.call(this, x, y);
              case 3:
                return G__16614__3.call(this, x, y, z);
              default:
                var G__16618 = null;
                if (arguments.length > 3) {
                  var G__16619__i = 0, G__16619__a = new Array(arguments.length - 3);
                  while (G__16619__i < G__16619__a.length) {
                    G__16619__a[G__16619__i] = arguments[G__16619__i + 3];
                    ++G__16619__i;
                  }
                  G__16618 = new cljs.core.IndexedSeq(G__16619__a, 0);
                }
                return G__16614__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16618);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__16614.cljs$lang$maxFixedArity = 3;
          G__16614.cljs$lang$applyTo = G__16614__4.cljs$lang$applyTo;
          G__16614.cljs$core$IFn$_invoke$arity$0 = G__16614__0;
          G__16614.cljs$core$IFn$_invoke$arity$1 = G__16614__1;
          G__16614.cljs$core$IFn$_invoke$arity$2 = G__16614__2;
          G__16614.cljs$core$IFn$_invoke$arity$3 = G__16614__3;
          G__16614.cljs$core$IFn$_invoke$arity$variadic = G__16614__4.cljs$core$IFn$_invoke$arity$variadic;
          return G__16614;
        }();
      }(fs__$1);
    };
    var G__16613 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        var G__16620__i = 0, G__16620__a = new Array(arguments.length - 3);
        while (G__16620__i < G__16620__a.length) {
          G__16620__a[G__16620__i] = arguments[G__16620__i + 3];
          ++G__16620__i;
        }
        fs = new cljs.core.IndexedSeq(G__16620__a, 0);
      }
      return G__16613__delegate.call(this, f, g, h, fs);
    };
    G__16613.cljs$lang$maxFixedArity = 3;
    G__16613.cljs$lang$applyTo = function(arglist__16621) {
      var f = cljs.core.first(arglist__16621);
      arglist__16621 = cljs.core.next(arglist__16621);
      var g = cljs.core.first(arglist__16621);
      arglist__16621 = cljs.core.next(arglist__16621);
      var h = cljs.core.first(arglist__16621);
      var fs = cljs.core.rest(arglist__16621);
      return G__16613__delegate(f, g, h, fs);
    };
    G__16613.cljs$core$IFn$_invoke$arity$variadic = G__16613__delegate;
    return G__16613;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        var G__16622 = null;
        if (arguments.length > 3) {
          var G__16623__i = 0, G__16623__a = new Array(arguments.length - 3);
          while (G__16623__i < G__16623__a.length) {
            G__16623__a[G__16623__i] = arguments[G__16623__i + 3];
            ++G__16623__i;
          }
          G__16622 = new cljs.core.IndexedSeq(G__16623__a, 0);
        }
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, G__16622);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq(coll)) {
        var G__16624 = cljs.core.next(coll);
        coll = G__16624;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq(coll) && n > 0) {
        var G__16625 = n - 1;
        var G__16626 = cljs.core.next(coll);
        n = G__16625;
        coll = G__16626;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__16630 = cljs.core.re_find(/^(?:\(\?([idmsux]*)\))?(.*)/, s);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16630, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16630, 1, null);
    var pattern = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16630, 2, null);
    return new RegExp(pattern, flags);
  }
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_16638 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__3829__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__3829__auto__)) {
              return or__3829__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__16639_16645 = cljs.core.first(coll);
          var G__16640_16646 = writer;
          var G__16641_16647 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__16639_16645, G__16640_16646, G__16641_16647) : print_one.call(null, G__16639_16645, G__16640_16646, G__16641_16647);
        } else {
        }
        var coll_16648__$1 = cljs.core.next(coll);
        var n_16649 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_16648__$1 && (n_16649 == null || !(n_16649 === 0))) {
            cljs.core._write(writer, sep);
            var G__16642_16650 = cljs.core.first(coll_16648__$1);
            var G__16643_16651 = writer;
            var G__16644_16652 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__16642_16650, G__16643_16651, G__16644_16652) : print_one.call(null, G__16642_16650, G__16643_16651, G__16644_16652);
            var G__16653 = cljs.core.next(coll_16648__$1);
            var G__16654 = n_16649 - 1;
            coll_16648__$1 = G__16653;
            n_16649 = G__16654;
            continue;
          } else {
            if (cljs.core.seq(coll_16648__$1) && n_16649 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__3829__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__3829__auto__)) {
                  return or__3829__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_16638;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__16659 = cljs.core.seq(ss);
    var chunk__16660 = null;
    var count__16661 = 0;
    var i__16662 = 0;
    while (true) {
      if (i__16662 < count__16661) {
        var s = chunk__16660.cljs$core$IIndexed$_nth$arity$2(null, i__16662);
        cljs.core._write(writer, s);
        var G__16663 = seq__16659;
        var G__16664 = chunk__16660;
        var G__16665 = count__16661;
        var G__16666 = i__16662 + 1;
        seq__16659 = G__16663;
        chunk__16660 = G__16664;
        count__16661 = G__16665;
        i__16662 = G__16666;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq(seq__16659);
        if (temp__4126__auto__) {
          var seq__16659__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(seq__16659__$1)) {
            var c__4616__auto__ = cljs.core.chunk_first(seq__16659__$1);
            var G__16667 = cljs.core.chunk_rest(seq__16659__$1);
            var G__16668 = c__4616__auto__;
            var G__16669 = cljs.core.count(c__4616__auto__);
            var G__16670 = 0;
            seq__16659 = G__16667;
            chunk__16660 = G__16668;
            count__16661 = G__16669;
            i__16662 = G__16670;
            continue;
          } else {
            var s = cljs.core.first(seq__16659__$1);
            cljs.core._write(writer, s);
            var G__16671 = cljs.core.next(seq__16659__$1);
            var G__16672 = null;
            var G__16673 = 0;
            var G__16674 = 0;
            seq__16659 = G__16671;
            chunk__16660 = G__16672;
            count__16661 = G__16673;
            i__16662 = G__16674;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      var G__16675__i = 0, G__16675__a = new Array(arguments.length - 1);
      while (G__16675__i < G__16675__a.length) {
        G__16675__a[G__16675__i] = arguments[G__16675__i + 1];
        ++G__16675__i;
      }
      ss = new cljs.core.IndexedSeq(G__16675__a, 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__16676) {
    var writer = cljs.core.first(arglist__16676);
    var ss = cljs.core.rest(arglist__16676);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj16678 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj16678;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(function() {
    var G__16681 = '[\\\\"\b\f\n\r\t]';
    var G__16682 = "g";
    return RegExp(G__16681, G__16682);
  }(), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer_impl = function pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write(writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__3817__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__3817__auto__)) {
          var and__3817__auto____$1 = function() {
            var G__16696 = obj;
            if (G__16696) {
              var bit__4510__auto__ = G__16696.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4510__auto__ || G__16696.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__16696.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__16696);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__16696);
            }
          }();
          if (and__3817__auto____$1) {
            return cljs.core.meta(obj);
          } else {
            return and__3817__auto____$1;
          }
        } else {
          return and__3817__auto__;
        }
      }())) {
        cljs.core._write(writer, "^");
        var G__16697_16707 = cljs.core.meta(obj);
        var G__16698_16708 = writer;
        var G__16699_16709 = opts;
        cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__16697_16707, G__16698_16708, G__16699_16709) : cljs.core.pr_writer.call(null, G__16697_16707, G__16698_16708, G__16699_16709);
        cljs.core._write(writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write(writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__16700 = obj;
            if (G__16700) {
              var bit__4503__auto__ = G__16700.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4503__auto__ || G__16700.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
          } else {
            if (cljs.core.type(obj) === Boolean || typeof obj === "number") {
              return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
            } else {
              if (cljs.core.object_QMARK_(obj)) {
                cljs.core._write(writer, "#js ");
                var G__16701 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
                }, cljs.core.js_keys(obj));
                var G__16702 = cljs.core.pr_writer;
                var G__16703 = writer;
                var G__16704 = opts;
                return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__16701, G__16702, G__16703, G__16704) : cljs.core.print_map.call(null, G__16701, G__16702, G__16703, G__16704);
              } else {
                if (obj instanceof Array) {
                  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (cljs.core.truth_(function() {
                    var G__16705 = obj;
                    return goog.isString(G__16705);
                  }())) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write(writer, cljs.core.quote_string(obj));
                    } else {
                      return cljs.core._write(writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while (true) {
                            if (cljs.core.count(ns) < len) {
                              var G__16710 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__16710;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                      } else {
                        if (cljs.core.regexp_QMARK_(obj)) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                        } else {
                          if (function() {
                            var G__16706 = obj;
                            if (G__16706) {
                              var bit__4510__auto__ = G__16706.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4510__auto__ || G__16706.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__16706.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__16706);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__16706);
                            }
                          }()) {
                            return cljs.core._pr_writer(obj, writer, opts);
                          } else {
                            return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  var temp__4124__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var alt_impl = temp__4124__auto__;
    var G__16714 = obj;
    var G__16715 = writer;
    var G__16716 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__16714, G__16715, G__16716) : alt_impl.call(null, G__16714, G__16715, G__16716);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__16721 = cljs.core.seq(cljs.core.next(objs));
  var chunk__16722 = null;
  var count__16723 = 0;
  var i__16724 = 0;
  while (true) {
    if (i__16724 < count__16723) {
      var obj = chunk__16722.cljs$core$IIndexed$_nth$arity$2(null, i__16724);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__16725 = seq__16721;
      var G__16726 = chunk__16722;
      var G__16727 = count__16723;
      var G__16728 = i__16724 + 1;
      seq__16721 = G__16725;
      chunk__16722 = G__16726;
      count__16723 = G__16727;
      i__16724 = G__16728;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__16721);
      if (temp__4126__auto__) {
        var seq__16721__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__16721__$1)) {
          var c__4616__auto__ = cljs.core.chunk_first(seq__16721__$1);
          var G__16729 = cljs.core.chunk_rest(seq__16721__$1);
          var G__16730 = c__4616__auto__;
          var G__16731 = cljs.core.count(c__4616__auto__);
          var G__16732 = 0;
          seq__16721 = G__16729;
          chunk__16722 = G__16730;
          count__16723 = G__16731;
          i__16724 = G__16732;
          continue;
        } else {
          var obj = cljs.core.first(seq__16721__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__16733 = cljs.core.next(seq__16721__$1);
          var G__16734 = null;
          var G__16735 = 0;
          var G__16736 = 0;
          seq__16721 = G__16733;
          chunk__16722 = G__16734;
          count__16723 = G__16735;
          i__16724 = G__16736;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__16737__i = 0, G__16737__a = new Array(arguments.length - 0);
      while (G__16737__i < G__16737__a.length) {
        G__16737__a[G__16737__i] = arguments[G__16737__i + 0];
        ++G__16737__i;
      }
      objs = new cljs.core.IndexedSeq(G__16737__a, 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__16738) {
    var objs = cljs.core.seq(arglist__16738);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__16739__i = 0, G__16739__a = new Array(arguments.length - 0);
      while (G__16739__i < G__16739__a.length) {
        G__16739__a[G__16739__i] = arguments[G__16739__i + 0];
        ++G__16739__i;
      }
      objs = new cljs.core.IndexedSeq(G__16739__a, 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__16740) {
    var objs = cljs.core.seq(arglist__16740);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__16741__i = 0, G__16741__a = new Array(arguments.length - 0);
      while (G__16741__i < G__16741__a.length) {
        G__16741__a[G__16741__i] = arguments[G__16741__i + 0];
        ++G__16741__i;
      }
      objs = new cljs.core.IndexedSeq(G__16741__a, 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__16742) {
    var objs = cljs.core.seq(arglist__16742);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__16743__i = 0, G__16743__a = new Array(arguments.length - 0);
      while (G__16743__i < G__16743__a.length) {
        G__16743__a[G__16743__i] = arguments[G__16743__i + 0];
        ++G__16743__i;
      }
      objs = new cljs.core.IndexedSeq(G__16743__a, 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__16744) {
    var objs = cljs.core.seq(arglist__16744);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__16745__i = 0, G__16745__a = new Array(arguments.length - 0);
      while (G__16745__i < G__16745__a.length) {
        G__16745__a[G__16745__i] = arguments[G__16745__i + 0];
        ++G__16745__i;
      }
      objs = new cljs.core.IndexedSeq(G__16745__a, 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__16746) {
    var objs = cljs.core.seq(arglist__16746);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline(cljs.core.pr_opts());
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__16747__i = 0, G__16747__a = new Array(arguments.length - 0);
      while (G__16747__i < G__16747__a.length) {
        G__16747__a[G__16747__i] = arguments[G__16747__i + 0];
        ++G__16747__i;
      }
      objs = new cljs.core.IndexedSeq(G__16747__a, 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__16748) {
    var objs = cljs.core.seq(arglist__16748);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__16749__i = 0, G__16749__a = new Array(arguments.length - 0);
      while (G__16749__i < G__16749__a.length) {
        G__16749__a[G__16749__i] = arguments[G__16749__i + 0];
        ++G__16749__i;
      }
      objs = new cljs.core.IndexedSeq(G__16749__a, 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__16750) {
    var objs = cljs.core.seq(arglist__16750);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline(cljs.core.pr_opts());
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__16751__i = 0, G__16751__a = new Array(arguments.length - 0);
      while (G__16751__i < G__16751__a.length) {
        G__16751__a[G__16751__i] = arguments[G__16751__i + 0];
        ++G__16751__i;
      }
      objs = new cljs.core.IndexedSeq(G__16751__a, 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__16752) {
    var objs = cljs.core.seq(arglist__16752);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__16759_16765 = cljs.core.key(e);
    var G__16760_16766 = w;
    var G__16761_16767 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__16759_16765, G__16760_16766, G__16761_16767) : print_one.call(null, G__16759_16765, G__16760_16766, G__16761_16767);
    cljs.core._write(w, " ");
    var G__16762 = cljs.core.val(e);
    var G__16763 = w;
    var G__16764 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__16762, G__16763, G__16764) : print_one.call(null, G__16762, G__16763, G__16764);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cVolatile: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cAtom: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_keywords(x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols(x__$1, y);
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__16768__i = 0, G__16768__a = new Array(arguments.length - 2);
      while (G__16768__i < G__16768__a.length) {
        G__16768__a[G__16768__i] = arguments[G__16768__i + 2];
        ++G__16768__i;
      }
      args = new cljs.core.IndexedSeq(G__16768__a, 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__16769) {
    var iref = cljs.core.first(arglist__16769);
    arglist__16769 = cljs.core.next(arglist__16769);
    var f = cljs.core.first(arglist__16769);
    var args = cljs.core.rest(arglist__16769);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.cljs$core$IFn$_invoke$arity$1("G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = function() {
        var G__16772 = 0;
        return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__16772) : cljs.core.atom.call(null, G__16772);
      }();
    } else {
    }
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = function() {
      return self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    }();
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function __GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    var G__16774 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16774) : cljs.core.deref.call(null, G__16774);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_(d);
};
cljs.core.preserving_reduced = function preserving_reduced(rf) {
  return function(p1__16775_SHARP_, p2__16776_SHARP_) {
    var ret = function() {
      var G__16779 = p1__16775_SHARP_;
      var G__16780 = p2__16776_SHARP_;
      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16779, G__16780) : rf.call(null, G__16779, G__16780);
    }();
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__16783 = null;
      var G__16783__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__16783__1 = function(result) {
        var G__16782 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16782) : rf.call(null, G__16782);
      };
      var G__16783__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__16783 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__16783__0.call(this);
          case 1:
            return G__16783__1.call(this, result);
          case 2:
            return G__16783__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16783.cljs$core$IFn$_invoke$arity$0 = G__16783__0;
      G__16783.cljs$core$IFn$_invoke$arity$1 = G__16783__1;
      G__16783.cljs$core$IFn$_invoke$arity$2 = G__16783__2;
      return G__16783;
    }();
  }(rf1);
};
cljs.core.dedupe = function() {
  var dedupe = null;
  var dedupe__0 = function() {
    return function(rf) {
      var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(pa) {
        return function() {
          var G__16792 = null;
          var G__16792__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__16792__1 = function(result) {
            var G__16788 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16788) : rf.call(null, G__16788);
          };
          var G__16792__2 = function(result, input) {
            var prior = function() {
              var G__16789 = pa;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16789) : cljs.core.deref.call(null, G__16789);
            }();
            cljs.core.vreset_BANG_(pa, input);
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
              return result;
            } else {
              var G__16790 = result;
              var G__16791 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16790, G__16791) : rf.call(null, G__16790, G__16791);
            }
          };
          G__16792 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__16792__0.call(this);
              case 1:
                return G__16792__1.call(this, result);
              case 2:
                return G__16792__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__16792.cljs$core$IFn$_invoke$arity$0 = G__16792__0;
          G__16792.cljs$core$IFn$_invoke$arity$1 = G__16792__1;
          G__16792.cljs$core$IFn$_invoke$arity$2 = G__16792__2;
          return G__16792;
        }();
      }(pa);
    };
  };
  var dedupe__1 = function(coll) {
    return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
  };
  dedupe = function(coll) {
    switch(arguments.length) {
      case 0:
        return dedupe__0.call(this);
      case 1:
        return dedupe__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dedupe.cljs$core$IFn$_invoke$arity$0 = dedupe__0;
  dedupe.cljs$core$IFn$_invoke$arity$1 = dedupe__1;
  return dedupe;
}();
cljs.core.random_sample = function() {
  var random_sample = null;
  var random_sample__1 = function(prob) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
      return function() {
        return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
      }() < prob;
    });
  };
  var random_sample__2 = function(prob, coll) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
      return function() {
        return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
      }() < prob;
    }, coll);
  };
  random_sample = function(prob, coll) {
    switch(arguments.length) {
      case 1:
        return random_sample__1.call(this, prob);
      case 2:
        return random_sample__2.call(this, prob, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_sample.cljs$core$IFn$_invoke$arity$1 = random_sample__1;
  random_sample.cljs$core$IFn$_invoke$arity$2 = random_sample__2;
  return random_sample;
}();
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function __GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4807__auto__ = this;
  return cljs.core.es6_iterator(this__4807__auto__);
};
cljs.core.eduction = function eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__16794_SHARP_, p2__16793_SHARP_) {
    var G__16796 = p2__16793_SHARP_;
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(G__16796) : proc.call(null, G__16796);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj16798 = {};
  return obj16798;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3817__auto__ = x;
    if (and__3817__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4473__auto__ = x == null ? null : x;
    return function() {
      var or__3829__auto__ = cljs.core._clj__GT_js[function() {
        var G__16802 = x__4473__auto__;
        return goog.typeOf(G__16802);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3817__auto__ = x;
    if (and__3817__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4473__auto__ = x == null ? null : x;
    return function() {
      var or__3829__auto__ = cljs.core._key__GT_js[function() {
        var G__16806 = x__4473__auto__;
        return goog.typeOf(G__16806);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__16809 = k;
    if (G__16809) {
      var bit__4510__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3829__auto__ = bit__4510__auto__;
        if (cljs.core.truth_(or__3829__auto__)) {
          return or__3829__auto__;
        } else {
          return G__16809.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__16809.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__16809);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__16809);
    }
  }()) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      var G__16810 = k;
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(G__16810) : cljs.core.clj__GT_js.call(null, G__16810);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__16826 = x;
      if (G__16826) {
        var bit__4510__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3829__auto__ = bit__4510__auto__;
          if (cljs.core.truth_(or__3829__auto__)) {
            return or__3829__auto__;
          } else {
            return G__16826.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__16826.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__16826);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__16826);
      }
    }()) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = function() {
              var obj16828 = {};
              return obj16828;
            }();
            var seq__16829_16839 = cljs.core.seq(x);
            var chunk__16830_16840 = null;
            var count__16831_16841 = 0;
            var i__16832_16842 = 0;
            while (true) {
              if (i__16832_16842 < count__16831_16841) {
                var vec__16833_16843 = chunk__16830_16840.cljs$core$IIndexed$_nth$arity$2(null, i__16832_16842);
                var k_16844 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16833_16843, 0, null);
                var v_16845 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16833_16843, 1, null);
                m[cljs.core.key__GT_js(k_16844)] = clj__GT_js(v_16845);
                var G__16846 = seq__16829_16839;
                var G__16847 = chunk__16830_16840;
                var G__16848 = count__16831_16841;
                var G__16849 = i__16832_16842 + 1;
                seq__16829_16839 = G__16846;
                chunk__16830_16840 = G__16847;
                count__16831_16841 = G__16848;
                i__16832_16842 = G__16849;
                continue;
              } else {
                var temp__4126__auto___16850 = cljs.core.seq(seq__16829_16839);
                if (temp__4126__auto___16850) {
                  var seq__16829_16851__$1 = temp__4126__auto___16850;
                  if (cljs.core.chunked_seq_QMARK_(seq__16829_16851__$1)) {
                    var c__4616__auto___16852 = cljs.core.chunk_first(seq__16829_16851__$1);
                    var G__16853 = cljs.core.chunk_rest(seq__16829_16851__$1);
                    var G__16854 = c__4616__auto___16852;
                    var G__16855 = cljs.core.count(c__4616__auto___16852);
                    var G__16856 = 0;
                    seq__16829_16839 = G__16853;
                    chunk__16830_16840 = G__16854;
                    count__16831_16841 = G__16855;
                    i__16832_16842 = G__16856;
                    continue;
                  } else {
                    var vec__16834_16857 = cljs.core.first(seq__16829_16851__$1);
                    var k_16858 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16834_16857, 0, null);
                    var v_16859 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16834_16857, 1, null);
                    m[cljs.core.key__GT_js(k_16858)] = clj__GT_js(v_16859);
                    var G__16860 = cljs.core.next(seq__16829_16851__$1);
                    var G__16861 = null;
                    var G__16862 = 0;
                    var G__16863 = 0;
                    seq__16829_16839 = G__16860;
                    chunk__16830_16840 = G__16861;
                    count__16831_16841 = G__16862;
                    i__16832_16842 = G__16863;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__16835_16864 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(clj__GT_js, x));
              var chunk__16836_16865 = null;
              var count__16837_16866 = 0;
              var i__16838_16867 = 0;
              while (true) {
                if (i__16838_16867 < count__16837_16866) {
                  var x_16868__$1 = chunk__16836_16865.cljs$core$IIndexed$_nth$arity$2(null, i__16838_16867);
                  arr.push(x_16868__$1);
                  var G__16869 = seq__16835_16864;
                  var G__16870 = chunk__16836_16865;
                  var G__16871 = count__16837_16866;
                  var G__16872 = i__16838_16867 + 1;
                  seq__16835_16864 = G__16869;
                  chunk__16836_16865 = G__16870;
                  count__16837_16866 = G__16871;
                  i__16838_16867 = G__16872;
                  continue;
                } else {
                  var temp__4126__auto___16873 = cljs.core.seq(seq__16835_16864);
                  if (temp__4126__auto___16873) {
                    var seq__16835_16874__$1 = temp__4126__auto___16873;
                    if (cljs.core.chunked_seq_QMARK_(seq__16835_16874__$1)) {
                      var c__4616__auto___16875 = cljs.core.chunk_first(seq__16835_16874__$1);
                      var G__16876 = cljs.core.chunk_rest(seq__16835_16874__$1);
                      var G__16877 = c__4616__auto___16875;
                      var G__16878 = cljs.core.count(c__4616__auto___16875);
                      var G__16879 = 0;
                      seq__16835_16864 = G__16876;
                      chunk__16836_16865 = G__16877;
                      count__16837_16866 = G__16878;
                      i__16838_16867 = G__16879;
                      continue;
                    } else {
                      var x_16880__$1 = cljs.core.first(seq__16835_16874__$1);
                      arr.push(x_16880__$1);
                      var G__16881 = cljs.core.next(seq__16835_16874__$1);
                      var G__16882 = null;
                      var G__16883 = 0;
                      var G__16884 = 0;
                      seq__16835_16864 = G__16881;
                      chunk__16836_16865 = G__16882;
                      count__16837_16866 = G__16883;
                      i__16838_16867 = G__16884;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj16886 = {};
  return obj16886;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3817__auto__ = x;
    if (and__3817__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4473__auto__ = x == null ? null : x;
    return function() {
      var or__3829__auto__ = cljs.core._js__GT_clj[function() {
        var G__16890 = x__4473__auto__;
        return goog.typeOf(G__16890);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
  };
  var js__GT_clj__2 = function() {
    var G__16947__delegate = function(x, opts) {
      var map__16920 = opts;
      var map__16920__$1 = cljs.core.seq_QMARK_(map__16920) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__16920) : map__16920;
      var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16920__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
      var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
      var f = function(map__16920, map__16920__$1, keywordize_keys, keyfn) {
        return function thisfn(x__$1) {
          if (function() {
            var G__16936 = x__$1;
            if (G__16936) {
              var bit__4510__auto__ = null;
              if (cljs.core.truth_(function() {
                var or__3829__auto__ = bit__4510__auto__;
                if (cljs.core.truth_(or__3829__auto__)) {
                  return or__3829__auto__;
                } else {
                  return G__16936.cljs$core$IEncodeClojure$;
                }
              }())) {
                return true;
              } else {
                if (!G__16936.cljs$lang$protocol_mask$partition$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__16936);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__16936);
            }
          }()) {
            return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
          } else {
            if (cljs.core.seq_QMARK_(x__$1)) {
              return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(thisfn, x__$1));
            } else {
              if (cljs.core.coll_QMARK_(x__$1)) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(thisfn, x__$1));
              } else {
                if (x__$1 instanceof Array) {
                  return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(thisfn, x__$1));
                } else {
                  if (cljs.core.type(x__$1) === Object) {
                    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                      var iter__4585__auto__ = function(map__16920, map__16920__$1, keywordize_keys, keyfn) {
                        return function iter__16937(s__16938) {
                          return new cljs.core.LazySeq(null, function(map__16920, map__16920__$1, keywordize_keys, keyfn) {
                            return function() {
                              var s__16938__$1 = s__16938;
                              while (true) {
                                var temp__4126__auto__ = cljs.core.seq(s__16938__$1);
                                if (temp__4126__auto__) {
                                  var s__16938__$2 = temp__4126__auto__;
                                  if (cljs.core.chunked_seq_QMARK_(s__16938__$2)) {
                                    var c__4583__auto__ = cljs.core.chunk_first(s__16938__$2);
                                    var size__4584__auto__ = cljs.core.count(c__4583__auto__);
                                    var b__16940 = cljs.core.chunk_buffer(size__4584__auto__);
                                    if (function() {
                                      var i__16939 = 0;
                                      while (true) {
                                        if (i__16939 < size__4584__auto__) {
                                          var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4583__auto__, i__16939);
                                          cljs.core.chunk_append(b__16940, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                            var G__16945 = k;
                                            return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__16945) : keyfn.call(null, G__16945);
                                          }(), thisfn(x__$1[k])], null));
                                          var G__16948 = i__16939 + 1;
                                          i__16939 = G__16948;
                                          continue;
                                        } else {
                                          return true;
                                        }
                                        break;
                                      }
                                    }()) {
                                      return cljs.core.chunk_cons(cljs.core.chunk(b__16940), iter__16937(cljs.core.chunk_rest(s__16938__$2)));
                                    } else {
                                      return cljs.core.chunk_cons(cljs.core.chunk(b__16940), null);
                                    }
                                  } else {
                                    var k = cljs.core.first(s__16938__$2);
                                    return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                      var G__16946 = k;
                                      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__16946) : keyfn.call(null, G__16946);
                                    }(), thisfn(x__$1[k])], null), iter__16937(cljs.core.rest(s__16938__$2)));
                                  }
                                } else {
                                  return null;
                                }
                                break;
                              }
                            };
                          }(map__16920, map__16920__$1, keywordize_keys, keyfn), null, null);
                        };
                      }(map__16920, map__16920__$1, keywordize_keys, keyfn);
                      return iter__4585__auto__(cljs.core.js_keys(x__$1));
                    }());
                  } else {
                    return x__$1;
                  }
                }
              }
            }
          }
        };
      }(map__16920, map__16920__$1, keywordize_keys, keyfn);
      return f(x);
    };
    var G__16947 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        var G__16949__i = 0, G__16949__a = new Array(arguments.length - 1);
        while (G__16949__i < G__16949__a.length) {
          G__16949__a[G__16949__i] = arguments[G__16949__i + 1];
          ++G__16949__i;
        }
        opts = new cljs.core.IndexedSeq(G__16949__a, 0);
      }
      return G__16947__delegate.call(this, x, opts);
    };
    G__16947.cljs$lang$maxFixedArity = 1;
    G__16947.cljs$lang$applyTo = function(arglist__16950) {
      var x = cljs.core.first(arglist__16950);
      var opts = cljs.core.rest(arglist__16950);
      return G__16947__delegate(x, opts);
    };
    G__16947.cljs$core$IFn$_invoke$arity$variadic = G__16947__delegate;
    return G__16947;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        var G__16951 = null;
        if (arguments.length > 1) {
          var G__16952__i = 0, G__16952__a = new Array(arguments.length - 1);
          while (G__16952__i < G__16952__a.length) {
            G__16952__a[G__16952__i] = arguments[G__16952__i + 1];
            ++G__16952__i;
          }
          G__16951 = new cljs.core.IndexedSeq(G__16952__a, 0);
        }
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, G__16951);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = function() {
    var G__16955 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__16955) : cljs.core.atom.call(null, G__16955);
  }();
  return function(mem) {
    return function() {
      var G__16957__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(function() {
          var G__16956 = mem;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16956) : cljs.core.deref.call(null, G__16956);
        }(), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__16957 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__16958__i = 0, G__16958__a = new Array(arguments.length - 0);
          while (G__16958__i < G__16958__a.length) {
            G__16958__a[G__16958__i] = arguments[G__16958__i + 0];
            ++G__16958__i;
          }
          args = new cljs.core.IndexedSeq(G__16958__a, 0);
        }
        return G__16957__delegate.call(this, args);
      };
      G__16957.cljs$lang$maxFixedArity = 0;
      G__16957.cljs$lang$applyTo = function(arglist__16959) {
        var args = cljs.core.seq(arglist__16959);
        return G__16957__delegate(args);
      };
      G__16957.cljs$core$IFn$_invoke$arity$variadic = G__16957__delegate;
      return G__16957;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }();
      if (cljs.core.fn_QMARK_(ret)) {
        var G__16961 = ret;
        f = G__16961;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__16962__delegate = function(f, args) {
      return trampoline.cljs$core$IFn$_invoke$arity$1(function() {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
      });
    };
    var G__16962 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        var G__16963__i = 0, G__16963__a = new Array(arguments.length - 1);
        while (G__16963__i < G__16963__a.length) {
          G__16963__a[G__16963__i] = arguments[G__16963__i + 1];
          ++G__16963__i;
        }
        args = new cljs.core.IndexedSeq(G__16963__a, 0);
      }
      return G__16962__delegate.call(this, f, args);
    };
    G__16962.cljs$lang$maxFixedArity = 1;
    G__16962.cljs$lang$applyTo = function(arglist__16964) {
      var f = cljs.core.first(arglist__16964);
      var args = cljs.core.rest(arglist__16964);
      return G__16962__delegate(f, args);
    };
    G__16962.cljs$core$IFn$_invoke$arity$variadic = G__16962__delegate;
    return G__16962;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        var G__16965 = null;
        if (arguments.length > 1) {
          var G__16966__i = 0, G__16966__a = new Array(arguments.length - 1);
          while (G__16966__i < G__16966__a.length) {
            G__16966__a[G__16966__i] = arguments[G__16966__i + 1];
            ++G__16966__i;
          }
          G__16965 = new cljs.core.IndexedSeq(G__16966__a, 0);
        }
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, G__16965);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.cljs$core$IFn$_invoke$arity$1(1);
  };
  var rand__1 = function(n) {
    return function() {
      return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
    }() * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  var G__16969 = function() {
    return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
  }() * n;
  return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__16969) : Math.floor.call(null, G__16969);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = function() {
      var G__16971 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16971) : f.call(null, G__16971);
    }();
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__16973 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__16973) : cljs.core.atom.call(null, G__16973);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      var G__16974__i = 0, G__16974__a = new Array(arguments.length - 1);
      while (G__16974__i < G__16974__a.length) {
        G__16974__a[G__16974__i] = arguments[G__16974__i + 1];
        ++G__16974__i;
      }
      args = new cljs.core.IndexedSeq(G__16974__a, 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__16975) {
    var f = cljs.core.first(arglist__16975);
    var args = cljs.core.rest(arglist__16975);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__17040 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17040) : cljs.core.deref.call(null, G__17040);
    }(), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3829__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
    if (or__3829__auto__) {
      return or__3829__auto__;
    } else {
      var or__3829__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3829__auto____$1) {
        return or__3829__auto____$1;
      } else {
        var and__3817__auto__ = cljs.core.vector_QMARK_(parent);
        if (and__3817__auto__) {
          var and__3817__auto____$1 = cljs.core.vector_QMARK_(child);
          if (and__3817__auto____$1) {
            var and__3817__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
            if (and__3817__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count(parent)) {
                  return ret;
                } else {
                  var G__17065 = isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, function() {
                    var G__17063 = i;
                    return child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(G__17063) : child.call(null, G__17063);
                  }(), function() {
                    var G__17064 = i;
                    return parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(G__17064) : parent.call(null, G__17064);
                  }());
                  var G__17066 = i + 1;
                  ret = G__17065;
                  i = G__17066;
                  continue;
                }
                break;
              }
            } else {
              return and__3817__auto____$2;
            }
          } else {
            return and__3817__auto____$1;
          }
        } else {
          return and__3817__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.cljs$core$IFn$_invoke$arity$2(function() {
      var G__17070 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17070) : cljs.core.deref.call(null, G__17070);
    }(), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.cljs$core$IFn$_invoke$arity$2(function() {
      var G__17074 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17074) : cljs.core.deref.call(null, G__17074);
    }(), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.cljs$core$IFn$_invoke$arity$2(function() {
      var G__17078 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17078) : cljs.core.deref.call(null, G__17078);
    }(), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace(parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(derive, cljs.core.array_seq([tag, parent], 0));
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, function() {
              var G__17087 = target;
              return targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(G__17087) : targets.call(null, G__17087);
            }())));
          };
        }(tp, td, ta), m, cljs.core.cons(source, function() {
          var G__17088 = source;
          return sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(G__17088) : sources.call(null, G__17088);
        }()));
      };
    }(tp, td, ta);
    var or__3829__auto__ = cljs.core.contains_QMARK_(function() {
      var G__17092 = tag;
      return tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(G__17092) : tp.call(null, G__17092);
    }(), parent) ? null : function() {
      if (cljs.core.contains_QMARK_(function() {
        var G__17093 = tag;
        return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__17093) : ta.call(null, G__17093);
      }(), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_(function() {
        var G__17094 = parent;
        return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__17094) : ta.call(null, G__17094);
      }(), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
      "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3829__auto__)) {
      return or__3829__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(underive, cljs.core.array_seq([tag, parent], 0));
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(function() {
      var G__17101 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__17101) : parentMap.call(null, G__17101);
    }()) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(function() {
      var G__17102 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__17102) : parentMap.call(null, G__17102);
    }(), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
    var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
      return function(p1__17095_SHARP_) {
        return cljs.core.cons(cljs.core.first(p1__17095_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__17095_SHARP_), cljs.core.second(p1__17095_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
    if (cljs.core.contains_QMARK_(function() {
      var G__17103 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__17103) : parentMap.call(null, G__17103);
    }(), parent)) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__17096_SHARP_, p2__17097_SHARP_) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__17096_SHARP_, p2__17097_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    var G__17106 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17106) : cljs.core.deref.call(null, G__17106);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    var G__17107 = hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17107) : cljs.core.deref.call(null, G__17107);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = function() {
    var G__17123 = prefer_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17123) : cljs.core.deref.call(null, G__17123);
  }().call(null, x);
  var or__3829__auto__ = cljs.core.truth_(function() {
    var and__3817__auto__ = xprefs;
    if (cljs.core.truth_(and__3817__auto__)) {
      var G__17125 = y;
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(G__17125) : xprefs.call(null, G__17125);
    } else {
      return and__3817__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3829__auto__)) {
    return or__3829__auto__;
  } else {
    var or__3829__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__17126 = cljs.core.rest(ps);
          ps = G__17126;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3829__auto____$1)) {
      return or__3829__auto____$1;
    } else {
      var or__3829__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__17127 = cljs.core.rest(ps);
            ps = G__17127;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3829__auto____$2)) {
        return or__3829__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3829__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__3829__auto__)) {
    return or__3829__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__17141) {
    var vec__17142 = p__17141;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17142, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17142, 1, null);
    var e = vec__17142;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__17143 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17143) : cljs.core.deref.call(null, G__17143);
    }(), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3829__auto__ = be == null;
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, function() {
    var G__17144 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17144) : cljs.core.deref.call(null, G__17144);
  }());
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
      var G__17145 = cached_hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17145) : cljs.core.deref.call(null, G__17145);
    }(), function() {
      var G__17146 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17146) : cljs.core.deref.call(null, G__17146);
    }())) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj17148 = {};
  return obj17148;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3817__auto__ = mf;
    if (and__3817__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4473__auto__ = mf == null ? null : mf;
    return function() {
      var or__3829__auto__ = cljs.core._reset[function() {
        var G__17152 = x__4473__auto__;
        return goog.typeOf(G__17152);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._reset["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3817__auto__ = mf;
    if (and__3817__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4473__auto__ = mf == null ? null : mf;
    return function() {
      var or__3829__auto__ = cljs.core._add_method[function() {
        var G__17156 = x__4473__auto__;
        return goog.typeOf(G__17156);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._add_method["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3817__auto__ = mf;
    if (and__3817__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4473__auto__ = mf == null ? null : mf;
    return function() {
      var or__3829__auto__ = cljs.core._remove_method[function() {
        var G__17160 = x__4473__auto__;
        return goog.typeOf(G__17160);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._remove_method["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3817__auto__ = mf;
    if (and__3817__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4473__auto__ = mf == null ? null : mf;
    return function() {
      var or__3829__auto__ = cljs.core._prefer_method[function() {
        var G__17164 = x__4473__auto__;
        return goog.typeOf(G__17164);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3817__auto__ = mf;
    if (and__3817__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4473__auto__ = mf == null ? null : mf;
    return function() {
      var or__3829__auto__ = cljs.core._get_method[function() {
        var G__17168 = x__4473__auto__;
        return goog.typeOf(G__17168);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._get_method["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3817__auto__ = mf;
    if (and__3817__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4473__auto__ = mf == null ? null : mf;
    return function() {
      var or__3829__auto__ = cljs.core._methods[function() {
        var G__17172 = x__4473__auto__;
        return goog.typeOf(G__17172);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._methods["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3817__auto__ = mf;
    if (and__3817__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4473__auto__ = mf == null ? null : mf;
    return function() {
      var or__3829__auto__ = cljs.core._prefers[function() {
        var G__17176 = x__4473__auto__;
        return goog.typeOf(G__17176);
      }()];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core._prefers["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__17178 = this$__$1;
  return goog.getUid(G__17178);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
    var G__17179 = self__.cached_hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17179) : cljs.core.deref.call(null, G__17179);
  }(), function() {
    var G__17180 = self__.hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17180) : cljs.core.deref.call(null, G__17180);
  }())) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = function() {
    var G__17181 = self__.method_cache;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17181) : cljs.core.deref.call(null, G__17181);
  }().call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return function() {
        var G__17182 = self__.method_table;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17182) : cljs.core.deref.call(null, G__17182);
      }().call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__17183 = self__.method_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17183) : cljs.core.deref.call(null, G__17183);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__17184 = self__.prefer_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17184) : cljs.core.deref.call(null, G__17184);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__18025 = null;
  var G__18025__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__18025__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__17185 = a;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__17185) : self__.dispatch_fn.call(null, G__17185);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__17186 = a;
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__17186) : target_fn.call(null, G__17186);
  };
  var G__18025__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__17187 = a;
      var G__17188 = b;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__17187, G__17188) : self__.dispatch_fn.call(null, G__17187, G__17188);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__17189 = a;
    var G__17190 = b;
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__17189, G__17190) : target_fn.call(null, G__17189, G__17190);
  };
  var G__18025__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__17191 = a;
      var G__17192 = b;
      var G__17193 = c;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__17191, G__17192, G__17193) : self__.dispatch_fn.call(null, G__17191, G__17192, G__17193);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__17194 = a;
    var G__17195 = b;
    var G__17196 = c;
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__17194, G__17195, G__17196) : target_fn.call(null, G__17194, G__17195, G__17196);
  };
  var G__18025__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__17197 = a;
      var G__17198 = b;
      var G__17199 = c;
      var G__17200 = d;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__17197, G__17198, G__17199, G__17200) : self__.dispatch_fn.call(null, G__17197, G__17198, G__17199, G__17200);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__17201 = a;
    var G__17202 = b;
    var G__17203 = c;
    var G__17204 = d;
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__17201, G__17202, G__17203, G__17204) : target_fn.call(null, G__17201, G__17202, G__17203, G__17204);
  };
  var G__18025__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__17205 = a;
      var G__17206 = b;
      var G__17207 = c;
      var G__17208 = d;
      var G__17209 = e;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__17205, G__17206, G__17207, G__17208, G__17209) : self__.dispatch_fn.call(null, G__17205, G__17206, G__17207, G__17208, G__17209);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__17210 = a;
    var G__17211 = b;
    var G__17212 = c;
    var G__17213 = d;
    var G__17214 = e;
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__17210, G__17211, G__17212, G__17213, G__17214) : target_fn.call(null, G__17210, G__17211, G__17212, G__17213, G__17214);
  };
  var G__18025__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__17215 = a;
      var G__17216 = b;
      var G__17217 = c;
      var G__17218 = d;
      var G__17219 = e;
      var G__17220 = f;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__17215, G__17216, G__17217, G__17218, G__17219, G__17220) : self__.dispatch_fn.call(null, G__17215, G__17216, G__17217, G__17218, G__17219, G__17220);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__17221 = a;
    var G__17222 = b;
    var G__17223 = c;
    var G__17224 = d;
    var G__17225 = e;
    var G__17226 = f;
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__17221, G__17222, G__17223, G__17224, G__17225, G__17226) : target_fn.call(null, G__17221, G__17222, G__17223, G__17224, G__17225, G__17226);
  };
  var G__18025__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__17227 = a;
      var G__17228 = b;
      var G__17229 = c;
      var G__17230 = d;
      var G__17231 = e;
      var G__17232 = f;
      var G__17233 = g;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__17227, G__17228, G__17229, G__17230, G__17231, G__17232, G__17233) : self__.dispatch_fn.call(null, G__17227, G__17228, G__17229, G__17230, G__17231, G__17232, G__17233);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__17234 = a;
    var G__17235 = b;
    var G__17236 = c;
    var G__17237 = d;
    var G__17238 = e;
    var G__17239 = f;
    var G__17240 = g;
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__17234, G__17235, G__17236, G__17237, G__17238, G__17239, G__17240) : target_fn.call(null, G__17234, G__17235, G__17236, G__17237, G__17238, G__17239, G__17240);
  };
  var G__18025__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__17241 = a;
      var G__17242 = b;
      var G__17243 = c;
      var G__17244 = d;
      var G__17245 = e;
      var G__17246 = f;
      var G__17247 = g;
      var G__17248 = h;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__17241, G__17242, G__17243, G__17244, G__17245, G__17246, G__17247, G__17248) : self__.dispatch_fn.call(null, G__17241, G__17242, G__17243, G__17244, G__17245, G__17246, G__17247, G__17248);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__17249 = a;
    var G__17250 = b;
    var G__17251 = c;
    var G__17252 = d;
    var G__17253 = e;
    var G__17254 = f;
    var G__17255 = g;
    var G__17256 = h;
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__17249, G__17250, G__17251, G__17252, G__17253, G__17254, G__17255, G__17256) : target_fn.call(null, G__17249, G__17250, G__17251, G__17252, G__17253, G__17254, G__17255, G__17256);
  };
  var G__18025__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__17257 = a;
      var G__17258 = b;
      var G__17259 = c;
      var G__17260 = d;
      var G__17261 = e;
      var G__17262 = f;
      var G__17263 = g;
      var G__17264 = h;
      var G__17265 = i;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__17257, G__17258, G__17259, G__17260, G__17261, G__17262, G__17263, G__17264, G__17265) : self__.dispatch_fn.call(null, G__17257, G__17258, G__17259, G__17260, G__17261, G__17262, G__17263, G__17264, G__17265);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__17266 = a;
    var G__17267 = b;
    var G__17268 = c;
    var G__17269 = d;
    var G__17270 = e;
    var G__17271 = f;
    var G__17272 = g;
    var G__17273 = h;
    var G__17274 = i;
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__17266, G__17267, G__17268, G__17269, G__17270, G__17271, G__17272, G__17273, G__17274) : target_fn.call(null, G__17266, G__17267, G__17268, G__17269, G__17270, G__17271, G__17272, G__17273, G__17274);
  };
  var G__18025__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__17275 = a;
      var G__17276 = b;
      var G__17277 = c;
      var G__17278 = d;
      var G__17279 = e;
      var G__17280 = f;
      var G__17281 = g;
      var G__17282 = h;
      var G__17283 = i;
      var G__17284 = j;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__17275, G__17276, G__17277, G__17278, G__17279, G__17280, G__17281, G__17282, G__17283, G__17284) : self__.dispatch_fn.call(null, G__17275, G__17276, G__17277, G__17278, G__17279, G__17280, G__17281, G__17282, G__17283, G__17284);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__17285 = a;
    var G__17286 = b;
    var G__17287 = c;
    var G__17288 = d;
    var G__17289 = e;
    var G__17290 = f;
    var G__17291 = g;
    var G__17292 = h;
    var G__17293 = i;
    var G__17294 = j;
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__17285, G__17286, G__17287, G__17288, G__17289, G__17290, G__17291, G__17292, G__17293, G__17294) : target_fn.call(null, G__17285, G__17286, G__17287, G__17288, G__17289, G__17290, G__17291, G__17292, G__17293, G__17294);
  };
  var G__18025__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__17295 = a;
      var G__17296 = b;
      var G__17297 = c;
      var G__17298 = d;
      var G__17299 = e;
      var G__17300 = f;
      var G__17301 = g;
      var G__17302 = h;
      var G__17303 = i;
      var G__17304 = j;
      var G__17305 = k;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__17295, G__17296, G__17297, G__17298, G__17299, G__17300, G__17301, G__17302, G__17303, G__17304, G__17305) : self__.dispatch_fn.call(null, G__17295, G__17296, G__17297, G__17298, G__17299, G__17300, G__17301, G__17302, G__17303, G__17304, G__17305);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__17306 = a;
    var G__17307 = b;
    var G__17308 = c;
    var G__17309 = d;
    var G__17310 = e;
    var G__17311 = f;
    var G__17312 = g;
    var G__17313 = h;
    var G__17314 = i;
    var G__17315 = j;
    var G__17316 = k;
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__17306, G__17307, G__17308, G__17309, G__17310, G__17311, G__17312, G__17313, G__17314, G__17315, G__17316) : target_fn.call(null, G__17306, G__17307, G__17308, G__17309, G__17310, G__17311, G__17312, G__17313, G__17314, G__17315, G__17316);
  };
  var G__18025__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__17317 = a;
      var G__17318 = b;
      var G__17319 = c;
      var G__17320 = d;
      var G__17321 = e;
      var G__17322 = f;
      var G__17323 = g;
      var G__17324 = h;
      var G__17325 = i;
      var G__17326 = j;
      var G__17327 = k;
      var G__17328 = l;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__17317, G__17318, G__17319, G__17320, G__17321, G__17322, G__17323, G__17324, G__17325, G__17326, G__17327, G__17328) : self__.dispatch_fn.call(null, G__17317, G__17318, G__17319, G__17320, G__17321, G__17322, G__17323, G__17324, G__17325, G__17326, G__17327, G__17328);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__17329 = a;
    var G__17330 = b;
    var G__17331 = c;
    var G__17332 = d;
    var G__17333 = e;
    var G__17334 = f;
    var G__17335 = g;
    var G__17336 = h;
    var G__17337 = i;
    var G__17338 = j;
    var G__17339 = k;
    var G__17340 = l;
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__17329, G__17330, G__17331, G__17332, G__17333, G__17334, G__17335, G__17336, G__17337, G__17338, G__17339, G__17340) : target_fn.call(null, G__17329, G__17330, G__17331, G__17332, G__17333, G__17334, G__17335, G__17336, G__17337, G__17338, G__17339, G__17340);
  };
  var G__18025__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__17341 = a;
      var G__17342 = b;
      var G__17343 = c;
      var G__17344 = d;
      var G__17345 = e;
      var G__17346 = f;
      var G__17347 = g;
      var G__17348 = h;
      var G__17349 = i;
      var G__17350 = j;
      var G__17351 = k;
      var G__17352 = l;
      var G__17353 = m;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__17341, G__17342, G__17343, G__17344, G__17345, G__17346, G__17347, G__17348, G__17349, G__17350, G__17351, G__17352, G__17353) : self__.dispatch_fn.call(null, G__17341, G__17342, G__17343, G__17344, G__17345, G__17346, G__17347, G__17348, G__17349, G__17350, G__17351, G__17352, G__17353);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__17354 = a;
    var G__17355 = b;
    var G__17356 = c;
    var G__17357 = d;
    var G__17358 = e;
    var G__17359 = f;
    var G__17360 = g;
    var G__17361 = h;
    var G__17362 = i;
    var G__17363 = j;
    var G__17364 = k;
    var G__17365 = l;
    var G__17366 = m;
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__17354, G__17355, G__17356, G__17357, G__17358, G__17359, G__17360, G__17361, G__17362, G__17363, G__17364, G__17365, G__17366) : target_fn.call(null, G__17354, G__17355, G__17356, G__17357, G__17358, G__17359, G__17360, G__17361, G__17362, G__17363, G__17364, G__17365, G__17366);
  };
  var G__18025__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__17367 = a;
      var G__17368 = b;
      var G__17369 = c;
      var G__17370 = d;
      var G__17371 = e;
      var G__17372 = f;
      var G__17373 = g;
      var G__17374 = h;
      var G__17375 = i;
      var G__17376 = j;
      var G__17377 = k;
      var G__17378 = l;
      var G__17379 = m;
      var G__17380 = n;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__17367, G__17368, G__17369, G__17370, G__17371, G__17372, G__17373, G__17374, G__17375, G__17376, G__17377, G__17378, G__17379, G__17380) : self__.dispatch_fn.call(null, G__17367, G__17368, G__17369, G__17370, G__17371, G__17372, G__17373, G__17374, G__17375, G__17376, G__17377, G__17378, G__17379, G__17380);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__17381 = a;
    var G__17382 = b;
    var G__17383 = c;
    var G__17384 = d;
    var G__17385 = e;
    var G__17386 = f;
    var G__17387 = g;
    var G__17388 = h;
    var G__17389 = i;
    var G__17390 = j;
    var G__17391 = k;
    var G__17392 = l;
    var G__17393 = m;
    var G__17394 = n;
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__17381, G__17382, G__17383, G__17384, G__17385, G__17386, G__17387, G__17388, G__17389, G__17390, G__17391, G__17392, G__17393, G__17394) : target_fn.call(null, G__17381, G__17382, G__17383, G__17384, G__17385, G__17386, G__17387, G__17388, G__17389, G__17390, G__17391, G__17392, G__17393, G__17394);
  };
  var G__18025__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__17395 = a;
      var G__17396 = b;
      var G__17397 = c;
      var G__17398 = d;
      var G__17399 = e;
      var G__17400 = f;
      var G__17401 = g;
      var G__17402 = h;
      var G__17403 = i;
      var G__17404 = j;
      var G__17405 = k;
      var G__17406 = l;
      var G__17407 = m;
      var G__17408 = n;
      var G__17409 = o;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__17395, G__17396, G__17397, G__17398, G__17399, G__17400, G__17401, G__17402, G__17403, G__17404, G__17405, G__17406, G__17407, G__17408, G__17409) : self__.dispatch_fn.call(null, G__17395, G__17396, G__17397, G__17398, G__17399, G__17400, G__17401, G__17402, G__17403, G__17404, G__17405, G__17406, G__17407, G__17408, G__17409);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__17410 = a;
    var G__17411 = b;
    var G__17412 = c;
    var G__17413 = d;
    var G__17414 = e;
    var G__17415 = f;
    var G__17416 = g;
    var G__17417 = h;
    var G__17418 = i;
    var G__17419 = j;
    var G__17420 = k;
    var G__17421 = l;
    var G__17422 = m;
    var G__17423 = n;
    var G__17424 = o;
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__17410, G__17411, G__17412, G__17413, G__17414, G__17415, G__17416, G__17417, G__17418, G__17419, G__17420, G__17421, G__17422, G__17423, G__17424) : target_fn.call(null, G__17410, G__17411, G__17412, G__17413, G__17414, G__17415, G__17416, G__17417, G__17418, G__17419, G__17420, G__17421, G__17422, G__17423, G__17424);
  };
  var G__18025__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__17425 = a;
      var G__17426 = b;
      var G__17427 = c;
      var G__17428 = d;
      var G__17429 = e;
      var G__17430 = f;
      var G__17431 = g;
      var G__17432 = h;
      var G__17433 = i;
      var G__17434 = j;
      var G__17435 = k;
      var G__17436 = l;
      var G__17437 = m;
      var G__17438 = n;
      var G__17439 = o;
      var G__17440 = p;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__17425, G__17426, G__17427, G__17428, G__17429, G__17430, G__17431, G__17432, G__17433, G__17434, G__17435, G__17436, G__17437, G__17438, G__17439, G__17440) : self__.dispatch_fn.call(null, G__17425, G__17426, G__17427, G__17428, G__17429, G__17430, G__17431, G__17432, G__17433, G__17434, G__17435, G__17436, G__17437, G__17438, G__17439, G__17440);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__17441 = a;
    var G__17442 = b;
    var G__17443 = c;
    var G__17444 = d;
    var G__17445 = e;
    var G__17446 = f;
    var G__17447 = g;
    var G__17448 = h;
    var G__17449 = i;
    var G__17450 = j;
    var G__17451 = k;
    var G__17452 = l;
    var G__17453 = m;
    var G__17454 = n;
    var G__17455 = o;
    var G__17456 = p;
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__17441, G__17442, G__17443, G__17444, G__17445, G__17446, G__17447, G__17448, G__17449, G__17450, G__17451, G__17452, G__17453, G__17454, G__17455, G__17456) : target_fn.call(null, G__17441, G__17442, G__17443, G__17444, G__17445, G__17446, G__17447, G__17448, G__17449, G__17450, G__17451, G__17452, G__17453, G__17454, G__17455, G__17456);
  };
  var G__18025__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__17457 = a;
      var G__17458 = b;
      var G__17459 = c;
      var G__17460 = d;
      var G__17461 = e;
      var G__17462 = f;
      var G__17463 = g;
      var G__17464 = h;
      var G__17465 = i;
      var G__17466 = j;
      var G__17467 = k;
      var G__17468 = l;
      var G__17469 = m;
      var G__17470 = n;
      var G__17471 = o;
      var G__17472 = p;
      var G__17473 = q;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__17457, G__17458, G__17459, G__17460, G__17461, G__17462, G__17463, G__17464, G__17465, G__17466, G__17467, G__17468, G__17469, G__17470, G__17471, G__17472, G__17473) : self__.dispatch_fn.call(null, G__17457, G__17458, G__17459, G__17460, G__17461, G__17462, G__17463, G__17464, G__17465, G__17466, G__17467, G__17468, G__17469, G__17470, G__17471, G__17472, G__17473);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__17474 = a;
    var G__17475 = b;
    var G__17476 = c;
    var G__17477 = d;
    var G__17478 = e;
    var G__17479 = f;
    var G__17480 = g;
    var G__17481 = h;
    var G__17482 = i;
    var G__17483 = j;
    var G__17484 = k;
    var G__17485 = l;
    var G__17486 = m;
    var G__17487 = n;
    var G__17488 = o;
    var G__17489 = p;
    var G__17490 = q;
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__17474, G__17475, G__17476, G__17477, G__17478, G__17479, G__17480, G__17481, G__17482, G__17483, G__17484, G__17485, G__17486, G__17487, G__17488, G__17489, G__17490) : target_fn.call(null, G__17474, G__17475, G__17476, G__17477, G__17478, G__17479, G__17480, G__17481, G__17482, G__17483, G__17484, G__17485, G__17486, G__17487, G__17488, G__17489, G__17490);
  };
  var G__18025__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__17491 = a;
      var G__17492 = b;
      var G__17493 = c;
      var G__17494 = d;
      var G__17495 = e;
      var G__17496 = f;
      var G__17497 = g;
      var G__17498 = h;
      var G__17499 = i;
      var G__17500 = j;
      var G__17501 = k;
      var G__17502 = l;
      var G__17503 = m;
      var G__17504 = n;
      var G__17505 = o;
      var G__17506 = p;
      var G__17507 = q;
      var G__17508 = r;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__17491, G__17492, G__17493, G__17494, G__17495, G__17496, G__17497, G__17498, G__17499, G__17500, G__17501, G__17502, G__17503, G__17504, G__17505, G__17506, G__17507, G__17508) : self__.dispatch_fn.call(null, G__17491, G__17492, G__17493, G__17494, G__17495, G__17496, G__17497, G__17498, G__17499, G__17500, G__17501, G__17502, G__17503, G__17504, G__17505, G__17506, G__17507, G__17508);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__17509 = a;
    var G__17510 = b;
    var G__17511 = c;
    var G__17512 = d;
    var G__17513 = e;
    var G__17514 = f;
    var G__17515 = g;
    var G__17516 = h;
    var G__17517 = i;
    var G__17518 = j;
    var G__17519 = k;
    var G__17520 = l;
    var G__17521 = m;
    var G__17522 = n;
    var G__17523 = o;
    var G__17524 = p;
    var G__17525 = q;
    var G__17526 = r;
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__17509, G__17510, G__17511, G__17512, G__17513, G__17514, G__17515, G__17516, G__17517, G__17518, G__17519, G__17520, G__17521, G__17522, G__17523, G__17524, G__17525, G__17526) : target_fn.call(null, G__17509, G__17510, G__17511, G__17512, G__17513, G__17514, G__17515, G__17516, G__17517, G__17518, G__17519, G__17520, G__17521, G__17522, G__17523, G__17524, G__17525, G__17526);
  };
  var G__18025__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__17527 = a;
      var G__17528 = b;
      var G__17529 = c;
      var G__17530 = d;
      var G__17531 = e;
      var G__17532 = f;
      var G__17533 = g;
      var G__17534 = h;
      var G__17535 = i;
      var G__17536 = j;
      var G__17537 = k;
      var G__17538 = l;
      var G__17539 = m;
      var G__17540 = n;
      var G__17541 = o;
      var G__17542 = p;
      var G__17543 = q;
      var G__17544 = r;
      var G__17545 = s;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__17527, G__17528, G__17529, G__17530, G__17531, G__17532, G__17533, G__17534, G__17535, G__17536, G__17537, G__17538, G__17539, G__17540, G__17541, G__17542, G__17543, G__17544, G__17545) : self__.dispatch_fn.call(null, G__17527, G__17528, G__17529, G__17530, G__17531, G__17532, G__17533, G__17534, G__17535, G__17536, G__17537, G__17538, G__17539, G__17540, G__17541, G__17542, G__17543, 
      G__17544, G__17545);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__17546 = a;
    var G__17547 = b;
    var G__17548 = c;
    var G__17549 = d;
    var G__17550 = e;
    var G__17551 = f;
    var G__17552 = g;
    var G__17553 = h;
    var G__17554 = i;
    var G__17555 = j;
    var G__17556 = k;
    var G__17557 = l;
    var G__17558 = m;
    var G__17559 = n;
    var G__17560 = o;
    var G__17561 = p;
    var G__17562 = q;
    var G__17563 = r;
    var G__17564 = s;
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__17546, G__17547, G__17548, G__17549, G__17550, G__17551, G__17552, G__17553, G__17554, G__17555, G__17556, G__17557, G__17558, G__17559, G__17560, G__17561, G__17562, G__17563, G__17564) : target_fn.call(null, G__17546, G__17547, G__17548, G__17549, G__17550, G__17551, G__17552, G__17553, G__17554, G__17555, G__17556, G__17557, G__17558, G__17559, G__17560, G__17561, G__17562, G__17563, G__17564);
  };
  var G__18025__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__17565 = a;
      var G__17566 = b;
      var G__17567 = c;
      var G__17568 = d;
      var G__17569 = e;
      var G__17570 = f;
      var G__17571 = g;
      var G__17572 = h;
      var G__17573 = i;
      var G__17574 = j;
      var G__17575 = k;
      var G__17576 = l;
      var G__17577 = m;
      var G__17578 = n;
      var G__17579 = o;
      var G__17580 = p;
      var G__17581 = q;
      var G__17582 = r;
      var G__17583 = s;
      var G__17584 = t;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__17565, G__17566, G__17567, G__17568, G__17569, G__17570, G__17571, G__17572, G__17573, G__17574, G__17575, G__17576, G__17577, G__17578, G__17579, G__17580, G__17581, G__17582, G__17583, G__17584) : self__.dispatch_fn.call(null, G__17565, G__17566, G__17567, G__17568, G__17569, G__17570, G__17571, G__17572, G__17573, G__17574, G__17575, G__17576, G__17577, G__17578, G__17579, G__17580, 
      G__17581, G__17582, G__17583, G__17584);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__17585 = a;
    var G__17586 = b;
    var G__17587 = c;
    var G__17588 = d;
    var G__17589 = e;
    var G__17590 = f;
    var G__17591 = g;
    var G__17592 = h;
    var G__17593 = i;
    var G__17594 = j;
    var G__17595 = k;
    var G__17596 = l;
    var G__17597 = m;
    var G__17598 = n;
    var G__17599 = o;
    var G__17600 = p;
    var G__17601 = q;
    var G__17602 = r;
    var G__17603 = s;
    var G__17604 = t;
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__17585, G__17586, G__17587, G__17588, G__17589, G__17590, G__17591, G__17592, G__17593, G__17594, G__17595, G__17596, G__17597, G__17598, G__17599, G__17600, G__17601, G__17602, G__17603, G__17604) : target_fn.call(null, G__17585, G__17586, G__17587, G__17588, G__17589, G__17590, G__17591, G__17592, G__17593, G__17594, G__17595, G__17596, G__17597, G__17598, G__17599, G__17600, G__17601, G__17602, G__17603, 
    G__17604);
  };
  var G__18025__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__18025 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__18025__1.call(this, self__);
      case 2:
        return G__18025__2.call(this, self__, a);
      case 3:
        return G__18025__3.call(this, self__, a, b);
      case 4:
        return G__18025__4.call(this, self__, a, b, c);
      case 5:
        return G__18025__5.call(this, self__, a, b, c, d);
      case 6:
        return G__18025__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__18025__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__18025__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__18025__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__18025__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__18025__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__18025__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__18025__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__18025__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__18025__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__18025__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__18025__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__18025__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__18025__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__18025__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__18025__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__18025__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18025.cljs$core$IFn$_invoke$arity$1 = G__18025__1;
  G__18025.cljs$core$IFn$_invoke$arity$2 = G__18025__2;
  G__18025.cljs$core$IFn$_invoke$arity$3 = G__18025__3;
  G__18025.cljs$core$IFn$_invoke$arity$4 = G__18025__4;
  G__18025.cljs$core$IFn$_invoke$arity$5 = G__18025__5;
  G__18025.cljs$core$IFn$_invoke$arity$6 = G__18025__6;
  G__18025.cljs$core$IFn$_invoke$arity$7 = G__18025__7;
  G__18025.cljs$core$IFn$_invoke$arity$8 = G__18025__8;
  G__18025.cljs$core$IFn$_invoke$arity$9 = G__18025__9;
  G__18025.cljs$core$IFn$_invoke$arity$10 = G__18025__10;
  G__18025.cljs$core$IFn$_invoke$arity$11 = G__18025__11;
  G__18025.cljs$core$IFn$_invoke$arity$12 = G__18025__12;
  G__18025.cljs$core$IFn$_invoke$arity$13 = G__18025__13;
  G__18025.cljs$core$IFn$_invoke$arity$14 = G__18025__14;
  G__18025.cljs$core$IFn$_invoke$arity$15 = G__18025__15;
  G__18025.cljs$core$IFn$_invoke$arity$16 = G__18025__16;
  G__18025.cljs$core$IFn$_invoke$arity$17 = G__18025__17;
  G__18025.cljs$core$IFn$_invoke$arity$18 = G__18025__18;
  G__18025.cljs$core$IFn$_invoke$arity$19 = G__18025__19;
  G__18025.cljs$core$IFn$_invoke$arity$20 = G__18025__20;
  G__18025.cljs$core$IFn$_invoke$arity$21 = G__18025__21;
  G__18025.cljs$core$IFn$_invoke$arity$22 = G__18025__22;
  return G__18025;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args17177) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17177)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17605 = a;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__17605) : self__.dispatch_fn.call(null, G__17605);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__17606 = a;
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__17606) : target_fn.call(null, G__17606);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17607 = a;
    var G__17608 = b;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__17607, G__17608) : self__.dispatch_fn.call(null, G__17607, G__17608);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__17609 = a;
  var G__17610 = b;
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__17609, G__17610) : target_fn.call(null, G__17609, G__17610);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17611 = a;
    var G__17612 = b;
    var G__17613 = c;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__17611, G__17612, G__17613) : self__.dispatch_fn.call(null, G__17611, G__17612, G__17613);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__17614 = a;
  var G__17615 = b;
  var G__17616 = c;
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__17614, G__17615, G__17616) : target_fn.call(null, G__17614, G__17615, G__17616);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17617 = a;
    var G__17618 = b;
    var G__17619 = c;
    var G__17620 = d;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__17617, G__17618, G__17619, G__17620) : self__.dispatch_fn.call(null, G__17617, G__17618, G__17619, G__17620);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__17621 = a;
  var G__17622 = b;
  var G__17623 = c;
  var G__17624 = d;
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__17621, G__17622, G__17623, G__17624) : target_fn.call(null, G__17621, G__17622, G__17623, G__17624);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17625 = a;
    var G__17626 = b;
    var G__17627 = c;
    var G__17628 = d;
    var G__17629 = e;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__17625, G__17626, G__17627, G__17628, G__17629) : self__.dispatch_fn.call(null, G__17625, G__17626, G__17627, G__17628, G__17629);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__17630 = a;
  var G__17631 = b;
  var G__17632 = c;
  var G__17633 = d;
  var G__17634 = e;
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__17630, G__17631, G__17632, G__17633, G__17634) : target_fn.call(null, G__17630, G__17631, G__17632, G__17633, G__17634);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17635 = a;
    var G__17636 = b;
    var G__17637 = c;
    var G__17638 = d;
    var G__17639 = e;
    var G__17640 = f;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__17635, G__17636, G__17637, G__17638, G__17639, G__17640) : self__.dispatch_fn.call(null, G__17635, G__17636, G__17637, G__17638, G__17639, G__17640);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__17641 = a;
  var G__17642 = b;
  var G__17643 = c;
  var G__17644 = d;
  var G__17645 = e;
  var G__17646 = f;
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__17641, G__17642, G__17643, G__17644, G__17645, G__17646) : target_fn.call(null, G__17641, G__17642, G__17643, G__17644, G__17645, G__17646);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17647 = a;
    var G__17648 = b;
    var G__17649 = c;
    var G__17650 = d;
    var G__17651 = e;
    var G__17652 = f;
    var G__17653 = g;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__17647, G__17648, G__17649, G__17650, G__17651, G__17652, G__17653) : self__.dispatch_fn.call(null, G__17647, G__17648, G__17649, G__17650, G__17651, G__17652, G__17653);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__17654 = a;
  var G__17655 = b;
  var G__17656 = c;
  var G__17657 = d;
  var G__17658 = e;
  var G__17659 = f;
  var G__17660 = g;
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__17654, G__17655, G__17656, G__17657, G__17658, G__17659, G__17660) : target_fn.call(null, G__17654, G__17655, G__17656, G__17657, G__17658, G__17659, G__17660);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17661 = a;
    var G__17662 = b;
    var G__17663 = c;
    var G__17664 = d;
    var G__17665 = e;
    var G__17666 = f;
    var G__17667 = g;
    var G__17668 = h;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__17661, G__17662, G__17663, G__17664, G__17665, G__17666, G__17667, G__17668) : self__.dispatch_fn.call(null, G__17661, G__17662, G__17663, G__17664, G__17665, G__17666, G__17667, G__17668);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__17669 = a;
  var G__17670 = b;
  var G__17671 = c;
  var G__17672 = d;
  var G__17673 = e;
  var G__17674 = f;
  var G__17675 = g;
  var G__17676 = h;
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__17669, G__17670, G__17671, G__17672, G__17673, G__17674, G__17675, G__17676) : target_fn.call(null, G__17669, G__17670, G__17671, G__17672, G__17673, G__17674, G__17675, G__17676);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17677 = a;
    var G__17678 = b;
    var G__17679 = c;
    var G__17680 = d;
    var G__17681 = e;
    var G__17682 = f;
    var G__17683 = g;
    var G__17684 = h;
    var G__17685 = i;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__17677, G__17678, G__17679, G__17680, G__17681, G__17682, G__17683, G__17684, G__17685) : self__.dispatch_fn.call(null, G__17677, G__17678, G__17679, G__17680, G__17681, G__17682, G__17683, G__17684, G__17685);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__17686 = a;
  var G__17687 = b;
  var G__17688 = c;
  var G__17689 = d;
  var G__17690 = e;
  var G__17691 = f;
  var G__17692 = g;
  var G__17693 = h;
  var G__17694 = i;
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__17686, G__17687, G__17688, G__17689, G__17690, G__17691, G__17692, G__17693, G__17694) : target_fn.call(null, G__17686, G__17687, G__17688, G__17689, G__17690, G__17691, G__17692, G__17693, G__17694);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17695 = a;
    var G__17696 = b;
    var G__17697 = c;
    var G__17698 = d;
    var G__17699 = e;
    var G__17700 = f;
    var G__17701 = g;
    var G__17702 = h;
    var G__17703 = i;
    var G__17704 = j;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__17695, G__17696, G__17697, G__17698, G__17699, G__17700, G__17701, G__17702, G__17703, G__17704) : self__.dispatch_fn.call(null, G__17695, G__17696, G__17697, G__17698, G__17699, G__17700, G__17701, G__17702, G__17703, G__17704);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__17705 = a;
  var G__17706 = b;
  var G__17707 = c;
  var G__17708 = d;
  var G__17709 = e;
  var G__17710 = f;
  var G__17711 = g;
  var G__17712 = h;
  var G__17713 = i;
  var G__17714 = j;
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__17705, G__17706, G__17707, G__17708, G__17709, G__17710, G__17711, G__17712, G__17713, G__17714) : target_fn.call(null, G__17705, G__17706, G__17707, G__17708, G__17709, G__17710, G__17711, G__17712, G__17713, G__17714);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17715 = a;
    var G__17716 = b;
    var G__17717 = c;
    var G__17718 = d;
    var G__17719 = e;
    var G__17720 = f;
    var G__17721 = g;
    var G__17722 = h;
    var G__17723 = i;
    var G__17724 = j;
    var G__17725 = k;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__17715, G__17716, G__17717, G__17718, G__17719, G__17720, G__17721, G__17722, G__17723, G__17724, G__17725) : self__.dispatch_fn.call(null, G__17715, G__17716, G__17717, G__17718, G__17719, G__17720, G__17721, G__17722, G__17723, G__17724, G__17725);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__17726 = a;
  var G__17727 = b;
  var G__17728 = c;
  var G__17729 = d;
  var G__17730 = e;
  var G__17731 = f;
  var G__17732 = g;
  var G__17733 = h;
  var G__17734 = i;
  var G__17735 = j;
  var G__17736 = k;
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__17726, G__17727, G__17728, G__17729, G__17730, G__17731, G__17732, G__17733, G__17734, G__17735, G__17736) : target_fn.call(null, G__17726, G__17727, G__17728, G__17729, G__17730, G__17731, G__17732, G__17733, G__17734, G__17735, G__17736);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17737 = a;
    var G__17738 = b;
    var G__17739 = c;
    var G__17740 = d;
    var G__17741 = e;
    var G__17742 = f;
    var G__17743 = g;
    var G__17744 = h;
    var G__17745 = i;
    var G__17746 = j;
    var G__17747 = k;
    var G__17748 = l;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__17737, G__17738, G__17739, G__17740, G__17741, G__17742, G__17743, G__17744, G__17745, G__17746, G__17747, G__17748) : self__.dispatch_fn.call(null, G__17737, G__17738, G__17739, G__17740, G__17741, G__17742, G__17743, G__17744, G__17745, G__17746, G__17747, G__17748);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__17749 = a;
  var G__17750 = b;
  var G__17751 = c;
  var G__17752 = d;
  var G__17753 = e;
  var G__17754 = f;
  var G__17755 = g;
  var G__17756 = h;
  var G__17757 = i;
  var G__17758 = j;
  var G__17759 = k;
  var G__17760 = l;
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__17749, G__17750, G__17751, G__17752, G__17753, G__17754, G__17755, G__17756, G__17757, G__17758, G__17759, G__17760) : target_fn.call(null, G__17749, G__17750, G__17751, G__17752, G__17753, G__17754, G__17755, G__17756, G__17757, G__17758, G__17759, G__17760);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17761 = a;
    var G__17762 = b;
    var G__17763 = c;
    var G__17764 = d;
    var G__17765 = e;
    var G__17766 = f;
    var G__17767 = g;
    var G__17768 = h;
    var G__17769 = i;
    var G__17770 = j;
    var G__17771 = k;
    var G__17772 = l;
    var G__17773 = m;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__17761, G__17762, G__17763, G__17764, G__17765, G__17766, G__17767, G__17768, G__17769, G__17770, G__17771, G__17772, G__17773) : self__.dispatch_fn.call(null, G__17761, G__17762, G__17763, G__17764, G__17765, G__17766, G__17767, G__17768, G__17769, G__17770, G__17771, G__17772, G__17773);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__17774 = a;
  var G__17775 = b;
  var G__17776 = c;
  var G__17777 = d;
  var G__17778 = e;
  var G__17779 = f;
  var G__17780 = g;
  var G__17781 = h;
  var G__17782 = i;
  var G__17783 = j;
  var G__17784 = k;
  var G__17785 = l;
  var G__17786 = m;
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__17774, G__17775, G__17776, G__17777, G__17778, G__17779, G__17780, G__17781, G__17782, G__17783, G__17784, G__17785, G__17786) : target_fn.call(null, G__17774, G__17775, G__17776, G__17777, G__17778, G__17779, G__17780, G__17781, G__17782, G__17783, G__17784, G__17785, G__17786);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17787 = a;
    var G__17788 = b;
    var G__17789 = c;
    var G__17790 = d;
    var G__17791 = e;
    var G__17792 = f;
    var G__17793 = g;
    var G__17794 = h;
    var G__17795 = i;
    var G__17796 = j;
    var G__17797 = k;
    var G__17798 = l;
    var G__17799 = m;
    var G__17800 = n;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__17787, G__17788, G__17789, G__17790, G__17791, G__17792, G__17793, G__17794, G__17795, G__17796, G__17797, G__17798, G__17799, G__17800) : self__.dispatch_fn.call(null, G__17787, G__17788, G__17789, G__17790, G__17791, G__17792, G__17793, G__17794, G__17795, G__17796, G__17797, G__17798, G__17799, G__17800);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__17801 = a;
  var G__17802 = b;
  var G__17803 = c;
  var G__17804 = d;
  var G__17805 = e;
  var G__17806 = f;
  var G__17807 = g;
  var G__17808 = h;
  var G__17809 = i;
  var G__17810 = j;
  var G__17811 = k;
  var G__17812 = l;
  var G__17813 = m;
  var G__17814 = n;
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__17801, G__17802, G__17803, G__17804, G__17805, G__17806, G__17807, G__17808, G__17809, G__17810, G__17811, G__17812, G__17813, G__17814) : target_fn.call(null, G__17801, G__17802, G__17803, G__17804, G__17805, G__17806, G__17807, G__17808, G__17809, G__17810, G__17811, G__17812, G__17813, G__17814);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17815 = a;
    var G__17816 = b;
    var G__17817 = c;
    var G__17818 = d;
    var G__17819 = e;
    var G__17820 = f;
    var G__17821 = g;
    var G__17822 = h;
    var G__17823 = i;
    var G__17824 = j;
    var G__17825 = k;
    var G__17826 = l;
    var G__17827 = m;
    var G__17828 = n;
    var G__17829 = o;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__17815, G__17816, G__17817, G__17818, G__17819, G__17820, G__17821, G__17822, G__17823, G__17824, G__17825, G__17826, G__17827, G__17828, G__17829) : self__.dispatch_fn.call(null, G__17815, G__17816, G__17817, G__17818, G__17819, G__17820, G__17821, G__17822, G__17823, G__17824, G__17825, G__17826, G__17827, G__17828, G__17829);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__17830 = a;
  var G__17831 = b;
  var G__17832 = c;
  var G__17833 = d;
  var G__17834 = e;
  var G__17835 = f;
  var G__17836 = g;
  var G__17837 = h;
  var G__17838 = i;
  var G__17839 = j;
  var G__17840 = k;
  var G__17841 = l;
  var G__17842 = m;
  var G__17843 = n;
  var G__17844 = o;
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__17830, G__17831, G__17832, G__17833, G__17834, G__17835, G__17836, G__17837, G__17838, G__17839, G__17840, G__17841, G__17842, G__17843, G__17844) : target_fn.call(null, G__17830, G__17831, G__17832, G__17833, G__17834, G__17835, G__17836, G__17837, G__17838, G__17839, G__17840, G__17841, G__17842, G__17843, G__17844);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17845 = a;
    var G__17846 = b;
    var G__17847 = c;
    var G__17848 = d;
    var G__17849 = e;
    var G__17850 = f;
    var G__17851 = g;
    var G__17852 = h;
    var G__17853 = i;
    var G__17854 = j;
    var G__17855 = k;
    var G__17856 = l;
    var G__17857 = m;
    var G__17858 = n;
    var G__17859 = o;
    var G__17860 = p;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__17845, G__17846, G__17847, G__17848, G__17849, G__17850, G__17851, G__17852, G__17853, G__17854, G__17855, G__17856, G__17857, G__17858, G__17859, G__17860) : self__.dispatch_fn.call(null, G__17845, G__17846, G__17847, G__17848, G__17849, G__17850, G__17851, G__17852, G__17853, G__17854, G__17855, G__17856, G__17857, G__17858, G__17859, G__17860);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__17861 = a;
  var G__17862 = b;
  var G__17863 = c;
  var G__17864 = d;
  var G__17865 = e;
  var G__17866 = f;
  var G__17867 = g;
  var G__17868 = h;
  var G__17869 = i;
  var G__17870 = j;
  var G__17871 = k;
  var G__17872 = l;
  var G__17873 = m;
  var G__17874 = n;
  var G__17875 = o;
  var G__17876 = p;
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__17861, G__17862, G__17863, G__17864, G__17865, G__17866, G__17867, G__17868, G__17869, G__17870, G__17871, G__17872, G__17873, G__17874, G__17875, G__17876) : target_fn.call(null, G__17861, G__17862, G__17863, G__17864, G__17865, G__17866, G__17867, G__17868, G__17869, G__17870, G__17871, G__17872, G__17873, G__17874, G__17875, G__17876);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17877 = a;
    var G__17878 = b;
    var G__17879 = c;
    var G__17880 = d;
    var G__17881 = e;
    var G__17882 = f;
    var G__17883 = g;
    var G__17884 = h;
    var G__17885 = i;
    var G__17886 = j;
    var G__17887 = k;
    var G__17888 = l;
    var G__17889 = m;
    var G__17890 = n;
    var G__17891 = o;
    var G__17892 = p;
    var G__17893 = q;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__17877, G__17878, G__17879, G__17880, G__17881, G__17882, G__17883, G__17884, G__17885, G__17886, G__17887, G__17888, G__17889, G__17890, G__17891, G__17892, G__17893) : self__.dispatch_fn.call(null, G__17877, G__17878, G__17879, G__17880, G__17881, G__17882, G__17883, G__17884, G__17885, G__17886, G__17887, G__17888, G__17889, G__17890, G__17891, G__17892, G__17893);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__17894 = a;
  var G__17895 = b;
  var G__17896 = c;
  var G__17897 = d;
  var G__17898 = e;
  var G__17899 = f;
  var G__17900 = g;
  var G__17901 = h;
  var G__17902 = i;
  var G__17903 = j;
  var G__17904 = k;
  var G__17905 = l;
  var G__17906 = m;
  var G__17907 = n;
  var G__17908 = o;
  var G__17909 = p;
  var G__17910 = q;
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__17894, G__17895, G__17896, G__17897, G__17898, G__17899, G__17900, G__17901, G__17902, G__17903, G__17904, G__17905, G__17906, G__17907, G__17908, G__17909, G__17910) : target_fn.call(null, G__17894, G__17895, G__17896, G__17897, G__17898, G__17899, G__17900, G__17901, G__17902, G__17903, G__17904, G__17905, G__17906, G__17907, G__17908, G__17909, G__17910);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17911 = a;
    var G__17912 = b;
    var G__17913 = c;
    var G__17914 = d;
    var G__17915 = e;
    var G__17916 = f;
    var G__17917 = g;
    var G__17918 = h;
    var G__17919 = i;
    var G__17920 = j;
    var G__17921 = k;
    var G__17922 = l;
    var G__17923 = m;
    var G__17924 = n;
    var G__17925 = o;
    var G__17926 = p;
    var G__17927 = q;
    var G__17928 = r;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__17911, G__17912, G__17913, G__17914, G__17915, G__17916, G__17917, G__17918, G__17919, G__17920, G__17921, G__17922, G__17923, G__17924, G__17925, G__17926, G__17927, G__17928) : self__.dispatch_fn.call(null, G__17911, G__17912, G__17913, G__17914, G__17915, G__17916, G__17917, G__17918, G__17919, G__17920, G__17921, G__17922, G__17923, G__17924, G__17925, G__17926, G__17927, G__17928);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__17929 = a;
  var G__17930 = b;
  var G__17931 = c;
  var G__17932 = d;
  var G__17933 = e;
  var G__17934 = f;
  var G__17935 = g;
  var G__17936 = h;
  var G__17937 = i;
  var G__17938 = j;
  var G__17939 = k;
  var G__17940 = l;
  var G__17941 = m;
  var G__17942 = n;
  var G__17943 = o;
  var G__17944 = p;
  var G__17945 = q;
  var G__17946 = r;
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__17929, G__17930, G__17931, G__17932, G__17933, G__17934, G__17935, G__17936, G__17937, G__17938, G__17939, G__17940, G__17941, G__17942, G__17943, G__17944, G__17945, G__17946) : target_fn.call(null, G__17929, G__17930, G__17931, G__17932, G__17933, G__17934, G__17935, G__17936, G__17937, G__17938, G__17939, G__17940, G__17941, G__17942, G__17943, G__17944, G__17945, G__17946);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17947 = a;
    var G__17948 = b;
    var G__17949 = c;
    var G__17950 = d;
    var G__17951 = e;
    var G__17952 = f;
    var G__17953 = g;
    var G__17954 = h;
    var G__17955 = i;
    var G__17956 = j;
    var G__17957 = k;
    var G__17958 = l;
    var G__17959 = m;
    var G__17960 = n;
    var G__17961 = o;
    var G__17962 = p;
    var G__17963 = q;
    var G__17964 = r;
    var G__17965 = s;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__17947, G__17948, G__17949, G__17950, G__17951, G__17952, G__17953, G__17954, G__17955, G__17956, G__17957, G__17958, G__17959, G__17960, G__17961, G__17962, G__17963, G__17964, G__17965) : self__.dispatch_fn.call(null, G__17947, G__17948, G__17949, G__17950, G__17951, G__17952, G__17953, G__17954, G__17955, G__17956, G__17957, G__17958, G__17959, G__17960, G__17961, G__17962, G__17963, 
    G__17964, G__17965);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__17966 = a;
  var G__17967 = b;
  var G__17968 = c;
  var G__17969 = d;
  var G__17970 = e;
  var G__17971 = f;
  var G__17972 = g;
  var G__17973 = h;
  var G__17974 = i;
  var G__17975 = j;
  var G__17976 = k;
  var G__17977 = l;
  var G__17978 = m;
  var G__17979 = n;
  var G__17980 = o;
  var G__17981 = p;
  var G__17982 = q;
  var G__17983 = r;
  var G__17984 = s;
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__17966, G__17967, G__17968, G__17969, G__17970, G__17971, G__17972, G__17973, G__17974, G__17975, G__17976, G__17977, G__17978, G__17979, G__17980, G__17981, G__17982, G__17983, G__17984) : target_fn.call(null, G__17966, G__17967, G__17968, G__17969, G__17970, G__17971, G__17972, G__17973, G__17974, G__17975, G__17976, G__17977, G__17978, G__17979, G__17980, G__17981, G__17982, G__17983, G__17984);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__17985 = a;
    var G__17986 = b;
    var G__17987 = c;
    var G__17988 = d;
    var G__17989 = e;
    var G__17990 = f;
    var G__17991 = g;
    var G__17992 = h;
    var G__17993 = i;
    var G__17994 = j;
    var G__17995 = k;
    var G__17996 = l;
    var G__17997 = m;
    var G__17998 = n;
    var G__17999 = o;
    var G__18000 = p;
    var G__18001 = q;
    var G__18002 = r;
    var G__18003 = s;
    var G__18004 = t;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__17985, G__17986, G__17987, G__17988, G__17989, G__17990, G__17991, G__17992, G__17993, G__17994, G__17995, G__17996, G__17997, G__17998, G__17999, G__18000, G__18001, G__18002, G__18003, G__18004) : self__.dispatch_fn.call(null, G__17985, G__17986, G__17987, G__17988, G__17989, G__17990, G__17991, G__17992, G__17993, G__17994, G__17995, G__17996, G__17997, G__17998, G__17999, G__18000, 
    G__18001, G__18002, G__18003, G__18004);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18005 = a;
  var G__18006 = b;
  var G__18007 = c;
  var G__18008 = d;
  var G__18009 = e;
  var G__18010 = f;
  var G__18011 = g;
  var G__18012 = h;
  var G__18013 = i;
  var G__18014 = j;
  var G__18015 = k;
  var G__18016 = l;
  var G__18017 = m;
  var G__18018 = n;
  var G__18019 = o;
  var G__18020 = p;
  var G__18021 = q;
  var G__18022 = r;
  var G__18023 = s;
  var G__18024 = t;
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__18005, G__18006, G__18007, G__18008, G__18009, G__18010, G__18011, G__18012, G__18013, G__18014, G__18015, G__18016, G__18017, G__18018, G__18019, G__18020, G__18021, G__18022, G__18023, G__18024) : target_fn.call(null, G__18005, G__18006, G__18007, G__18008, G__18009, G__18010, G__18011, G__18012, G__18013, G__18014, G__18015, G__18016, G__18017, G__18018, G__18019, G__18020, G__18021, G__18022, G__18023, 
  G__18024);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__18026 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([this$__$1], 0));
  return goog.string.hashCode(G__18026);
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write(writer__4417__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.pr_writer_ex_info = function pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#ExceptionInfo{:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, data) {
    return ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
  };
  var ex_info__3 = function(msg, data, cause) {
    cljs.core.ExceptionInfo.prototype = function() {
      var G__18031 = msg;
      return Error(G__18031);
    }();
    cljs.core.ExceptionInfo.prototype.name = "ExceptionInfo";
    cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
    cljs.core.ExceptionInfo.prototype.toString = cljs.core.pr_str_STAR_;
    cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
    cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
      var obj__$1 = this;
      return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
    };
    return new cljs.core.ExceptionInfo(msg, data, cause);
  };
  ex_info = function(msg, data, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, data);
      case 3:
        return ex_info__3.call(this, msg, data, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(function() {
      var G__18036 = x;
      var G__18037 = y;
      return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__18036, G__18037) : pred.call(null, G__18036, G__18037);
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(function() {
        var G__18038 = y;
        var G__18039 = x;
        return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__18038, G__18039) : pred.call(null, G__18038, G__18039);
      }())) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", 
  "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), 
  null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj21586 = {};
  return obj21586;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3817__auto__ = port;
    if (and__3817__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4473__auto__ = port == null ? null : port;
    return function() {
      var or__3829__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj21588 = {};
  return obj21588;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__3817__auto__ = port;
    if (and__3817__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__4473__auto__ = port == null ? null : port;
    return function() {
      var or__3829__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj21590 = {};
  return obj21590;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3817__auto__ = chan;
    if (and__3817__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4473__auto__ = chan == null ? null : chan;
    return function() {
      var or__3829__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function closed_QMARK_(chan) {
  if (function() {
    var and__3817__auto__ = chan;
    if (and__3817__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__4473__auto__ = chan == null ? null : chan;
    return function() {
      var or__3829__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj21592 = {};
  return obj21592;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3817__auto__ = h;
    if (and__3817__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4473__auto__ = h == null ? null : h;
    return function() {
      var or__3829__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3817__auto__ = h;
    if (and__3817__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4473__auto__ = h == null ? null : h;
    return function() {
      var or__3829__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj21594 = {};
  return obj21594;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3817__auto__ = b;
    if (and__3817__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4473__auto__ = b == null ? null : b;
    return function() {
      var or__3829__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3817__auto__ = b;
    if (and__3817__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4473__auto__ = b == null ? null : b;
    return function() {
      var or__3829__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG__STAR_ = function add_BANG__STAR_(b, itm) {
  if (function() {
    var and__3817__auto__ = b;
    if (and__3817__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b, itm);
  } else {
    var x__4473__auto__ = b == null ? null : b;
    return function() {
      var or__3829__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core.async.impl.protocols.add_BANG__STAR_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!*", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function() {
  var add_BANG_ = null;
  var add_BANG___1 = function(b) {
    return b;
  };
  var add_BANG___2 = function(b, itm) {
    if (!(itm == null)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "itm", "itm", -713282527, null)))))].join(""));
    }
    return cljs.core.async.impl.protocols.add_BANG__STAR_.call(null, b, itm);
  };
  add_BANG_ = function(b, itm) {
    switch(arguments.length) {
      case 1:
        return add_BANG___1.call(this, b);
      case 2:
        return add_BANG___2.call(this, b, itm);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  add_BANG_.cljs$core$IFn$_invoke$arity$1 = add_BANG___1;
  add_BANG_.cljs$core$IFn$_invoke$arity$2 = add_BANG___2;
  return add_BANG_;
}();
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj21596 = {};
  return obj21596;
}();
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__21599 = cnt + 1;
      cnt = G__21599;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4716__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4716__auto__) {
      var v_21600 = this$.pop();
      if (keep_QMARK_.call(null, v_21600)) {
        this$.unshift(v_21600);
      } else {
      }
      var G__21601 = x + 1;
      x = G__21601;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write.call(null, writer__4417__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  self__.buf.unbounded_unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write.call(null, writer__4417__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
  } else {
    self__.buf.unshift(itm);
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write.call(null, writer__4417__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  self__.buf.unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write.call(null, writer__4417__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.functions");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener) {
    Channel = function() {
      var iframe = document.createElement("iframe");
      iframe.style.display = "none";
      iframe.src = "";
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write("");
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (e.origin != origin && e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined") {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      head = head.next;
      var cb = head.cb;
      head.cb = null;
      cb();
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in document.createElement("script")) {
    return function(cb) {
      var script = document.createElement("script");
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("goog.async.nextTick");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_21604 = 0;
  while (true) {
    var m_21605 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_21605 == null) {
    } else {
      m_21605.call(null);
      if (count_21604 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__21606 = count_21604 + 1;
        count_21604 = G__21606;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3817__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (cljs.core.truth_(and__3817__auto__)) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3817__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t21612 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t21612 = function(val, box, meta21613) {
      this.val = val;
      this.box = box;
      this.meta21613 = meta21613;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t21612.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t21612.prototype.cljs$core$IMeta$_meta$arity$1 = function(_21614) {
      var self__ = this;
      var _21614__$1 = this;
      return self__.meta21613;
    };
    cljs.core.async.impl.channels.t21612.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_21614, meta21613__$1) {
      var self__ = this;
      var _21614__$1 = this;
      return new cljs.core.async.impl.channels.t21612(self__.val, self__.box, meta21613__$1);
    };
    cljs.core.async.impl.channels.t21612.cljs$lang$type = true;
    cljs.core.async.impl.channels.t21612.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t21612";
    cljs.core.async.impl.channels.t21612.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
      return cljs.core._write.call(null, writer__4417__auto__, "cljs.core.async.impl.channels/t21612");
    };
    cljs.core.async.impl.channels.__GT_t21612 = function __GT_t21612(val__$1, box__$1, meta21613) {
      return new cljs.core.async.impl.channels.t21612(val__$1, box__$1, meta21613);
    };
  }
  return new cljs.core.async.impl.channels.t21612(val, box, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write.call(null, writer__4417__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.MMC = function() {
  var obj21616 = {};
  return obj21616;
}();
cljs.core.async.impl.channels.abort = function abort(this$) {
  if (function() {
    var and__3817__auto__ = this$;
    if (and__3817__auto__) {
      return this$.cljs$core$async$impl$channels$MMC$abort$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return this$.cljs$core$async$impl$channels$MMC$abort$arity$1(this$);
  } else {
    var x__4473__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3829__auto__ = cljs.core.async.impl.channels.abort[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core.async.impl.channels.abort["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "MMC.abort", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
  this.add_BANG_ = add_BANG_;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    if (cljs.core.truth_(function() {
      var and__3817__auto__ = self__.buf;
      if (cljs.core.truth_(and__3817__auto__)) {
        return self__.puts.length === 0;
      } else {
        return and__3817__auto__;
      }
    }())) {
      self__.add_BANG_.call(null, self__.buf);
    } else {
    }
    while (true) {
      var taker_21617 = self__.takes.pop();
      if (taker_21617 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_21617)) {
          var take_cb_21618 = cljs.core.async.impl.protocols.commit.call(null, taker_21617);
          var val_21619 = cljs.core.truth_(function() {
            var and__3817__auto__ = self__.buf;
            if (cljs.core.truth_(and__3817__auto__)) {
              return cljs.core.count.call(null, self__.buf) > 0;
            } else {
              return and__3817__auto__;
            }
          }()) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_21618, val_21619, taker_21617, this$__$1) {
            return function() {
              return take_cb_21618.call(null, val_21619);
            };
          }(take_cb_21618, val_21619, taker_21617, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        if (cljs.core.truth_(cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
        } else {
          var putter_21620 = self__.puts.pop();
          if (putter_21620 == null) {
          } else {
            var put_handler_21621 = putter_21620.handler;
            var val_21622 = putter_21620.val;
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_21621)) {
              var put_cb_21623 = cljs.core.async.impl.protocols.commit.call(null, put_handler_21621);
              cljs.core.async.impl.protocols.commit.call(null, handler);
              cljs.core.async.impl.dispatch.run.call(null, function(put_cb_21623, put_handler_21621, val_21622, putter_21620, _, retval, this$__$1) {
                return function() {
                  return put_cb_21623.call(null, true);
                };
              }(put_cb_21623, put_handler_21621, val_21622, putter_21620, _, retval, this$__$1));
              if (cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val_21622))) {
                cljs.core.async.impl.channels.abort.call(null, this$__$1);
              } else {
              }
            } else {
            }
            continue;
          }
        }
        break;
      }
      return retval;
    } else {
      var putter = function() {
        while (true) {
          var putter = self__.puts.pop();
          if (cljs.core.truth_(putter)) {
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, putter.handler)) {
              return putter;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(putter)) {
        var put_cb = cljs.core.async.impl.protocols.commit.call(null, putter.handler);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb, putter, this$__$1) {
          return function() {
            return put_cb.call(null, true);
          };
        }(put_cb, putter, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, putter.val);
      } else {
        if (cljs.core.truth_(self__.closed)) {
          if (cljs.core.truth_(self__.buf)) {
            self__.add_BANG_.call(null, self__.buf);
          } else {
          }
          if (cljs.core.truth_(function() {
            var and__3817__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, handler);
            if (cljs.core.truth_(and__3817__auto__)) {
              return cljs.core.async.impl.protocols.commit.call(null, handler);
            } else {
              return and__3817__auto__;
            }
          }())) {
            var has_val = function() {
              var and__3817__auto__ = self__.buf;
              if (cljs.core.truth_(and__3817__auto__)) {
                return cljs.core.count.call(null, self__.buf) > 0;
              } else {
                return and__3817__auto__;
              }
            }();
            var val = cljs.core.truth_(has_val) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            return null;
          }
        } else {
          if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_takes = 0;
            self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
          } else {
            self__.dirty_takes = self__.dirty_takes + 1;
          }
          if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, "takes", 
            "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
          }
          self__.takes.unbounded_unshift(handler);
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__3817__auto__ = self__.buf;
      if (cljs.core.truth_(and__3817__auto__)) {
        return cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf));
      } else {
        return and__3817__auto__;
      }
    }())) {
      cljs.core.async.impl.protocols.commit.call(null, handler);
      var done_QMARK_ = cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val));
      while (true) {
        if (self__.takes.length > 0 && cljs.core.count.call(null, self__.buf) > 0) {
          var taker_21624 = self__.takes.pop();
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_21624)) {
            var take_cb_21625 = cljs.core.async.impl.protocols.commit.call(null, taker_21624);
            var val_21626__$1 = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
            cljs.core.async.impl.dispatch.run.call(null, function(take_cb_21625, val_21626__$1, taker_21624, done_QMARK_, closed__$1, this$__$1) {
              return function() {
                return take_cb_21625.call(null, val_21626__$1);
              };
            }(take_cb_21625, val_21626__$1, taker_21624, done_QMARK_, closed__$1, this$__$1));
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      if (done_QMARK_) {
        cljs.core.async.impl.channels.abort.call(null, this$__$1);
      } else {
      }
      return cljs.core.async.impl.channels.box.call(null, true);
    } else {
      var taker = function() {
        while (true) {
          var taker = self__.takes.pop();
          if (cljs.core.truth_(taker)) {
            if (cljs.core.truth_(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker))) {
              return taker;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(taker)) {
        var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(take_cb, taker, closed__$1, this$__$1) {
          return function() {
            return take_cb.call(null, val);
          };
        }(take_cb, taker, closed__$1, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, true);
      } else {
        if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
          self__.dirty_puts = 0;
          self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
        } else {
          self__.dirty_puts = self__.dirty_puts + 1;
        }
        if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
        } else {
          throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
          -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
        }
        self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
        return null;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  while (true) {
    var putter_21627 = self__.puts.pop();
    if (putter_21627 == null) {
    } else {
      var put_handler_21628 = putter_21627.handler;
      var val_21629 = putter_21627.val;
      if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_21628)) {
        var put_cb_21630 = cljs.core.async.impl.protocols.commit.call(null, put_handler_21628);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb_21630, put_handler_21628, val_21629, putter_21627, this$__$1) {
          return function() {
            return put_cb_21630.call(null, true);
          };
        }(put_cb_21630, put_handler_21628, val_21629, putter_21627, this$__$1));
      } else {
        continue;
      }
    }
    break;
  }
  self__.puts.cleanup(cljs.core.constantly.call(null, false));
  return cljs.core.async.impl.protocols.close_BANG_.call(null, this$__$1);
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write.call(null, writer__4417__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_);
};
cljs.core.async.impl.channels.ex_handler = function ex_handler(ex) {
  console.log(ex);
  return null;
};
cljs.core.async.impl.channels.handle = function handle(buf, exh, t) {
  var else$ = function() {
    var or__3829__auto__ = exh;
    if (cljs.core.truth_(or__3829__auto__)) {
      return or__3829__auto__;
    } else {
      return cljs.core.async.impl.channels.ex_handler;
    }
  }().call(null, t);
  if (else$ == null) {
    return buf;
  } else {
    return cljs.core.async.impl.protocols.add_BANG_.call(null, buf, else$);
  }
};
cljs.core.async.impl.channels.chan = function() {
  var chan = null;
  var chan__1 = function(buf) {
    return chan.call(null, buf, null);
  };
  var chan__2 = function(buf, xform) {
    return chan.call(null, buf, xform, null);
  };
  var chan__3 = function(buf, xform, exh) {
    return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false, function() {
      var add_BANG_ = cljs.core.truth_(xform) ? xform.call(null, cljs.core.async.impl.protocols.add_BANG_) : cljs.core.async.impl.protocols.add_BANG_;
      return function(add_BANG_) {
        return function() {
          var G__21635 = null;
          var G__21635__1 = function(buf__$1) {
            try {
              return add_BANG_.call(null, buf__$1);
            } catch (e21633) {
              var t = e21633;
              return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
            }
          };
          var G__21635__2 = function(buf__$1, val) {
            try {
              return add_BANG_.call(null, buf__$1, val);
            } catch (e21634) {
              var t = e21634;
              return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
            }
          };
          G__21635 = function(buf__$1, val) {
            switch(arguments.length) {
              case 1:
                return G__21635__1.call(this, buf__$1);
              case 2:
                return G__21635__2.call(this, buf__$1, val);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__21635.cljs$core$IFn$_invoke$arity$1 = G__21635__1;
          G__21635.cljs$core$IFn$_invoke$arity$2 = G__21635__2;
          return G__21635;
        }();
      }(add_BANG_);
    }());
  };
  chan = function(buf, xform, exh) {
    switch(arguments.length) {
      case 1:
        return chan__1.call(this, buf);
      case 2:
        return chan__2.call(this, buf, xform);
      case 3:
        return chan__3.call(this, buf, xform, exh);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  chan.cljs$core$IFn$_invoke$arity$2 = chan__2;
  chan.cljs$core$IFn$_invoke$arity$3 = chan__3;
  return chan;
}();
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t21544 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t21544 = function(f, fn_handler, meta21545) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta21545 = meta21545;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t21544.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t21544.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t21544.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t21544.prototype.cljs$core$IMeta$_meta$arity$1 = function(_21546) {
      var self__ = this;
      var _21546__$1 = this;
      return self__.meta21545;
    };
    cljs.core.async.impl.ioc_helpers.t21544.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_21546, meta21545__$1) {
      var self__ = this;
      var _21546__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t21544(self__.f, self__.fn_handler, meta21545__$1);
    };
    cljs.core.async.impl.ioc_helpers.t21544.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t21544.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t21544";
    cljs.core.async.impl.ioc_helpers.t21544.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
      return cljs.core._write.call(null, writer__4417__auto__, "cljs.core.async.impl.ioc-helpers/t21544");
    };
    cljs.core.async.impl.ioc_helpers.__GT_t21544 = function __GT_t21544(f__$1, fn_handler__$1, meta21545) {
      return new cljs.core.async.impl.ioc_helpers.t21544(f__$1, fn_handler__$1, meta21545);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t21544(f, fn_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e21548) {
    if (e21548 instanceof Object) {
      var ex = e21548;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e21548;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_21551_21553 = state;
    statearr_21551_21553[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_21551_21553[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_21552_21554 = state;
    statearr_21552_21554[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_21552_21554[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_21557_21559 = state;
    statearr_21557_21559[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_21557_21559[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_21558_21560 = state;
    statearr_21558_21560[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_21558_21560[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap, __hash) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4432__auto__, k__4433__auto__) {
  var self__ = this;
  var this__4432__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4432__auto____$1, k__4433__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4434__auto__, k21562, else__4435__auto__) {
  var self__ = this;
  var this__4434__auto____$1 = this;
  var G__21564 = k21562 instanceof cljs.core.Keyword ? k21562.fqn : null;
  switch(G__21564) {
    case "prev":
      return self__.prev;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "catch-block":
      return self__.catch_block;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k21562, else__4435__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4446__auto__, writer__4447__auto__, opts__4448__auto__) {
  var self__ = this;
  var this__4446__auto____$1 = this;
  var pr_pair__4449__auto__ = function(this__4446__auto____$1) {
    return function(keyval__4450__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4447__auto__, cljs.core.pr_writer, "", " ", "", opts__4448__auto__, keyval__4450__auto__);
    };
  }(this__4446__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4447__auto__, pr_pair__4449__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__4448__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4430__auto__) {
  var self__ = this;
  var this__4430__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4426__auto__) {
  var self__ = this;
  var this__4426__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4436__auto__) {
  var self__ = this;
  var this__4436__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4427__auto__) {
  var self__ = this;
  var this__4427__auto____$1 = this;
  var h__4250__auto__ = self__.__hash;
  if (!(h__4250__auto__ == null)) {
    return h__4250__auto__;
  } else {
    var h__4250__auto____$1 = cljs.core.hash_imap.call(null, this__4427__auto____$1);
    self__.__hash = h__4250__auto____$1;
    return h__4250__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4428__auto__, other__4429__auto__) {
  var self__ = this;
  var this__4428__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3817__auto__ = other__4429__auto__;
    if (cljs.core.truth_(and__3817__auto__)) {
      return this__4428__auto____$1.constructor === other__4429__auto__.constructor && cljs.core.equiv_map.call(null, this__4428__auto____$1, other__4429__auto__);
    } else {
      return and__3817__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4441__auto__, k__4442__auto__) {
  var self__ = this;
  var this__4441__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__4442__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4441__auto____$1), self__.__meta), k__4442__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4442__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4439__auto__, k__4440__auto__, G__21561) {
  var self__ = this;
  var this__4439__auto____$1 = this;
  var pred__21565 = cljs.core.keyword_identical_QMARK_;
  var expr__21566 = k__4440__auto__;
  if (cljs.core.truth_(pred__21565.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__21566))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__21561, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__21565.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__21566))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__21561, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__21565.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__21566))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__21561, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__21565.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__21566))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__21561, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__21565.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__21566))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__21561, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4440__auto__, G__21561), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4444__auto__) {
  var self__ = this;
  var this__4444__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4431__auto__, G__21561) {
  var self__ = this;
  var this__4431__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__21561, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4437__auto__, entry__4438__auto__) {
  var self__ = this;
  var this__4437__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4438__auto__)) {
    return cljs.core._assoc.call(null, this__4437__auto____$1, cljs.core._nth.call(null, entry__4438__auto__, 0), cljs.core._nth.call(null, entry__4438__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4437__auto____$1, entry__4438__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__4466__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__4466__auto__, writer__4467__auto__) {
  return cljs.core._write.call(null, writer__4467__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function __GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev, null, null, null);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function map__GT_ExceptionFrame(G__21563) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__21563), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__21563), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__21563), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__21563), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__21563), null, cljs.core.dissoc.call(null, G__21563, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)), 
  null);
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_21570 = state;
  statearr_21570[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_21570;
};
cljs.core.async.impl.ioc_helpers.process_exception = function process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__3817__auto__ = exception;
      if (cljs.core.truth_(and__3817__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__3817__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__3817__auto__ = exception;
        if (cljs.core.truth_(and__3817__auto__)) {
          var and__3817__auto____$1 = catch_block;
          if (cljs.core.truth_(and__3817__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__3817__auto____$1;
          }
        } else {
          return and__3817__auto__;
        }
      }())) {
        var statearr_21576 = state;
        statearr_21576[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_21576[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_21576[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_21576[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_21576;
      } else {
        if (cljs.core.truth_(function() {
          var and__3817__auto__ = exception;
          if (cljs.core.truth_(and__3817__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__3817__auto__;
          }
        }())) {
          var statearr_21577_21581 = state;
          statearr_21577_21581[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__21582 = state;
          state = G__21582;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__3817__auto__ = exception;
            if (cljs.core.truth_(and__3817__auto__)) {
              var and__3817__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__3817__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3817__auto____$1;
              }
            } else {
              return and__3817__auto__;
            }
          }())) {
            var statearr_21578 = state;
            statearr_21578[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_21578[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_21578;
          } else {
            if (cljs.core.truth_(function() {
              var and__3817__auto__ = cljs.core.not.call(null, exception);
              if (and__3817__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3817__auto__;
              }
            }())) {
              var statearr_21579 = state;
              statearr_21579[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_21579[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_21579;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_21580 = state;
                statearr_21580[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_21580[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_21580;
              } else {
                throw new Error("No matching clause");
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__21515 = level + 1;
        level = G__21515;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write.call(null, writer__4417__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_21516 = 0;
    while (true) {
      if (i_21516 < arr.length) {
        arr[i_21516] = null;
        var G__21517 = i_21516 + 1;
        i_21516 = G__21517;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4124__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var x_SINGLEQUOTE_ = temp__4124__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__21518 = x_SINGLEQUOTE_;
                x__$1 = G__21518;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__21519 = x__$1;
        var G__21520 = k;
        var G__21521 = level - 1;
        var G__21522 = update;
        x = G__21519;
        k = G__21520;
        level = G__21521;
        update = G__21522;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_21523 = self__.level + 1;
      while (true) {
        if (i_21523 <= new_level + 1) {
          update[i_21523] = self__.header;
          var G__21524 = i_21523 + 1;
          i_21523 = G__21524;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_21525 = 0;
    while (true) {
      if (i_21525 <= self__.level) {
        var links_21526 = update[i_21525].forward;
        if (links_21526[i_21525] === x__$1) {
          links_21526[i_21525] = x__$1.forward[i_21525];
          var G__21527 = i_21525 + 1;
          i_21525 = G__21527;
          continue;
        } else {
          var G__21528 = i_21525 + 1;
          i_21525 = G__21528;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__21529 = x_SINGLEQUOTE_;
              x__$1 = G__21529;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__21530 = nx;
        var G__21531 = level__$1 - 1;
        x = G__21530;
        level__$1 = G__21531;
        continue;
      } else {
        var G__21532 = x;
        var G__21533 = level__$1 - 1;
        x = G__21532;
        level__$1 = G__21533;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__21534 = x_SINGLEQUOTE_;
              x__$1 = G__21534;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__21535 = nx;
        var G__21536 = level__$1 - 1;
        x = G__21535;
        level__$1 = G__21536;
        continue;
      } else {
        var G__21537 = x;
        var G__21538 = level__$1 - 1;
        x = G__21537;
        level__$1 = G__21538;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write.call(null, writer__4417__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3829__auto__ = cljs.core.truth_(function() {
    var and__3817__auto__ = me;
    if (cljs.core.truth_(and__3817__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3817__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3829__auto__)) {
    return or__3829__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__3829__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__3829__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t18426 !== "undefined") {
  } else {
    cljs.core.async.t18426 = function(f, fn_handler, meta18427) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta18427 = meta18427;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t18426.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t18426.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t18426.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t18426.prototype.cljs$core$IMeta$_meta$arity$1 = function(_18428) {
      var self__ = this;
      var _18428__$1 = this;
      return self__.meta18427;
    };
    cljs.core.async.t18426.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_18428, meta18427__$1) {
      var self__ = this;
      var _18428__$1 = this;
      return new cljs.core.async.t18426(self__.f, self__.fn_handler, meta18427__$1);
    };
    cljs.core.async.t18426.cljs$lang$type = true;
    cljs.core.async.t18426.cljs$lang$ctorStr = "cljs.core.async/t18426";
    cljs.core.async.t18426.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
      return cljs.core._write.call(null, writer__4417__auto__, "cljs.core.async/t18426");
    };
    cljs.core.async.__GT_t18426 = function __GT_t18426(f__$1, fn_handler__$1, meta18427) {
      return new cljs.core.async.t18426(f__$1, fn_handler__$1, meta18427);
    };
  }
  return new cljs.core.async.t18426(f, fn_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function unblocking_buffer_QMARK_(buff) {
  var G__18430 = buff;
  if (G__18430) {
    var bit__4510__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3829__auto__ = bit__4510__auto__;
      if (cljs.core.truth_(or__3829__auto__)) {
        return or__3829__auto__;
      } else {
        return G__18430.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__18430.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__18430);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__18430);
  }
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    return chan.call(null, buf_or_n, null, null);
  };
  var chan__2 = function(buf_or_n, xform) {
    return chan.call(null, buf_or_n, xform, null);
  };
  var chan__3 = function(buf_or_n, xform, ex_handler) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    if (cljs.core.truth_(xform)) {
      if (cljs.core.truth_(buf_or_n__$1)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("buffer must be supplied when transducer is"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "buf-or-n", "buf-or-n", -1646815050, null)))].join(""));
      }
    } else {
    }
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1, xform, ex_handler);
  };
  chan = function(buf_or_n, xform, ex_handler) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
      case 2:
        return chan__2.call(this, buf_or_n, xform);
      case 3:
        return chan__3.call(this, buf_or_n, xform, ex_handler);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  chan.cljs$core$IFn$_invoke$arity$2 = chan__2;
  chan.cljs$core$IFn$_invoke$arity$3 = chan__3;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  throw new Error("\x3c! used not in (go ...) block");
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_18431 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_18431);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(val_18431, ret) {
          return function() {
            return fn1.call(null, val_18431);
          };
        }(val_18431, ret));
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  throw new Error("\x3e! used not in (go ...) block");
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var ret = temp__4124__auto__;
      return cljs.core.deref.call(null, ret);
    } else {
      return true;
    }
  };
  var put_BANG___3 = function(port, val, fn1) {
    return put_BANG_.call(null, port, val, fn1, true);
  };
  var put_BANG___4 = function(port, val, fn1, on_caller_QMARK_) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(temp__4124__auto__)) {
      var retb = temp__4124__auto__;
      var ret = cljs.core.deref.call(null, retb);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, ret);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4124__auto__) {
          return function() {
            return fn1.call(null, ret);
          };
        }(ret, retb, temp__4124__auto__));
      }
      return ret;
    } else {
      return true;
    }
  };
  put_BANG_ = function(port, val, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn1);
      case 4:
        return put_BANG___4.call(this, port, val, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4716__auto___18432 = n;
  var x_18433 = 0;
  while (true) {
    if (x_18433 < n__4716__auto___18432) {
      a[x_18433] = 0;
      var G__18434 = x_18433 + 1;
      x_18433 = G__18434;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__18435 = i + 1;
      i = G__18435;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t18439 !== "undefined") {
  } else {
    cljs.core.async.t18439 = function(flag, alt_flag, meta18440) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta18440 = meta18440;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t18439.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t18439.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t18439.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t18439.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_18441) {
        var self__ = this;
        var _18441__$1 = this;
        return self__.meta18440;
      };
    }(flag);
    cljs.core.async.t18439.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_18441, meta18440__$1) {
        var self__ = this;
        var _18441__$1 = this;
        return new cljs.core.async.t18439(self__.flag, self__.alt_flag, meta18440__$1);
      };
    }(flag);
    cljs.core.async.t18439.cljs$lang$type = true;
    cljs.core.async.t18439.cljs$lang$ctorStr = "cljs.core.async/t18439";
    cljs.core.async.t18439.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
        return cljs.core._write.call(null, writer__4417__auto__, "cljs.core.async/t18439");
      };
    }(flag);
    cljs.core.async.__GT_t18439 = function(flag) {
      return function __GT_t18439(flag__$1, alt_flag__$1, meta18440) {
        return new cljs.core.async.t18439(flag__$1, alt_flag__$1, meta18440);
      };
    }(flag);
  }
  return new cljs.core.async.t18439(flag, alt_flag, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t18445 !== "undefined") {
  } else {
    cljs.core.async.t18445 = function(cb, flag, alt_handler, meta18446) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta18446 = meta18446;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t18445.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t18445.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t18445.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t18445.prototype.cljs$core$IMeta$_meta$arity$1 = function(_18447) {
      var self__ = this;
      var _18447__$1 = this;
      return self__.meta18446;
    };
    cljs.core.async.t18445.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_18447, meta18446__$1) {
      var self__ = this;
      var _18447__$1 = this;
      return new cljs.core.async.t18445(self__.cb, self__.flag, self__.alt_handler, meta18446__$1);
    };
    cljs.core.async.t18445.cljs$lang$type = true;
    cljs.core.async.t18445.cljs$lang$ctorStr = "cljs.core.async/t18445";
    cljs.core.async.t18445.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
      return cljs.core._write.call(null, writer__4417__auto__, "cljs.core.async/t18445");
    };
    cljs.core.async.__GT_t18445 = function __GT_t18445(cb__$1, flag__$1, alt_handler__$1, meta18446) {
      return new cljs.core.async.t18445(cb__$1, flag__$1, alt_handler__$1, meta18446);
    };
  }
  return new cljs.core.async.t18445(cb, flag, alt_handler, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__18448_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__18448_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__18449_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__18449_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3829__auto__ = wport;
            if (cljs.core.truth_(or__3829__auto__)) {
              return or__3829__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__18450 = i + 1;
          i = G__18450;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3829__auto__ = ret;
  if (cljs.core.truth_(or__3829__auto__)) {
    return or__3829__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4126__auto__ = function() {
        var and__3817__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3817__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3817__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4126__auto__)) {
        var got = temp__4126__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__18451) {
    var map__18453 = p__18451;
    var map__18453__$1 = cljs.core.seq_QMARK_.call(null, map__18453) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18453) : map__18453;
    var opts = map__18453__$1;
    throw new Error("alts! used not in (go ...) block");
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__18451 = null;
    if (arguments.length > 1) {
      var G__18454__i = 0, G__18454__a = new Array(arguments.length - 1);
      while (G__18454__i < G__18454__a.length) {
        G__18454__a[G__18454__i] = arguments[G__18454__i + 1];
        ++G__18454__i;
      }
      p__18451 = new cljs.core.IndexedSeq(G__18454__a, 0);
    }
    return alts_BANG___delegate.call(this, ports, p__18451);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__18455) {
    var ports = cljs.core.first(arglist__18455);
    var p__18451 = cljs.core.rest(arglist__18455);
    return alts_BANG___delegate(ports, p__18451);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__6607__auto___18550 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6607__auto___18550) {
      return function() {
        var f__6608__auto__ = function() {
          var switch__6551__auto__ = function(c__6607__auto___18550) {
            return function(state_18526) {
              var state_val_18527 = state_18526[1];
              if (state_val_18527 === 7) {
                var inst_18522 = state_18526[2];
                var state_18526__$1 = state_18526;
                var statearr_18528_18551 = state_18526__$1;
                statearr_18528_18551[2] = inst_18522;
                statearr_18528_18551[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_18527 === 1) {
                  var state_18526__$1 = state_18526;
                  var statearr_18529_18552 = state_18526__$1;
                  statearr_18529_18552[2] = null;
                  statearr_18529_18552[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18527 === 4) {
                    var inst_18505 = state_18526[7];
                    var inst_18505__$1 = state_18526[2];
                    var inst_18506 = inst_18505__$1 == null;
                    var state_18526__$1 = function() {
                      var statearr_18530 = state_18526;
                      statearr_18530[7] = inst_18505__$1;
                      return statearr_18530;
                    }();
                    if (cljs.core.truth_(inst_18506)) {
                      var statearr_18531_18553 = state_18526__$1;
                      statearr_18531_18553[1] = 5;
                    } else {
                      var statearr_18532_18554 = state_18526__$1;
                      statearr_18532_18554[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18527 === 13) {
                      var state_18526__$1 = state_18526;
                      var statearr_18533_18555 = state_18526__$1;
                      statearr_18533_18555[2] = null;
                      statearr_18533_18555[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18527 === 6) {
                        var inst_18505 = state_18526[7];
                        var state_18526__$1 = state_18526;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18526__$1, 11, to, inst_18505);
                      } else {
                        if (state_val_18527 === 3) {
                          var inst_18524 = state_18526[2];
                          var state_18526__$1 = state_18526;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18526__$1, inst_18524);
                        } else {
                          if (state_val_18527 === 12) {
                            var state_18526__$1 = state_18526;
                            var statearr_18534_18556 = state_18526__$1;
                            statearr_18534_18556[2] = null;
                            statearr_18534_18556[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_18527 === 2) {
                              var state_18526__$1 = state_18526;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18526__$1, 4, from);
                            } else {
                              if (state_val_18527 === 11) {
                                var inst_18515 = state_18526[2];
                                var state_18526__$1 = state_18526;
                                if (cljs.core.truth_(inst_18515)) {
                                  var statearr_18535_18557 = state_18526__$1;
                                  statearr_18535_18557[1] = 12;
                                } else {
                                  var statearr_18536_18558 = state_18526__$1;
                                  statearr_18536_18558[1] = 13;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_18527 === 9) {
                                  var state_18526__$1 = state_18526;
                                  var statearr_18537_18559 = state_18526__$1;
                                  statearr_18537_18559[2] = null;
                                  statearr_18537_18559[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_18527 === 5) {
                                    var state_18526__$1 = state_18526;
                                    if (cljs.core.truth_(close_QMARK_)) {
                                      var statearr_18538_18560 = state_18526__$1;
                                      statearr_18538_18560[1] = 8;
                                    } else {
                                      var statearr_18539_18561 = state_18526__$1;
                                      statearr_18539_18561[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_18527 === 14) {
                                      var inst_18520 = state_18526[2];
                                      var state_18526__$1 = state_18526;
                                      var statearr_18540_18562 = state_18526__$1;
                                      statearr_18540_18562[2] = inst_18520;
                                      statearr_18540_18562[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_18527 === 10) {
                                        var inst_18512 = state_18526[2];
                                        var state_18526__$1 = state_18526;
                                        var statearr_18541_18563 = state_18526__$1;
                                        statearr_18541_18563[2] = inst_18512;
                                        statearr_18541_18563[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_18527 === 8) {
                                          var inst_18509 = cljs.core.async.close_BANG_.call(null, to);
                                          var state_18526__$1 = state_18526;
                                          var statearr_18542_18564 = state_18526__$1;
                                          statearr_18542_18564[2] = inst_18509;
                                          statearr_18542_18564[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6607__auto___18550);
          return function(switch__6551__auto__, c__6607__auto___18550) {
            return function() {
              var state_machine__6552__auto__ = null;
              var state_machine__6552__auto____0 = function() {
                var statearr_18546 = [null, null, null, null, null, null, null, null];
                statearr_18546[0] = state_machine__6552__auto__;
                statearr_18546[1] = 1;
                return statearr_18546;
              };
              var state_machine__6552__auto____1 = function(state_18526) {
                while (true) {
                  var ret_value__6553__auto__ = function() {
                    try {
                      while (true) {
                        var result__6554__auto__ = switch__6551__auto__.call(null, state_18526);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6554__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6554__auto__;
                        }
                        break;
                      }
                    } catch (e18547) {
                      if (e18547 instanceof Object) {
                        var ex__6555__auto__ = e18547;
                        var statearr_18548_18565 = state_18526;
                        statearr_18548_18565[5] = ex__6555__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18526);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e18547;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6553__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__18566 = state_18526;
                    state_18526 = G__18566;
                    continue;
                  } else {
                    return ret_value__6553__auto__;
                  }
                  break;
                }
              };
              state_machine__6552__auto__ = function(state_18526) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6552__auto____0.call(this);
                  case 1:
                    return state_machine__6552__auto____1.call(this, state_18526);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6552__auto____0;
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6552__auto____1;
              return state_machine__6552__auto__;
            }();
          }(switch__6551__auto__, c__6607__auto___18550);
        }();
        var state__6609__auto__ = function() {
          var statearr_18549 = f__6608__auto__.call(null);
          statearr_18549[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6607__auto___18550;
          return statearr_18549;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6609__auto__);
      };
    }(c__6607__auto___18550));
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.pipeline_STAR_ = function pipeline_STAR_(n, to, xf, from, close_QMARK_, ex_handler, type) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null))))].join(""));
  }
  var jobs = cljs.core.async.chan.call(null, n);
  var results = cljs.core.async.chan.call(null, n);
  var process = function(jobs, results) {
    return function(p__18750) {
      var vec__18751 = p__18750;
      var v = cljs.core.nth.call(null, vec__18751, 0, null);
      var p = cljs.core.nth.call(null, vec__18751, 1, null);
      var job = vec__18751;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1, xf, ex_handler);
        var c__6607__auto___18933 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__6607__auto___18933, res, vec__18751, v, p, job, jobs, results) {
          return function() {
            var f__6608__auto__ = function() {
              var switch__6551__auto__ = function(c__6607__auto___18933, res, vec__18751, v, p, job, jobs, results) {
                return function(state_18756) {
                  var state_val_18757 = state_18756[1];
                  if (state_val_18757 === 2) {
                    var inst_18753 = state_18756[2];
                    var inst_18754 = cljs.core.async.close_BANG_.call(null, res);
                    var state_18756__$1 = function() {
                      var statearr_18758 = state_18756;
                      statearr_18758[7] = inst_18753;
                      return statearr_18758;
                    }();
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18756__$1, inst_18754);
                  } else {
                    if (state_val_18757 === 1) {
                      var state_18756__$1 = state_18756;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18756__$1, 2, res, v);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__6607__auto___18933, res, vec__18751, v, p, job, jobs, results);
              return function(switch__6551__auto__, c__6607__auto___18933, res, vec__18751, v, p, job, jobs, results) {
                return function() {
                  var state_machine__6552__auto__ = null;
                  var state_machine__6552__auto____0 = function() {
                    var statearr_18762 = [null, null, null, null, null, null, null, null];
                    statearr_18762[0] = state_machine__6552__auto__;
                    statearr_18762[1] = 1;
                    return statearr_18762;
                  };
                  var state_machine__6552__auto____1 = function(state_18756) {
                    while (true) {
                      var ret_value__6553__auto__ = function() {
                        try {
                          while (true) {
                            var result__6554__auto__ = switch__6551__auto__.call(null, state_18756);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__6554__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__6554__auto__;
                            }
                            break;
                          }
                        } catch (e18763) {
                          if (e18763 instanceof Object) {
                            var ex__6555__auto__ = e18763;
                            var statearr_18764_18934 = state_18756;
                            statearr_18764_18934[5] = ex__6555__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18756);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e18763;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6553__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__18935 = state_18756;
                        state_18756 = G__18935;
                        continue;
                      } else {
                        return ret_value__6553__auto__;
                      }
                      break;
                    }
                  };
                  state_machine__6552__auto__ = function(state_18756) {
                    switch(arguments.length) {
                      case 0:
                        return state_machine__6552__auto____0.call(this);
                      case 1:
                        return state_machine__6552__auto____1.call(this, state_18756);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6552__auto____0;
                  state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6552__auto____1;
                  return state_machine__6552__auto__;
                }();
              }(switch__6551__auto__, c__6607__auto___18933, res, vec__18751, v, p, job, jobs, results);
            }();
            var state__6609__auto__ = function() {
              var statearr_18765 = f__6608__auto__.call(null);
              statearr_18765[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6607__auto___18933;
              return statearr_18765;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6609__auto__);
          };
        }(c__6607__auto___18933, res, vec__18751, v, p, job, jobs, results));
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results);
  var async = function(jobs, results, process) {
    return function(p__18766) {
      var vec__18767 = p__18766;
      var v = cljs.core.nth.call(null, vec__18767, 0, null);
      var p = cljs.core.nth.call(null, vec__18767, 1, null);
      var job = vec__18767;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1);
        xf.call(null, v, res);
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results, process);
  var n__4716__auto___18936 = n;
  var __18937 = 0;
  while (true) {
    if (__18937 < n__4716__auto___18936) {
      var G__18768_18938 = type instanceof cljs.core.Keyword ? type.fqn : null;
      switch(G__18768_18938) {
        case "async":
          var c__6607__auto___18940 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__18937, c__6607__auto___18940, G__18768_18938, n__4716__auto___18936, jobs, results, process, async) {
            return function() {
              var f__6608__auto__ = function() {
                var switch__6551__auto__ = function(__18937, c__6607__auto___18940, G__18768_18938, n__4716__auto___18936, jobs, results, process, async) {
                  return function(state_18781) {
                    var state_val_18782 = state_18781[1];
                    if (state_val_18782 === 7) {
                      var inst_18777 = state_18781[2];
                      var state_18781__$1 = state_18781;
                      var statearr_18783_18941 = state_18781__$1;
                      statearr_18783_18941[2] = inst_18777;
                      statearr_18783_18941[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18782 === 6) {
                        var state_18781__$1 = state_18781;
                        var statearr_18784_18942 = state_18781__$1;
                        statearr_18784_18942[2] = null;
                        statearr_18784_18942[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18782 === 5) {
                          var state_18781__$1 = state_18781;
                          var statearr_18785_18943 = state_18781__$1;
                          statearr_18785_18943[2] = null;
                          statearr_18785_18943[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_18782 === 4) {
                            var inst_18771 = state_18781[2];
                            var inst_18772 = async.call(null, inst_18771);
                            var state_18781__$1 = state_18781;
                            if (cljs.core.truth_(inst_18772)) {
                              var statearr_18786_18944 = state_18781__$1;
                              statearr_18786_18944[1] = 5;
                            } else {
                              var statearr_18787_18945 = state_18781__$1;
                              statearr_18787_18945[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_18782 === 3) {
                              var inst_18779 = state_18781[2];
                              var state_18781__$1 = state_18781;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18781__$1, inst_18779);
                            } else {
                              if (state_val_18782 === 2) {
                                var state_18781__$1 = state_18781;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18781__$1, 4, jobs);
                              } else {
                                if (state_val_18782 === 1) {
                                  var state_18781__$1 = state_18781;
                                  var statearr_18788_18946 = state_18781__$1;
                                  statearr_18788_18946[2] = null;
                                  statearr_18788_18946[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__18937, c__6607__auto___18940, G__18768_18938, n__4716__auto___18936, jobs, results, process, async);
                return function(__18937, switch__6551__auto__, c__6607__auto___18940, G__18768_18938, n__4716__auto___18936, jobs, results, process, async) {
                  return function() {
                    var state_machine__6552__auto__ = null;
                    var state_machine__6552__auto____0 = function() {
                      var statearr_18792 = [null, null, null, null, null, null, null];
                      statearr_18792[0] = state_machine__6552__auto__;
                      statearr_18792[1] = 1;
                      return statearr_18792;
                    };
                    var state_machine__6552__auto____1 = function(state_18781) {
                      while (true) {
                        var ret_value__6553__auto__ = function() {
                          try {
                            while (true) {
                              var result__6554__auto__ = switch__6551__auto__.call(null, state_18781);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__6554__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__6554__auto__;
                              }
                              break;
                            }
                          } catch (e18793) {
                            if (e18793 instanceof Object) {
                              var ex__6555__auto__ = e18793;
                              var statearr_18794_18947 = state_18781;
                              statearr_18794_18947[5] = ex__6555__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18781);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e18793;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6553__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__18948 = state_18781;
                          state_18781 = G__18948;
                          continue;
                        } else {
                          return ret_value__6553__auto__;
                        }
                        break;
                      }
                    };
                    state_machine__6552__auto__ = function(state_18781) {
                      switch(arguments.length) {
                        case 0:
                          return state_machine__6552__auto____0.call(this);
                        case 1:
                          return state_machine__6552__auto____1.call(this, state_18781);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6552__auto____0;
                    state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6552__auto____1;
                    return state_machine__6552__auto__;
                  }();
                }(__18937, switch__6551__auto__, c__6607__auto___18940, G__18768_18938, n__4716__auto___18936, jobs, results, process, async);
              }();
              var state__6609__auto__ = function() {
                var statearr_18795 = f__6608__auto__.call(null);
                statearr_18795[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6607__auto___18940;
                return statearr_18795;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6609__auto__);
            };
          }(__18937, c__6607__auto___18940, G__18768_18938, n__4716__auto___18936, jobs, results, process, async));
          break;
        case "compute":
          var c__6607__auto___18949 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__18937, c__6607__auto___18949, G__18768_18938, n__4716__auto___18936, jobs, results, process, async) {
            return function() {
              var f__6608__auto__ = function() {
                var switch__6551__auto__ = function(__18937, c__6607__auto___18949, G__18768_18938, n__4716__auto___18936, jobs, results, process, async) {
                  return function(state_18808) {
                    var state_val_18809 = state_18808[1];
                    if (state_val_18809 === 7) {
                      var inst_18804 = state_18808[2];
                      var state_18808__$1 = state_18808;
                      var statearr_18810_18950 = state_18808__$1;
                      statearr_18810_18950[2] = inst_18804;
                      statearr_18810_18950[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18809 === 6) {
                        var state_18808__$1 = state_18808;
                        var statearr_18811_18951 = state_18808__$1;
                        statearr_18811_18951[2] = null;
                        statearr_18811_18951[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18809 === 5) {
                          var state_18808__$1 = state_18808;
                          var statearr_18812_18952 = state_18808__$1;
                          statearr_18812_18952[2] = null;
                          statearr_18812_18952[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_18809 === 4) {
                            var inst_18798 = state_18808[2];
                            var inst_18799 = process.call(null, inst_18798);
                            var state_18808__$1 = state_18808;
                            if (cljs.core.truth_(inst_18799)) {
                              var statearr_18813_18953 = state_18808__$1;
                              statearr_18813_18953[1] = 5;
                            } else {
                              var statearr_18814_18954 = state_18808__$1;
                              statearr_18814_18954[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_18809 === 3) {
                              var inst_18806 = state_18808[2];
                              var state_18808__$1 = state_18808;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18808__$1, inst_18806);
                            } else {
                              if (state_val_18809 === 2) {
                                var state_18808__$1 = state_18808;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18808__$1, 4, jobs);
                              } else {
                                if (state_val_18809 === 1) {
                                  var state_18808__$1 = state_18808;
                                  var statearr_18815_18955 = state_18808__$1;
                                  statearr_18815_18955[2] = null;
                                  statearr_18815_18955[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__18937, c__6607__auto___18949, G__18768_18938, n__4716__auto___18936, jobs, results, process, async);
                return function(__18937, switch__6551__auto__, c__6607__auto___18949, G__18768_18938, n__4716__auto___18936, jobs, results, process, async) {
                  return function() {
                    var state_machine__6552__auto__ = null;
                    var state_machine__6552__auto____0 = function() {
                      var statearr_18819 = [null, null, null, null, null, null, null];
                      statearr_18819[0] = state_machine__6552__auto__;
                      statearr_18819[1] = 1;
                      return statearr_18819;
                    };
                    var state_machine__6552__auto____1 = function(state_18808) {
                      while (true) {
                        var ret_value__6553__auto__ = function() {
                          try {
                            while (true) {
                              var result__6554__auto__ = switch__6551__auto__.call(null, state_18808);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__6554__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__6554__auto__;
                              }
                              break;
                            }
                          } catch (e18820) {
                            if (e18820 instanceof Object) {
                              var ex__6555__auto__ = e18820;
                              var statearr_18821_18956 = state_18808;
                              statearr_18821_18956[5] = ex__6555__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18808);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e18820;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6553__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__18957 = state_18808;
                          state_18808 = G__18957;
                          continue;
                        } else {
                          return ret_value__6553__auto__;
                        }
                        break;
                      }
                    };
                    state_machine__6552__auto__ = function(state_18808) {
                      switch(arguments.length) {
                        case 0:
                          return state_machine__6552__auto____0.call(this);
                        case 1:
                          return state_machine__6552__auto____1.call(this, state_18808);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6552__auto____0;
                    state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6552__auto____1;
                    return state_machine__6552__auto__;
                  }();
                }(__18937, switch__6551__auto__, c__6607__auto___18949, G__18768_18938, n__4716__auto___18936, jobs, results, process, async);
              }();
              var state__6609__auto__ = function() {
                var statearr_18822 = f__6608__auto__.call(null);
                statearr_18822[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6607__auto___18949;
                return statearr_18822;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6609__auto__);
            };
          }(__18937, c__6607__auto___18949, G__18768_18938, n__4716__auto___18936, jobs, results, process, async));
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(type)].join(""));;
      }
      var G__18958 = __18937 + 1;
      __18937 = G__18958;
      continue;
    } else {
    }
    break;
  }
  var c__6607__auto___18959 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6607__auto___18959, jobs, results, process, async) {
    return function() {
      var f__6608__auto__ = function() {
        var switch__6551__auto__ = function(c__6607__auto___18959, jobs, results, process, async) {
          return function(state_18844) {
            var state_val_18845 = state_18844[1];
            if (state_val_18845 === 9) {
              var inst_18837 = state_18844[2];
              var state_18844__$1 = function() {
                var statearr_18846 = state_18844;
                statearr_18846[7] = inst_18837;
                return statearr_18846;
              }();
              var statearr_18847_18960 = state_18844__$1;
              statearr_18847_18960[2] = null;
              statearr_18847_18960[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_18845 === 8) {
                var inst_18830 = state_18844[8];
                var inst_18835 = state_18844[2];
                var state_18844__$1 = function() {
                  var statearr_18848 = state_18844;
                  statearr_18848[9] = inst_18835;
                  return statearr_18848;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18844__$1, 9, results, inst_18830);
              } else {
                if (state_val_18845 === 7) {
                  var inst_18840 = state_18844[2];
                  var state_18844__$1 = state_18844;
                  var statearr_18849_18961 = state_18844__$1;
                  statearr_18849_18961[2] = inst_18840;
                  statearr_18849_18961[1] = 3;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18845 === 6) {
                    var inst_18830 = state_18844[8];
                    var inst_18825 = state_18844[10];
                    var inst_18830__$1 = cljs.core.async.chan.call(null, 1);
                    var inst_18831 = cljs.core.PersistentVector.EMPTY_NODE;
                    var inst_18832 = [inst_18825, inst_18830__$1];
                    var inst_18833 = new cljs.core.PersistentVector(null, 2, 5, inst_18831, inst_18832, null);
                    var state_18844__$1 = function() {
                      var statearr_18850 = state_18844;
                      statearr_18850[8] = inst_18830__$1;
                      return statearr_18850;
                    }();
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18844__$1, 8, jobs, inst_18833);
                  } else {
                    if (state_val_18845 === 5) {
                      var inst_18828 = cljs.core.async.close_BANG_.call(null, jobs);
                      var state_18844__$1 = state_18844;
                      var statearr_18851_18962 = state_18844__$1;
                      statearr_18851_18962[2] = inst_18828;
                      statearr_18851_18962[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18845 === 4) {
                        var inst_18825 = state_18844[10];
                        var inst_18825__$1 = state_18844[2];
                        var inst_18826 = inst_18825__$1 == null;
                        var state_18844__$1 = function() {
                          var statearr_18852 = state_18844;
                          statearr_18852[10] = inst_18825__$1;
                          return statearr_18852;
                        }();
                        if (cljs.core.truth_(inst_18826)) {
                          var statearr_18853_18963 = state_18844__$1;
                          statearr_18853_18963[1] = 5;
                        } else {
                          var statearr_18854_18964 = state_18844__$1;
                          statearr_18854_18964[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18845 === 3) {
                          var inst_18842 = state_18844[2];
                          var state_18844__$1 = state_18844;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18844__$1, inst_18842);
                        } else {
                          if (state_val_18845 === 2) {
                            var state_18844__$1 = state_18844;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18844__$1, 4, from);
                          } else {
                            if (state_val_18845 === 1) {
                              var state_18844__$1 = state_18844;
                              var statearr_18855_18965 = state_18844__$1;
                              statearr_18855_18965[2] = null;
                              statearr_18855_18965[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6607__auto___18959, jobs, results, process, async);
        return function(switch__6551__auto__, c__6607__auto___18959, jobs, results, process, async) {
          return function() {
            var state_machine__6552__auto__ = null;
            var state_machine__6552__auto____0 = function() {
              var statearr_18859 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_18859[0] = state_machine__6552__auto__;
              statearr_18859[1] = 1;
              return statearr_18859;
            };
            var state_machine__6552__auto____1 = function(state_18844) {
              while (true) {
                var ret_value__6553__auto__ = function() {
                  try {
                    while (true) {
                      var result__6554__auto__ = switch__6551__auto__.call(null, state_18844);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6554__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6554__auto__;
                      }
                      break;
                    }
                  } catch (e18860) {
                    if (e18860 instanceof Object) {
                      var ex__6555__auto__ = e18860;
                      var statearr_18861_18966 = state_18844;
                      statearr_18861_18966[5] = ex__6555__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18844);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e18860;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6553__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__18967 = state_18844;
                  state_18844 = G__18967;
                  continue;
                } else {
                  return ret_value__6553__auto__;
                }
                break;
              }
            };
            state_machine__6552__auto__ = function(state_18844) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6552__auto____0.call(this);
                case 1:
                  return state_machine__6552__auto____1.call(this, state_18844);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6552__auto____0;
            state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6552__auto____1;
            return state_machine__6552__auto__;
          }();
        }(switch__6551__auto__, c__6607__auto___18959, jobs, results, process, async);
      }();
      var state__6609__auto__ = function() {
        var statearr_18862 = f__6608__auto__.call(null);
        statearr_18862[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6607__auto___18959;
        return statearr_18862;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6609__auto__);
    };
  }(c__6607__auto___18959, jobs, results, process, async));
  var c__6607__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6607__auto__, jobs, results, process, async) {
    return function() {
      var f__6608__auto__ = function() {
        var switch__6551__auto__ = function(c__6607__auto__, jobs, results, process, async) {
          return function(state_18900) {
            var state_val_18901 = state_18900[1];
            if (state_val_18901 === 7) {
              var inst_18896 = state_18900[2];
              var state_18900__$1 = state_18900;
              var statearr_18902_18968 = state_18900__$1;
              statearr_18902_18968[2] = inst_18896;
              statearr_18902_18968[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_18901 === 20) {
                var state_18900__$1 = state_18900;
                var statearr_18903_18969 = state_18900__$1;
                statearr_18903_18969[2] = null;
                statearr_18903_18969[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_18901 === 1) {
                  var state_18900__$1 = state_18900;
                  var statearr_18904_18970 = state_18900__$1;
                  statearr_18904_18970[2] = null;
                  statearr_18904_18970[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18901 === 4) {
                    var inst_18865 = state_18900[7];
                    var inst_18865__$1 = state_18900[2];
                    var inst_18866 = inst_18865__$1 == null;
                    var state_18900__$1 = function() {
                      var statearr_18905 = state_18900;
                      statearr_18905[7] = inst_18865__$1;
                      return statearr_18905;
                    }();
                    if (cljs.core.truth_(inst_18866)) {
                      var statearr_18906_18971 = state_18900__$1;
                      statearr_18906_18971[1] = 5;
                    } else {
                      var statearr_18907_18972 = state_18900__$1;
                      statearr_18907_18972[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18901 === 15) {
                      var inst_18878 = state_18900[8];
                      var state_18900__$1 = state_18900;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18900__$1, 18, to, inst_18878);
                    } else {
                      if (state_val_18901 === 21) {
                        var inst_18891 = state_18900[2];
                        var state_18900__$1 = state_18900;
                        var statearr_18908_18973 = state_18900__$1;
                        statearr_18908_18973[2] = inst_18891;
                        statearr_18908_18973[1] = 13;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_18901 === 13) {
                          var inst_18893 = state_18900[2];
                          var state_18900__$1 = function() {
                            var statearr_18909 = state_18900;
                            statearr_18909[9] = inst_18893;
                            return statearr_18909;
                          }();
                          var statearr_18910_18974 = state_18900__$1;
                          statearr_18910_18974[2] = null;
                          statearr_18910_18974[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_18901 === 6) {
                            var inst_18865 = state_18900[7];
                            var state_18900__$1 = state_18900;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18900__$1, 11, inst_18865);
                          } else {
                            if (state_val_18901 === 17) {
                              var inst_18886 = state_18900[2];
                              var state_18900__$1 = state_18900;
                              if (cljs.core.truth_(inst_18886)) {
                                var statearr_18911_18975 = state_18900__$1;
                                statearr_18911_18975[1] = 19;
                              } else {
                                var statearr_18912_18976 = state_18900__$1;
                                statearr_18912_18976[1] = 20;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_18901 === 3) {
                                var inst_18898 = state_18900[2];
                                var state_18900__$1 = state_18900;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18900__$1, inst_18898);
                              } else {
                                if (state_val_18901 === 12) {
                                  var inst_18875 = state_18900[10];
                                  var state_18900__$1 = state_18900;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18900__$1, 14, inst_18875);
                                } else {
                                  if (state_val_18901 === 2) {
                                    var state_18900__$1 = state_18900;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18900__$1, 4, results);
                                  } else {
                                    if (state_val_18901 === 19) {
                                      var state_18900__$1 = state_18900;
                                      var statearr_18913_18977 = state_18900__$1;
                                      statearr_18913_18977[2] = null;
                                      statearr_18913_18977[1] = 12;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_18901 === 11) {
                                        var inst_18875 = state_18900[2];
                                        var state_18900__$1 = function() {
                                          var statearr_18914 = state_18900;
                                          statearr_18914[10] = inst_18875;
                                          return statearr_18914;
                                        }();
                                        var statearr_18915_18978 = state_18900__$1;
                                        statearr_18915_18978[2] = null;
                                        statearr_18915_18978[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_18901 === 9) {
                                          var state_18900__$1 = state_18900;
                                          var statearr_18916_18979 = state_18900__$1;
                                          statearr_18916_18979[2] = null;
                                          statearr_18916_18979[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_18901 === 5) {
                                            var state_18900__$1 = state_18900;
                                            if (cljs.core.truth_(close_QMARK_)) {
                                              var statearr_18917_18980 = state_18900__$1;
                                              statearr_18917_18980[1] = 8;
                                            } else {
                                              var statearr_18918_18981 = state_18900__$1;
                                              statearr_18918_18981[1] = 9;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_18901 === 14) {
                                              var inst_18878 = state_18900[8];
                                              var inst_18880 = state_18900[11];
                                              var inst_18878__$1 = state_18900[2];
                                              var inst_18879 = inst_18878__$1 == null;
                                              var inst_18880__$1 = cljs.core.not.call(null, inst_18879);
                                              var state_18900__$1 = function() {
                                                var statearr_18919 = state_18900;
                                                statearr_18919[8] = inst_18878__$1;
                                                statearr_18919[11] = inst_18880__$1;
                                                return statearr_18919;
                                              }();
                                              if (inst_18880__$1) {
                                                var statearr_18920_18982 = state_18900__$1;
                                                statearr_18920_18982[1] = 15;
                                              } else {
                                                var statearr_18921_18983 = state_18900__$1;
                                                statearr_18921_18983[1] = 16;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_18901 === 16) {
                                                var inst_18880 = state_18900[11];
                                                var state_18900__$1 = state_18900;
                                                var statearr_18922_18984 = state_18900__$1;
                                                statearr_18922_18984[2] = inst_18880;
                                                statearr_18922_18984[1] = 17;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_18901 === 10) {
                                                  var inst_18872 = state_18900[2];
                                                  var state_18900__$1 = state_18900;
                                                  var statearr_18923_18985 = state_18900__$1;
                                                  statearr_18923_18985[2] = inst_18872;
                                                  statearr_18923_18985[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_18901 === 18) {
                                                    var inst_18883 = state_18900[2];
                                                    var state_18900__$1 = state_18900;
                                                    var statearr_18924_18986 = state_18900__$1;
                                                    statearr_18924_18986[2] = inst_18883;
                                                    statearr_18924_18986[1] = 17;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_18901 === 8) {
                                                      var inst_18869 = cljs.core.async.close_BANG_.call(null, to);
                                                      var state_18900__$1 = state_18900;
                                                      var statearr_18925_18987 = state_18900__$1;
                                                      statearr_18925_18987[2] = inst_18869;
                                                      statearr_18925_18987[1] = 10;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6607__auto__, jobs, results, process, async);
        return function(switch__6551__auto__, c__6607__auto__, jobs, results, process, async) {
          return function() {
            var state_machine__6552__auto__ = null;
            var state_machine__6552__auto____0 = function() {
              var statearr_18929 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_18929[0] = state_machine__6552__auto__;
              statearr_18929[1] = 1;
              return statearr_18929;
            };
            var state_machine__6552__auto____1 = function(state_18900) {
              while (true) {
                var ret_value__6553__auto__ = function() {
                  try {
                    while (true) {
                      var result__6554__auto__ = switch__6551__auto__.call(null, state_18900);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6554__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6554__auto__;
                      }
                      break;
                    }
                  } catch (e18930) {
                    if (e18930 instanceof Object) {
                      var ex__6555__auto__ = e18930;
                      var statearr_18931_18988 = state_18900;
                      statearr_18931_18988[5] = ex__6555__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18900);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e18930;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6553__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__18989 = state_18900;
                  state_18900 = G__18989;
                  continue;
                } else {
                  return ret_value__6553__auto__;
                }
                break;
              }
            };
            state_machine__6552__auto__ = function(state_18900) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6552__auto____0.call(this);
                case 1:
                  return state_machine__6552__auto____1.call(this, state_18900);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6552__auto____0;
            state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6552__auto____1;
            return state_machine__6552__auto__;
          }();
        }(switch__6551__auto__, c__6607__auto__, jobs, results, process, async);
      }();
      var state__6609__auto__ = function() {
        var statearr_18932 = f__6608__auto__.call(null);
        statearr_18932[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6607__auto__;
        return statearr_18932;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6609__auto__);
    };
  }(c__6607__auto__, jobs, results, process, async));
  return c__6607__auto__;
};
cljs.core.async.pipeline_async = function() {
  var pipeline_async = null;
  var pipeline_async__4 = function(n, to, af, from) {
    return pipeline_async.call(null, n, to, af, from, true);
  };
  var pipeline_async__5 = function(n, to, af, from, close_QMARK_) {
    return cljs.core.async.pipeline_STAR_.call(null, n, to, af, from, close_QMARK_, null, new cljs.core.Keyword(null, "async", "async", 1050769601));
  };
  pipeline_async = function(n, to, af, from, close_QMARK_) {
    switch(arguments.length) {
      case 4:
        return pipeline_async__4.call(this, n, to, af, from);
      case 5:
        return pipeline_async__5.call(this, n, to, af, from, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipeline_async.cljs$core$IFn$_invoke$arity$4 = pipeline_async__4;
  pipeline_async.cljs$core$IFn$_invoke$arity$5 = pipeline_async__5;
  return pipeline_async;
}();
cljs.core.async.pipeline = function() {
  var pipeline = null;
  var pipeline__4 = function(n, to, xf, from) {
    return pipeline.call(null, n, to, xf, from, true);
  };
  var pipeline__5 = function(n, to, xf, from, close_QMARK_) {
    return pipeline.call(null, n, to, xf, from, close_QMARK_, null);
  };
  var pipeline__6 = function(n, to, xf, from, close_QMARK_, ex_handler) {
    return cljs.core.async.pipeline_STAR_.call(null, n, to, xf, from, close_QMARK_, ex_handler, new cljs.core.Keyword(null, "compute", "compute", 1555393130));
  };
  pipeline = function(n, to, xf, from, close_QMARK_, ex_handler) {
    switch(arguments.length) {
      case 4:
        return pipeline__4.call(this, n, to, xf, from);
      case 5:
        return pipeline__5.call(this, n, to, xf, from, close_QMARK_);
      case 6:
        return pipeline__6.call(this, n, to, xf, from, close_QMARK_, ex_handler);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipeline.cljs$core$IFn$_invoke$arity$4 = pipeline__4;
  pipeline.cljs$core$IFn$_invoke$arity$5 = pipeline__5;
  pipeline.cljs$core$IFn$_invoke$arity$6 = pipeline__6;
  return pipeline;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__6607__auto___19090 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6607__auto___19090, tc, fc) {
      return function() {
        var f__6608__auto__ = function() {
          var switch__6551__auto__ = function(c__6607__auto___19090, tc, fc) {
            return function(state_19065) {
              var state_val_19066 = state_19065[1];
              if (state_val_19066 === 7) {
                var inst_19061 = state_19065[2];
                var state_19065__$1 = state_19065;
                var statearr_19067_19091 = state_19065__$1;
                statearr_19067_19091[2] = inst_19061;
                statearr_19067_19091[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19066 === 1) {
                  var state_19065__$1 = state_19065;
                  var statearr_19068_19092 = state_19065__$1;
                  statearr_19068_19092[2] = null;
                  statearr_19068_19092[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19066 === 4) {
                    var inst_19042 = state_19065[7];
                    var inst_19042__$1 = state_19065[2];
                    var inst_19043 = inst_19042__$1 == null;
                    var state_19065__$1 = function() {
                      var statearr_19069 = state_19065;
                      statearr_19069[7] = inst_19042__$1;
                      return statearr_19069;
                    }();
                    if (cljs.core.truth_(inst_19043)) {
                      var statearr_19070_19093 = state_19065__$1;
                      statearr_19070_19093[1] = 5;
                    } else {
                      var statearr_19071_19094 = state_19065__$1;
                      statearr_19071_19094[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19066 === 13) {
                      var state_19065__$1 = state_19065;
                      var statearr_19072_19095 = state_19065__$1;
                      statearr_19072_19095[2] = null;
                      statearr_19072_19095[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19066 === 6) {
                        var inst_19042 = state_19065[7];
                        var inst_19048 = p.call(null, inst_19042);
                        var state_19065__$1 = state_19065;
                        if (cljs.core.truth_(inst_19048)) {
                          var statearr_19073_19096 = state_19065__$1;
                          statearr_19073_19096[1] = 9;
                        } else {
                          var statearr_19074_19097 = state_19065__$1;
                          statearr_19074_19097[1] = 10;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_19066 === 3) {
                          var inst_19063 = state_19065[2];
                          var state_19065__$1 = state_19065;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19065__$1, inst_19063);
                        } else {
                          if (state_val_19066 === 12) {
                            var state_19065__$1 = state_19065;
                            var statearr_19075_19098 = state_19065__$1;
                            statearr_19075_19098[2] = null;
                            statearr_19075_19098[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19066 === 2) {
                              var state_19065__$1 = state_19065;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19065__$1, 4, ch);
                            } else {
                              if (state_val_19066 === 11) {
                                var inst_19042 = state_19065[7];
                                var inst_19052 = state_19065[2];
                                var state_19065__$1 = state_19065;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19065__$1, 8, inst_19052, inst_19042);
                              } else {
                                if (state_val_19066 === 9) {
                                  var state_19065__$1 = state_19065;
                                  var statearr_19076_19099 = state_19065__$1;
                                  statearr_19076_19099[2] = tc;
                                  statearr_19076_19099[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19066 === 5) {
                                    var inst_19045 = cljs.core.async.close_BANG_.call(null, tc);
                                    var inst_19046 = cljs.core.async.close_BANG_.call(null, fc);
                                    var state_19065__$1 = function() {
                                      var statearr_19077 = state_19065;
                                      statearr_19077[8] = inst_19045;
                                      return statearr_19077;
                                    }();
                                    var statearr_19078_19100 = state_19065__$1;
                                    statearr_19078_19100[2] = inst_19046;
                                    statearr_19078_19100[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_19066 === 14) {
                                      var inst_19059 = state_19065[2];
                                      var state_19065__$1 = state_19065;
                                      var statearr_19079_19101 = state_19065__$1;
                                      statearr_19079_19101[2] = inst_19059;
                                      statearr_19079_19101[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_19066 === 10) {
                                        var state_19065__$1 = state_19065;
                                        var statearr_19080_19102 = state_19065__$1;
                                        statearr_19080_19102[2] = fc;
                                        statearr_19080_19102[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_19066 === 8) {
                                          var inst_19054 = state_19065[2];
                                          var state_19065__$1 = state_19065;
                                          if (cljs.core.truth_(inst_19054)) {
                                            var statearr_19081_19103 = state_19065__$1;
                                            statearr_19081_19103[1] = 12;
                                          } else {
                                            var statearr_19082_19104 = state_19065__$1;
                                            statearr_19082_19104[1] = 13;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6607__auto___19090, tc, fc);
          return function(switch__6551__auto__, c__6607__auto___19090, tc, fc) {
            return function() {
              var state_machine__6552__auto__ = null;
              var state_machine__6552__auto____0 = function() {
                var statearr_19086 = [null, null, null, null, null, null, null, null, null];
                statearr_19086[0] = state_machine__6552__auto__;
                statearr_19086[1] = 1;
                return statearr_19086;
              };
              var state_machine__6552__auto____1 = function(state_19065) {
                while (true) {
                  var ret_value__6553__auto__ = function() {
                    try {
                      while (true) {
                        var result__6554__auto__ = switch__6551__auto__.call(null, state_19065);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6554__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6554__auto__;
                        }
                        break;
                      }
                    } catch (e19087) {
                      if (e19087 instanceof Object) {
                        var ex__6555__auto__ = e19087;
                        var statearr_19088_19105 = state_19065;
                        statearr_19088_19105[5] = ex__6555__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19065);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e19087;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6553__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19106 = state_19065;
                    state_19065 = G__19106;
                    continue;
                  } else {
                    return ret_value__6553__auto__;
                  }
                  break;
                }
              };
              state_machine__6552__auto__ = function(state_19065) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6552__auto____0.call(this);
                  case 1:
                    return state_machine__6552__auto____1.call(this, state_19065);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6552__auto____0;
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6552__auto____1;
              return state_machine__6552__auto__;
            }();
          }(switch__6551__auto__, c__6607__auto___19090, tc, fc);
        }();
        var state__6609__auto__ = function() {
          var statearr_19089 = f__6608__auto__.call(null);
          statearr_19089[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6607__auto___19090;
          return statearr_19089;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6609__auto__);
      };
    }(c__6607__auto___19090, tc, fc));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__6607__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6607__auto__) {
    return function() {
      var f__6608__auto__ = function() {
        var switch__6551__auto__ = function(c__6607__auto__) {
          return function(state_19153) {
            var state_val_19154 = state_19153[1];
            if (state_val_19154 === 7) {
              var inst_19149 = state_19153[2];
              var state_19153__$1 = state_19153;
              var statearr_19155_19171 = state_19153__$1;
              statearr_19155_19171[2] = inst_19149;
              statearr_19155_19171[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_19154 === 6) {
                var inst_19139 = state_19153[7];
                var inst_19142 = state_19153[8];
                var inst_19146 = f.call(null, inst_19139, inst_19142);
                var inst_19139__$1 = inst_19146;
                var state_19153__$1 = function() {
                  var statearr_19156 = state_19153;
                  statearr_19156[7] = inst_19139__$1;
                  return statearr_19156;
                }();
                var statearr_19157_19172 = state_19153__$1;
                statearr_19157_19172[2] = null;
                statearr_19157_19172[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19154 === 5) {
                  var inst_19139 = state_19153[7];
                  var state_19153__$1 = state_19153;
                  var statearr_19158_19173 = state_19153__$1;
                  statearr_19158_19173[2] = inst_19139;
                  statearr_19158_19173[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19154 === 4) {
                    var inst_19142 = state_19153[8];
                    var inst_19142__$1 = state_19153[2];
                    var inst_19143 = inst_19142__$1 == null;
                    var state_19153__$1 = function() {
                      var statearr_19159 = state_19153;
                      statearr_19159[8] = inst_19142__$1;
                      return statearr_19159;
                    }();
                    if (cljs.core.truth_(inst_19143)) {
                      var statearr_19160_19174 = state_19153__$1;
                      statearr_19160_19174[1] = 5;
                    } else {
                      var statearr_19161_19175 = state_19153__$1;
                      statearr_19161_19175[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19154 === 3) {
                      var inst_19151 = state_19153[2];
                      var state_19153__$1 = state_19153;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19153__$1, inst_19151);
                    } else {
                      if (state_val_19154 === 2) {
                        var state_19153__$1 = state_19153;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19153__$1, 4, ch);
                      } else {
                        if (state_val_19154 === 1) {
                          var inst_19139 = init;
                          var state_19153__$1 = function() {
                            var statearr_19162 = state_19153;
                            statearr_19162[7] = inst_19139;
                            return statearr_19162;
                          }();
                          var statearr_19163_19176 = state_19153__$1;
                          statearr_19163_19176[2] = null;
                          statearr_19163_19176[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6607__auto__);
        return function(switch__6551__auto__, c__6607__auto__) {
          return function() {
            var state_machine__6552__auto__ = null;
            var state_machine__6552__auto____0 = function() {
              var statearr_19167 = [null, null, null, null, null, null, null, null, null];
              statearr_19167[0] = state_machine__6552__auto__;
              statearr_19167[1] = 1;
              return statearr_19167;
            };
            var state_machine__6552__auto____1 = function(state_19153) {
              while (true) {
                var ret_value__6553__auto__ = function() {
                  try {
                    while (true) {
                      var result__6554__auto__ = switch__6551__auto__.call(null, state_19153);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6554__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6554__auto__;
                      }
                      break;
                    }
                  } catch (e19168) {
                    if (e19168 instanceof Object) {
                      var ex__6555__auto__ = e19168;
                      var statearr_19169_19177 = state_19153;
                      statearr_19169_19177[5] = ex__6555__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19153);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e19168;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6553__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__19178 = state_19153;
                  state_19153 = G__19178;
                  continue;
                } else {
                  return ret_value__6553__auto__;
                }
                break;
              }
            };
            state_machine__6552__auto__ = function(state_19153) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6552__auto____0.call(this);
                case 1:
                  return state_machine__6552__auto____1.call(this, state_19153);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6552__auto____0;
            state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6552__auto____1;
            return state_machine__6552__auto__;
          }();
        }(switch__6551__auto__, c__6607__auto__);
      }();
      var state__6609__auto__ = function() {
        var statearr_19170 = f__6608__auto__.call(null);
        statearr_19170[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6607__auto__;
        return statearr_19170;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6609__auto__);
    };
  }(c__6607__auto__));
  return c__6607__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__6607__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6607__auto__) {
      return function() {
        var f__6608__auto__ = function() {
          var switch__6551__auto__ = function(c__6607__auto__) {
            return function(state_19252) {
              var state_val_19253 = state_19252[1];
              if (state_val_19253 === 7) {
                var inst_19234 = state_19252[2];
                var state_19252__$1 = state_19252;
                var statearr_19254_19277 = state_19252__$1;
                statearr_19254_19277[2] = inst_19234;
                statearr_19254_19277[1] = 6;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19253 === 1) {
                  var inst_19228 = cljs.core.seq.call(null, coll);
                  var inst_19229 = inst_19228;
                  var state_19252__$1 = function() {
                    var statearr_19255 = state_19252;
                    statearr_19255[7] = inst_19229;
                    return statearr_19255;
                  }();
                  var statearr_19256_19278 = state_19252__$1;
                  statearr_19256_19278[2] = null;
                  statearr_19256_19278[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19253 === 4) {
                    var inst_19229 = state_19252[7];
                    var inst_19232 = cljs.core.first.call(null, inst_19229);
                    var state_19252__$1 = state_19252;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19252__$1, 7, ch, inst_19232);
                  } else {
                    if (state_val_19253 === 13) {
                      var inst_19246 = state_19252[2];
                      var state_19252__$1 = state_19252;
                      var statearr_19257_19279 = state_19252__$1;
                      statearr_19257_19279[2] = inst_19246;
                      statearr_19257_19279[1] = 10;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19253 === 6) {
                        var inst_19237 = state_19252[2];
                        var state_19252__$1 = state_19252;
                        if (cljs.core.truth_(inst_19237)) {
                          var statearr_19258_19280 = state_19252__$1;
                          statearr_19258_19280[1] = 8;
                        } else {
                          var statearr_19259_19281 = state_19252__$1;
                          statearr_19259_19281[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_19253 === 3) {
                          var inst_19250 = state_19252[2];
                          var state_19252__$1 = state_19252;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19252__$1, inst_19250);
                        } else {
                          if (state_val_19253 === 12) {
                            var state_19252__$1 = state_19252;
                            var statearr_19260_19282 = state_19252__$1;
                            statearr_19260_19282[2] = null;
                            statearr_19260_19282[1] = 13;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19253 === 2) {
                              var inst_19229 = state_19252[7];
                              var state_19252__$1 = state_19252;
                              if (cljs.core.truth_(inst_19229)) {
                                var statearr_19261_19283 = state_19252__$1;
                                statearr_19261_19283[1] = 4;
                              } else {
                                var statearr_19262_19284 = state_19252__$1;
                                statearr_19262_19284[1] = 5;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_19253 === 11) {
                                var inst_19243 = cljs.core.async.close_BANG_.call(null, ch);
                                var state_19252__$1 = state_19252;
                                var statearr_19263_19285 = state_19252__$1;
                                statearr_19263_19285[2] = inst_19243;
                                statearr_19263_19285[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19253 === 9) {
                                  var state_19252__$1 = state_19252;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_19264_19286 = state_19252__$1;
                                    statearr_19264_19286[1] = 11;
                                  } else {
                                    var statearr_19265_19287 = state_19252__$1;
                                    statearr_19265_19287[1] = 12;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19253 === 5) {
                                    var inst_19229 = state_19252[7];
                                    var state_19252__$1 = state_19252;
                                    var statearr_19266_19288 = state_19252__$1;
                                    statearr_19266_19288[2] = inst_19229;
                                    statearr_19266_19288[1] = 6;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_19253 === 10) {
                                      var inst_19248 = state_19252[2];
                                      var state_19252__$1 = state_19252;
                                      var statearr_19267_19289 = state_19252__$1;
                                      statearr_19267_19289[2] = inst_19248;
                                      statearr_19267_19289[1] = 3;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_19253 === 8) {
                                        var inst_19229 = state_19252[7];
                                        var inst_19239 = cljs.core.next.call(null, inst_19229);
                                        var inst_19229__$1 = inst_19239;
                                        var state_19252__$1 = function() {
                                          var statearr_19268 = state_19252;
                                          statearr_19268[7] = inst_19229__$1;
                                          return statearr_19268;
                                        }();
                                        var statearr_19269_19290 = state_19252__$1;
                                        statearr_19269_19290[2] = null;
                                        statearr_19269_19290[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6607__auto__);
          return function(switch__6551__auto__, c__6607__auto__) {
            return function() {
              var state_machine__6552__auto__ = null;
              var state_machine__6552__auto____0 = function() {
                var statearr_19273 = [null, null, null, null, null, null, null, null];
                statearr_19273[0] = state_machine__6552__auto__;
                statearr_19273[1] = 1;
                return statearr_19273;
              };
              var state_machine__6552__auto____1 = function(state_19252) {
                while (true) {
                  var ret_value__6553__auto__ = function() {
                    try {
                      while (true) {
                        var result__6554__auto__ = switch__6551__auto__.call(null, state_19252);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6554__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6554__auto__;
                        }
                        break;
                      }
                    } catch (e19274) {
                      if (e19274 instanceof Object) {
                        var ex__6555__auto__ = e19274;
                        var statearr_19275_19291 = state_19252;
                        statearr_19275_19291[5] = ex__6555__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19252);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e19274;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6553__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__19292 = state_19252;
                    state_19252 = G__19292;
                    continue;
                  } else {
                    return ret_value__6553__auto__;
                  }
                  break;
                }
              };
              state_machine__6552__auto__ = function(state_19252) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6552__auto____0.call(this);
                  case 1:
                    return state_machine__6552__auto____1.call(this, state_19252);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6552__auto____0;
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6552__auto____1;
              return state_machine__6552__auto__;
            }();
          }(switch__6551__auto__, c__6607__auto__);
        }();
        var state__6609__auto__ = function() {
          var statearr_19276 = f__6608__auto__.call(null);
          statearr_19276[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6607__auto__;
          return statearr_19276;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6609__auto__);
      };
    }(c__6607__auto__));
    return c__6607__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj19294 = {};
  return obj19294;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3817__auto__ = _;
    if (and__3817__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4473__auto__ = _ == null ? null : _;
    return function() {
      var or__3829__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj19296 = {};
  return obj19296;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3817__auto__ = m;
    if (and__3817__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4473__auto__ = m == null ? null : m;
    return function() {
      var or__3829__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3817__auto__ = m;
    if (and__3817__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4473__auto__ = m == null ? null : m;
    return function() {
      var or__3829__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3817__auto__ = m;
    if (and__3817__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4473__auto__ = m == null ? null : m;
    return function() {
      var or__3829__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t19518 !== "undefined") {
    } else {
      cljs.core.async.t19518 = function(cs, ch, mult, meta19519) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta19519 = meta19519;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t19518.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t19518.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$1, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$1, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t19518.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$1) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$1);
          return null;
        };
      }(cs);
      cljs.core.async.t19518.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t19518.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t19518.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t19518.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_19520) {
          var self__ = this;
          var _19520__$1 = this;
          return self__.meta19519;
        };
      }(cs);
      cljs.core.async.t19518.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_19520, meta19519__$1) {
          var self__ = this;
          var _19520__$1 = this;
          return new cljs.core.async.t19518(self__.cs, self__.ch, self__.mult, meta19519__$1);
        };
      }(cs);
      cljs.core.async.t19518.cljs$lang$type = true;
      cljs.core.async.t19518.cljs$lang$ctorStr = "cljs.core.async/t19518";
      cljs.core.async.t19518.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
          return cljs.core._write.call(null, writer__4417__auto__, "cljs.core.async/t19518");
        };
      }(cs);
      cljs.core.async.__GT_t19518 = function(cs) {
        return function __GT_t19518(cs__$1, ch__$1, mult__$1, meta19519) {
          return new cljs.core.async.t19518(cs__$1, ch__$1, mult__$1, meta19519);
        };
      }(cs);
    }
    return new cljs.core.async.t19518(cs, ch, mult, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__6607__auto___19739 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6607__auto___19739, cs, m, dchan, dctr, done) {
    return function() {
      var f__6608__auto__ = function() {
        var switch__6551__auto__ = function(c__6607__auto___19739, cs, m, dchan, dctr, done) {
          return function(state_19651) {
            var state_val_19652 = state_19651[1];
            if (state_val_19652 === 7) {
              var inst_19647 = state_19651[2];
              var state_19651__$1 = state_19651;
              var statearr_19653_19740 = state_19651__$1;
              statearr_19653_19740[2] = inst_19647;
              statearr_19653_19740[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_19652 === 20) {
                var inst_19552 = state_19651[7];
                var inst_19562 = cljs.core.first.call(null, inst_19552);
                var inst_19563 = cljs.core.nth.call(null, inst_19562, 0, null);
                var inst_19564 = cljs.core.nth.call(null, inst_19562, 1, null);
                var state_19651__$1 = function() {
                  var statearr_19654 = state_19651;
                  statearr_19654[8] = inst_19563;
                  return statearr_19654;
                }();
                if (cljs.core.truth_(inst_19564)) {
                  var statearr_19655_19741 = state_19651__$1;
                  statearr_19655_19741[1] = 22;
                } else {
                  var statearr_19656_19742 = state_19651__$1;
                  statearr_19656_19742[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19652 === 27) {
                  var inst_19523 = state_19651[9];
                  var inst_19599 = state_19651[10];
                  var inst_19592 = state_19651[11];
                  var inst_19594 = state_19651[12];
                  var inst_19599__$1 = cljs.core._nth.call(null, inst_19592, inst_19594);
                  var inst_19600 = cljs.core.async.put_BANG_.call(null, inst_19599__$1, inst_19523, done);
                  var state_19651__$1 = function() {
                    var statearr_19657 = state_19651;
                    statearr_19657[10] = inst_19599__$1;
                    return statearr_19657;
                  }();
                  if (cljs.core.truth_(inst_19600)) {
                    var statearr_19658_19743 = state_19651__$1;
                    statearr_19658_19743[1] = 30;
                  } else {
                    var statearr_19659_19744 = state_19651__$1;
                    statearr_19659_19744[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19652 === 1) {
                    var state_19651__$1 = state_19651;
                    var statearr_19660_19745 = state_19651__$1;
                    statearr_19660_19745[2] = null;
                    statearr_19660_19745[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19652 === 24) {
                      var inst_19552 = state_19651[7];
                      var inst_19569 = state_19651[2];
                      var inst_19570 = cljs.core.next.call(null, inst_19552);
                      var inst_19532 = inst_19570;
                      var inst_19533 = null;
                      var inst_19534 = 0;
                      var inst_19535 = 0;
                      var state_19651__$1 = function() {
                        var statearr_19661 = state_19651;
                        statearr_19661[13] = inst_19534;
                        statearr_19661[14] = inst_19533;
                        statearr_19661[15] = inst_19532;
                        statearr_19661[16] = inst_19535;
                        statearr_19661[17] = inst_19569;
                        return statearr_19661;
                      }();
                      var statearr_19662_19746 = state_19651__$1;
                      statearr_19662_19746[2] = null;
                      statearr_19662_19746[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19652 === 39) {
                        var state_19651__$1 = state_19651;
                        var statearr_19666_19747 = state_19651__$1;
                        statearr_19666_19747[2] = null;
                        statearr_19666_19747[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_19652 === 4) {
                          var inst_19523 = state_19651[9];
                          var inst_19523__$1 = state_19651[2];
                          var inst_19524 = inst_19523__$1 == null;
                          var state_19651__$1 = function() {
                            var statearr_19667 = state_19651;
                            statearr_19667[9] = inst_19523__$1;
                            return statearr_19667;
                          }();
                          if (cljs.core.truth_(inst_19524)) {
                            var statearr_19668_19748 = state_19651__$1;
                            statearr_19668_19748[1] = 5;
                          } else {
                            var statearr_19669_19749 = state_19651__$1;
                            statearr_19669_19749[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19652 === 15) {
                            var inst_19534 = state_19651[13];
                            var inst_19533 = state_19651[14];
                            var inst_19532 = state_19651[15];
                            var inst_19535 = state_19651[16];
                            var inst_19548 = state_19651[2];
                            var inst_19549 = inst_19535 + 1;
                            var tmp19663 = inst_19534;
                            var tmp19664 = inst_19533;
                            var tmp19665 = inst_19532;
                            var inst_19532__$1 = tmp19665;
                            var inst_19533__$1 = tmp19664;
                            var inst_19534__$1 = tmp19663;
                            var inst_19535__$1 = inst_19549;
                            var state_19651__$1 = function() {
                              var statearr_19670 = state_19651;
                              statearr_19670[13] = inst_19534__$1;
                              statearr_19670[18] = inst_19548;
                              statearr_19670[14] = inst_19533__$1;
                              statearr_19670[15] = inst_19532__$1;
                              statearr_19670[16] = inst_19535__$1;
                              return statearr_19670;
                            }();
                            var statearr_19671_19750 = state_19651__$1;
                            statearr_19671_19750[2] = null;
                            statearr_19671_19750[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19652 === 21) {
                              var inst_19573 = state_19651[2];
                              var state_19651__$1 = state_19651;
                              var statearr_19675_19751 = state_19651__$1;
                              statearr_19675_19751[2] = inst_19573;
                              statearr_19675_19751[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_19652 === 31) {
                                var inst_19599 = state_19651[10];
                                var inst_19603 = done.call(null, null);
                                var inst_19604 = cljs.core.async.untap_STAR_.call(null, m, inst_19599);
                                var state_19651__$1 = function() {
                                  var statearr_19676 = state_19651;
                                  statearr_19676[19] = inst_19603;
                                  return statearr_19676;
                                }();
                                var statearr_19677_19752 = state_19651__$1;
                                statearr_19677_19752[2] = inst_19604;
                                statearr_19677_19752[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19652 === 32) {
                                  var inst_19591 = state_19651[20];
                                  var inst_19592 = state_19651[11];
                                  var inst_19594 = state_19651[12];
                                  var inst_19593 = state_19651[21];
                                  var inst_19606 = state_19651[2];
                                  var inst_19607 = inst_19594 + 1;
                                  var tmp19672 = inst_19591;
                                  var tmp19673 = inst_19592;
                                  var tmp19674 = inst_19593;
                                  var inst_19591__$1 = tmp19672;
                                  var inst_19592__$1 = tmp19673;
                                  var inst_19593__$1 = tmp19674;
                                  var inst_19594__$1 = inst_19607;
                                  var state_19651__$1 = function() {
                                    var statearr_19678 = state_19651;
                                    statearr_19678[20] = inst_19591__$1;
                                    statearr_19678[22] = inst_19606;
                                    statearr_19678[11] = inst_19592__$1;
                                    statearr_19678[12] = inst_19594__$1;
                                    statearr_19678[21] = inst_19593__$1;
                                    return statearr_19678;
                                  }();
                                  var statearr_19679_19753 = state_19651__$1;
                                  statearr_19679_19753[2] = null;
                                  statearr_19679_19753[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19652 === 40) {
                                    var inst_19619 = state_19651[23];
                                    var inst_19623 = done.call(null, null);
                                    var inst_19624 = cljs.core.async.untap_STAR_.call(null, m, inst_19619);
                                    var state_19651__$1 = function() {
                                      var statearr_19680 = state_19651;
                                      statearr_19680[24] = inst_19623;
                                      return statearr_19680;
                                    }();
                                    var statearr_19681_19754 = state_19651__$1;
                                    statearr_19681_19754[2] = inst_19624;
                                    statearr_19681_19754[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_19652 === 33) {
                                      var inst_19610 = state_19651[25];
                                      var inst_19612 = cljs.core.chunked_seq_QMARK_.call(null, inst_19610);
                                      var state_19651__$1 = state_19651;
                                      if (inst_19612) {
                                        var statearr_19682_19755 = state_19651__$1;
                                        statearr_19682_19755[1] = 36;
                                      } else {
                                        var statearr_19683_19756 = state_19651__$1;
                                        statearr_19683_19756[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_19652 === 13) {
                                        var inst_19542 = state_19651[26];
                                        var inst_19545 = cljs.core.async.close_BANG_.call(null, inst_19542);
                                        var state_19651__$1 = state_19651;
                                        var statearr_19684_19757 = state_19651__$1;
                                        statearr_19684_19757[2] = inst_19545;
                                        statearr_19684_19757[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_19652 === 22) {
                                          var inst_19563 = state_19651[8];
                                          var inst_19566 = cljs.core.async.close_BANG_.call(null, inst_19563);
                                          var state_19651__$1 = state_19651;
                                          var statearr_19685_19758 = state_19651__$1;
                                          statearr_19685_19758[2] = inst_19566;
                                          statearr_19685_19758[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_19652 === 36) {
                                            var inst_19610 = state_19651[25];
                                            var inst_19614 = cljs.core.chunk_first.call(null, inst_19610);
                                            var inst_19615 = cljs.core.chunk_rest.call(null, inst_19610);
                                            var inst_19616 = cljs.core.count.call(null, inst_19614);
                                            var inst_19591 = inst_19615;
                                            var inst_19592 = inst_19614;
                                            var inst_19593 = inst_19616;
                                            var inst_19594 = 0;
                                            var state_19651__$1 = function() {
                                              var statearr_19686 = state_19651;
                                              statearr_19686[20] = inst_19591;
                                              statearr_19686[11] = inst_19592;
                                              statearr_19686[12] = inst_19594;
                                              statearr_19686[21] = inst_19593;
                                              return statearr_19686;
                                            }();
                                            var statearr_19687_19759 = state_19651__$1;
                                            statearr_19687_19759[2] = null;
                                            statearr_19687_19759[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_19652 === 41) {
                                              var inst_19610 = state_19651[25];
                                              var inst_19626 = state_19651[2];
                                              var inst_19627 = cljs.core.next.call(null, inst_19610);
                                              var inst_19591 = inst_19627;
                                              var inst_19592 = null;
                                              var inst_19593 = 0;
                                              var inst_19594 = 0;
                                              var state_19651__$1 = function() {
                                                var statearr_19688 = state_19651;
                                                statearr_19688[27] = inst_19626;
                                                statearr_19688[20] = inst_19591;
                                                statearr_19688[11] = inst_19592;
                                                statearr_19688[12] = inst_19594;
                                                statearr_19688[21] = inst_19593;
                                                return statearr_19688;
                                              }();
                                              var statearr_19689_19760 = state_19651__$1;
                                              statearr_19689_19760[2] = null;
                                              statearr_19689_19760[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_19652 === 43) {
                                                var state_19651__$1 = state_19651;
                                                var statearr_19690_19761 = state_19651__$1;
                                                statearr_19690_19761[2] = null;
                                                statearr_19690_19761[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_19652 === 29) {
                                                  var inst_19635 = state_19651[2];
                                                  var state_19651__$1 = state_19651;
                                                  var statearr_19691_19762 = state_19651__$1;
                                                  statearr_19691_19762[2] = inst_19635;
                                                  statearr_19691_19762[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_19652 === 44) {
                                                    var inst_19644 = state_19651[2];
                                                    var state_19651__$1 = function() {
                                                      var statearr_19692 = state_19651;
                                                      statearr_19692[28] = inst_19644;
                                                      return statearr_19692;
                                                    }();
                                                    var statearr_19693_19763 = state_19651__$1;
                                                    statearr_19693_19763[2] = null;
                                                    statearr_19693_19763[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_19652 === 6) {
                                                      var inst_19583 = state_19651[29];
                                                      var inst_19582 = cljs.core.deref.call(null, cs);
                                                      var inst_19583__$1 = cljs.core.keys.call(null, inst_19582);
                                                      var inst_19584 = cljs.core.count.call(null, inst_19583__$1);
                                                      var inst_19585 = cljs.core.reset_BANG_.call(null, dctr, inst_19584);
                                                      var inst_19590 = cljs.core.seq.call(null, inst_19583__$1);
                                                      var inst_19591 = inst_19590;
                                                      var inst_19592 = null;
                                                      var inst_19593 = 0;
                                                      var inst_19594 = 0;
                                                      var state_19651__$1 = function() {
                                                        var statearr_19694 = state_19651;
                                                        statearr_19694[20] = inst_19591;
                                                        statearr_19694[30] = inst_19585;
                                                        statearr_19694[11] = inst_19592;
                                                        statearr_19694[12] = inst_19594;
                                                        statearr_19694[29] = inst_19583__$1;
                                                        statearr_19694[21] = inst_19593;
                                                        return statearr_19694;
                                                      }();
                                                      var statearr_19695_19764 = state_19651__$1;
                                                      statearr_19695_19764[2] = null;
                                                      statearr_19695_19764[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_19652 === 28) {
                                                        var inst_19591 = state_19651[20];
                                                        var inst_19610 = state_19651[25];
                                                        var inst_19610__$1 = cljs.core.seq.call(null, inst_19591);
                                                        var state_19651__$1 = function() {
                                                          var statearr_19696 = state_19651;
                                                          statearr_19696[25] = inst_19610__$1;
                                                          return statearr_19696;
                                                        }();
                                                        if (inst_19610__$1) {
                                                          var statearr_19697_19765 = state_19651__$1;
                                                          statearr_19697_19765[1] = 33;
                                                        } else {
                                                          var statearr_19698_19766 = state_19651__$1;
                                                          statearr_19698_19766[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_19652 === 25) {
                                                          var inst_19594 = state_19651[12];
                                                          var inst_19593 = state_19651[21];
                                                          var inst_19596 = inst_19594 < inst_19593;
                                                          var inst_19597 = inst_19596;
                                                          var state_19651__$1 = state_19651;
                                                          if (cljs.core.truth_(inst_19597)) {
                                                            var statearr_19699_19767 = state_19651__$1;
                                                            statearr_19699_19767[1] = 27;
                                                          } else {
                                                            var statearr_19700_19768 = state_19651__$1;
                                                            statearr_19700_19768[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_19652 === 34) {
                                                            var state_19651__$1 = state_19651;
                                                            var statearr_19701_19769 = state_19651__$1;
                                                            statearr_19701_19769[2] = null;
                                                            statearr_19701_19769[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_19652 === 17) {
                                                              var state_19651__$1 = state_19651;
                                                              var statearr_19702_19770 = state_19651__$1;
                                                              statearr_19702_19770[2] = null;
                                                              statearr_19702_19770[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_19652 === 3) {
                                                                var inst_19649 = state_19651[2];
                                                                var state_19651__$1 = state_19651;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19651__$1, inst_19649);
                                                              } else {
                                                                if (state_val_19652 === 12) {
                                                                  var inst_19578 = state_19651[2];
                                                                  var state_19651__$1 = state_19651;
                                                                  var statearr_19703_19771 = state_19651__$1;
                                                                  statearr_19703_19771[2] = inst_19578;
                                                                  statearr_19703_19771[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_19652 === 2) {
                                                                    var state_19651__$1 = state_19651;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19651__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_19652 === 23) {
                                                                      var state_19651__$1 = state_19651;
                                                                      var statearr_19704_19772 = state_19651__$1;
                                                                      statearr_19704_19772[2] = null;
                                                                      statearr_19704_19772[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_19652 === 35) {
                                                                        var inst_19633 = state_19651[2];
                                                                        var state_19651__$1 = state_19651;
                                                                        var statearr_19705_19773 = state_19651__$1;
                                                                        statearr_19705_19773[2] = inst_19633;
                                                                        statearr_19705_19773[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_19652 === 19) {
                                                                          var inst_19552 = state_19651[7];
                                                                          var inst_19556 = cljs.core.chunk_first.call(null, inst_19552);
                                                                          var inst_19557 = cljs.core.chunk_rest.call(null, inst_19552);
                                                                          var inst_19558 = cljs.core.count.call(null, inst_19556);
                                                                          var inst_19532 = inst_19557;
                                                                          var inst_19533 = inst_19556;
                                                                          var inst_19534 = inst_19558;
                                                                          var inst_19535 = 0;
                                                                          var state_19651__$1 = function() {
                                                                            var statearr_19706 = state_19651;
                                                                            statearr_19706[13] = inst_19534;
                                                                            statearr_19706[14] = inst_19533;
                                                                            statearr_19706[15] = inst_19532;
                                                                            statearr_19706[16] = inst_19535;
                                                                            return statearr_19706;
                                                                          }();
                                                                          var statearr_19707_19774 = state_19651__$1;
                                                                          statearr_19707_19774[2] = null;
                                                                          statearr_19707_19774[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_19652 === 11) {
                                                                            var inst_19552 = state_19651[7];
                                                                            var inst_19532 = state_19651[15];
                                                                            var inst_19552__$1 = cljs.core.seq.call(null, inst_19532);
                                                                            var state_19651__$1 = function() {
                                                                              var statearr_19708 = state_19651;
                                                                              statearr_19708[7] = inst_19552__$1;
                                                                              return statearr_19708;
                                                                            }();
                                                                            if (inst_19552__$1) {
                                                                              var statearr_19709_19775 = state_19651__$1;
                                                                              statearr_19709_19775[1] = 16;
                                                                            } else {
                                                                              var statearr_19710_19776 = state_19651__$1;
                                                                              statearr_19710_19776[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_19652 === 9) {
                                                                              var inst_19580 = state_19651[2];
                                                                              var state_19651__$1 = state_19651;
                                                                              var statearr_19711_19777 = state_19651__$1;
                                                                              statearr_19711_19777[2] = inst_19580;
                                                                              statearr_19711_19777[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_19652 === 5) {
                                                                                var inst_19530 = cljs.core.deref.call(null, cs);
                                                                                var inst_19531 = cljs.core.seq.call(null, inst_19530);
                                                                                var inst_19532 = inst_19531;
                                                                                var inst_19533 = null;
                                                                                var inst_19534 = 0;
                                                                                var inst_19535 = 0;
                                                                                var state_19651__$1 = function() {
                                                                                  var statearr_19712 = state_19651;
                                                                                  statearr_19712[13] = inst_19534;
                                                                                  statearr_19712[14] = inst_19533;
                                                                                  statearr_19712[15] = inst_19532;
                                                                                  statearr_19712[16] = inst_19535;
                                                                                  return statearr_19712;
                                                                                }();
                                                                                var statearr_19713_19778 = state_19651__$1;
                                                                                statearr_19713_19778[2] = null;
                                                                                statearr_19713_19778[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_19652 === 14) {
                                                                                  var state_19651__$1 = state_19651;
                                                                                  var statearr_19714_19779 = state_19651__$1;
                                                                                  statearr_19714_19779[2] = null;
                                                                                  statearr_19714_19779[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_19652 === 45) {
                                                                                    var inst_19641 = state_19651[2];
                                                                                    var state_19651__$1 = state_19651;
                                                                                    var statearr_19715_19780 = state_19651__$1;
                                                                                    statearr_19715_19780[2] = inst_19641;
                                                                                    statearr_19715_19780[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_19652 === 26) {
                                                                                      var inst_19583 = state_19651[29];
                                                                                      var inst_19637 = state_19651[2];
                                                                                      var inst_19638 = cljs.core.seq.call(null, inst_19583);
                                                                                      var state_19651__$1 = function() {
                                                                                        var statearr_19716 = state_19651;
                                                                                        statearr_19716[31] = inst_19637;
                                                                                        return statearr_19716;
                                                                                      }();
                                                                                      if (inst_19638) {
                                                                                        var statearr_19717_19781 = state_19651__$1;
                                                                                        statearr_19717_19781[1] = 42;
                                                                                      } else {
                                                                                        var statearr_19718_19782 = state_19651__$1;
                                                                                        statearr_19718_19782[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_19652 === 16) {
                                                                                        var inst_19552 = state_19651[7];
                                                                                        var inst_19554 = cljs.core.chunked_seq_QMARK_.call(null, inst_19552);
                                                                                        var state_19651__$1 = state_19651;
                                                                                        if (inst_19554) {
                                                                                          var statearr_19719_19783 = state_19651__$1;
                                                                                          statearr_19719_19783[1] = 19;
                                                                                        } else {
                                                                                          var statearr_19720_19784 = state_19651__$1;
                                                                                          statearr_19720_19784[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_19652 === 38) {
                                                                                          var inst_19630 = state_19651[2];
                                                                                          var state_19651__$1 = state_19651;
                                                                                          var statearr_19721_19785 = state_19651__$1;
                                                                                          statearr_19721_19785[2] = inst_19630;
                                                                                          statearr_19721_19785[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_19652 === 30) {
                                                                                            var state_19651__$1 = state_19651;
                                                                                            var statearr_19722_19786 = state_19651__$1;
                                                                                            statearr_19722_19786[2] = null;
                                                                                            statearr_19722_19786[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_19652 === 10) {
                                                                                              var inst_19533 = state_19651[14];
                                                                                              var inst_19535 = state_19651[16];
                                                                                              var inst_19541 = cljs.core._nth.call(null, inst_19533, inst_19535);
                                                                                              var inst_19542 = cljs.core.nth.call(null, inst_19541, 0, null);
                                                                                              var inst_19543 = cljs.core.nth.call(null, inst_19541, 1, null);
                                                                                              var state_19651__$1 = function() {
                                                                                                var statearr_19723 = state_19651;
                                                                                                statearr_19723[26] = inst_19542;
                                                                                                return statearr_19723;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_19543)) {
                                                                                                var statearr_19724_19787 = state_19651__$1;
                                                                                                statearr_19724_19787[1] = 13;
                                                                                              } else {
                                                                                                var statearr_19725_19788 = state_19651__$1;
                                                                                                statearr_19725_19788[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_19652 === 18) {
                                                                                                var inst_19576 = state_19651[2];
                                                                                                var state_19651__$1 = state_19651;
                                                                                                var statearr_19726_19789 = state_19651__$1;
                                                                                                statearr_19726_19789[2] = inst_19576;
                                                                                                statearr_19726_19789[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_19652 === 42) {
                                                                                                  var state_19651__$1 = state_19651;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19651__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_19652 === 37) {
                                                                                                    var inst_19610 = state_19651[25];
                                                                                                    var inst_19523 = state_19651[9];
                                                                                                    var inst_19619 = state_19651[23];
                                                                                                    var inst_19619__$1 = cljs.core.first.call(null, inst_19610);
                                                                                                    var inst_19620 = cljs.core.async.put_BANG_.call(null, inst_19619__$1, inst_19523, done);
                                                                                                    var state_19651__$1 = function() {
                                                                                                      var statearr_19727 = state_19651;
                                                                                                      statearr_19727[23] = inst_19619__$1;
                                                                                                      return statearr_19727;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_19620)) {
                                                                                                      var statearr_19728_19790 = state_19651__$1;
                                                                                                      statearr_19728_19790[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_19729_19791 = state_19651__$1;
                                                                                                      statearr_19729_19791[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_19652 === 8) {
                                                                                                      var inst_19534 = state_19651[13];
                                                                                                      var inst_19535 = state_19651[16];
                                                                                                      var inst_19537 = inst_19535 < inst_19534;
                                                                                                      var inst_19538 = inst_19537;
                                                                                                      var state_19651__$1 = state_19651;
                                                                                                      if (cljs.core.truth_(inst_19538)) {
                                                                                                        var statearr_19730_19792 = state_19651__$1;
                                                                                                        statearr_19730_19792[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_19731_19793 = state_19651__$1;
                                                                                                        statearr_19731_19793[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6607__auto___19739, cs, m, dchan, dctr, done);
        return function(switch__6551__auto__, c__6607__auto___19739, cs, m, dchan, dctr, done) {
          return function() {
            var state_machine__6552__auto__ = null;
            var state_machine__6552__auto____0 = function() {
              var statearr_19735 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_19735[0] = state_machine__6552__auto__;
              statearr_19735[1] = 1;
              return statearr_19735;
            };
            var state_machine__6552__auto____1 = function(state_19651) {
              while (true) {
                var ret_value__6553__auto__ = function() {
                  try {
                    while (true) {
                      var result__6554__auto__ = switch__6551__auto__.call(null, state_19651);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6554__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6554__auto__;
                      }
                      break;
                    }
                  } catch (e19736) {
                    if (e19736 instanceof Object) {
                      var ex__6555__auto__ = e19736;
                      var statearr_19737_19794 = state_19651;
                      statearr_19737_19794[5] = ex__6555__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19651);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e19736;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6553__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__19795 = state_19651;
                  state_19651 = G__19795;
                  continue;
                } else {
                  return ret_value__6553__auto__;
                }
                break;
              }
            };
            state_machine__6552__auto__ = function(state_19651) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6552__auto____0.call(this);
                case 1:
                  return state_machine__6552__auto____1.call(this, state_19651);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6552__auto____0;
            state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6552__auto____1;
            return state_machine__6552__auto__;
          }();
        }(switch__6551__auto__, c__6607__auto___19739, cs, m, dchan, dctr, done);
      }();
      var state__6609__auto__ = function() {
        var statearr_19738 = f__6608__auto__.call(null);
        statearr_19738[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6607__auto___19739;
        return statearr_19738;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6609__auto__);
    };
  }(c__6607__auto___19739, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj19797 = {};
  return obj19797;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3817__auto__ = m;
    if (and__3817__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4473__auto__ = m == null ? null : m;
    return function() {
      var or__3829__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3817__auto__ = m;
    if (and__3817__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4473__auto__ = m == null ? null : m;
    return function() {
      var or__3829__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3817__auto__ = m;
    if (and__3817__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4473__auto__ = m == null ? null : m;
    return function() {
      var or__3829__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3817__auto__ = m;
    if (and__3817__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4473__auto__ = m == null ? null : m;
    return function() {
      var or__3829__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3817__auto__ = m;
    if (and__3817__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4473__auto__ = m == null ? null : m;
    return function() {
      var or__3829__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__19798) {
    var map__19803 = p__19798;
    var map__19803__$1 = cljs.core.seq_QMARK_.call(null, map__19803) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19803) : map__19803;
    var opts = map__19803__$1;
    var statearr_19804_19807 = state;
    statearr_19804_19807[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4126__auto__ = cljs.core.async.do_alts.call(null, function(map__19803, map__19803__$1, opts) {
      return function(val) {
        var statearr_19805_19808 = state;
        statearr_19805_19808[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
      };
    }(map__19803, map__19803__$1, opts), ports, opts);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var cb = temp__4126__auto__;
      var statearr_19806_19809 = state;
      statearr_19806_19809[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__19798 = null;
    if (arguments.length > 3) {
      var G__19810__i = 0, G__19810__a = new Array(arguments.length - 3);
      while (G__19810__i < G__19810__a.length) {
        G__19810__a[G__19810__i] = arguments[G__19810__i + 3];
        ++G__19810__i;
      }
      p__19798 = new cljs.core.IndexedSeq(G__19810__a, 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__19798);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__19811) {
    var state = cljs.core.first(arglist__19811);
    arglist__19811 = cljs.core.next(arglist__19811);
    var cont_block = cljs.core.first(arglist__19811);
    arglist__19811 = cljs.core.next(arglist__19811);
    var ports = cljs.core.first(arglist__19811);
    var p__19798 = cljs.core.rest(arglist__19811);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__19798);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t19931 !== "undefined") {
    } else {
      cljs.core.async.t19931 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta19932) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta19932 = meta19932;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t19931.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t19931.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t19931.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t19931.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t19931.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t19931.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t19931.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t19931.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t19931.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_19933) {
          var self__ = this;
          var _19933__$1 = this;
          return self__.meta19932;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t19931.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_19933, meta19932__$1) {
          var self__ = this;
          var _19933__$1 = this;
          return new cljs.core.async.t19931(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta19932__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t19931.cljs$lang$type = true;
      cljs.core.async.t19931.cljs$lang$ctorStr = "cljs.core.async/t19931";
      cljs.core.async.t19931.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
          return cljs.core._write.call(null, writer__4417__auto__, "cljs.core.async/t19931");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t19931 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t19931(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta19932) {
          return new cljs.core.async.t19931(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta19932);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t19931(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__6607__auto___20050 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6607__auto___20050, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__6608__auto__ = function() {
        var switch__6551__auto__ = function(c__6607__auto___20050, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_20003) {
            var state_val_20004 = state_20003[1];
            if (state_val_20004 === 7) {
              var inst_19947 = state_20003[7];
              var inst_19952 = cljs.core.apply.call(null, cljs.core.hash_map, inst_19947);
              var state_20003__$1 = state_20003;
              var statearr_20005_20051 = state_20003__$1;
              statearr_20005_20051[2] = inst_19952;
              statearr_20005_20051[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_20004 === 20) {
                var inst_19962 = state_20003[8];
                var state_20003__$1 = state_20003;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20003__$1, 23, out, inst_19962);
              } else {
                if (state_val_20004 === 1) {
                  var inst_19937 = state_20003[9];
                  var inst_19937__$1 = calc_state.call(null);
                  var inst_19938 = cljs.core.seq_QMARK_.call(null, inst_19937__$1);
                  var state_20003__$1 = function() {
                    var statearr_20006 = state_20003;
                    statearr_20006[9] = inst_19937__$1;
                    return statearr_20006;
                  }();
                  if (inst_19938) {
                    var statearr_20007_20052 = state_20003__$1;
                    statearr_20007_20052[1] = 2;
                  } else {
                    var statearr_20008_20053 = state_20003__$1;
                    statearr_20008_20053[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20004 === 24) {
                    var inst_19955 = state_20003[10];
                    var inst_19947 = inst_19955;
                    var state_20003__$1 = function() {
                      var statearr_20009 = state_20003;
                      statearr_20009[7] = inst_19947;
                      return statearr_20009;
                    }();
                    var statearr_20010_20054 = state_20003__$1;
                    statearr_20010_20054[2] = null;
                    statearr_20010_20054[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_20004 === 4) {
                      var inst_19937 = state_20003[9];
                      var inst_19943 = state_20003[2];
                      var inst_19944 = cljs.core.get.call(null, inst_19943, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                      var inst_19945 = cljs.core.get.call(null, inst_19943, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                      var inst_19946 = cljs.core.get.call(null, inst_19943, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                      var inst_19947 = inst_19937;
                      var state_20003__$1 = function() {
                        var statearr_20011 = state_20003;
                        statearr_20011[7] = inst_19947;
                        statearr_20011[11] = inst_19945;
                        statearr_20011[12] = inst_19946;
                        statearr_20011[13] = inst_19944;
                        return statearr_20011;
                      }();
                      var statearr_20012_20055 = state_20003__$1;
                      statearr_20012_20055[2] = null;
                      statearr_20012_20055[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_20004 === 15) {
                        var state_20003__$1 = state_20003;
                        var statearr_20013_20056 = state_20003__$1;
                        statearr_20013_20056[2] = null;
                        statearr_20013_20056[1] = 16;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_20004 === 21) {
                          var inst_19955 = state_20003[10];
                          var inst_19947 = inst_19955;
                          var state_20003__$1 = function() {
                            var statearr_20014 = state_20003;
                            statearr_20014[7] = inst_19947;
                            return statearr_20014;
                          }();
                          var statearr_20015_20057 = state_20003__$1;
                          statearr_20015_20057[2] = null;
                          statearr_20015_20057[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_20004 === 13) {
                            var inst_19999 = state_20003[2];
                            var state_20003__$1 = state_20003;
                            var statearr_20016_20058 = state_20003__$1;
                            statearr_20016_20058[2] = inst_19999;
                            statearr_20016_20058[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_20004 === 22) {
                              var inst_19997 = state_20003[2];
                              var state_20003__$1 = state_20003;
                              var statearr_20017_20059 = state_20003__$1;
                              statearr_20017_20059[2] = inst_19997;
                              statearr_20017_20059[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_20004 === 6) {
                                var inst_20001 = state_20003[2];
                                var state_20003__$1 = state_20003;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20003__$1, inst_20001);
                              } else {
                                if (state_val_20004 === 25) {
                                  var state_20003__$1 = state_20003;
                                  var statearr_20018_20060 = state_20003__$1;
                                  statearr_20018_20060[2] = null;
                                  statearr_20018_20060[1] = 26;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_20004 === 17) {
                                    var inst_19977 = state_20003[14];
                                    var state_20003__$1 = state_20003;
                                    var statearr_20019_20061 = state_20003__$1;
                                    statearr_20019_20061[2] = inst_19977;
                                    statearr_20019_20061[1] = 19;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_20004 === 3) {
                                      var inst_19937 = state_20003[9];
                                      var state_20003__$1 = state_20003;
                                      var statearr_20020_20062 = state_20003__$1;
                                      statearr_20020_20062[2] = inst_19937;
                                      statearr_20020_20062[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_20004 === 12) {
                                        var inst_19958 = state_20003[15];
                                        var inst_19963 = state_20003[16];
                                        var inst_19977 = state_20003[14];
                                        var inst_19977__$1 = inst_19958.call(null, inst_19963);
                                        var state_20003__$1 = function() {
                                          var statearr_20021 = state_20003;
                                          statearr_20021[14] = inst_19977__$1;
                                          return statearr_20021;
                                        }();
                                        if (cljs.core.truth_(inst_19977__$1)) {
                                          var statearr_20022_20063 = state_20003__$1;
                                          statearr_20022_20063[1] = 17;
                                        } else {
                                          var statearr_20023_20064 = state_20003__$1;
                                          statearr_20023_20064[1] = 18;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_20004 === 2) {
                                          var inst_19937 = state_20003[9];
                                          var inst_19940 = cljs.core.apply.call(null, cljs.core.hash_map, inst_19937);
                                          var state_20003__$1 = state_20003;
                                          var statearr_20024_20065 = state_20003__$1;
                                          statearr_20024_20065[2] = inst_19940;
                                          statearr_20024_20065[1] = 4;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_20004 === 23) {
                                            var inst_19988 = state_20003[2];
                                            var state_20003__$1 = state_20003;
                                            if (cljs.core.truth_(inst_19988)) {
                                              var statearr_20025_20066 = state_20003__$1;
                                              statearr_20025_20066[1] = 24;
                                            } else {
                                              var statearr_20026_20067 = state_20003__$1;
                                              statearr_20026_20067[1] = 25;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_20004 === 19) {
                                              var inst_19985 = state_20003[2];
                                              var state_20003__$1 = state_20003;
                                              if (cljs.core.truth_(inst_19985)) {
                                                var statearr_20027_20068 = state_20003__$1;
                                                statearr_20027_20068[1] = 20;
                                              } else {
                                                var statearr_20028_20069 = state_20003__$1;
                                                statearr_20028_20069[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_20004 === 11) {
                                                var inst_19962 = state_20003[8];
                                                var inst_19968 = inst_19962 == null;
                                                var state_20003__$1 = state_20003;
                                                if (cljs.core.truth_(inst_19968)) {
                                                  var statearr_20029_20070 = state_20003__$1;
                                                  statearr_20029_20070[1] = 14;
                                                } else {
                                                  var statearr_20030_20071 = state_20003__$1;
                                                  statearr_20030_20071[1] = 15;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_20004 === 9) {
                                                  var inst_19955 = state_20003[10];
                                                  var inst_19955__$1 = state_20003[2];
                                                  var inst_19956 = cljs.core.get.call(null, inst_19955__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                  var inst_19957 = cljs.core.get.call(null, inst_19955__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                  var inst_19958 = cljs.core.get.call(null, inst_19955__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                  var state_20003__$1 = function() {
                                                    var statearr_20031 = state_20003;
                                                    statearr_20031[17] = inst_19957;
                                                    statearr_20031[15] = inst_19958;
                                                    statearr_20031[10] = inst_19955__$1;
                                                    return statearr_20031;
                                                  }();
                                                  return cljs.core.async.ioc_alts_BANG_.call(null, state_20003__$1, 10, inst_19956);
                                                } else {
                                                  if (state_val_20004 === 5) {
                                                    var inst_19947 = state_20003[7];
                                                    var inst_19950 = cljs.core.seq_QMARK_.call(null, inst_19947);
                                                    var state_20003__$1 = state_20003;
                                                    if (inst_19950) {
                                                      var statearr_20032_20072 = state_20003__$1;
                                                      statearr_20032_20072[1] = 7;
                                                    } else {
                                                      var statearr_20033_20073 = state_20003__$1;
                                                      statearr_20033_20073[1] = 8;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_20004 === 14) {
                                                      var inst_19963 = state_20003[16];
                                                      var inst_19970 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_19963);
                                                      var state_20003__$1 = state_20003;
                                                      var statearr_20034_20074 = state_20003__$1;
                                                      statearr_20034_20074[2] = inst_19970;
                                                      statearr_20034_20074[1] = 16;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_20004 === 26) {
                                                        var inst_19993 = state_20003[2];
                                                        var state_20003__$1 = state_20003;
                                                        var statearr_20035_20075 = state_20003__$1;
                                                        statearr_20035_20075[2] = inst_19993;
                                                        statearr_20035_20075[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_20004 === 16) {
                                                          var inst_19973 = state_20003[2];
                                                          var inst_19974 = calc_state.call(null);
                                                          var inst_19947 = inst_19974;
                                                          var state_20003__$1 = function() {
                                                            var statearr_20036 = state_20003;
                                                            statearr_20036[7] = inst_19947;
                                                            statearr_20036[18] = inst_19973;
                                                            return statearr_20036;
                                                          }();
                                                          var statearr_20037_20076 = state_20003__$1;
                                                          statearr_20037_20076[2] = null;
                                                          statearr_20037_20076[1] = 5;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_20004 === 10) {
                                                            var inst_19962 = state_20003[8];
                                                            var inst_19963 = state_20003[16];
                                                            var inst_19961 = state_20003[2];
                                                            var inst_19962__$1 = cljs.core.nth.call(null, inst_19961, 0, null);
                                                            var inst_19963__$1 = cljs.core.nth.call(null, inst_19961, 1, null);
                                                            var inst_19964 = inst_19962__$1 == null;
                                                            var inst_19965 = cljs.core._EQ_.call(null, inst_19963__$1, change);
                                                            var inst_19966 = inst_19964 || inst_19965;
                                                            var state_20003__$1 = function() {
                                                              var statearr_20038 = state_20003;
                                                              statearr_20038[8] = inst_19962__$1;
                                                              statearr_20038[16] = inst_19963__$1;
                                                              return statearr_20038;
                                                            }();
                                                            if (cljs.core.truth_(inst_19966)) {
                                                              var statearr_20039_20077 = state_20003__$1;
                                                              statearr_20039_20077[1] = 11;
                                                            } else {
                                                              var statearr_20040_20078 = state_20003__$1;
                                                              statearr_20040_20078[1] = 12;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_20004 === 18) {
                                                              var inst_19957 = state_20003[17];
                                                              var inst_19958 = state_20003[15];
                                                              var inst_19963 = state_20003[16];
                                                              var inst_19980 = cljs.core.empty_QMARK_.call(null, inst_19958);
                                                              var inst_19981 = inst_19957.call(null, inst_19963);
                                                              var inst_19982 = cljs.core.not.call(null, inst_19981);
                                                              var inst_19983 = inst_19980 && inst_19982;
                                                              var state_20003__$1 = state_20003;
                                                              var statearr_20041_20079 = state_20003__$1;
                                                              statearr_20041_20079[2] = inst_19983;
                                                              statearr_20041_20079[1] = 19;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_20004 === 8) {
                                                                var inst_19947 = state_20003[7];
                                                                var state_20003__$1 = state_20003;
                                                                var statearr_20042_20080 = state_20003__$1;
                                                                statearr_20042_20080[2] = inst_19947;
                                                                statearr_20042_20080[1] = 9;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6607__auto___20050, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__6551__auto__, c__6607__auto___20050, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var state_machine__6552__auto__ = null;
            var state_machine__6552__auto____0 = function() {
              var statearr_20046 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_20046[0] = state_machine__6552__auto__;
              statearr_20046[1] = 1;
              return statearr_20046;
            };
            var state_machine__6552__auto____1 = function(state_20003) {
              while (true) {
                var ret_value__6553__auto__ = function() {
                  try {
                    while (true) {
                      var result__6554__auto__ = switch__6551__auto__.call(null, state_20003);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6554__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6554__auto__;
                      }
                      break;
                    }
                  } catch (e20047) {
                    if (e20047 instanceof Object) {
                      var ex__6555__auto__ = e20047;
                      var statearr_20048_20081 = state_20003;
                      statearr_20048_20081[5] = ex__6555__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20003);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e20047;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6553__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__20082 = state_20003;
                  state_20003 = G__20082;
                  continue;
                } else {
                  return ret_value__6553__auto__;
                }
                break;
              }
            };
            state_machine__6552__auto__ = function(state_20003) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6552__auto____0.call(this);
                case 1:
                  return state_machine__6552__auto____1.call(this, state_20003);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6552__auto____0;
            state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6552__auto____1;
            return state_machine__6552__auto__;
          }();
        }(switch__6551__auto__, c__6607__auto___20050, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__6609__auto__ = function() {
        var statearr_20049 = f__6608__auto__.call(null);
        statearr_20049[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6607__auto___20050;
        return statearr_20049;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6609__auto__);
    };
  }(c__6607__auto___20050, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj20084 = {};
  return obj20084;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3817__auto__ = p;
    if (and__3817__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4473__auto__ = p == null ? null : p;
    return function() {
      var or__3829__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3817__auto__ = p;
    if (and__3817__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4473__auto__ = p == null ? null : p;
    return function() {
      var or__3829__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3817__auto__ = p;
      if (and__3817__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4473__auto__ = p == null ? null : p;
      return function() {
        var or__3829__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4473__auto__)];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3817__auto__ = p;
      if (and__3817__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3817__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4473__auto__ = p == null ? null : p;
      return function() {
        var or__3829__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4473__auto__)];
        if (or__3829__auto__) {
          return or__3829__auto__;
        } else {
          var or__3829__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3829__auto____$1) {
            return or__3829__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3829__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3829__auto__)) {
          return or__3829__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3829__auto__, mults) {
            return function(p1__20085_SHARP_) {
              if (cljs.core.truth_(p1__20085_SHARP_.call(null, topic))) {
                return p1__20085_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__20085_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3829__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t20208 !== "undefined") {
      } else {
        cljs.core.async.t20208 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta20209) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta20209 = meta20209;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t20208.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t20208.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$1, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$1, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t20208.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$1) {
            var self__ = this;
            var p__$1 = this;
            var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4126__auto__)) {
              var m = temp__4126__auto__;
              return cljs.core.async.untap.call(null, m, ch__$1);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t20208.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t20208.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t20208.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t20208.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t20208.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_20210) {
            var self__ = this;
            var _20210__$1 = this;
            return self__.meta20209;
          };
        }(mults, ensure_mult);
        cljs.core.async.t20208.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_20210, meta20209__$1) {
            var self__ = this;
            var _20210__$1 = this;
            return new cljs.core.async.t20208(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta20209__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.t20208.cljs$lang$type = true;
        cljs.core.async.t20208.cljs$lang$ctorStr = "cljs.core.async/t20208";
        cljs.core.async.t20208.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
            return cljs.core._write.call(null, writer__4417__auto__, "cljs.core.async/t20208");
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t20208 = function(mults, ensure_mult) {
          return function __GT_t20208(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta20209) {
            return new cljs.core.async.t20208(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta20209);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t20208(ensure_mult, mults, buf_fn, topic_fn, ch, pub, cljs.core.PersistentArrayMap.EMPTY);
    }();
    var c__6607__auto___20330 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6607__auto___20330, mults, ensure_mult, p) {
      return function() {
        var f__6608__auto__ = function() {
          var switch__6551__auto__ = function(c__6607__auto___20330, mults, ensure_mult, p) {
            return function(state_20282) {
              var state_val_20283 = state_20282[1];
              if (state_val_20283 === 7) {
                var inst_20278 = state_20282[2];
                var state_20282__$1 = state_20282;
                var statearr_20284_20331 = state_20282__$1;
                statearr_20284_20331[2] = inst_20278;
                statearr_20284_20331[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_20283 === 20) {
                  var state_20282__$1 = state_20282;
                  var statearr_20285_20332 = state_20282__$1;
                  statearr_20285_20332[2] = null;
                  statearr_20285_20332[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20283 === 1) {
                    var state_20282__$1 = state_20282;
                    var statearr_20286_20333 = state_20282__$1;
                    statearr_20286_20333[2] = null;
                    statearr_20286_20333[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_20283 === 24) {
                      var inst_20261 = state_20282[7];
                      var inst_20270 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_20261);
                      var state_20282__$1 = state_20282;
                      var statearr_20287_20334 = state_20282__$1;
                      statearr_20287_20334[2] = inst_20270;
                      statearr_20287_20334[1] = 25;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_20283 === 4) {
                        var inst_20213 = state_20282[8];
                        var inst_20213__$1 = state_20282[2];
                        var inst_20214 = inst_20213__$1 == null;
                        var state_20282__$1 = function() {
                          var statearr_20288 = state_20282;
                          statearr_20288[8] = inst_20213__$1;
                          return statearr_20288;
                        }();
                        if (cljs.core.truth_(inst_20214)) {
                          var statearr_20289_20335 = state_20282__$1;
                          statearr_20289_20335[1] = 5;
                        } else {
                          var statearr_20290_20336 = state_20282__$1;
                          statearr_20290_20336[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_20283 === 15) {
                          var inst_20255 = state_20282[2];
                          var state_20282__$1 = state_20282;
                          var statearr_20291_20337 = state_20282__$1;
                          statearr_20291_20337[2] = inst_20255;
                          statearr_20291_20337[1] = 12;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_20283 === 21) {
                            var inst_20275 = state_20282[2];
                            var state_20282__$1 = function() {
                              var statearr_20292 = state_20282;
                              statearr_20292[9] = inst_20275;
                              return statearr_20292;
                            }();
                            var statearr_20293_20338 = state_20282__$1;
                            statearr_20293_20338[2] = null;
                            statearr_20293_20338[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_20283 === 13) {
                              var inst_20237 = state_20282[10];
                              var inst_20239 = cljs.core.chunked_seq_QMARK_.call(null, inst_20237);
                              var state_20282__$1 = state_20282;
                              if (inst_20239) {
                                var statearr_20294_20339 = state_20282__$1;
                                statearr_20294_20339[1] = 16;
                              } else {
                                var statearr_20295_20340 = state_20282__$1;
                                statearr_20295_20340[1] = 17;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_20283 === 22) {
                                var inst_20267 = state_20282[2];
                                var state_20282__$1 = state_20282;
                                if (cljs.core.truth_(inst_20267)) {
                                  var statearr_20296_20341 = state_20282__$1;
                                  statearr_20296_20341[1] = 23;
                                } else {
                                  var statearr_20297_20342 = state_20282__$1;
                                  statearr_20297_20342[1] = 24;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_20283 === 6) {
                                  var inst_20263 = state_20282[11];
                                  var inst_20213 = state_20282[8];
                                  var inst_20261 = state_20282[7];
                                  var inst_20261__$1 = topic_fn.call(null, inst_20213);
                                  var inst_20262 = cljs.core.deref.call(null, mults);
                                  var inst_20263__$1 = cljs.core.get.call(null, inst_20262, inst_20261__$1);
                                  var state_20282__$1 = function() {
                                    var statearr_20298 = state_20282;
                                    statearr_20298[11] = inst_20263__$1;
                                    statearr_20298[7] = inst_20261__$1;
                                    return statearr_20298;
                                  }();
                                  if (cljs.core.truth_(inst_20263__$1)) {
                                    var statearr_20299_20343 = state_20282__$1;
                                    statearr_20299_20343[1] = 19;
                                  } else {
                                    var statearr_20300_20344 = state_20282__$1;
                                    statearr_20300_20344[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_20283 === 25) {
                                    var inst_20272 = state_20282[2];
                                    var state_20282__$1 = state_20282;
                                    var statearr_20301_20345 = state_20282__$1;
                                    statearr_20301_20345[2] = inst_20272;
                                    statearr_20301_20345[1] = 21;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_20283 === 17) {
                                      var inst_20237 = state_20282[10];
                                      var inst_20246 = cljs.core.first.call(null, inst_20237);
                                      var inst_20247 = cljs.core.async.muxch_STAR_.call(null, inst_20246);
                                      var inst_20248 = cljs.core.async.close_BANG_.call(null, inst_20247);
                                      var inst_20249 = cljs.core.next.call(null, inst_20237);
                                      var inst_20223 = inst_20249;
                                      var inst_20224 = null;
                                      var inst_20225 = 0;
                                      var inst_20226 = 0;
                                      var state_20282__$1 = function() {
                                        var statearr_20302 = state_20282;
                                        statearr_20302[12] = inst_20225;
                                        statearr_20302[13] = inst_20248;
                                        statearr_20302[14] = inst_20224;
                                        statearr_20302[15] = inst_20226;
                                        statearr_20302[16] = inst_20223;
                                        return statearr_20302;
                                      }();
                                      var statearr_20303_20346 = state_20282__$1;
                                      statearr_20303_20346[2] = null;
                                      statearr_20303_20346[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_20283 === 3) {
                                        var inst_20280 = state_20282[2];
                                        var state_20282__$1 = state_20282;
                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20282__$1, inst_20280);
                                      } else {
                                        if (state_val_20283 === 12) {
                                          var inst_20257 = state_20282[2];
                                          var state_20282__$1 = state_20282;
                                          var statearr_20304_20347 = state_20282__$1;
                                          statearr_20304_20347[2] = inst_20257;
                                          statearr_20304_20347[1] = 9;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_20283 === 2) {
                                            var state_20282__$1 = state_20282;
                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20282__$1, 4, ch);
                                          } else {
                                            if (state_val_20283 === 23) {
                                              var state_20282__$1 = state_20282;
                                              var statearr_20305_20348 = state_20282__$1;
                                              statearr_20305_20348[2] = null;
                                              statearr_20305_20348[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_20283 === 19) {
                                                var inst_20263 = state_20282[11];
                                                var inst_20213 = state_20282[8];
                                                var inst_20265 = cljs.core.async.muxch_STAR_.call(null, inst_20263);
                                                var state_20282__$1 = state_20282;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20282__$1, 22, inst_20265, inst_20213);
                                              } else {
                                                if (state_val_20283 === 11) {
                                                  var inst_20237 = state_20282[10];
                                                  var inst_20223 = state_20282[16];
                                                  var inst_20237__$1 = cljs.core.seq.call(null, inst_20223);
                                                  var state_20282__$1 = function() {
                                                    var statearr_20306 = state_20282;
                                                    statearr_20306[10] = inst_20237__$1;
                                                    return statearr_20306;
                                                  }();
                                                  if (inst_20237__$1) {
                                                    var statearr_20307_20349 = state_20282__$1;
                                                    statearr_20307_20349[1] = 13;
                                                  } else {
                                                    var statearr_20308_20350 = state_20282__$1;
                                                    statearr_20308_20350[1] = 14;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_20283 === 9) {
                                                    var inst_20259 = state_20282[2];
                                                    var state_20282__$1 = state_20282;
                                                    var statearr_20309_20351 = state_20282__$1;
                                                    statearr_20309_20351[2] = inst_20259;
                                                    statearr_20309_20351[1] = 7;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_20283 === 5) {
                                                      var inst_20220 = cljs.core.deref.call(null, mults);
                                                      var inst_20221 = cljs.core.vals.call(null, inst_20220);
                                                      var inst_20222 = cljs.core.seq.call(null, inst_20221);
                                                      var inst_20223 = inst_20222;
                                                      var inst_20224 = null;
                                                      var inst_20225 = 0;
                                                      var inst_20226 = 0;
                                                      var state_20282__$1 = function() {
                                                        var statearr_20310 = state_20282;
                                                        statearr_20310[12] = inst_20225;
                                                        statearr_20310[14] = inst_20224;
                                                        statearr_20310[15] = inst_20226;
                                                        statearr_20310[16] = inst_20223;
                                                        return statearr_20310;
                                                      }();
                                                      var statearr_20311_20352 = state_20282__$1;
                                                      statearr_20311_20352[2] = null;
                                                      statearr_20311_20352[1] = 8;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_20283 === 14) {
                                                        var state_20282__$1 = state_20282;
                                                        var statearr_20315_20353 = state_20282__$1;
                                                        statearr_20315_20353[2] = null;
                                                        statearr_20315_20353[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_20283 === 16) {
                                                          var inst_20237 = state_20282[10];
                                                          var inst_20241 = cljs.core.chunk_first.call(null, inst_20237);
                                                          var inst_20242 = cljs.core.chunk_rest.call(null, inst_20237);
                                                          var inst_20243 = cljs.core.count.call(null, inst_20241);
                                                          var inst_20223 = inst_20242;
                                                          var inst_20224 = inst_20241;
                                                          var inst_20225 = inst_20243;
                                                          var inst_20226 = 0;
                                                          var state_20282__$1 = function() {
                                                            var statearr_20316 = state_20282;
                                                            statearr_20316[12] = inst_20225;
                                                            statearr_20316[14] = inst_20224;
                                                            statearr_20316[15] = inst_20226;
                                                            statearr_20316[16] = inst_20223;
                                                            return statearr_20316;
                                                          }();
                                                          var statearr_20317_20354 = state_20282__$1;
                                                          statearr_20317_20354[2] = null;
                                                          statearr_20317_20354[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_20283 === 10) {
                                                            var inst_20225 = state_20282[12];
                                                            var inst_20224 = state_20282[14];
                                                            var inst_20226 = state_20282[15];
                                                            var inst_20223 = state_20282[16];
                                                            var inst_20231 = cljs.core._nth.call(null, inst_20224, inst_20226);
                                                            var inst_20232 = cljs.core.async.muxch_STAR_.call(null, inst_20231);
                                                            var inst_20233 = cljs.core.async.close_BANG_.call(null, inst_20232);
                                                            var inst_20234 = inst_20226 + 1;
                                                            var tmp20312 = inst_20225;
                                                            var tmp20313 = inst_20224;
                                                            var tmp20314 = inst_20223;
                                                            var inst_20223__$1 = tmp20314;
                                                            var inst_20224__$1 = tmp20313;
                                                            var inst_20225__$1 = tmp20312;
                                                            var inst_20226__$1 = inst_20234;
                                                            var state_20282__$1 = function() {
                                                              var statearr_20318 = state_20282;
                                                              statearr_20318[12] = inst_20225__$1;
                                                              statearr_20318[14] = inst_20224__$1;
                                                              statearr_20318[17] = inst_20233;
                                                              statearr_20318[15] = inst_20226__$1;
                                                              statearr_20318[16] = inst_20223__$1;
                                                              return statearr_20318;
                                                            }();
                                                            var statearr_20319_20355 = state_20282__$1;
                                                            statearr_20319_20355[2] = null;
                                                            statearr_20319_20355[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_20283 === 18) {
                                                              var inst_20252 = state_20282[2];
                                                              var state_20282__$1 = state_20282;
                                                              var statearr_20320_20356 = state_20282__$1;
                                                              statearr_20320_20356[2] = inst_20252;
                                                              statearr_20320_20356[1] = 15;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_20283 === 8) {
                                                                var inst_20225 = state_20282[12];
                                                                var inst_20226 = state_20282[15];
                                                                var inst_20228 = inst_20226 < inst_20225;
                                                                var inst_20229 = inst_20228;
                                                                var state_20282__$1 = state_20282;
                                                                if (cljs.core.truth_(inst_20229)) {
                                                                  var statearr_20321_20357 = state_20282__$1;
                                                                  statearr_20321_20357[1] = 10;
                                                                } else {
                                                                  var statearr_20322_20358 = state_20282__$1;
                                                                  statearr_20322_20358[1] = 11;
                                                                }
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6607__auto___20330, mults, ensure_mult, p);
          return function(switch__6551__auto__, c__6607__auto___20330, mults, ensure_mult, p) {
            return function() {
              var state_machine__6552__auto__ = null;
              var state_machine__6552__auto____0 = function() {
                var statearr_20326 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_20326[0] = state_machine__6552__auto__;
                statearr_20326[1] = 1;
                return statearr_20326;
              };
              var state_machine__6552__auto____1 = function(state_20282) {
                while (true) {
                  var ret_value__6553__auto__ = function() {
                    try {
                      while (true) {
                        var result__6554__auto__ = switch__6551__auto__.call(null, state_20282);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6554__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6554__auto__;
                        }
                        break;
                      }
                    } catch (e20327) {
                      if (e20327 instanceof Object) {
                        var ex__6555__auto__ = e20327;
                        var statearr_20328_20359 = state_20282;
                        statearr_20328_20359[5] = ex__6555__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20282);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e20327;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6553__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__20360 = state_20282;
                    state_20282 = G__20360;
                    continue;
                  } else {
                    return ret_value__6553__auto__;
                  }
                  break;
                }
              };
              state_machine__6552__auto__ = function(state_20282) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6552__auto____0.call(this);
                  case 1:
                    return state_machine__6552__auto____1.call(this, state_20282);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6552__auto____0;
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6552__auto____1;
              return state_machine__6552__auto__;
            }();
          }(switch__6551__auto__, c__6607__auto___20330, mults, ensure_mult, p);
        }();
        var state__6609__auto__ = function() {
          var statearr_20329 = f__6608__auto__.call(null);
          statearr_20329[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6607__auto___20330;
          return statearr_20329;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6609__auto__);
      };
    }(c__6607__auto___20330, mults, ensure_mult, p));
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__6607__auto___20497 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6607__auto___20497, chs__$1, out, cnt, rets, dchan, dctr, done) {
      return function() {
        var f__6608__auto__ = function() {
          var switch__6551__auto__ = function(c__6607__auto___20497, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function(state_20467) {
              var state_val_20468 = state_20467[1];
              if (state_val_20468 === 7) {
                var state_20467__$1 = state_20467;
                var statearr_20469_20498 = state_20467__$1;
                statearr_20469_20498[2] = null;
                statearr_20469_20498[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_20468 === 1) {
                  var state_20467__$1 = state_20467;
                  var statearr_20470_20499 = state_20467__$1;
                  statearr_20470_20499[2] = null;
                  statearr_20470_20499[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20468 === 4) {
                    var inst_20431 = state_20467[7];
                    var inst_20433 = inst_20431 < cnt;
                    var state_20467__$1 = state_20467;
                    if (cljs.core.truth_(inst_20433)) {
                      var statearr_20471_20500 = state_20467__$1;
                      statearr_20471_20500[1] = 6;
                    } else {
                      var statearr_20472_20501 = state_20467__$1;
                      statearr_20472_20501[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_20468 === 15) {
                      var inst_20463 = state_20467[2];
                      var state_20467__$1 = state_20467;
                      var statearr_20473_20502 = state_20467__$1;
                      statearr_20473_20502[2] = inst_20463;
                      statearr_20473_20502[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_20468 === 13) {
                        var inst_20456 = cljs.core.async.close_BANG_.call(null, out);
                        var state_20467__$1 = state_20467;
                        var statearr_20474_20503 = state_20467__$1;
                        statearr_20474_20503[2] = inst_20456;
                        statearr_20474_20503[1] = 15;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_20468 === 6) {
                          var state_20467__$1 = state_20467;
                          var statearr_20475_20504 = state_20467__$1;
                          statearr_20475_20504[2] = null;
                          statearr_20475_20504[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_20468 === 3) {
                            var inst_20465 = state_20467[2];
                            var state_20467__$1 = state_20467;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20467__$1, inst_20465);
                          } else {
                            if (state_val_20468 === 12) {
                              var inst_20453 = state_20467[8];
                              var inst_20453__$1 = state_20467[2];
                              var inst_20454 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_20453__$1);
                              var state_20467__$1 = function() {
                                var statearr_20476 = state_20467;
                                statearr_20476[8] = inst_20453__$1;
                                return statearr_20476;
                              }();
                              if (cljs.core.truth_(inst_20454)) {
                                var statearr_20477_20505 = state_20467__$1;
                                statearr_20477_20505[1] = 13;
                              } else {
                                var statearr_20478_20506 = state_20467__$1;
                                statearr_20478_20506[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_20468 === 2) {
                                var inst_20430 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                                var inst_20431 = 0;
                                var state_20467__$1 = function() {
                                  var statearr_20479 = state_20467;
                                  statearr_20479[9] = inst_20430;
                                  statearr_20479[7] = inst_20431;
                                  return statearr_20479;
                                }();
                                var statearr_20480_20507 = state_20467__$1;
                                statearr_20480_20507[2] = null;
                                statearr_20480_20507[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_20468 === 11) {
                                  var inst_20431 = state_20467[7];
                                  var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_20467, 10, Object, null, 9);
                                  var inst_20440 = chs__$1.call(null, inst_20431);
                                  var inst_20441 = done.call(null, inst_20431);
                                  var inst_20442 = cljs.core.async.take_BANG_.call(null, inst_20440, inst_20441);
                                  var state_20467__$1 = state_20467;
                                  var statearr_20481_20508 = state_20467__$1;
                                  statearr_20481_20508[2] = inst_20442;
                                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20467__$1);
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_20468 === 9) {
                                    var inst_20431 = state_20467[7];
                                    var inst_20444 = state_20467[2];
                                    var inst_20445 = inst_20431 + 1;
                                    var inst_20431__$1 = inst_20445;
                                    var state_20467__$1 = function() {
                                      var statearr_20482 = state_20467;
                                      statearr_20482[10] = inst_20444;
                                      statearr_20482[7] = inst_20431__$1;
                                      return statearr_20482;
                                    }();
                                    var statearr_20483_20509 = state_20467__$1;
                                    statearr_20483_20509[2] = null;
                                    statearr_20483_20509[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_20468 === 5) {
                                      var inst_20451 = state_20467[2];
                                      var state_20467__$1 = function() {
                                        var statearr_20484 = state_20467;
                                        statearr_20484[11] = inst_20451;
                                        return statearr_20484;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20467__$1, 12, dchan);
                                    } else {
                                      if (state_val_20468 === 14) {
                                        var inst_20453 = state_20467[8];
                                        var inst_20458 = cljs.core.apply.call(null, f, inst_20453);
                                        var state_20467__$1 = state_20467;
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20467__$1, 16, out, inst_20458);
                                      } else {
                                        if (state_val_20468 === 16) {
                                          var inst_20460 = state_20467[2];
                                          var state_20467__$1 = function() {
                                            var statearr_20485 = state_20467;
                                            statearr_20485[12] = inst_20460;
                                            return statearr_20485;
                                          }();
                                          var statearr_20486_20510 = state_20467__$1;
                                          statearr_20486_20510[2] = null;
                                          statearr_20486_20510[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_20468 === 10) {
                                            var inst_20435 = state_20467[2];
                                            var inst_20436 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                            var state_20467__$1 = function() {
                                              var statearr_20487 = state_20467;
                                              statearr_20487[13] = inst_20435;
                                              return statearr_20487;
                                            }();
                                            var statearr_20488_20511 = state_20467__$1;
                                            statearr_20488_20511[2] = inst_20436;
                                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20467__$1);
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_20468 === 8) {
                                              var inst_20449 = state_20467[2];
                                              var state_20467__$1 = state_20467;
                                              var statearr_20489_20512 = state_20467__$1;
                                              statearr_20489_20512[2] = inst_20449;
                                              statearr_20489_20512[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6607__auto___20497, chs__$1, out, cnt, rets, dchan, dctr, done);
          return function(switch__6551__auto__, c__6607__auto___20497, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function() {
              var state_machine__6552__auto__ = null;
              var state_machine__6552__auto____0 = function() {
                var statearr_20493 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_20493[0] = state_machine__6552__auto__;
                statearr_20493[1] = 1;
                return statearr_20493;
              };
              var state_machine__6552__auto____1 = function(state_20467) {
                while (true) {
                  var ret_value__6553__auto__ = function() {
                    try {
                      while (true) {
                        var result__6554__auto__ = switch__6551__auto__.call(null, state_20467);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6554__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6554__auto__;
                        }
                        break;
                      }
                    } catch (e20494) {
                      if (e20494 instanceof Object) {
                        var ex__6555__auto__ = e20494;
                        var statearr_20495_20513 = state_20467;
                        statearr_20495_20513[5] = ex__6555__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20467);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e20494;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6553__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__20514 = state_20467;
                    state_20467 = G__20514;
                    continue;
                  } else {
                    return ret_value__6553__auto__;
                  }
                  break;
                }
              };
              state_machine__6552__auto__ = function(state_20467) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6552__auto____0.call(this);
                  case 1:
                    return state_machine__6552__auto____1.call(this, state_20467);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6552__auto____0;
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6552__auto____1;
              return state_machine__6552__auto__;
            }();
          }(switch__6551__auto__, c__6607__auto___20497, chs__$1, out, cnt, rets, dchan, dctr, done);
        }();
        var state__6609__auto__ = function() {
          var statearr_20496 = f__6608__auto__.call(null);
          statearr_20496[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6607__auto___20497;
          return statearr_20496;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6609__auto__);
      };
    }(c__6607__auto___20497, chs__$1, out, cnt, rets, dchan, dctr, done));
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6607__auto___20622 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6607__auto___20622, out) {
      return function() {
        var f__6608__auto__ = function() {
          var switch__6551__auto__ = function(c__6607__auto___20622, out) {
            return function(state_20598) {
              var state_val_20599 = state_20598[1];
              if (state_val_20599 === 7) {
                var inst_20578 = state_20598[7];
                var inst_20577 = state_20598[8];
                var inst_20577__$1 = state_20598[2];
                var inst_20578__$1 = cljs.core.nth.call(null, inst_20577__$1, 0, null);
                var inst_20579 = cljs.core.nth.call(null, inst_20577__$1, 1, null);
                var inst_20580 = inst_20578__$1 == null;
                var state_20598__$1 = function() {
                  var statearr_20600 = state_20598;
                  statearr_20600[7] = inst_20578__$1;
                  statearr_20600[9] = inst_20579;
                  statearr_20600[8] = inst_20577__$1;
                  return statearr_20600;
                }();
                if (cljs.core.truth_(inst_20580)) {
                  var statearr_20601_20623 = state_20598__$1;
                  statearr_20601_20623[1] = 8;
                } else {
                  var statearr_20602_20624 = state_20598__$1;
                  statearr_20602_20624[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_20599 === 1) {
                  var inst_20569 = cljs.core.vec.call(null, chs);
                  var inst_20570 = inst_20569;
                  var state_20598__$1 = function() {
                    var statearr_20603 = state_20598;
                    statearr_20603[10] = inst_20570;
                    return statearr_20603;
                  }();
                  var statearr_20604_20625 = state_20598__$1;
                  statearr_20604_20625[2] = null;
                  statearr_20604_20625[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20599 === 4) {
                    var inst_20570 = state_20598[10];
                    var state_20598__$1 = state_20598;
                    return cljs.core.async.ioc_alts_BANG_.call(null, state_20598__$1, 7, inst_20570);
                  } else {
                    if (state_val_20599 === 6) {
                      var inst_20594 = state_20598[2];
                      var state_20598__$1 = state_20598;
                      var statearr_20605_20626 = state_20598__$1;
                      statearr_20605_20626[2] = inst_20594;
                      statearr_20605_20626[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_20599 === 3) {
                        var inst_20596 = state_20598[2];
                        var state_20598__$1 = state_20598;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20598__$1, inst_20596);
                      } else {
                        if (state_val_20599 === 2) {
                          var inst_20570 = state_20598[10];
                          var inst_20572 = cljs.core.count.call(null, inst_20570);
                          var inst_20573 = inst_20572 > 0;
                          var state_20598__$1 = state_20598;
                          if (cljs.core.truth_(inst_20573)) {
                            var statearr_20607_20627 = state_20598__$1;
                            statearr_20607_20627[1] = 4;
                          } else {
                            var statearr_20608_20628 = state_20598__$1;
                            statearr_20608_20628[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_20599 === 11) {
                            var inst_20570 = state_20598[10];
                            var inst_20587 = state_20598[2];
                            var tmp20606 = inst_20570;
                            var inst_20570__$1 = tmp20606;
                            var state_20598__$1 = function() {
                              var statearr_20609 = state_20598;
                              statearr_20609[10] = inst_20570__$1;
                              statearr_20609[11] = inst_20587;
                              return statearr_20609;
                            }();
                            var statearr_20610_20629 = state_20598__$1;
                            statearr_20610_20629[2] = null;
                            statearr_20610_20629[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_20599 === 9) {
                              var inst_20578 = state_20598[7];
                              var state_20598__$1 = state_20598;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20598__$1, 11, out, inst_20578);
                            } else {
                              if (state_val_20599 === 5) {
                                var inst_20592 = cljs.core.async.close_BANG_.call(null, out);
                                var state_20598__$1 = state_20598;
                                var statearr_20611_20630 = state_20598__$1;
                                statearr_20611_20630[2] = inst_20592;
                                statearr_20611_20630[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_20599 === 10) {
                                  var inst_20590 = state_20598[2];
                                  var state_20598__$1 = state_20598;
                                  var statearr_20612_20631 = state_20598__$1;
                                  statearr_20612_20631[2] = inst_20590;
                                  statearr_20612_20631[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_20599 === 8) {
                                    var inst_20578 = state_20598[7];
                                    var inst_20570 = state_20598[10];
                                    var inst_20579 = state_20598[9];
                                    var inst_20577 = state_20598[8];
                                    var inst_20582 = function() {
                                      var c = inst_20579;
                                      var v = inst_20578;
                                      var vec__20575 = inst_20577;
                                      var cs = inst_20570;
                                      return function(c, v, vec__20575, cs, inst_20578, inst_20570, inst_20579, inst_20577, state_val_20599, c__6607__auto___20622, out) {
                                        return function(p1__20515_SHARP_) {
                                          return cljs.core.not_EQ_.call(null, c, p1__20515_SHARP_);
                                        };
                                      }(c, v, vec__20575, cs, inst_20578, inst_20570, inst_20579, inst_20577, state_val_20599, c__6607__auto___20622, out);
                                    }();
                                    var inst_20583 = cljs.core.filterv.call(null, inst_20582, inst_20570);
                                    var inst_20570__$1 = inst_20583;
                                    var state_20598__$1 = function() {
                                      var statearr_20613 = state_20598;
                                      statearr_20613[10] = inst_20570__$1;
                                      return statearr_20613;
                                    }();
                                    var statearr_20614_20632 = state_20598__$1;
                                    statearr_20614_20632[2] = null;
                                    statearr_20614_20632[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6607__auto___20622, out);
          return function(switch__6551__auto__, c__6607__auto___20622, out) {
            return function() {
              var state_machine__6552__auto__ = null;
              var state_machine__6552__auto____0 = function() {
                var statearr_20618 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_20618[0] = state_machine__6552__auto__;
                statearr_20618[1] = 1;
                return statearr_20618;
              };
              var state_machine__6552__auto____1 = function(state_20598) {
                while (true) {
                  var ret_value__6553__auto__ = function() {
                    try {
                      while (true) {
                        var result__6554__auto__ = switch__6551__auto__.call(null, state_20598);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6554__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6554__auto__;
                        }
                        break;
                      }
                    } catch (e20619) {
                      if (e20619 instanceof Object) {
                        var ex__6555__auto__ = e20619;
                        var statearr_20620_20633 = state_20598;
                        statearr_20620_20633[5] = ex__6555__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20598);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e20619;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6553__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__20634 = state_20598;
                    state_20598 = G__20634;
                    continue;
                  } else {
                    return ret_value__6553__auto__;
                  }
                  break;
                }
              };
              state_machine__6552__auto__ = function(state_20598) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6552__auto____0.call(this);
                  case 1:
                    return state_machine__6552__auto____1.call(this, state_20598);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6552__auto____0;
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6552__auto____1;
              return state_machine__6552__auto__;
            }();
          }(switch__6551__auto__, c__6607__auto___20622, out);
        }();
        var state__6609__auto__ = function() {
          var statearr_20621 = f__6608__auto__.call(null);
          statearr_20621[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6607__auto___20622;
          return statearr_20621;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6609__auto__);
      };
    }(c__6607__auto___20622, out));
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function() {
  var take = null;
  var take__2 = function(n, ch) {
    return take.call(null, n, ch, null);
  };
  var take__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6607__auto___20727 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6607__auto___20727, out) {
      return function() {
        var f__6608__auto__ = function() {
          var switch__6551__auto__ = function(c__6607__auto___20727, out) {
            return function(state_20704) {
              var state_val_20705 = state_20704[1];
              if (state_val_20705 === 7) {
                var inst_20686 = state_20704[7];
                var inst_20686__$1 = state_20704[2];
                var inst_20687 = inst_20686__$1 == null;
                var inst_20688 = cljs.core.not.call(null, inst_20687);
                var state_20704__$1 = function() {
                  var statearr_20706 = state_20704;
                  statearr_20706[7] = inst_20686__$1;
                  return statearr_20706;
                }();
                if (inst_20688) {
                  var statearr_20707_20728 = state_20704__$1;
                  statearr_20707_20728[1] = 8;
                } else {
                  var statearr_20708_20729 = state_20704__$1;
                  statearr_20708_20729[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_20705 === 1) {
                  var inst_20681 = 0;
                  var state_20704__$1 = function() {
                    var statearr_20709 = state_20704;
                    statearr_20709[8] = inst_20681;
                    return statearr_20709;
                  }();
                  var statearr_20710_20730 = state_20704__$1;
                  statearr_20710_20730[2] = null;
                  statearr_20710_20730[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20705 === 4) {
                    var state_20704__$1 = state_20704;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20704__$1, 7, ch);
                  } else {
                    if (state_val_20705 === 6) {
                      var inst_20699 = state_20704[2];
                      var state_20704__$1 = state_20704;
                      var statearr_20711_20731 = state_20704__$1;
                      statearr_20711_20731[2] = inst_20699;
                      statearr_20711_20731[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_20705 === 3) {
                        var inst_20701 = state_20704[2];
                        var inst_20702 = cljs.core.async.close_BANG_.call(null, out);
                        var state_20704__$1 = function() {
                          var statearr_20712 = state_20704;
                          statearr_20712[9] = inst_20701;
                          return statearr_20712;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20704__$1, inst_20702);
                      } else {
                        if (state_val_20705 === 2) {
                          var inst_20681 = state_20704[8];
                          var inst_20683 = inst_20681 < n;
                          var state_20704__$1 = state_20704;
                          if (cljs.core.truth_(inst_20683)) {
                            var statearr_20713_20732 = state_20704__$1;
                            statearr_20713_20732[1] = 4;
                          } else {
                            var statearr_20714_20733 = state_20704__$1;
                            statearr_20714_20733[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_20705 === 11) {
                            var inst_20681 = state_20704[8];
                            var inst_20691 = state_20704[2];
                            var inst_20692 = inst_20681 + 1;
                            var inst_20681__$1 = inst_20692;
                            var state_20704__$1 = function() {
                              var statearr_20715 = state_20704;
                              statearr_20715[8] = inst_20681__$1;
                              statearr_20715[10] = inst_20691;
                              return statearr_20715;
                            }();
                            var statearr_20716_20734 = state_20704__$1;
                            statearr_20716_20734[2] = null;
                            statearr_20716_20734[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_20705 === 9) {
                              var state_20704__$1 = state_20704;
                              var statearr_20717_20735 = state_20704__$1;
                              statearr_20717_20735[2] = null;
                              statearr_20717_20735[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_20705 === 5) {
                                var state_20704__$1 = state_20704;
                                var statearr_20718_20736 = state_20704__$1;
                                statearr_20718_20736[2] = null;
                                statearr_20718_20736[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_20705 === 10) {
                                  var inst_20696 = state_20704[2];
                                  var state_20704__$1 = state_20704;
                                  var statearr_20719_20737 = state_20704__$1;
                                  statearr_20719_20737[2] = inst_20696;
                                  statearr_20719_20737[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_20705 === 8) {
                                    var inst_20686 = state_20704[7];
                                    var state_20704__$1 = state_20704;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20704__$1, 11, out, inst_20686);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6607__auto___20727, out);
          return function(switch__6551__auto__, c__6607__auto___20727, out) {
            return function() {
              var state_machine__6552__auto__ = null;
              var state_machine__6552__auto____0 = function() {
                var statearr_20723 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_20723[0] = state_machine__6552__auto__;
                statearr_20723[1] = 1;
                return statearr_20723;
              };
              var state_machine__6552__auto____1 = function(state_20704) {
                while (true) {
                  var ret_value__6553__auto__ = function() {
                    try {
                      while (true) {
                        var result__6554__auto__ = switch__6551__auto__.call(null, state_20704);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6554__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6554__auto__;
                        }
                        break;
                      }
                    } catch (e20724) {
                      if (e20724 instanceof Object) {
                        var ex__6555__auto__ = e20724;
                        var statearr_20725_20738 = state_20704;
                        statearr_20725_20738[5] = ex__6555__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20704);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e20724;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6553__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__20739 = state_20704;
                    state_20704 = G__20739;
                    continue;
                  } else {
                    return ret_value__6553__auto__;
                  }
                  break;
                }
              };
              state_machine__6552__auto__ = function(state_20704) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6552__auto____0.call(this);
                  case 1:
                    return state_machine__6552__auto____1.call(this, state_20704);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6552__auto____0;
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6552__auto____1;
              return state_machine__6552__auto__;
            }();
          }(switch__6551__auto__, c__6607__auto___20727, out);
        }();
        var state__6609__auto__ = function() {
          var statearr_20726 = f__6608__auto__.call(null);
          statearr_20726[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6607__auto___20727;
          return statearr_20726;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6609__auto__);
      };
    }(c__6607__auto___20727, out));
    return out;
  };
  take = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return take__2.call(this, n, ch);
      case 3:
        return take__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  take.cljs$core$IFn$_invoke$arity$3 = take__3;
  return take;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t20747 !== "undefined") {
  } else {
    cljs.core.async.t20747 = function(ch, f, map_LT_, meta20748) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta20748 = meta20748;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t20747.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t20747.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t20747.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t20747.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t20750 !== "undefined") {
        } else {
          cljs.core.async.t20750 = function(fn1, _, meta20748, map_LT_, f, ch, meta20751) {
            this.fn1 = fn1;
            this._ = _;
            this.meta20748 = meta20748;
            this.map_LT_ = map_LT_;
            this.f = f;
            this.ch = ch;
            this.meta20751 = meta20751;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t20750.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t20750.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t20750.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$2, ___$1) {
                return function(p1__20740_SHARP_) {
                  return f1.call(null, p1__20740_SHARP_ == null ? null : self__.f.call(null, p1__20740_SHARP_));
                };
              }(f1, ___$2, ___$1);
            };
          }(___$1);
          cljs.core.async.t20750.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_20752) {
              var self__ = this;
              var _20752__$1 = this;
              return self__.meta20751;
            };
          }(___$1);
          cljs.core.async.t20750.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_20752, meta20751__$1) {
              var self__ = this;
              var _20752__$1 = this;
              return new cljs.core.async.t20750(self__.fn1, self__._, self__.meta20748, self__.map_LT_, self__.f, self__.ch, meta20751__$1);
            };
          }(___$1);
          cljs.core.async.t20750.cljs$lang$type = true;
          cljs.core.async.t20750.cljs$lang$ctorStr = "cljs.core.async/t20750";
          cljs.core.async.t20750.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
              return cljs.core._write.call(null, writer__4417__auto__, "cljs.core.async/t20750");
            };
          }(___$1);
          cljs.core.async.__GT_t20750 = function(___$1) {
            return function __GT_t20750(fn1__$1, ___$2, meta20748__$1, map_LT___$1, f__$1, ch__$1, meta20751) {
              return new cljs.core.async.t20750(fn1__$1, ___$2, meta20748__$1, map_LT___$1, f__$1, ch__$1, meta20751);
            };
          }(___$1);
        }
        return new cljs.core.async.t20750(fn1, ___$1, self__.meta20748, self__.map_LT_, self__.f, self__.ch, cljs.core.PersistentArrayMap.EMPTY);
      }());
      if (cljs.core.truth_(function() {
        var and__3817__auto__ = ret;
        if (cljs.core.truth_(and__3817__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3817__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t20747.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t20747.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t20747.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t20747.prototype.cljs$core$IMeta$_meta$arity$1 = function(_20749) {
      var self__ = this;
      var _20749__$1 = this;
      return self__.meta20748;
    };
    cljs.core.async.t20747.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_20749, meta20748__$1) {
      var self__ = this;
      var _20749__$1 = this;
      return new cljs.core.async.t20747(self__.ch, self__.f, self__.map_LT_, meta20748__$1);
    };
    cljs.core.async.t20747.cljs$lang$type = true;
    cljs.core.async.t20747.cljs$lang$ctorStr = "cljs.core.async/t20747";
    cljs.core.async.t20747.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
      return cljs.core._write.call(null, writer__4417__auto__, "cljs.core.async/t20747");
    };
    cljs.core.async.__GT_t20747 = function __GT_t20747(ch__$1, f__$1, map_LT___$1, meta20748) {
      return new cljs.core.async.t20747(ch__$1, f__$1, map_LT___$1, meta20748);
    };
  }
  return new cljs.core.async.t20747(ch, f, map_LT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t20756 !== "undefined") {
  } else {
    cljs.core.async.t20756 = function(ch, f, map_GT_, meta20757) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta20757 = meta20757;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t20756.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t20756.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t20756.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t20756.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t20756.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t20756.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t20756.prototype.cljs$core$IMeta$_meta$arity$1 = function(_20758) {
      var self__ = this;
      var _20758__$1 = this;
      return self__.meta20757;
    };
    cljs.core.async.t20756.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_20758, meta20757__$1) {
      var self__ = this;
      var _20758__$1 = this;
      return new cljs.core.async.t20756(self__.ch, self__.f, self__.map_GT_, meta20757__$1);
    };
    cljs.core.async.t20756.cljs$lang$type = true;
    cljs.core.async.t20756.cljs$lang$ctorStr = "cljs.core.async/t20756";
    cljs.core.async.t20756.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
      return cljs.core._write.call(null, writer__4417__auto__, "cljs.core.async/t20756");
    };
    cljs.core.async.__GT_t20756 = function __GT_t20756(ch__$1, f__$1, map_GT___$1, meta20757) {
      return new cljs.core.async.t20756(ch__$1, f__$1, map_GT___$1, meta20757);
    };
  }
  return new cljs.core.async.t20756(ch, f, map_GT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t20762 !== "undefined") {
  } else {
    cljs.core.async.t20762 = function(ch, p, filter_GT_, meta20763) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta20763 = meta20763;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t20762.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t20762.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t20762.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t20762.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t20762.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t20762.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t20762.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t20762.prototype.cljs$core$IMeta$_meta$arity$1 = function(_20764) {
      var self__ = this;
      var _20764__$1 = this;
      return self__.meta20763;
    };
    cljs.core.async.t20762.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_20764, meta20763__$1) {
      var self__ = this;
      var _20764__$1 = this;
      return new cljs.core.async.t20762(self__.ch, self__.p, self__.filter_GT_, meta20763__$1);
    };
    cljs.core.async.t20762.cljs$lang$type = true;
    cljs.core.async.t20762.cljs$lang$ctorStr = "cljs.core.async/t20762";
    cljs.core.async.t20762.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
      return cljs.core._write.call(null, writer__4417__auto__, "cljs.core.async/t20762");
    };
    cljs.core.async.__GT_t20762 = function __GT_t20762(ch__$1, p__$1, filter_GT___$1, meta20763) {
      return new cljs.core.async.t20762(ch__$1, p__$1, filter_GT___$1, meta20763);
    };
  }
  return new cljs.core.async.t20762(ch, p, filter_GT_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6607__auto___20847 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6607__auto___20847, out) {
      return function() {
        var f__6608__auto__ = function() {
          var switch__6551__auto__ = function(c__6607__auto___20847, out) {
            return function(state_20826) {
              var state_val_20827 = state_20826[1];
              if (state_val_20827 === 7) {
                var inst_20822 = state_20826[2];
                var state_20826__$1 = state_20826;
                var statearr_20828_20848 = state_20826__$1;
                statearr_20828_20848[2] = inst_20822;
                statearr_20828_20848[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_20827 === 1) {
                  var state_20826__$1 = state_20826;
                  var statearr_20829_20849 = state_20826__$1;
                  statearr_20829_20849[2] = null;
                  statearr_20829_20849[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20827 === 4) {
                    var inst_20808 = state_20826[7];
                    var inst_20808__$1 = state_20826[2];
                    var inst_20809 = inst_20808__$1 == null;
                    var state_20826__$1 = function() {
                      var statearr_20830 = state_20826;
                      statearr_20830[7] = inst_20808__$1;
                      return statearr_20830;
                    }();
                    if (cljs.core.truth_(inst_20809)) {
                      var statearr_20831_20850 = state_20826__$1;
                      statearr_20831_20850[1] = 5;
                    } else {
                      var statearr_20832_20851 = state_20826__$1;
                      statearr_20832_20851[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_20827 === 6) {
                      var inst_20808 = state_20826[7];
                      var inst_20813 = p.call(null, inst_20808);
                      var state_20826__$1 = state_20826;
                      if (cljs.core.truth_(inst_20813)) {
                        var statearr_20833_20852 = state_20826__$1;
                        statearr_20833_20852[1] = 8;
                      } else {
                        var statearr_20834_20853 = state_20826__$1;
                        statearr_20834_20853[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_20827 === 3) {
                        var inst_20824 = state_20826[2];
                        var state_20826__$1 = state_20826;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20826__$1, inst_20824);
                      } else {
                        if (state_val_20827 === 2) {
                          var state_20826__$1 = state_20826;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20826__$1, 4, ch);
                        } else {
                          if (state_val_20827 === 11) {
                            var inst_20816 = state_20826[2];
                            var state_20826__$1 = state_20826;
                            var statearr_20835_20854 = state_20826__$1;
                            statearr_20835_20854[2] = inst_20816;
                            statearr_20835_20854[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_20827 === 9) {
                              var state_20826__$1 = state_20826;
                              var statearr_20836_20855 = state_20826__$1;
                              statearr_20836_20855[2] = null;
                              statearr_20836_20855[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_20827 === 5) {
                                var inst_20811 = cljs.core.async.close_BANG_.call(null, out);
                                var state_20826__$1 = state_20826;
                                var statearr_20837_20856 = state_20826__$1;
                                statearr_20837_20856[2] = inst_20811;
                                statearr_20837_20856[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_20827 === 10) {
                                  var inst_20819 = state_20826[2];
                                  var state_20826__$1 = function() {
                                    var statearr_20838 = state_20826;
                                    statearr_20838[8] = inst_20819;
                                    return statearr_20838;
                                  }();
                                  var statearr_20839_20857 = state_20826__$1;
                                  statearr_20839_20857[2] = null;
                                  statearr_20839_20857[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_20827 === 8) {
                                    var inst_20808 = state_20826[7];
                                    var state_20826__$1 = state_20826;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20826__$1, 11, out, inst_20808);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6607__auto___20847, out);
          return function(switch__6551__auto__, c__6607__auto___20847, out) {
            return function() {
              var state_machine__6552__auto__ = null;
              var state_machine__6552__auto____0 = function() {
                var statearr_20843 = [null, null, null, null, null, null, null, null, null];
                statearr_20843[0] = state_machine__6552__auto__;
                statearr_20843[1] = 1;
                return statearr_20843;
              };
              var state_machine__6552__auto____1 = function(state_20826) {
                while (true) {
                  var ret_value__6553__auto__ = function() {
                    try {
                      while (true) {
                        var result__6554__auto__ = switch__6551__auto__.call(null, state_20826);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6554__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6554__auto__;
                        }
                        break;
                      }
                    } catch (e20844) {
                      if (e20844 instanceof Object) {
                        var ex__6555__auto__ = e20844;
                        var statearr_20845_20858 = state_20826;
                        statearr_20845_20858[5] = ex__6555__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20826);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e20844;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6553__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__20859 = state_20826;
                    state_20826 = G__20859;
                    continue;
                  } else {
                    return ret_value__6553__auto__;
                  }
                  break;
                }
              };
              state_machine__6552__auto__ = function(state_20826) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6552__auto____0.call(this);
                  case 1:
                    return state_machine__6552__auto____1.call(this, state_20826);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6552__auto____0;
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6552__auto____1;
              return state_machine__6552__auto__;
            }();
          }(switch__6551__auto__, c__6607__auto___20847, out);
        }();
        var state__6609__auto__ = function() {
          var statearr_20846 = f__6608__auto__.call(null);
          statearr_20846[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6607__auto___20847;
          return statearr_20846;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6609__auto__);
      };
    }(c__6607__auto___20847, out));
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__6607__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6607__auto__) {
    return function() {
      var f__6608__auto__ = function() {
        var switch__6551__auto__ = function(c__6607__auto__) {
          return function(state_21025) {
            var state_val_21026 = state_21025[1];
            if (state_val_21026 === 7) {
              var inst_21021 = state_21025[2];
              var state_21025__$1 = state_21025;
              var statearr_21027_21068 = state_21025__$1;
              statearr_21027_21068[2] = inst_21021;
              statearr_21027_21068[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_21026 === 20) {
                var inst_20991 = state_21025[7];
                var inst_21002 = state_21025[2];
                var inst_21003 = cljs.core.next.call(null, inst_20991);
                var inst_20977 = inst_21003;
                var inst_20978 = null;
                var inst_20979 = 0;
                var inst_20980 = 0;
                var state_21025__$1 = function() {
                  var statearr_21028 = state_21025;
                  statearr_21028[8] = inst_21002;
                  statearr_21028[9] = inst_20979;
                  statearr_21028[10] = inst_20978;
                  statearr_21028[11] = inst_20977;
                  statearr_21028[12] = inst_20980;
                  return statearr_21028;
                }();
                var statearr_21029_21069 = state_21025__$1;
                statearr_21029_21069[2] = null;
                statearr_21029_21069[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21026 === 1) {
                  var state_21025__$1 = state_21025;
                  var statearr_21030_21070 = state_21025__$1;
                  statearr_21030_21070[2] = null;
                  statearr_21030_21070[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21026 === 4) {
                    var inst_20966 = state_21025[13];
                    var inst_20966__$1 = state_21025[2];
                    var inst_20967 = inst_20966__$1 == null;
                    var state_21025__$1 = function() {
                      var statearr_21031 = state_21025;
                      statearr_21031[13] = inst_20966__$1;
                      return statearr_21031;
                    }();
                    if (cljs.core.truth_(inst_20967)) {
                      var statearr_21032_21071 = state_21025__$1;
                      statearr_21032_21071[1] = 5;
                    } else {
                      var statearr_21033_21072 = state_21025__$1;
                      statearr_21033_21072[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_21026 === 15) {
                      var state_21025__$1 = state_21025;
                      var statearr_21037_21073 = state_21025__$1;
                      statearr_21037_21073[2] = null;
                      statearr_21037_21073[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_21026 === 21) {
                        var state_21025__$1 = state_21025;
                        var statearr_21038_21074 = state_21025__$1;
                        statearr_21038_21074[2] = null;
                        statearr_21038_21074[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_21026 === 13) {
                          var inst_20979 = state_21025[9];
                          var inst_20978 = state_21025[10];
                          var inst_20977 = state_21025[11];
                          var inst_20980 = state_21025[12];
                          var inst_20987 = state_21025[2];
                          var inst_20988 = inst_20980 + 1;
                          var tmp21034 = inst_20979;
                          var tmp21035 = inst_20978;
                          var tmp21036 = inst_20977;
                          var inst_20977__$1 = tmp21036;
                          var inst_20978__$1 = tmp21035;
                          var inst_20979__$1 = tmp21034;
                          var inst_20980__$1 = inst_20988;
                          var state_21025__$1 = function() {
                            var statearr_21039 = state_21025;
                            statearr_21039[9] = inst_20979__$1;
                            statearr_21039[10] = inst_20978__$1;
                            statearr_21039[14] = inst_20987;
                            statearr_21039[11] = inst_20977__$1;
                            statearr_21039[12] = inst_20980__$1;
                            return statearr_21039;
                          }();
                          var statearr_21040_21075 = state_21025__$1;
                          statearr_21040_21075[2] = null;
                          statearr_21040_21075[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_21026 === 22) {
                            var state_21025__$1 = state_21025;
                            var statearr_21041_21076 = state_21025__$1;
                            statearr_21041_21076[2] = null;
                            statearr_21041_21076[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_21026 === 6) {
                              var inst_20966 = state_21025[13];
                              var inst_20975 = f.call(null, inst_20966);
                              var inst_20976 = cljs.core.seq.call(null, inst_20975);
                              var inst_20977 = inst_20976;
                              var inst_20978 = null;
                              var inst_20979 = 0;
                              var inst_20980 = 0;
                              var state_21025__$1 = function() {
                                var statearr_21042 = state_21025;
                                statearr_21042[9] = inst_20979;
                                statearr_21042[10] = inst_20978;
                                statearr_21042[11] = inst_20977;
                                statearr_21042[12] = inst_20980;
                                return statearr_21042;
                              }();
                              var statearr_21043_21077 = state_21025__$1;
                              statearr_21043_21077[2] = null;
                              statearr_21043_21077[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_21026 === 17) {
                                var inst_20991 = state_21025[7];
                                var inst_20995 = cljs.core.chunk_first.call(null, inst_20991);
                                var inst_20996 = cljs.core.chunk_rest.call(null, inst_20991);
                                var inst_20997 = cljs.core.count.call(null, inst_20995);
                                var inst_20977 = inst_20996;
                                var inst_20978 = inst_20995;
                                var inst_20979 = inst_20997;
                                var inst_20980 = 0;
                                var state_21025__$1 = function() {
                                  var statearr_21044 = state_21025;
                                  statearr_21044[9] = inst_20979;
                                  statearr_21044[10] = inst_20978;
                                  statearr_21044[11] = inst_20977;
                                  statearr_21044[12] = inst_20980;
                                  return statearr_21044;
                                }();
                                var statearr_21045_21078 = state_21025__$1;
                                statearr_21045_21078[2] = null;
                                statearr_21045_21078[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_21026 === 3) {
                                  var inst_21023 = state_21025[2];
                                  var state_21025__$1 = state_21025;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21025__$1, inst_21023);
                                } else {
                                  if (state_val_21026 === 12) {
                                    var inst_21011 = state_21025[2];
                                    var state_21025__$1 = state_21025;
                                    var statearr_21046_21079 = state_21025__$1;
                                    statearr_21046_21079[2] = inst_21011;
                                    statearr_21046_21079[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_21026 === 2) {
                                      var state_21025__$1 = state_21025;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21025__$1, 4, in$);
                                    } else {
                                      if (state_val_21026 === 23) {
                                        var inst_21019 = state_21025[2];
                                        var state_21025__$1 = state_21025;
                                        var statearr_21047_21080 = state_21025__$1;
                                        statearr_21047_21080[2] = inst_21019;
                                        statearr_21047_21080[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_21026 === 19) {
                                          var inst_21006 = state_21025[2];
                                          var state_21025__$1 = state_21025;
                                          var statearr_21048_21081 = state_21025__$1;
                                          statearr_21048_21081[2] = inst_21006;
                                          statearr_21048_21081[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_21026 === 11) {
                                            var inst_20991 = state_21025[7];
                                            var inst_20977 = state_21025[11];
                                            var inst_20991__$1 = cljs.core.seq.call(null, inst_20977);
                                            var state_21025__$1 = function() {
                                              var statearr_21049 = state_21025;
                                              statearr_21049[7] = inst_20991__$1;
                                              return statearr_21049;
                                            }();
                                            if (inst_20991__$1) {
                                              var statearr_21050_21082 = state_21025__$1;
                                              statearr_21050_21082[1] = 14;
                                            } else {
                                              var statearr_21051_21083 = state_21025__$1;
                                              statearr_21051_21083[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_21026 === 9) {
                                              var inst_21013 = state_21025[2];
                                              var inst_21014 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_21025__$1 = function() {
                                                var statearr_21052 = state_21025;
                                                statearr_21052[15] = inst_21013;
                                                return statearr_21052;
                                              }();
                                              if (cljs.core.truth_(inst_21014)) {
                                                var statearr_21053_21084 = state_21025__$1;
                                                statearr_21053_21084[1] = 21;
                                              } else {
                                                var statearr_21054_21085 = state_21025__$1;
                                                statearr_21054_21085[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_21026 === 5) {
                                                var inst_20969 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_21025__$1 = state_21025;
                                                var statearr_21055_21086 = state_21025__$1;
                                                statearr_21055_21086[2] = inst_20969;
                                                statearr_21055_21086[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_21026 === 14) {
                                                  var inst_20991 = state_21025[7];
                                                  var inst_20993 = cljs.core.chunked_seq_QMARK_.call(null, inst_20991);
                                                  var state_21025__$1 = state_21025;
                                                  if (inst_20993) {
                                                    var statearr_21056_21087 = state_21025__$1;
                                                    statearr_21056_21087[1] = 17;
                                                  } else {
                                                    var statearr_21057_21088 = state_21025__$1;
                                                    statearr_21057_21088[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_21026 === 16) {
                                                    var inst_21009 = state_21025[2];
                                                    var state_21025__$1 = state_21025;
                                                    var statearr_21058_21089 = state_21025__$1;
                                                    statearr_21058_21089[2] = inst_21009;
                                                    statearr_21058_21089[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_21026 === 10) {
                                                      var inst_20978 = state_21025[10];
                                                      var inst_20980 = state_21025[12];
                                                      var inst_20985 = cljs.core._nth.call(null, inst_20978, inst_20980);
                                                      var state_21025__$1 = state_21025;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21025__$1, 13, out, inst_20985);
                                                    } else {
                                                      if (state_val_21026 === 18) {
                                                        var inst_20991 = state_21025[7];
                                                        var inst_21000 = cljs.core.first.call(null, inst_20991);
                                                        var state_21025__$1 = state_21025;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21025__$1, 20, out, inst_21000);
                                                      } else {
                                                        if (state_val_21026 === 8) {
                                                          var inst_20979 = state_21025[9];
                                                          var inst_20980 = state_21025[12];
                                                          var inst_20982 = inst_20980 < inst_20979;
                                                          var inst_20983 = inst_20982;
                                                          var state_21025__$1 = state_21025;
                                                          if (cljs.core.truth_(inst_20983)) {
                                                            var statearr_21059_21090 = state_21025__$1;
                                                            statearr_21059_21090[1] = 10;
                                                          } else {
                                                            var statearr_21060_21091 = state_21025__$1;
                                                            statearr_21060_21091[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6607__auto__);
        return function(switch__6551__auto__, c__6607__auto__) {
          return function() {
            var state_machine__6552__auto__ = null;
            var state_machine__6552__auto____0 = function() {
              var statearr_21064 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_21064[0] = state_machine__6552__auto__;
              statearr_21064[1] = 1;
              return statearr_21064;
            };
            var state_machine__6552__auto____1 = function(state_21025) {
              while (true) {
                var ret_value__6553__auto__ = function() {
                  try {
                    while (true) {
                      var result__6554__auto__ = switch__6551__auto__.call(null, state_21025);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6554__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6554__auto__;
                      }
                      break;
                    }
                  } catch (e21065) {
                    if (e21065 instanceof Object) {
                      var ex__6555__auto__ = e21065;
                      var statearr_21066_21092 = state_21025;
                      statearr_21066_21092[5] = ex__6555__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21025);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e21065;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6553__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__21093 = state_21025;
                  state_21025 = G__21093;
                  continue;
                } else {
                  return ret_value__6553__auto__;
                }
                break;
              }
            };
            state_machine__6552__auto__ = function(state_21025) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6552__auto____0.call(this);
                case 1:
                  return state_machine__6552__auto____1.call(this, state_21025);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6552__auto____0;
            state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6552__auto____1;
            return state_machine__6552__auto__;
          }();
        }(switch__6551__auto__, c__6607__auto__);
      }();
      var state__6609__auto__ = function() {
        var statearr_21067 = f__6608__auto__.call(null);
        statearr_21067[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6607__auto__;
        return statearr_21067;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6609__auto__);
    };
  }(c__6607__auto__));
  return c__6607__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.unique = function() {
  var unique = null;
  var unique__1 = function(ch) {
    return unique.call(null, ch, null);
  };
  var unique__2 = function(ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6607__auto___21190 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6607__auto___21190, out) {
      return function() {
        var f__6608__auto__ = function() {
          var switch__6551__auto__ = function(c__6607__auto___21190, out) {
            return function(state_21165) {
              var state_val_21166 = state_21165[1];
              if (state_val_21166 === 7) {
                var inst_21160 = state_21165[2];
                var state_21165__$1 = state_21165;
                var statearr_21167_21191 = state_21165__$1;
                statearr_21167_21191[2] = inst_21160;
                statearr_21167_21191[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21166 === 1) {
                  var inst_21142 = null;
                  var state_21165__$1 = function() {
                    var statearr_21168 = state_21165;
                    statearr_21168[7] = inst_21142;
                    return statearr_21168;
                  }();
                  var statearr_21169_21192 = state_21165__$1;
                  statearr_21169_21192[2] = null;
                  statearr_21169_21192[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21166 === 4) {
                    var inst_21145 = state_21165[8];
                    var inst_21145__$1 = state_21165[2];
                    var inst_21146 = inst_21145__$1 == null;
                    var inst_21147 = cljs.core.not.call(null, inst_21146);
                    var state_21165__$1 = function() {
                      var statearr_21170 = state_21165;
                      statearr_21170[8] = inst_21145__$1;
                      return statearr_21170;
                    }();
                    if (inst_21147) {
                      var statearr_21171_21193 = state_21165__$1;
                      statearr_21171_21193[1] = 5;
                    } else {
                      var statearr_21172_21194 = state_21165__$1;
                      statearr_21172_21194[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_21166 === 6) {
                      var state_21165__$1 = state_21165;
                      var statearr_21173_21195 = state_21165__$1;
                      statearr_21173_21195[2] = null;
                      statearr_21173_21195[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_21166 === 3) {
                        var inst_21162 = state_21165[2];
                        var inst_21163 = cljs.core.async.close_BANG_.call(null, out);
                        var state_21165__$1 = function() {
                          var statearr_21174 = state_21165;
                          statearr_21174[9] = inst_21162;
                          return statearr_21174;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21165__$1, inst_21163);
                      } else {
                        if (state_val_21166 === 2) {
                          var state_21165__$1 = state_21165;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21165__$1, 4, ch);
                        } else {
                          if (state_val_21166 === 11) {
                            var inst_21145 = state_21165[8];
                            var inst_21154 = state_21165[2];
                            var inst_21142 = inst_21145;
                            var state_21165__$1 = function() {
                              var statearr_21175 = state_21165;
                              statearr_21175[7] = inst_21142;
                              statearr_21175[10] = inst_21154;
                              return statearr_21175;
                            }();
                            var statearr_21176_21196 = state_21165__$1;
                            statearr_21176_21196[2] = null;
                            statearr_21176_21196[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_21166 === 9) {
                              var inst_21145 = state_21165[8];
                              var state_21165__$1 = state_21165;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21165__$1, 11, out, inst_21145);
                            } else {
                              if (state_val_21166 === 5) {
                                var inst_21145 = state_21165[8];
                                var inst_21142 = state_21165[7];
                                var inst_21149 = cljs.core._EQ_.call(null, inst_21145, inst_21142);
                                var state_21165__$1 = state_21165;
                                if (inst_21149) {
                                  var statearr_21178_21197 = state_21165__$1;
                                  statearr_21178_21197[1] = 8;
                                } else {
                                  var statearr_21179_21198 = state_21165__$1;
                                  statearr_21179_21198[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_21166 === 10) {
                                  var inst_21157 = state_21165[2];
                                  var state_21165__$1 = state_21165;
                                  var statearr_21180_21199 = state_21165__$1;
                                  statearr_21180_21199[2] = inst_21157;
                                  statearr_21180_21199[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_21166 === 8) {
                                    var inst_21142 = state_21165[7];
                                    var tmp21177 = inst_21142;
                                    var inst_21142__$1 = tmp21177;
                                    var state_21165__$1 = function() {
                                      var statearr_21181 = state_21165;
                                      statearr_21181[7] = inst_21142__$1;
                                      return statearr_21181;
                                    }();
                                    var statearr_21182_21200 = state_21165__$1;
                                    statearr_21182_21200[2] = null;
                                    statearr_21182_21200[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6607__auto___21190, out);
          return function(switch__6551__auto__, c__6607__auto___21190, out) {
            return function() {
              var state_machine__6552__auto__ = null;
              var state_machine__6552__auto____0 = function() {
                var statearr_21186 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_21186[0] = state_machine__6552__auto__;
                statearr_21186[1] = 1;
                return statearr_21186;
              };
              var state_machine__6552__auto____1 = function(state_21165) {
                while (true) {
                  var ret_value__6553__auto__ = function() {
                    try {
                      while (true) {
                        var result__6554__auto__ = switch__6551__auto__.call(null, state_21165);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6554__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6554__auto__;
                        }
                        break;
                      }
                    } catch (e21187) {
                      if (e21187 instanceof Object) {
                        var ex__6555__auto__ = e21187;
                        var statearr_21188_21201 = state_21165;
                        statearr_21188_21201[5] = ex__6555__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21165);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e21187;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6553__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__21202 = state_21165;
                    state_21165 = G__21202;
                    continue;
                  } else {
                    return ret_value__6553__auto__;
                  }
                  break;
                }
              };
              state_machine__6552__auto__ = function(state_21165) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6552__auto____0.call(this);
                  case 1:
                    return state_machine__6552__auto____1.call(this, state_21165);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6552__auto____0;
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6552__auto____1;
              return state_machine__6552__auto__;
            }();
          }(switch__6551__auto__, c__6607__auto___21190, out);
        }();
        var state__6609__auto__ = function() {
          var statearr_21189 = f__6608__auto__.call(null);
          statearr_21189[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6607__auto___21190;
          return statearr_21189;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6609__auto__);
      };
    }(c__6607__auto___21190, out));
    return out;
  };
  unique = function(ch, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return unique__1.call(this, ch);
      case 2:
        return unique__2.call(this, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unique.cljs$core$IFn$_invoke$arity$1 = unique__1;
  unique.cljs$core$IFn$_invoke$arity$2 = unique__2;
  return unique;
}();
cljs.core.async.partition = function() {
  var partition = null;
  var partition__2 = function(n, ch) {
    return partition.call(null, n, ch, null);
  };
  var partition__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6607__auto___21337 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6607__auto___21337, out) {
      return function() {
        var f__6608__auto__ = function() {
          var switch__6551__auto__ = function(c__6607__auto___21337, out) {
            return function(state_21307) {
              var state_val_21308 = state_21307[1];
              if (state_val_21308 === 7) {
                var inst_21303 = state_21307[2];
                var state_21307__$1 = state_21307;
                var statearr_21309_21338 = state_21307__$1;
                statearr_21309_21338[2] = inst_21303;
                statearr_21309_21338[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21308 === 1) {
                  var inst_21270 = new Array(n);
                  var inst_21271 = inst_21270;
                  var inst_21272 = 0;
                  var state_21307__$1 = function() {
                    var statearr_21310 = state_21307;
                    statearr_21310[7] = inst_21272;
                    statearr_21310[8] = inst_21271;
                    return statearr_21310;
                  }();
                  var statearr_21311_21339 = state_21307__$1;
                  statearr_21311_21339[2] = null;
                  statearr_21311_21339[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21308 === 4) {
                    var inst_21275 = state_21307[9];
                    var inst_21275__$1 = state_21307[2];
                    var inst_21276 = inst_21275__$1 == null;
                    var inst_21277 = cljs.core.not.call(null, inst_21276);
                    var state_21307__$1 = function() {
                      var statearr_21312 = state_21307;
                      statearr_21312[9] = inst_21275__$1;
                      return statearr_21312;
                    }();
                    if (inst_21277) {
                      var statearr_21313_21340 = state_21307__$1;
                      statearr_21313_21340[1] = 5;
                    } else {
                      var statearr_21314_21341 = state_21307__$1;
                      statearr_21314_21341[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_21308 === 15) {
                      var inst_21297 = state_21307[2];
                      var state_21307__$1 = state_21307;
                      var statearr_21315_21342 = state_21307__$1;
                      statearr_21315_21342[2] = inst_21297;
                      statearr_21315_21342[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_21308 === 13) {
                        var state_21307__$1 = state_21307;
                        var statearr_21316_21343 = state_21307__$1;
                        statearr_21316_21343[2] = null;
                        statearr_21316_21343[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_21308 === 6) {
                          var inst_21272 = state_21307[7];
                          var inst_21293 = inst_21272 > 0;
                          var state_21307__$1 = state_21307;
                          if (cljs.core.truth_(inst_21293)) {
                            var statearr_21317_21344 = state_21307__$1;
                            statearr_21317_21344[1] = 12;
                          } else {
                            var statearr_21318_21345 = state_21307__$1;
                            statearr_21318_21345[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_21308 === 3) {
                            var inst_21305 = state_21307[2];
                            var state_21307__$1 = state_21307;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21307__$1, inst_21305);
                          } else {
                            if (state_val_21308 === 12) {
                              var inst_21271 = state_21307[8];
                              var inst_21295 = cljs.core.vec.call(null, inst_21271);
                              var state_21307__$1 = state_21307;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21307__$1, 15, out, inst_21295);
                            } else {
                              if (state_val_21308 === 2) {
                                var state_21307__$1 = state_21307;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21307__$1, 4, ch);
                              } else {
                                if (state_val_21308 === 11) {
                                  var inst_21287 = state_21307[2];
                                  var inst_21288 = new Array(n);
                                  var inst_21271 = inst_21288;
                                  var inst_21272 = 0;
                                  var state_21307__$1 = function() {
                                    var statearr_21319 = state_21307;
                                    statearr_21319[10] = inst_21287;
                                    statearr_21319[7] = inst_21272;
                                    statearr_21319[8] = inst_21271;
                                    return statearr_21319;
                                  }();
                                  var statearr_21320_21346 = state_21307__$1;
                                  statearr_21320_21346[2] = null;
                                  statearr_21320_21346[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_21308 === 9) {
                                    var inst_21271 = state_21307[8];
                                    var inst_21285 = cljs.core.vec.call(null, inst_21271);
                                    var state_21307__$1 = state_21307;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21307__$1, 11, out, inst_21285);
                                  } else {
                                    if (state_val_21308 === 5) {
                                      var inst_21275 = state_21307[9];
                                      var inst_21272 = state_21307[7];
                                      var inst_21280 = state_21307[11];
                                      var inst_21271 = state_21307[8];
                                      var inst_21279 = inst_21271[inst_21272] = inst_21275;
                                      var inst_21280__$1 = inst_21272 + 1;
                                      var inst_21281 = inst_21280__$1 < n;
                                      var state_21307__$1 = function() {
                                        var statearr_21321 = state_21307;
                                        statearr_21321[12] = inst_21279;
                                        statearr_21321[11] = inst_21280__$1;
                                        return statearr_21321;
                                      }();
                                      if (cljs.core.truth_(inst_21281)) {
                                        var statearr_21322_21347 = state_21307__$1;
                                        statearr_21322_21347[1] = 8;
                                      } else {
                                        var statearr_21323_21348 = state_21307__$1;
                                        statearr_21323_21348[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_21308 === 14) {
                                        var inst_21300 = state_21307[2];
                                        var inst_21301 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_21307__$1 = function() {
                                          var statearr_21325 = state_21307;
                                          statearr_21325[13] = inst_21300;
                                          return statearr_21325;
                                        }();
                                        var statearr_21326_21349 = state_21307__$1;
                                        statearr_21326_21349[2] = inst_21301;
                                        statearr_21326_21349[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_21308 === 10) {
                                          var inst_21291 = state_21307[2];
                                          var state_21307__$1 = state_21307;
                                          var statearr_21327_21350 = state_21307__$1;
                                          statearr_21327_21350[2] = inst_21291;
                                          statearr_21327_21350[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_21308 === 8) {
                                            var inst_21280 = state_21307[11];
                                            var inst_21271 = state_21307[8];
                                            var tmp21324 = inst_21271;
                                            var inst_21271__$1 = tmp21324;
                                            var inst_21272 = inst_21280;
                                            var state_21307__$1 = function() {
                                              var statearr_21328 = state_21307;
                                              statearr_21328[7] = inst_21272;
                                              statearr_21328[8] = inst_21271__$1;
                                              return statearr_21328;
                                            }();
                                            var statearr_21329_21351 = state_21307__$1;
                                            statearr_21329_21351[2] = null;
                                            statearr_21329_21351[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6607__auto___21337, out);
          return function(switch__6551__auto__, c__6607__auto___21337, out) {
            return function() {
              var state_machine__6552__auto__ = null;
              var state_machine__6552__auto____0 = function() {
                var statearr_21333 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_21333[0] = state_machine__6552__auto__;
                statearr_21333[1] = 1;
                return statearr_21333;
              };
              var state_machine__6552__auto____1 = function(state_21307) {
                while (true) {
                  var ret_value__6553__auto__ = function() {
                    try {
                      while (true) {
                        var result__6554__auto__ = switch__6551__auto__.call(null, state_21307);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6554__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6554__auto__;
                        }
                        break;
                      }
                    } catch (e21334) {
                      if (e21334 instanceof Object) {
                        var ex__6555__auto__ = e21334;
                        var statearr_21335_21352 = state_21307;
                        statearr_21335_21352[5] = ex__6555__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21307);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e21334;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6553__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__21353 = state_21307;
                    state_21307 = G__21353;
                    continue;
                  } else {
                    return ret_value__6553__auto__;
                  }
                  break;
                }
              };
              state_machine__6552__auto__ = function(state_21307) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6552__auto____0.call(this);
                  case 1:
                    return state_machine__6552__auto____1.call(this, state_21307);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6552__auto____0;
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6552__auto____1;
              return state_machine__6552__auto__;
            }();
          }(switch__6551__auto__, c__6607__auto___21337, out);
        }();
        var state__6609__auto__ = function() {
          var statearr_21336 = f__6608__auto__.call(null);
          statearr_21336[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6607__auto___21337;
          return statearr_21336;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6609__auto__);
      };
    }(c__6607__auto___21337, out));
    return out;
  };
  partition = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, ch);
      case 3:
        return partition__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  return partition;
}();
cljs.core.async.partition_by = function() {
  var partition_by = null;
  var partition_by__2 = function(f, ch) {
    return partition_by.call(null, f, ch, null);
  };
  var partition_by__3 = function(f, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6607__auto___21496 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6607__auto___21496, out) {
      return function() {
        var f__6608__auto__ = function() {
          var switch__6551__auto__ = function(c__6607__auto___21496, out) {
            return function(state_21466) {
              var state_val_21467 = state_21466[1];
              if (state_val_21467 === 7) {
                var inst_21462 = state_21466[2];
                var state_21466__$1 = state_21466;
                var statearr_21468_21497 = state_21466__$1;
                statearr_21468_21497[2] = inst_21462;
                statearr_21468_21497[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21467 === 1) {
                  var inst_21425 = [];
                  var inst_21426 = inst_21425;
                  var inst_21427 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                  var state_21466__$1 = function() {
                    var statearr_21469 = state_21466;
                    statearr_21469[7] = inst_21426;
                    statearr_21469[8] = inst_21427;
                    return statearr_21469;
                  }();
                  var statearr_21470_21498 = state_21466__$1;
                  statearr_21470_21498[2] = null;
                  statearr_21470_21498[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21467 === 4) {
                    var inst_21430 = state_21466[9];
                    var inst_21430__$1 = state_21466[2];
                    var inst_21431 = inst_21430__$1 == null;
                    var inst_21432 = cljs.core.not.call(null, inst_21431);
                    var state_21466__$1 = function() {
                      var statearr_21471 = state_21466;
                      statearr_21471[9] = inst_21430__$1;
                      return statearr_21471;
                    }();
                    if (inst_21432) {
                      var statearr_21472_21499 = state_21466__$1;
                      statearr_21472_21499[1] = 5;
                    } else {
                      var statearr_21473_21500 = state_21466__$1;
                      statearr_21473_21500[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_21467 === 15) {
                      var inst_21456 = state_21466[2];
                      var state_21466__$1 = state_21466;
                      var statearr_21474_21501 = state_21466__$1;
                      statearr_21474_21501[2] = inst_21456;
                      statearr_21474_21501[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_21467 === 13) {
                        var state_21466__$1 = state_21466;
                        var statearr_21475_21502 = state_21466__$1;
                        statearr_21475_21502[2] = null;
                        statearr_21475_21502[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_21467 === 6) {
                          var inst_21426 = state_21466[7];
                          var inst_21451 = inst_21426.length;
                          var inst_21452 = inst_21451 > 0;
                          var state_21466__$1 = state_21466;
                          if (cljs.core.truth_(inst_21452)) {
                            var statearr_21476_21503 = state_21466__$1;
                            statearr_21476_21503[1] = 12;
                          } else {
                            var statearr_21477_21504 = state_21466__$1;
                            statearr_21477_21504[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_21467 === 3) {
                            var inst_21464 = state_21466[2];
                            var state_21466__$1 = state_21466;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21466__$1, inst_21464);
                          } else {
                            if (state_val_21467 === 12) {
                              var inst_21426 = state_21466[7];
                              var inst_21454 = cljs.core.vec.call(null, inst_21426);
                              var state_21466__$1 = state_21466;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21466__$1, 15, out, inst_21454);
                            } else {
                              if (state_val_21467 === 2) {
                                var state_21466__$1 = state_21466;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21466__$1, 4, ch);
                              } else {
                                if (state_val_21467 === 11) {
                                  var inst_21434 = state_21466[10];
                                  var inst_21430 = state_21466[9];
                                  var inst_21444 = state_21466[2];
                                  var inst_21445 = [];
                                  var inst_21446 = inst_21445.push(inst_21430);
                                  var inst_21426 = inst_21445;
                                  var inst_21427 = inst_21434;
                                  var state_21466__$1 = function() {
                                    var statearr_21478 = state_21466;
                                    statearr_21478[7] = inst_21426;
                                    statearr_21478[11] = inst_21446;
                                    statearr_21478[8] = inst_21427;
                                    statearr_21478[12] = inst_21444;
                                    return statearr_21478;
                                  }();
                                  var statearr_21479_21505 = state_21466__$1;
                                  statearr_21479_21505[2] = null;
                                  statearr_21479_21505[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_21467 === 9) {
                                    var inst_21426 = state_21466[7];
                                    var inst_21442 = cljs.core.vec.call(null, inst_21426);
                                    var state_21466__$1 = state_21466;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21466__$1, 11, out, inst_21442);
                                  } else {
                                    if (state_val_21467 === 5) {
                                      var inst_21434 = state_21466[10];
                                      var inst_21430 = state_21466[9];
                                      var inst_21427 = state_21466[8];
                                      var inst_21434__$1 = f.call(null, inst_21430);
                                      var inst_21435 = cljs.core._EQ_.call(null, inst_21434__$1, inst_21427);
                                      var inst_21436 = cljs.core.keyword_identical_QMARK_.call(null, inst_21427, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                      var inst_21437 = inst_21435 || inst_21436;
                                      var state_21466__$1 = function() {
                                        var statearr_21480 = state_21466;
                                        statearr_21480[10] = inst_21434__$1;
                                        return statearr_21480;
                                      }();
                                      if (cljs.core.truth_(inst_21437)) {
                                        var statearr_21481_21506 = state_21466__$1;
                                        statearr_21481_21506[1] = 8;
                                      } else {
                                        var statearr_21482_21507 = state_21466__$1;
                                        statearr_21482_21507[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_21467 === 14) {
                                        var inst_21459 = state_21466[2];
                                        var inst_21460 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_21466__$1 = function() {
                                          var statearr_21484 = state_21466;
                                          statearr_21484[13] = inst_21459;
                                          return statearr_21484;
                                        }();
                                        var statearr_21485_21508 = state_21466__$1;
                                        statearr_21485_21508[2] = inst_21460;
                                        statearr_21485_21508[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_21467 === 10) {
                                          var inst_21449 = state_21466[2];
                                          var state_21466__$1 = state_21466;
                                          var statearr_21486_21509 = state_21466__$1;
                                          statearr_21486_21509[2] = inst_21449;
                                          statearr_21486_21509[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_21467 === 8) {
                                            var inst_21426 = state_21466[7];
                                            var inst_21434 = state_21466[10];
                                            var inst_21430 = state_21466[9];
                                            var inst_21439 = inst_21426.push(inst_21430);
                                            var tmp21483 = inst_21426;
                                            var inst_21426__$1 = tmp21483;
                                            var inst_21427 = inst_21434;
                                            var state_21466__$1 = function() {
                                              var statearr_21487 = state_21466;
                                              statearr_21487[14] = inst_21439;
                                              statearr_21487[7] = inst_21426__$1;
                                              statearr_21487[8] = inst_21427;
                                              return statearr_21487;
                                            }();
                                            var statearr_21488_21510 = state_21466__$1;
                                            statearr_21488_21510[2] = null;
                                            statearr_21488_21510[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6607__auto___21496, out);
          return function(switch__6551__auto__, c__6607__auto___21496, out) {
            return function() {
              var state_machine__6552__auto__ = null;
              var state_machine__6552__auto____0 = function() {
                var statearr_21492 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_21492[0] = state_machine__6552__auto__;
                statearr_21492[1] = 1;
                return statearr_21492;
              };
              var state_machine__6552__auto____1 = function(state_21466) {
                while (true) {
                  var ret_value__6553__auto__ = function() {
                    try {
                      while (true) {
                        var result__6554__auto__ = switch__6551__auto__.call(null, state_21466);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6554__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6554__auto__;
                        }
                        break;
                      }
                    } catch (e21493) {
                      if (e21493 instanceof Object) {
                        var ex__6555__auto__ = e21493;
                        var statearr_21494_21511 = state_21466;
                        statearr_21494_21511[5] = ex__6555__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21466);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e21493;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6553__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__21512 = state_21466;
                    state_21466 = G__21512;
                    continue;
                  } else {
                    return ret_value__6553__auto__;
                  }
                  break;
                }
              };
              state_machine__6552__auto__ = function(state_21466) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6552__auto____0.call(this);
                  case 1:
                    return state_machine__6552__auto____1.call(this, state_21466);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6552__auto____0;
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6552__auto____1;
              return state_machine__6552__auto__;
            }();
          }(switch__6551__auto__, c__6607__auto___21496, out);
        }();
        var state__6609__auto__ = function() {
          var statearr_21495 = f__6608__auto__.call(null);
          statearr_21495[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6607__auto___21496;
          return statearr_21495;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6609__auto__);
      };
    }(c__6607__auto___21496, out));
    return out;
  };
  partition_by = function(f, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition_by__2.call(this, f, ch);
      case 3:
        return partition_by__3.call(this, f, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  partition_by.cljs$core$IFn$_invoke$arity$3 = partition_by__3;
  return partition_by;
}();
goog.provide("quiescent");
goog.require("cljs.core");
quiescent.js_props = function js_props(obj) {
  if (cljs.core.map_QMARK_.call(null, obj)) {
    var o = function() {
      var obj25482 = {};
      return obj25482;
    }();
    var seq__25483_25489 = cljs.core.seq.call(null, obj);
    var chunk__25484_25490 = null;
    var count__25485_25491 = 0;
    var i__25486_25492 = 0;
    while (true) {
      if (i__25486_25492 < count__25485_25491) {
        var vec__25487_25493 = cljs.core._nth.call(null, chunk__25484_25490, i__25486_25492);
        var k_25494 = cljs.core.nth.call(null, vec__25487_25493, 0, null);
        var v_25495 = cljs.core.nth.call(null, vec__25487_25493, 1, null);
        o[cljs.core.name.call(null, k_25494)] = js_props.call(null, v_25495);
        var G__25496 = seq__25483_25489;
        var G__25497 = chunk__25484_25490;
        var G__25498 = count__25485_25491;
        var G__25499 = i__25486_25492 + 1;
        seq__25483_25489 = G__25496;
        chunk__25484_25490 = G__25497;
        count__25485_25491 = G__25498;
        i__25486_25492 = G__25499;
        continue;
      } else {
        var temp__4126__auto___25500 = cljs.core.seq.call(null, seq__25483_25489);
        if (temp__4126__auto___25500) {
          var seq__25483_25501__$1 = temp__4126__auto___25500;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__25483_25501__$1)) {
            var c__4616__auto___25502 = cljs.core.chunk_first.call(null, seq__25483_25501__$1);
            var G__25503 = cljs.core.chunk_rest.call(null, seq__25483_25501__$1);
            var G__25504 = c__4616__auto___25502;
            var G__25505 = cljs.core.count.call(null, c__4616__auto___25502);
            var G__25506 = 0;
            seq__25483_25489 = G__25503;
            chunk__25484_25490 = G__25504;
            count__25485_25491 = G__25505;
            i__25486_25492 = G__25506;
            continue;
          } else {
            var vec__25488_25507 = cljs.core.first.call(null, seq__25483_25501__$1);
            var k_25508 = cljs.core.nth.call(null, vec__25488_25507, 0, null);
            var v_25509 = cljs.core.nth.call(null, vec__25488_25507, 1, null);
            o[cljs.core.name.call(null, k_25508)] = js_props.call(null, v_25509);
            var G__25510 = cljs.core.next.call(null, seq__25483_25501__$1);
            var G__25511 = null;
            var G__25512 = 0;
            var G__25513 = 0;
            seq__25483_25489 = G__25510;
            chunk__25484_25490 = G__25511;
            count__25485_25491 = G__25512;
            i__25486_25492 = G__25513;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return o;
  } else {
    return obj;
  }
};
quiescent._STAR_component_STAR_ = null;
quiescent.component = function component(renderer) {
  var react_component = React.createClass({"render":function() {
    var this$ = this;
    var _STAR_component_STAR_25515 = quiescent._STAR_component_STAR_;
    quiescent._STAR_component_STAR_ = this$;
    try {
      return cljs.core.apply.call(null, renderer, this$.props["value"], this$.props["statics"]);
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_25515;
    }
  }, "shouldComponentUpdate":function(next_props, _) {
    var this$ = this;
    return cljs.core.not_EQ_.call(null, this$.props["value"], next_props["value"]);
  }});
  return function(react_component) {
    return function() {
      var G__25516__delegate = function(value, static_args) {
        return react_component.call(null, {"statics":static_args, "value":value});
      };
      var G__25516 = function(value, var_args) {
        var static_args = null;
        if (arguments.length > 1) {
          var G__25517__i = 0, G__25517__a = new Array(arguments.length - 1);
          while (G__25517__i < G__25517__a.length) {
            G__25517__a[G__25517__i] = arguments[G__25517__i + 1];
            ++G__25517__i;
          }
          static_args = new cljs.core.IndexedSeq(G__25517__a, 0);
        }
        return G__25516__delegate.call(this, value, static_args);
      };
      G__25516.cljs$lang$maxFixedArity = 1;
      G__25516.cljs$lang$applyTo = function(arglist__25518) {
        var value = cljs.core.first(arglist__25518);
        var static_args = cljs.core.rest(arglist__25518);
        return G__25516__delegate(value, static_args);
      };
      G__25516.cljs$core$IFn$_invoke$arity$variadic = G__25516__delegate;
      return G__25516;
    }();
  }(react_component);
};
quiescent.WrapperComponent = React.createClass({"componentWillUnmount":function() {
  var this$ = this;
  var temp__4126__auto__ = this$.props["onWillUnmount"];
  if (cljs.core.truth_(temp__4126__auto__)) {
    var f = temp__4126__auto__;
    var _STAR_component_STAR_25523 = quiescent._STAR_component_STAR_;
    quiescent._STAR_component_STAR_ = this$;
    try {
      return f.call(null);
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_25523;
    }
  } else {
    return null;
  }
}, "componentWillUpdate":function(_, ___$1) {
  var this$ = this;
  var temp__4126__auto__ = this$.props["onWillUpdate"];
  if (cljs.core.truth_(temp__4126__auto__)) {
    var f = temp__4126__auto__;
    var _STAR_component_STAR_25522 = quiescent._STAR_component_STAR_;
    quiescent._STAR_component_STAR_ = this$;
    try {
      return f.call(null);
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_25522;
    }
  } else {
    return null;
  }
}, "componentWillMount":function() {
  var this$ = this;
  var temp__4126__auto__ = this$.props["onWillMount"];
  if (cljs.core.truth_(temp__4126__auto__)) {
    var f = temp__4126__auto__;
    var _STAR_component_STAR_25521 = quiescent._STAR_component_STAR_;
    quiescent._STAR_component_STAR_ = this$;
    try {
      return f.call(null);
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_25521;
    }
  } else {
    return null;
  }
}, "componentDidMount":function() {
  var this$ = this;
  var temp__4126__auto__ = this$.props["onMount"];
  if (cljs.core.truth_(temp__4126__auto__)) {
    var f = temp__4126__auto__;
    var _STAR_component_STAR_25520 = quiescent._STAR_component_STAR_;
    quiescent._STAR_component_STAR_ = this$;
    try {
      return f.call(null, this$.getDOMNode());
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_25520;
    }
  } else {
    return null;
  }
}, "componentDidUpdate":function(prev_props, prev_state) {
  var this$ = this;
  var temp__4126__auto__ = this$.props["onUpdate"];
  if (cljs.core.truth_(temp__4126__auto__)) {
    var f = temp__4126__auto__;
    var _STAR_component_STAR_25519 = quiescent._STAR_component_STAR_;
    quiescent._STAR_component_STAR_ = this$;
    try {
      return f.call(null, this$.getDOMNode());
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_25519;
    }
  } else {
    return null;
  }
}, "render":function() {
  var this$ = this;
  return this$.props["wrappee"];
}});
quiescent.wrapper = function() {
  var wrapper__delegate = function(child, kvs) {
    var props = quiescent.js_props.call(null, cljs.core.apply.call(null, cljs.core.array_map, new cljs.core.Keyword(null, "wrappee", "wrappee", 876822573), child, kvs));
    var temp__4126__auto___25524 = child.props["key"];
    if (cljs.core.truth_(temp__4126__auto___25524)) {
      var key_25525 = temp__4126__auto___25524;
      props["key"] = key_25525;
    } else {
    }
    return quiescent.WrapperComponent.call(null, props);
  };
  var wrapper = function(child, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      var G__25526__i = 0, G__25526__a = new Array(arguments.length - 1);
      while (G__25526__i < G__25526__a.length) {
        G__25526__a[G__25526__i] = arguments[G__25526__i + 1];
        ++G__25526__i;
      }
      kvs = new cljs.core.IndexedSeq(G__25526__a, 0);
    }
    return wrapper__delegate.call(this, child, kvs);
  };
  wrapper.cljs$lang$maxFixedArity = 1;
  wrapper.cljs$lang$applyTo = function(arglist__25527) {
    var child = cljs.core.first(arglist__25527);
    var kvs = cljs.core.rest(arglist__25527);
    return wrapper__delegate(child, kvs);
  };
  wrapper.cljs$core$IFn$_invoke$arity$variadic = wrapper__delegate;
  return wrapper;
}();
quiescent.on_update = function on_update(child, f) {
  return quiescent.wrapper.call(null, child, new cljs.core.Keyword(null, "onUpdate", "onUpdate", -315358968), f);
};
quiescent.on_mount = function on_mount(child, f) {
  return quiescent.wrapper.call(null, child, new cljs.core.Keyword(null, "onMount", "onMount", -876858467), f);
};
quiescent.on_render = function on_render(child, f) {
  return quiescent.wrapper.call(null, child, new cljs.core.Keyword(null, "onMount", "onMount", -876858467), f, new cljs.core.Keyword(null, "onUpdate", "onUpdate", -315358968), f);
};
quiescent.on_will_mount = function on_will_mount(child, f) {
  return quiescent.wrapper.call(null, child, new cljs.core.Keyword(null, "onWillMount", "onWillMount", -2065876946), f);
};
quiescent.on_will_update = function on_will_update(child, f) {
  return quiescent.wrapper.call(null, child, new cljs.core.Keyword(null, "onWillUpdate", "onWillUpdate", 1307659073), f);
};
quiescent.on_will_render = function on_will_render(child, f) {
  return quiescent.wrapper.call(null, child, new cljs.core.Keyword(null, "onWillMount", "onWillMount", -2065876946), f, new cljs.core.Keyword(null, "onWillUpdate", "onWillUpdate", 1307659073), f);
};
quiescent.on_will_unmount = function on_will_unmount(child, f) {
  return quiescent.wrapper.call(null, child, new cljs.core.Keyword(null, "onWillUnmount", "onWillUnmount", -16104606), f);
};
quiescent.render = function render(component, node) {
  return React.renderComponent(component, node);
};
goog.provide("quiescent.dom");
goog.require("cljs.core");
goog.require("quiescent");
quiescent.dom.a = function() {
  var a__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21756_22704 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21757_22705 = null;
    var count__21758_22706 = 0;
    var i__21759_22707 = 0;
    while (true) {
      if (i__21759_22707 < count__21758_22706) {
        var arg__9396__auto___22708 = cljs.core._nth.call(null, chunk__21757_22705, i__21759_22707);
        a__9395__auto__.push(arg__9396__auto___22708);
        var G__22709 = seq__21756_22704;
        var G__22710 = chunk__21757_22705;
        var G__22711 = count__21758_22706;
        var G__22712 = i__21759_22707 + 1;
        seq__21756_22704 = G__22709;
        chunk__21757_22705 = G__22710;
        count__21758_22706 = G__22711;
        i__21759_22707 = G__22712;
        continue;
      } else {
        var temp__4126__auto___22713 = cljs.core.seq.call(null, seq__21756_22704);
        if (temp__4126__auto___22713) {
          var seq__21756_22714__$1 = temp__4126__auto___22713;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21756_22714__$1)) {
            var c__4616__auto___22715 = cljs.core.chunk_first.call(null, seq__21756_22714__$1);
            var G__22716 = cljs.core.chunk_rest.call(null, seq__21756_22714__$1);
            var G__22717 = c__4616__auto___22715;
            var G__22718 = cljs.core.count.call(null, c__4616__auto___22715);
            var G__22719 = 0;
            seq__21756_22704 = G__22716;
            chunk__21757_22705 = G__22717;
            count__21758_22706 = G__22718;
            i__21759_22707 = G__22719;
            continue;
          } else {
            var arg__9396__auto___22720 = cljs.core.first.call(null, seq__21756_22714__$1);
            a__9395__auto__.push(arg__9396__auto___22720);
            var G__22721 = cljs.core.next.call(null, seq__21756_22714__$1);
            var G__22722 = null;
            var G__22723 = 0;
            var G__22724 = 0;
            seq__21756_22704 = G__22721;
            chunk__21757_22705 = G__22722;
            count__21758_22706 = G__22723;
            i__21759_22707 = G__22724;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.a.apply(null, a__9395__auto__);
  };
  var a = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__22725__i = 0, G__22725__a = new Array(arguments.length - 0);
      while (G__22725__i < G__22725__a.length) {
        G__22725__a[G__22725__i] = arguments[G__22725__i + 0];
        ++G__22725__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__22725__a, 0);
    }
    return a__delegate.call(this, args__9394__auto__);
  };
  a.cljs$lang$maxFixedArity = 0;
  a.cljs$lang$applyTo = function(arglist__22726) {
    var args__9394__auto__ = cljs.core.seq(arglist__22726);
    return a__delegate(args__9394__auto__);
  };
  a.cljs$core$IFn$_invoke$arity$variadic = a__delegate;
  return a;
}();
quiescent.dom.abbr = function() {
  var abbr__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21764_22727 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21765_22728 = null;
    var count__21766_22729 = 0;
    var i__21767_22730 = 0;
    while (true) {
      if (i__21767_22730 < count__21766_22729) {
        var arg__9396__auto___22731 = cljs.core._nth.call(null, chunk__21765_22728, i__21767_22730);
        a__9395__auto__.push(arg__9396__auto___22731);
        var G__22732 = seq__21764_22727;
        var G__22733 = chunk__21765_22728;
        var G__22734 = count__21766_22729;
        var G__22735 = i__21767_22730 + 1;
        seq__21764_22727 = G__22732;
        chunk__21765_22728 = G__22733;
        count__21766_22729 = G__22734;
        i__21767_22730 = G__22735;
        continue;
      } else {
        var temp__4126__auto___22736 = cljs.core.seq.call(null, seq__21764_22727);
        if (temp__4126__auto___22736) {
          var seq__21764_22737__$1 = temp__4126__auto___22736;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21764_22737__$1)) {
            var c__4616__auto___22738 = cljs.core.chunk_first.call(null, seq__21764_22737__$1);
            var G__22739 = cljs.core.chunk_rest.call(null, seq__21764_22737__$1);
            var G__22740 = c__4616__auto___22738;
            var G__22741 = cljs.core.count.call(null, c__4616__auto___22738);
            var G__22742 = 0;
            seq__21764_22727 = G__22739;
            chunk__21765_22728 = G__22740;
            count__21766_22729 = G__22741;
            i__21767_22730 = G__22742;
            continue;
          } else {
            var arg__9396__auto___22743 = cljs.core.first.call(null, seq__21764_22737__$1);
            a__9395__auto__.push(arg__9396__auto___22743);
            var G__22744 = cljs.core.next.call(null, seq__21764_22737__$1);
            var G__22745 = null;
            var G__22746 = 0;
            var G__22747 = 0;
            seq__21764_22727 = G__22744;
            chunk__21765_22728 = G__22745;
            count__21766_22729 = G__22746;
            i__21767_22730 = G__22747;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.abbr.apply(null, a__9395__auto__);
  };
  var abbr = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__22748__i = 0, G__22748__a = new Array(arguments.length - 0);
      while (G__22748__i < G__22748__a.length) {
        G__22748__a[G__22748__i] = arguments[G__22748__i + 0];
        ++G__22748__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__22748__a, 0);
    }
    return abbr__delegate.call(this, args__9394__auto__);
  };
  abbr.cljs$lang$maxFixedArity = 0;
  abbr.cljs$lang$applyTo = function(arglist__22749) {
    var args__9394__auto__ = cljs.core.seq(arglist__22749);
    return abbr__delegate(args__9394__auto__);
  };
  abbr.cljs$core$IFn$_invoke$arity$variadic = abbr__delegate;
  return abbr;
}();
quiescent.dom.address = function() {
  var address__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21772_22750 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21773_22751 = null;
    var count__21774_22752 = 0;
    var i__21775_22753 = 0;
    while (true) {
      if (i__21775_22753 < count__21774_22752) {
        var arg__9396__auto___22754 = cljs.core._nth.call(null, chunk__21773_22751, i__21775_22753);
        a__9395__auto__.push(arg__9396__auto___22754);
        var G__22755 = seq__21772_22750;
        var G__22756 = chunk__21773_22751;
        var G__22757 = count__21774_22752;
        var G__22758 = i__21775_22753 + 1;
        seq__21772_22750 = G__22755;
        chunk__21773_22751 = G__22756;
        count__21774_22752 = G__22757;
        i__21775_22753 = G__22758;
        continue;
      } else {
        var temp__4126__auto___22759 = cljs.core.seq.call(null, seq__21772_22750);
        if (temp__4126__auto___22759) {
          var seq__21772_22760__$1 = temp__4126__auto___22759;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21772_22760__$1)) {
            var c__4616__auto___22761 = cljs.core.chunk_first.call(null, seq__21772_22760__$1);
            var G__22762 = cljs.core.chunk_rest.call(null, seq__21772_22760__$1);
            var G__22763 = c__4616__auto___22761;
            var G__22764 = cljs.core.count.call(null, c__4616__auto___22761);
            var G__22765 = 0;
            seq__21772_22750 = G__22762;
            chunk__21773_22751 = G__22763;
            count__21774_22752 = G__22764;
            i__21775_22753 = G__22765;
            continue;
          } else {
            var arg__9396__auto___22766 = cljs.core.first.call(null, seq__21772_22760__$1);
            a__9395__auto__.push(arg__9396__auto___22766);
            var G__22767 = cljs.core.next.call(null, seq__21772_22760__$1);
            var G__22768 = null;
            var G__22769 = 0;
            var G__22770 = 0;
            seq__21772_22750 = G__22767;
            chunk__21773_22751 = G__22768;
            count__21774_22752 = G__22769;
            i__21775_22753 = G__22770;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.address.apply(null, a__9395__auto__);
  };
  var address = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__22771__i = 0, G__22771__a = new Array(arguments.length - 0);
      while (G__22771__i < G__22771__a.length) {
        G__22771__a[G__22771__i] = arguments[G__22771__i + 0];
        ++G__22771__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__22771__a, 0);
    }
    return address__delegate.call(this, args__9394__auto__);
  };
  address.cljs$lang$maxFixedArity = 0;
  address.cljs$lang$applyTo = function(arglist__22772) {
    var args__9394__auto__ = cljs.core.seq(arglist__22772);
    return address__delegate(args__9394__auto__);
  };
  address.cljs$core$IFn$_invoke$arity$variadic = address__delegate;
  return address;
}();
quiescent.dom.area = function() {
  var area__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21780_22773 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21781_22774 = null;
    var count__21782_22775 = 0;
    var i__21783_22776 = 0;
    while (true) {
      if (i__21783_22776 < count__21782_22775) {
        var arg__9396__auto___22777 = cljs.core._nth.call(null, chunk__21781_22774, i__21783_22776);
        a__9395__auto__.push(arg__9396__auto___22777);
        var G__22778 = seq__21780_22773;
        var G__22779 = chunk__21781_22774;
        var G__22780 = count__21782_22775;
        var G__22781 = i__21783_22776 + 1;
        seq__21780_22773 = G__22778;
        chunk__21781_22774 = G__22779;
        count__21782_22775 = G__22780;
        i__21783_22776 = G__22781;
        continue;
      } else {
        var temp__4126__auto___22782 = cljs.core.seq.call(null, seq__21780_22773);
        if (temp__4126__auto___22782) {
          var seq__21780_22783__$1 = temp__4126__auto___22782;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21780_22783__$1)) {
            var c__4616__auto___22784 = cljs.core.chunk_first.call(null, seq__21780_22783__$1);
            var G__22785 = cljs.core.chunk_rest.call(null, seq__21780_22783__$1);
            var G__22786 = c__4616__auto___22784;
            var G__22787 = cljs.core.count.call(null, c__4616__auto___22784);
            var G__22788 = 0;
            seq__21780_22773 = G__22785;
            chunk__21781_22774 = G__22786;
            count__21782_22775 = G__22787;
            i__21783_22776 = G__22788;
            continue;
          } else {
            var arg__9396__auto___22789 = cljs.core.first.call(null, seq__21780_22783__$1);
            a__9395__auto__.push(arg__9396__auto___22789);
            var G__22790 = cljs.core.next.call(null, seq__21780_22783__$1);
            var G__22791 = null;
            var G__22792 = 0;
            var G__22793 = 0;
            seq__21780_22773 = G__22790;
            chunk__21781_22774 = G__22791;
            count__21782_22775 = G__22792;
            i__21783_22776 = G__22793;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.area.apply(null, a__9395__auto__);
  };
  var area = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__22794__i = 0, G__22794__a = new Array(arguments.length - 0);
      while (G__22794__i < G__22794__a.length) {
        G__22794__a[G__22794__i] = arguments[G__22794__i + 0];
        ++G__22794__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__22794__a, 0);
    }
    return area__delegate.call(this, args__9394__auto__);
  };
  area.cljs$lang$maxFixedArity = 0;
  area.cljs$lang$applyTo = function(arglist__22795) {
    var args__9394__auto__ = cljs.core.seq(arglist__22795);
    return area__delegate(args__9394__auto__);
  };
  area.cljs$core$IFn$_invoke$arity$variadic = area__delegate;
  return area;
}();
quiescent.dom.article = function() {
  var article__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21788_22796 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21789_22797 = null;
    var count__21790_22798 = 0;
    var i__21791_22799 = 0;
    while (true) {
      if (i__21791_22799 < count__21790_22798) {
        var arg__9396__auto___22800 = cljs.core._nth.call(null, chunk__21789_22797, i__21791_22799);
        a__9395__auto__.push(arg__9396__auto___22800);
        var G__22801 = seq__21788_22796;
        var G__22802 = chunk__21789_22797;
        var G__22803 = count__21790_22798;
        var G__22804 = i__21791_22799 + 1;
        seq__21788_22796 = G__22801;
        chunk__21789_22797 = G__22802;
        count__21790_22798 = G__22803;
        i__21791_22799 = G__22804;
        continue;
      } else {
        var temp__4126__auto___22805 = cljs.core.seq.call(null, seq__21788_22796);
        if (temp__4126__auto___22805) {
          var seq__21788_22806__$1 = temp__4126__auto___22805;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21788_22806__$1)) {
            var c__4616__auto___22807 = cljs.core.chunk_first.call(null, seq__21788_22806__$1);
            var G__22808 = cljs.core.chunk_rest.call(null, seq__21788_22806__$1);
            var G__22809 = c__4616__auto___22807;
            var G__22810 = cljs.core.count.call(null, c__4616__auto___22807);
            var G__22811 = 0;
            seq__21788_22796 = G__22808;
            chunk__21789_22797 = G__22809;
            count__21790_22798 = G__22810;
            i__21791_22799 = G__22811;
            continue;
          } else {
            var arg__9396__auto___22812 = cljs.core.first.call(null, seq__21788_22806__$1);
            a__9395__auto__.push(arg__9396__auto___22812);
            var G__22813 = cljs.core.next.call(null, seq__21788_22806__$1);
            var G__22814 = null;
            var G__22815 = 0;
            var G__22816 = 0;
            seq__21788_22796 = G__22813;
            chunk__21789_22797 = G__22814;
            count__21790_22798 = G__22815;
            i__21791_22799 = G__22816;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.article.apply(null, a__9395__auto__);
  };
  var article = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__22817__i = 0, G__22817__a = new Array(arguments.length - 0);
      while (G__22817__i < G__22817__a.length) {
        G__22817__a[G__22817__i] = arguments[G__22817__i + 0];
        ++G__22817__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__22817__a, 0);
    }
    return article__delegate.call(this, args__9394__auto__);
  };
  article.cljs$lang$maxFixedArity = 0;
  article.cljs$lang$applyTo = function(arglist__22818) {
    var args__9394__auto__ = cljs.core.seq(arglist__22818);
    return article__delegate(args__9394__auto__);
  };
  article.cljs$core$IFn$_invoke$arity$variadic = article__delegate;
  return article;
}();
quiescent.dom.aside = function() {
  var aside__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21796_22819 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21797_22820 = null;
    var count__21798_22821 = 0;
    var i__21799_22822 = 0;
    while (true) {
      if (i__21799_22822 < count__21798_22821) {
        var arg__9396__auto___22823 = cljs.core._nth.call(null, chunk__21797_22820, i__21799_22822);
        a__9395__auto__.push(arg__9396__auto___22823);
        var G__22824 = seq__21796_22819;
        var G__22825 = chunk__21797_22820;
        var G__22826 = count__21798_22821;
        var G__22827 = i__21799_22822 + 1;
        seq__21796_22819 = G__22824;
        chunk__21797_22820 = G__22825;
        count__21798_22821 = G__22826;
        i__21799_22822 = G__22827;
        continue;
      } else {
        var temp__4126__auto___22828 = cljs.core.seq.call(null, seq__21796_22819);
        if (temp__4126__auto___22828) {
          var seq__21796_22829__$1 = temp__4126__auto___22828;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21796_22829__$1)) {
            var c__4616__auto___22830 = cljs.core.chunk_first.call(null, seq__21796_22829__$1);
            var G__22831 = cljs.core.chunk_rest.call(null, seq__21796_22829__$1);
            var G__22832 = c__4616__auto___22830;
            var G__22833 = cljs.core.count.call(null, c__4616__auto___22830);
            var G__22834 = 0;
            seq__21796_22819 = G__22831;
            chunk__21797_22820 = G__22832;
            count__21798_22821 = G__22833;
            i__21799_22822 = G__22834;
            continue;
          } else {
            var arg__9396__auto___22835 = cljs.core.first.call(null, seq__21796_22829__$1);
            a__9395__auto__.push(arg__9396__auto___22835);
            var G__22836 = cljs.core.next.call(null, seq__21796_22829__$1);
            var G__22837 = null;
            var G__22838 = 0;
            var G__22839 = 0;
            seq__21796_22819 = G__22836;
            chunk__21797_22820 = G__22837;
            count__21798_22821 = G__22838;
            i__21799_22822 = G__22839;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.aside.apply(null, a__9395__auto__);
  };
  var aside = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__22840__i = 0, G__22840__a = new Array(arguments.length - 0);
      while (G__22840__i < G__22840__a.length) {
        G__22840__a[G__22840__i] = arguments[G__22840__i + 0];
        ++G__22840__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__22840__a, 0);
    }
    return aside__delegate.call(this, args__9394__auto__);
  };
  aside.cljs$lang$maxFixedArity = 0;
  aside.cljs$lang$applyTo = function(arglist__22841) {
    var args__9394__auto__ = cljs.core.seq(arglist__22841);
    return aside__delegate(args__9394__auto__);
  };
  aside.cljs$core$IFn$_invoke$arity$variadic = aside__delegate;
  return aside;
}();
quiescent.dom.audio = function() {
  var audio__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21804_22842 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21805_22843 = null;
    var count__21806_22844 = 0;
    var i__21807_22845 = 0;
    while (true) {
      if (i__21807_22845 < count__21806_22844) {
        var arg__9396__auto___22846 = cljs.core._nth.call(null, chunk__21805_22843, i__21807_22845);
        a__9395__auto__.push(arg__9396__auto___22846);
        var G__22847 = seq__21804_22842;
        var G__22848 = chunk__21805_22843;
        var G__22849 = count__21806_22844;
        var G__22850 = i__21807_22845 + 1;
        seq__21804_22842 = G__22847;
        chunk__21805_22843 = G__22848;
        count__21806_22844 = G__22849;
        i__21807_22845 = G__22850;
        continue;
      } else {
        var temp__4126__auto___22851 = cljs.core.seq.call(null, seq__21804_22842);
        if (temp__4126__auto___22851) {
          var seq__21804_22852__$1 = temp__4126__auto___22851;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21804_22852__$1)) {
            var c__4616__auto___22853 = cljs.core.chunk_first.call(null, seq__21804_22852__$1);
            var G__22854 = cljs.core.chunk_rest.call(null, seq__21804_22852__$1);
            var G__22855 = c__4616__auto___22853;
            var G__22856 = cljs.core.count.call(null, c__4616__auto___22853);
            var G__22857 = 0;
            seq__21804_22842 = G__22854;
            chunk__21805_22843 = G__22855;
            count__21806_22844 = G__22856;
            i__21807_22845 = G__22857;
            continue;
          } else {
            var arg__9396__auto___22858 = cljs.core.first.call(null, seq__21804_22852__$1);
            a__9395__auto__.push(arg__9396__auto___22858);
            var G__22859 = cljs.core.next.call(null, seq__21804_22852__$1);
            var G__22860 = null;
            var G__22861 = 0;
            var G__22862 = 0;
            seq__21804_22842 = G__22859;
            chunk__21805_22843 = G__22860;
            count__21806_22844 = G__22861;
            i__21807_22845 = G__22862;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.audio.apply(null, a__9395__auto__);
  };
  var audio = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__22863__i = 0, G__22863__a = new Array(arguments.length - 0);
      while (G__22863__i < G__22863__a.length) {
        G__22863__a[G__22863__i] = arguments[G__22863__i + 0];
        ++G__22863__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__22863__a, 0);
    }
    return audio__delegate.call(this, args__9394__auto__);
  };
  audio.cljs$lang$maxFixedArity = 0;
  audio.cljs$lang$applyTo = function(arglist__22864) {
    var args__9394__auto__ = cljs.core.seq(arglist__22864);
    return audio__delegate(args__9394__auto__);
  };
  audio.cljs$core$IFn$_invoke$arity$variadic = audio__delegate;
  return audio;
}();
quiescent.dom.b = function() {
  var b__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21812_22865 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21813_22866 = null;
    var count__21814_22867 = 0;
    var i__21815_22868 = 0;
    while (true) {
      if (i__21815_22868 < count__21814_22867) {
        var arg__9396__auto___22869 = cljs.core._nth.call(null, chunk__21813_22866, i__21815_22868);
        a__9395__auto__.push(arg__9396__auto___22869);
        var G__22870 = seq__21812_22865;
        var G__22871 = chunk__21813_22866;
        var G__22872 = count__21814_22867;
        var G__22873 = i__21815_22868 + 1;
        seq__21812_22865 = G__22870;
        chunk__21813_22866 = G__22871;
        count__21814_22867 = G__22872;
        i__21815_22868 = G__22873;
        continue;
      } else {
        var temp__4126__auto___22874 = cljs.core.seq.call(null, seq__21812_22865);
        if (temp__4126__auto___22874) {
          var seq__21812_22875__$1 = temp__4126__auto___22874;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21812_22875__$1)) {
            var c__4616__auto___22876 = cljs.core.chunk_first.call(null, seq__21812_22875__$1);
            var G__22877 = cljs.core.chunk_rest.call(null, seq__21812_22875__$1);
            var G__22878 = c__4616__auto___22876;
            var G__22879 = cljs.core.count.call(null, c__4616__auto___22876);
            var G__22880 = 0;
            seq__21812_22865 = G__22877;
            chunk__21813_22866 = G__22878;
            count__21814_22867 = G__22879;
            i__21815_22868 = G__22880;
            continue;
          } else {
            var arg__9396__auto___22881 = cljs.core.first.call(null, seq__21812_22875__$1);
            a__9395__auto__.push(arg__9396__auto___22881);
            var G__22882 = cljs.core.next.call(null, seq__21812_22875__$1);
            var G__22883 = null;
            var G__22884 = 0;
            var G__22885 = 0;
            seq__21812_22865 = G__22882;
            chunk__21813_22866 = G__22883;
            count__21814_22867 = G__22884;
            i__21815_22868 = G__22885;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.b.apply(null, a__9395__auto__);
  };
  var b = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__22886__i = 0, G__22886__a = new Array(arguments.length - 0);
      while (G__22886__i < G__22886__a.length) {
        G__22886__a[G__22886__i] = arguments[G__22886__i + 0];
        ++G__22886__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__22886__a, 0);
    }
    return b__delegate.call(this, args__9394__auto__);
  };
  b.cljs$lang$maxFixedArity = 0;
  b.cljs$lang$applyTo = function(arglist__22887) {
    var args__9394__auto__ = cljs.core.seq(arglist__22887);
    return b__delegate(args__9394__auto__);
  };
  b.cljs$core$IFn$_invoke$arity$variadic = b__delegate;
  return b;
}();
quiescent.dom.base = function() {
  var base__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21820_22888 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21821_22889 = null;
    var count__21822_22890 = 0;
    var i__21823_22891 = 0;
    while (true) {
      if (i__21823_22891 < count__21822_22890) {
        var arg__9396__auto___22892 = cljs.core._nth.call(null, chunk__21821_22889, i__21823_22891);
        a__9395__auto__.push(arg__9396__auto___22892);
        var G__22893 = seq__21820_22888;
        var G__22894 = chunk__21821_22889;
        var G__22895 = count__21822_22890;
        var G__22896 = i__21823_22891 + 1;
        seq__21820_22888 = G__22893;
        chunk__21821_22889 = G__22894;
        count__21822_22890 = G__22895;
        i__21823_22891 = G__22896;
        continue;
      } else {
        var temp__4126__auto___22897 = cljs.core.seq.call(null, seq__21820_22888);
        if (temp__4126__auto___22897) {
          var seq__21820_22898__$1 = temp__4126__auto___22897;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21820_22898__$1)) {
            var c__4616__auto___22899 = cljs.core.chunk_first.call(null, seq__21820_22898__$1);
            var G__22900 = cljs.core.chunk_rest.call(null, seq__21820_22898__$1);
            var G__22901 = c__4616__auto___22899;
            var G__22902 = cljs.core.count.call(null, c__4616__auto___22899);
            var G__22903 = 0;
            seq__21820_22888 = G__22900;
            chunk__21821_22889 = G__22901;
            count__21822_22890 = G__22902;
            i__21823_22891 = G__22903;
            continue;
          } else {
            var arg__9396__auto___22904 = cljs.core.first.call(null, seq__21820_22898__$1);
            a__9395__auto__.push(arg__9396__auto___22904);
            var G__22905 = cljs.core.next.call(null, seq__21820_22898__$1);
            var G__22906 = null;
            var G__22907 = 0;
            var G__22908 = 0;
            seq__21820_22888 = G__22905;
            chunk__21821_22889 = G__22906;
            count__21822_22890 = G__22907;
            i__21823_22891 = G__22908;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.base.apply(null, a__9395__auto__);
  };
  var base = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__22909__i = 0, G__22909__a = new Array(arguments.length - 0);
      while (G__22909__i < G__22909__a.length) {
        G__22909__a[G__22909__i] = arguments[G__22909__i + 0];
        ++G__22909__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__22909__a, 0);
    }
    return base__delegate.call(this, args__9394__auto__);
  };
  base.cljs$lang$maxFixedArity = 0;
  base.cljs$lang$applyTo = function(arglist__22910) {
    var args__9394__auto__ = cljs.core.seq(arglist__22910);
    return base__delegate(args__9394__auto__);
  };
  base.cljs$core$IFn$_invoke$arity$variadic = base__delegate;
  return base;
}();
quiescent.dom.bdi = function() {
  var bdi__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21828_22911 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21829_22912 = null;
    var count__21830_22913 = 0;
    var i__21831_22914 = 0;
    while (true) {
      if (i__21831_22914 < count__21830_22913) {
        var arg__9396__auto___22915 = cljs.core._nth.call(null, chunk__21829_22912, i__21831_22914);
        a__9395__auto__.push(arg__9396__auto___22915);
        var G__22916 = seq__21828_22911;
        var G__22917 = chunk__21829_22912;
        var G__22918 = count__21830_22913;
        var G__22919 = i__21831_22914 + 1;
        seq__21828_22911 = G__22916;
        chunk__21829_22912 = G__22917;
        count__21830_22913 = G__22918;
        i__21831_22914 = G__22919;
        continue;
      } else {
        var temp__4126__auto___22920 = cljs.core.seq.call(null, seq__21828_22911);
        if (temp__4126__auto___22920) {
          var seq__21828_22921__$1 = temp__4126__auto___22920;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21828_22921__$1)) {
            var c__4616__auto___22922 = cljs.core.chunk_first.call(null, seq__21828_22921__$1);
            var G__22923 = cljs.core.chunk_rest.call(null, seq__21828_22921__$1);
            var G__22924 = c__4616__auto___22922;
            var G__22925 = cljs.core.count.call(null, c__4616__auto___22922);
            var G__22926 = 0;
            seq__21828_22911 = G__22923;
            chunk__21829_22912 = G__22924;
            count__21830_22913 = G__22925;
            i__21831_22914 = G__22926;
            continue;
          } else {
            var arg__9396__auto___22927 = cljs.core.first.call(null, seq__21828_22921__$1);
            a__9395__auto__.push(arg__9396__auto___22927);
            var G__22928 = cljs.core.next.call(null, seq__21828_22921__$1);
            var G__22929 = null;
            var G__22930 = 0;
            var G__22931 = 0;
            seq__21828_22911 = G__22928;
            chunk__21829_22912 = G__22929;
            count__21830_22913 = G__22930;
            i__21831_22914 = G__22931;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.bdi.apply(null, a__9395__auto__);
  };
  var bdi = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__22932__i = 0, G__22932__a = new Array(arguments.length - 0);
      while (G__22932__i < G__22932__a.length) {
        G__22932__a[G__22932__i] = arguments[G__22932__i + 0];
        ++G__22932__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__22932__a, 0);
    }
    return bdi__delegate.call(this, args__9394__auto__);
  };
  bdi.cljs$lang$maxFixedArity = 0;
  bdi.cljs$lang$applyTo = function(arglist__22933) {
    var args__9394__auto__ = cljs.core.seq(arglist__22933);
    return bdi__delegate(args__9394__auto__);
  };
  bdi.cljs$core$IFn$_invoke$arity$variadic = bdi__delegate;
  return bdi;
}();
quiescent.dom.bdo = function() {
  var bdo__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21836_22934 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21837_22935 = null;
    var count__21838_22936 = 0;
    var i__21839_22937 = 0;
    while (true) {
      if (i__21839_22937 < count__21838_22936) {
        var arg__9396__auto___22938 = cljs.core._nth.call(null, chunk__21837_22935, i__21839_22937);
        a__9395__auto__.push(arg__9396__auto___22938);
        var G__22939 = seq__21836_22934;
        var G__22940 = chunk__21837_22935;
        var G__22941 = count__21838_22936;
        var G__22942 = i__21839_22937 + 1;
        seq__21836_22934 = G__22939;
        chunk__21837_22935 = G__22940;
        count__21838_22936 = G__22941;
        i__21839_22937 = G__22942;
        continue;
      } else {
        var temp__4126__auto___22943 = cljs.core.seq.call(null, seq__21836_22934);
        if (temp__4126__auto___22943) {
          var seq__21836_22944__$1 = temp__4126__auto___22943;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21836_22944__$1)) {
            var c__4616__auto___22945 = cljs.core.chunk_first.call(null, seq__21836_22944__$1);
            var G__22946 = cljs.core.chunk_rest.call(null, seq__21836_22944__$1);
            var G__22947 = c__4616__auto___22945;
            var G__22948 = cljs.core.count.call(null, c__4616__auto___22945);
            var G__22949 = 0;
            seq__21836_22934 = G__22946;
            chunk__21837_22935 = G__22947;
            count__21838_22936 = G__22948;
            i__21839_22937 = G__22949;
            continue;
          } else {
            var arg__9396__auto___22950 = cljs.core.first.call(null, seq__21836_22944__$1);
            a__9395__auto__.push(arg__9396__auto___22950);
            var G__22951 = cljs.core.next.call(null, seq__21836_22944__$1);
            var G__22952 = null;
            var G__22953 = 0;
            var G__22954 = 0;
            seq__21836_22934 = G__22951;
            chunk__21837_22935 = G__22952;
            count__21838_22936 = G__22953;
            i__21839_22937 = G__22954;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.bdo.apply(null, a__9395__auto__);
  };
  var bdo = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__22955__i = 0, G__22955__a = new Array(arguments.length - 0);
      while (G__22955__i < G__22955__a.length) {
        G__22955__a[G__22955__i] = arguments[G__22955__i + 0];
        ++G__22955__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__22955__a, 0);
    }
    return bdo__delegate.call(this, args__9394__auto__);
  };
  bdo.cljs$lang$maxFixedArity = 0;
  bdo.cljs$lang$applyTo = function(arglist__22956) {
    var args__9394__auto__ = cljs.core.seq(arglist__22956);
    return bdo__delegate(args__9394__auto__);
  };
  bdo.cljs$core$IFn$_invoke$arity$variadic = bdo__delegate;
  return bdo;
}();
quiescent.dom.big = function() {
  var big__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21844_22957 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21845_22958 = null;
    var count__21846_22959 = 0;
    var i__21847_22960 = 0;
    while (true) {
      if (i__21847_22960 < count__21846_22959) {
        var arg__9396__auto___22961 = cljs.core._nth.call(null, chunk__21845_22958, i__21847_22960);
        a__9395__auto__.push(arg__9396__auto___22961);
        var G__22962 = seq__21844_22957;
        var G__22963 = chunk__21845_22958;
        var G__22964 = count__21846_22959;
        var G__22965 = i__21847_22960 + 1;
        seq__21844_22957 = G__22962;
        chunk__21845_22958 = G__22963;
        count__21846_22959 = G__22964;
        i__21847_22960 = G__22965;
        continue;
      } else {
        var temp__4126__auto___22966 = cljs.core.seq.call(null, seq__21844_22957);
        if (temp__4126__auto___22966) {
          var seq__21844_22967__$1 = temp__4126__auto___22966;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21844_22967__$1)) {
            var c__4616__auto___22968 = cljs.core.chunk_first.call(null, seq__21844_22967__$1);
            var G__22969 = cljs.core.chunk_rest.call(null, seq__21844_22967__$1);
            var G__22970 = c__4616__auto___22968;
            var G__22971 = cljs.core.count.call(null, c__4616__auto___22968);
            var G__22972 = 0;
            seq__21844_22957 = G__22969;
            chunk__21845_22958 = G__22970;
            count__21846_22959 = G__22971;
            i__21847_22960 = G__22972;
            continue;
          } else {
            var arg__9396__auto___22973 = cljs.core.first.call(null, seq__21844_22967__$1);
            a__9395__auto__.push(arg__9396__auto___22973);
            var G__22974 = cljs.core.next.call(null, seq__21844_22967__$1);
            var G__22975 = null;
            var G__22976 = 0;
            var G__22977 = 0;
            seq__21844_22957 = G__22974;
            chunk__21845_22958 = G__22975;
            count__21846_22959 = G__22976;
            i__21847_22960 = G__22977;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.big.apply(null, a__9395__auto__);
  };
  var big = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__22978__i = 0, G__22978__a = new Array(arguments.length - 0);
      while (G__22978__i < G__22978__a.length) {
        G__22978__a[G__22978__i] = arguments[G__22978__i + 0];
        ++G__22978__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__22978__a, 0);
    }
    return big__delegate.call(this, args__9394__auto__);
  };
  big.cljs$lang$maxFixedArity = 0;
  big.cljs$lang$applyTo = function(arglist__22979) {
    var args__9394__auto__ = cljs.core.seq(arglist__22979);
    return big__delegate(args__9394__auto__);
  };
  big.cljs$core$IFn$_invoke$arity$variadic = big__delegate;
  return big;
}();
quiescent.dom.blockquote = function() {
  var blockquote__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21852_22980 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21853_22981 = null;
    var count__21854_22982 = 0;
    var i__21855_22983 = 0;
    while (true) {
      if (i__21855_22983 < count__21854_22982) {
        var arg__9396__auto___22984 = cljs.core._nth.call(null, chunk__21853_22981, i__21855_22983);
        a__9395__auto__.push(arg__9396__auto___22984);
        var G__22985 = seq__21852_22980;
        var G__22986 = chunk__21853_22981;
        var G__22987 = count__21854_22982;
        var G__22988 = i__21855_22983 + 1;
        seq__21852_22980 = G__22985;
        chunk__21853_22981 = G__22986;
        count__21854_22982 = G__22987;
        i__21855_22983 = G__22988;
        continue;
      } else {
        var temp__4126__auto___22989 = cljs.core.seq.call(null, seq__21852_22980);
        if (temp__4126__auto___22989) {
          var seq__21852_22990__$1 = temp__4126__auto___22989;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21852_22990__$1)) {
            var c__4616__auto___22991 = cljs.core.chunk_first.call(null, seq__21852_22990__$1);
            var G__22992 = cljs.core.chunk_rest.call(null, seq__21852_22990__$1);
            var G__22993 = c__4616__auto___22991;
            var G__22994 = cljs.core.count.call(null, c__4616__auto___22991);
            var G__22995 = 0;
            seq__21852_22980 = G__22992;
            chunk__21853_22981 = G__22993;
            count__21854_22982 = G__22994;
            i__21855_22983 = G__22995;
            continue;
          } else {
            var arg__9396__auto___22996 = cljs.core.first.call(null, seq__21852_22990__$1);
            a__9395__auto__.push(arg__9396__auto___22996);
            var G__22997 = cljs.core.next.call(null, seq__21852_22990__$1);
            var G__22998 = null;
            var G__22999 = 0;
            var G__23000 = 0;
            seq__21852_22980 = G__22997;
            chunk__21853_22981 = G__22998;
            count__21854_22982 = G__22999;
            i__21855_22983 = G__23000;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.blockquote.apply(null, a__9395__auto__);
  };
  var blockquote = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23001__i = 0, G__23001__a = new Array(arguments.length - 0);
      while (G__23001__i < G__23001__a.length) {
        G__23001__a[G__23001__i] = arguments[G__23001__i + 0];
        ++G__23001__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23001__a, 0);
    }
    return blockquote__delegate.call(this, args__9394__auto__);
  };
  blockquote.cljs$lang$maxFixedArity = 0;
  blockquote.cljs$lang$applyTo = function(arglist__23002) {
    var args__9394__auto__ = cljs.core.seq(arglist__23002);
    return blockquote__delegate(args__9394__auto__);
  };
  blockquote.cljs$core$IFn$_invoke$arity$variadic = blockquote__delegate;
  return blockquote;
}();
quiescent.dom.body = function() {
  var body__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21860_23003 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21861_23004 = null;
    var count__21862_23005 = 0;
    var i__21863_23006 = 0;
    while (true) {
      if (i__21863_23006 < count__21862_23005) {
        var arg__9396__auto___23007 = cljs.core._nth.call(null, chunk__21861_23004, i__21863_23006);
        a__9395__auto__.push(arg__9396__auto___23007);
        var G__23008 = seq__21860_23003;
        var G__23009 = chunk__21861_23004;
        var G__23010 = count__21862_23005;
        var G__23011 = i__21863_23006 + 1;
        seq__21860_23003 = G__23008;
        chunk__21861_23004 = G__23009;
        count__21862_23005 = G__23010;
        i__21863_23006 = G__23011;
        continue;
      } else {
        var temp__4126__auto___23012 = cljs.core.seq.call(null, seq__21860_23003);
        if (temp__4126__auto___23012) {
          var seq__21860_23013__$1 = temp__4126__auto___23012;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21860_23013__$1)) {
            var c__4616__auto___23014 = cljs.core.chunk_first.call(null, seq__21860_23013__$1);
            var G__23015 = cljs.core.chunk_rest.call(null, seq__21860_23013__$1);
            var G__23016 = c__4616__auto___23014;
            var G__23017 = cljs.core.count.call(null, c__4616__auto___23014);
            var G__23018 = 0;
            seq__21860_23003 = G__23015;
            chunk__21861_23004 = G__23016;
            count__21862_23005 = G__23017;
            i__21863_23006 = G__23018;
            continue;
          } else {
            var arg__9396__auto___23019 = cljs.core.first.call(null, seq__21860_23013__$1);
            a__9395__auto__.push(arg__9396__auto___23019);
            var G__23020 = cljs.core.next.call(null, seq__21860_23013__$1);
            var G__23021 = null;
            var G__23022 = 0;
            var G__23023 = 0;
            seq__21860_23003 = G__23020;
            chunk__21861_23004 = G__23021;
            count__21862_23005 = G__23022;
            i__21863_23006 = G__23023;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.body.apply(null, a__9395__auto__);
  };
  var body = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23024__i = 0, G__23024__a = new Array(arguments.length - 0);
      while (G__23024__i < G__23024__a.length) {
        G__23024__a[G__23024__i] = arguments[G__23024__i + 0];
        ++G__23024__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23024__a, 0);
    }
    return body__delegate.call(this, args__9394__auto__);
  };
  body.cljs$lang$maxFixedArity = 0;
  body.cljs$lang$applyTo = function(arglist__23025) {
    var args__9394__auto__ = cljs.core.seq(arglist__23025);
    return body__delegate(args__9394__auto__);
  };
  body.cljs$core$IFn$_invoke$arity$variadic = body__delegate;
  return body;
}();
quiescent.dom.br = function() {
  var br__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21868_23026 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21869_23027 = null;
    var count__21870_23028 = 0;
    var i__21871_23029 = 0;
    while (true) {
      if (i__21871_23029 < count__21870_23028) {
        var arg__9396__auto___23030 = cljs.core._nth.call(null, chunk__21869_23027, i__21871_23029);
        a__9395__auto__.push(arg__9396__auto___23030);
        var G__23031 = seq__21868_23026;
        var G__23032 = chunk__21869_23027;
        var G__23033 = count__21870_23028;
        var G__23034 = i__21871_23029 + 1;
        seq__21868_23026 = G__23031;
        chunk__21869_23027 = G__23032;
        count__21870_23028 = G__23033;
        i__21871_23029 = G__23034;
        continue;
      } else {
        var temp__4126__auto___23035 = cljs.core.seq.call(null, seq__21868_23026);
        if (temp__4126__auto___23035) {
          var seq__21868_23036__$1 = temp__4126__auto___23035;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21868_23036__$1)) {
            var c__4616__auto___23037 = cljs.core.chunk_first.call(null, seq__21868_23036__$1);
            var G__23038 = cljs.core.chunk_rest.call(null, seq__21868_23036__$1);
            var G__23039 = c__4616__auto___23037;
            var G__23040 = cljs.core.count.call(null, c__4616__auto___23037);
            var G__23041 = 0;
            seq__21868_23026 = G__23038;
            chunk__21869_23027 = G__23039;
            count__21870_23028 = G__23040;
            i__21871_23029 = G__23041;
            continue;
          } else {
            var arg__9396__auto___23042 = cljs.core.first.call(null, seq__21868_23036__$1);
            a__9395__auto__.push(arg__9396__auto___23042);
            var G__23043 = cljs.core.next.call(null, seq__21868_23036__$1);
            var G__23044 = null;
            var G__23045 = 0;
            var G__23046 = 0;
            seq__21868_23026 = G__23043;
            chunk__21869_23027 = G__23044;
            count__21870_23028 = G__23045;
            i__21871_23029 = G__23046;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.br.apply(null, a__9395__auto__);
  };
  var br = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23047__i = 0, G__23047__a = new Array(arguments.length - 0);
      while (G__23047__i < G__23047__a.length) {
        G__23047__a[G__23047__i] = arguments[G__23047__i + 0];
        ++G__23047__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23047__a, 0);
    }
    return br__delegate.call(this, args__9394__auto__);
  };
  br.cljs$lang$maxFixedArity = 0;
  br.cljs$lang$applyTo = function(arglist__23048) {
    var args__9394__auto__ = cljs.core.seq(arglist__23048);
    return br__delegate(args__9394__auto__);
  };
  br.cljs$core$IFn$_invoke$arity$variadic = br__delegate;
  return br;
}();
quiescent.dom.button = function() {
  var button__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21876_23049 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21877_23050 = null;
    var count__21878_23051 = 0;
    var i__21879_23052 = 0;
    while (true) {
      if (i__21879_23052 < count__21878_23051) {
        var arg__9396__auto___23053 = cljs.core._nth.call(null, chunk__21877_23050, i__21879_23052);
        a__9395__auto__.push(arg__9396__auto___23053);
        var G__23054 = seq__21876_23049;
        var G__23055 = chunk__21877_23050;
        var G__23056 = count__21878_23051;
        var G__23057 = i__21879_23052 + 1;
        seq__21876_23049 = G__23054;
        chunk__21877_23050 = G__23055;
        count__21878_23051 = G__23056;
        i__21879_23052 = G__23057;
        continue;
      } else {
        var temp__4126__auto___23058 = cljs.core.seq.call(null, seq__21876_23049);
        if (temp__4126__auto___23058) {
          var seq__21876_23059__$1 = temp__4126__auto___23058;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21876_23059__$1)) {
            var c__4616__auto___23060 = cljs.core.chunk_first.call(null, seq__21876_23059__$1);
            var G__23061 = cljs.core.chunk_rest.call(null, seq__21876_23059__$1);
            var G__23062 = c__4616__auto___23060;
            var G__23063 = cljs.core.count.call(null, c__4616__auto___23060);
            var G__23064 = 0;
            seq__21876_23049 = G__23061;
            chunk__21877_23050 = G__23062;
            count__21878_23051 = G__23063;
            i__21879_23052 = G__23064;
            continue;
          } else {
            var arg__9396__auto___23065 = cljs.core.first.call(null, seq__21876_23059__$1);
            a__9395__auto__.push(arg__9396__auto___23065);
            var G__23066 = cljs.core.next.call(null, seq__21876_23059__$1);
            var G__23067 = null;
            var G__23068 = 0;
            var G__23069 = 0;
            seq__21876_23049 = G__23066;
            chunk__21877_23050 = G__23067;
            count__21878_23051 = G__23068;
            i__21879_23052 = G__23069;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.button.apply(null, a__9395__auto__);
  };
  var button = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23070__i = 0, G__23070__a = new Array(arguments.length - 0);
      while (G__23070__i < G__23070__a.length) {
        G__23070__a[G__23070__i] = arguments[G__23070__i + 0];
        ++G__23070__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23070__a, 0);
    }
    return button__delegate.call(this, args__9394__auto__);
  };
  button.cljs$lang$maxFixedArity = 0;
  button.cljs$lang$applyTo = function(arglist__23071) {
    var args__9394__auto__ = cljs.core.seq(arglist__23071);
    return button__delegate(args__9394__auto__);
  };
  button.cljs$core$IFn$_invoke$arity$variadic = button__delegate;
  return button;
}();
quiescent.dom.canvas = function() {
  var canvas__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21884_23072 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21885_23073 = null;
    var count__21886_23074 = 0;
    var i__21887_23075 = 0;
    while (true) {
      if (i__21887_23075 < count__21886_23074) {
        var arg__9396__auto___23076 = cljs.core._nth.call(null, chunk__21885_23073, i__21887_23075);
        a__9395__auto__.push(arg__9396__auto___23076);
        var G__23077 = seq__21884_23072;
        var G__23078 = chunk__21885_23073;
        var G__23079 = count__21886_23074;
        var G__23080 = i__21887_23075 + 1;
        seq__21884_23072 = G__23077;
        chunk__21885_23073 = G__23078;
        count__21886_23074 = G__23079;
        i__21887_23075 = G__23080;
        continue;
      } else {
        var temp__4126__auto___23081 = cljs.core.seq.call(null, seq__21884_23072);
        if (temp__4126__auto___23081) {
          var seq__21884_23082__$1 = temp__4126__auto___23081;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21884_23082__$1)) {
            var c__4616__auto___23083 = cljs.core.chunk_first.call(null, seq__21884_23082__$1);
            var G__23084 = cljs.core.chunk_rest.call(null, seq__21884_23082__$1);
            var G__23085 = c__4616__auto___23083;
            var G__23086 = cljs.core.count.call(null, c__4616__auto___23083);
            var G__23087 = 0;
            seq__21884_23072 = G__23084;
            chunk__21885_23073 = G__23085;
            count__21886_23074 = G__23086;
            i__21887_23075 = G__23087;
            continue;
          } else {
            var arg__9396__auto___23088 = cljs.core.first.call(null, seq__21884_23082__$1);
            a__9395__auto__.push(arg__9396__auto___23088);
            var G__23089 = cljs.core.next.call(null, seq__21884_23082__$1);
            var G__23090 = null;
            var G__23091 = 0;
            var G__23092 = 0;
            seq__21884_23072 = G__23089;
            chunk__21885_23073 = G__23090;
            count__21886_23074 = G__23091;
            i__21887_23075 = G__23092;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.canvas.apply(null, a__9395__auto__);
  };
  var canvas = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23093__i = 0, G__23093__a = new Array(arguments.length - 0);
      while (G__23093__i < G__23093__a.length) {
        G__23093__a[G__23093__i] = arguments[G__23093__i + 0];
        ++G__23093__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23093__a, 0);
    }
    return canvas__delegate.call(this, args__9394__auto__);
  };
  canvas.cljs$lang$maxFixedArity = 0;
  canvas.cljs$lang$applyTo = function(arglist__23094) {
    var args__9394__auto__ = cljs.core.seq(arglist__23094);
    return canvas__delegate(args__9394__auto__);
  };
  canvas.cljs$core$IFn$_invoke$arity$variadic = canvas__delegate;
  return canvas;
}();
quiescent.dom.caption = function() {
  var caption__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21892_23095 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21893_23096 = null;
    var count__21894_23097 = 0;
    var i__21895_23098 = 0;
    while (true) {
      if (i__21895_23098 < count__21894_23097) {
        var arg__9396__auto___23099 = cljs.core._nth.call(null, chunk__21893_23096, i__21895_23098);
        a__9395__auto__.push(arg__9396__auto___23099);
        var G__23100 = seq__21892_23095;
        var G__23101 = chunk__21893_23096;
        var G__23102 = count__21894_23097;
        var G__23103 = i__21895_23098 + 1;
        seq__21892_23095 = G__23100;
        chunk__21893_23096 = G__23101;
        count__21894_23097 = G__23102;
        i__21895_23098 = G__23103;
        continue;
      } else {
        var temp__4126__auto___23104 = cljs.core.seq.call(null, seq__21892_23095);
        if (temp__4126__auto___23104) {
          var seq__21892_23105__$1 = temp__4126__auto___23104;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21892_23105__$1)) {
            var c__4616__auto___23106 = cljs.core.chunk_first.call(null, seq__21892_23105__$1);
            var G__23107 = cljs.core.chunk_rest.call(null, seq__21892_23105__$1);
            var G__23108 = c__4616__auto___23106;
            var G__23109 = cljs.core.count.call(null, c__4616__auto___23106);
            var G__23110 = 0;
            seq__21892_23095 = G__23107;
            chunk__21893_23096 = G__23108;
            count__21894_23097 = G__23109;
            i__21895_23098 = G__23110;
            continue;
          } else {
            var arg__9396__auto___23111 = cljs.core.first.call(null, seq__21892_23105__$1);
            a__9395__auto__.push(arg__9396__auto___23111);
            var G__23112 = cljs.core.next.call(null, seq__21892_23105__$1);
            var G__23113 = null;
            var G__23114 = 0;
            var G__23115 = 0;
            seq__21892_23095 = G__23112;
            chunk__21893_23096 = G__23113;
            count__21894_23097 = G__23114;
            i__21895_23098 = G__23115;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.caption.apply(null, a__9395__auto__);
  };
  var caption = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23116__i = 0, G__23116__a = new Array(arguments.length - 0);
      while (G__23116__i < G__23116__a.length) {
        G__23116__a[G__23116__i] = arguments[G__23116__i + 0];
        ++G__23116__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23116__a, 0);
    }
    return caption__delegate.call(this, args__9394__auto__);
  };
  caption.cljs$lang$maxFixedArity = 0;
  caption.cljs$lang$applyTo = function(arglist__23117) {
    var args__9394__auto__ = cljs.core.seq(arglist__23117);
    return caption__delegate(args__9394__auto__);
  };
  caption.cljs$core$IFn$_invoke$arity$variadic = caption__delegate;
  return caption;
}();
quiescent.dom.cite = function() {
  var cite__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21900_23118 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21901_23119 = null;
    var count__21902_23120 = 0;
    var i__21903_23121 = 0;
    while (true) {
      if (i__21903_23121 < count__21902_23120) {
        var arg__9396__auto___23122 = cljs.core._nth.call(null, chunk__21901_23119, i__21903_23121);
        a__9395__auto__.push(arg__9396__auto___23122);
        var G__23123 = seq__21900_23118;
        var G__23124 = chunk__21901_23119;
        var G__23125 = count__21902_23120;
        var G__23126 = i__21903_23121 + 1;
        seq__21900_23118 = G__23123;
        chunk__21901_23119 = G__23124;
        count__21902_23120 = G__23125;
        i__21903_23121 = G__23126;
        continue;
      } else {
        var temp__4126__auto___23127 = cljs.core.seq.call(null, seq__21900_23118);
        if (temp__4126__auto___23127) {
          var seq__21900_23128__$1 = temp__4126__auto___23127;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21900_23128__$1)) {
            var c__4616__auto___23129 = cljs.core.chunk_first.call(null, seq__21900_23128__$1);
            var G__23130 = cljs.core.chunk_rest.call(null, seq__21900_23128__$1);
            var G__23131 = c__4616__auto___23129;
            var G__23132 = cljs.core.count.call(null, c__4616__auto___23129);
            var G__23133 = 0;
            seq__21900_23118 = G__23130;
            chunk__21901_23119 = G__23131;
            count__21902_23120 = G__23132;
            i__21903_23121 = G__23133;
            continue;
          } else {
            var arg__9396__auto___23134 = cljs.core.first.call(null, seq__21900_23128__$1);
            a__9395__auto__.push(arg__9396__auto___23134);
            var G__23135 = cljs.core.next.call(null, seq__21900_23128__$1);
            var G__23136 = null;
            var G__23137 = 0;
            var G__23138 = 0;
            seq__21900_23118 = G__23135;
            chunk__21901_23119 = G__23136;
            count__21902_23120 = G__23137;
            i__21903_23121 = G__23138;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.cite.apply(null, a__9395__auto__);
  };
  var cite = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23139__i = 0, G__23139__a = new Array(arguments.length - 0);
      while (G__23139__i < G__23139__a.length) {
        G__23139__a[G__23139__i] = arguments[G__23139__i + 0];
        ++G__23139__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23139__a, 0);
    }
    return cite__delegate.call(this, args__9394__auto__);
  };
  cite.cljs$lang$maxFixedArity = 0;
  cite.cljs$lang$applyTo = function(arglist__23140) {
    var args__9394__auto__ = cljs.core.seq(arglist__23140);
    return cite__delegate(args__9394__auto__);
  };
  cite.cljs$core$IFn$_invoke$arity$variadic = cite__delegate;
  return cite;
}();
quiescent.dom.code = function() {
  var code__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21908_23141 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21909_23142 = null;
    var count__21910_23143 = 0;
    var i__21911_23144 = 0;
    while (true) {
      if (i__21911_23144 < count__21910_23143) {
        var arg__9396__auto___23145 = cljs.core._nth.call(null, chunk__21909_23142, i__21911_23144);
        a__9395__auto__.push(arg__9396__auto___23145);
        var G__23146 = seq__21908_23141;
        var G__23147 = chunk__21909_23142;
        var G__23148 = count__21910_23143;
        var G__23149 = i__21911_23144 + 1;
        seq__21908_23141 = G__23146;
        chunk__21909_23142 = G__23147;
        count__21910_23143 = G__23148;
        i__21911_23144 = G__23149;
        continue;
      } else {
        var temp__4126__auto___23150 = cljs.core.seq.call(null, seq__21908_23141);
        if (temp__4126__auto___23150) {
          var seq__21908_23151__$1 = temp__4126__auto___23150;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21908_23151__$1)) {
            var c__4616__auto___23152 = cljs.core.chunk_first.call(null, seq__21908_23151__$1);
            var G__23153 = cljs.core.chunk_rest.call(null, seq__21908_23151__$1);
            var G__23154 = c__4616__auto___23152;
            var G__23155 = cljs.core.count.call(null, c__4616__auto___23152);
            var G__23156 = 0;
            seq__21908_23141 = G__23153;
            chunk__21909_23142 = G__23154;
            count__21910_23143 = G__23155;
            i__21911_23144 = G__23156;
            continue;
          } else {
            var arg__9396__auto___23157 = cljs.core.first.call(null, seq__21908_23151__$1);
            a__9395__auto__.push(arg__9396__auto___23157);
            var G__23158 = cljs.core.next.call(null, seq__21908_23151__$1);
            var G__23159 = null;
            var G__23160 = 0;
            var G__23161 = 0;
            seq__21908_23141 = G__23158;
            chunk__21909_23142 = G__23159;
            count__21910_23143 = G__23160;
            i__21911_23144 = G__23161;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.code.apply(null, a__9395__auto__);
  };
  var code = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23162__i = 0, G__23162__a = new Array(arguments.length - 0);
      while (G__23162__i < G__23162__a.length) {
        G__23162__a[G__23162__i] = arguments[G__23162__i + 0];
        ++G__23162__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23162__a, 0);
    }
    return code__delegate.call(this, args__9394__auto__);
  };
  code.cljs$lang$maxFixedArity = 0;
  code.cljs$lang$applyTo = function(arglist__23163) {
    var args__9394__auto__ = cljs.core.seq(arglist__23163);
    return code__delegate(args__9394__auto__);
  };
  code.cljs$core$IFn$_invoke$arity$variadic = code__delegate;
  return code;
}();
quiescent.dom.col = function() {
  var col__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21916_23164 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21917_23165 = null;
    var count__21918_23166 = 0;
    var i__21919_23167 = 0;
    while (true) {
      if (i__21919_23167 < count__21918_23166) {
        var arg__9396__auto___23168 = cljs.core._nth.call(null, chunk__21917_23165, i__21919_23167);
        a__9395__auto__.push(arg__9396__auto___23168);
        var G__23169 = seq__21916_23164;
        var G__23170 = chunk__21917_23165;
        var G__23171 = count__21918_23166;
        var G__23172 = i__21919_23167 + 1;
        seq__21916_23164 = G__23169;
        chunk__21917_23165 = G__23170;
        count__21918_23166 = G__23171;
        i__21919_23167 = G__23172;
        continue;
      } else {
        var temp__4126__auto___23173 = cljs.core.seq.call(null, seq__21916_23164);
        if (temp__4126__auto___23173) {
          var seq__21916_23174__$1 = temp__4126__auto___23173;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21916_23174__$1)) {
            var c__4616__auto___23175 = cljs.core.chunk_first.call(null, seq__21916_23174__$1);
            var G__23176 = cljs.core.chunk_rest.call(null, seq__21916_23174__$1);
            var G__23177 = c__4616__auto___23175;
            var G__23178 = cljs.core.count.call(null, c__4616__auto___23175);
            var G__23179 = 0;
            seq__21916_23164 = G__23176;
            chunk__21917_23165 = G__23177;
            count__21918_23166 = G__23178;
            i__21919_23167 = G__23179;
            continue;
          } else {
            var arg__9396__auto___23180 = cljs.core.first.call(null, seq__21916_23174__$1);
            a__9395__auto__.push(arg__9396__auto___23180);
            var G__23181 = cljs.core.next.call(null, seq__21916_23174__$1);
            var G__23182 = null;
            var G__23183 = 0;
            var G__23184 = 0;
            seq__21916_23164 = G__23181;
            chunk__21917_23165 = G__23182;
            count__21918_23166 = G__23183;
            i__21919_23167 = G__23184;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.col.apply(null, a__9395__auto__);
  };
  var col = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23185__i = 0, G__23185__a = new Array(arguments.length - 0);
      while (G__23185__i < G__23185__a.length) {
        G__23185__a[G__23185__i] = arguments[G__23185__i + 0];
        ++G__23185__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23185__a, 0);
    }
    return col__delegate.call(this, args__9394__auto__);
  };
  col.cljs$lang$maxFixedArity = 0;
  col.cljs$lang$applyTo = function(arglist__23186) {
    var args__9394__auto__ = cljs.core.seq(arglist__23186);
    return col__delegate(args__9394__auto__);
  };
  col.cljs$core$IFn$_invoke$arity$variadic = col__delegate;
  return col;
}();
quiescent.dom.colgroup = function() {
  var colgroup__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21924_23187 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21925_23188 = null;
    var count__21926_23189 = 0;
    var i__21927_23190 = 0;
    while (true) {
      if (i__21927_23190 < count__21926_23189) {
        var arg__9396__auto___23191 = cljs.core._nth.call(null, chunk__21925_23188, i__21927_23190);
        a__9395__auto__.push(arg__9396__auto___23191);
        var G__23192 = seq__21924_23187;
        var G__23193 = chunk__21925_23188;
        var G__23194 = count__21926_23189;
        var G__23195 = i__21927_23190 + 1;
        seq__21924_23187 = G__23192;
        chunk__21925_23188 = G__23193;
        count__21926_23189 = G__23194;
        i__21927_23190 = G__23195;
        continue;
      } else {
        var temp__4126__auto___23196 = cljs.core.seq.call(null, seq__21924_23187);
        if (temp__4126__auto___23196) {
          var seq__21924_23197__$1 = temp__4126__auto___23196;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21924_23197__$1)) {
            var c__4616__auto___23198 = cljs.core.chunk_first.call(null, seq__21924_23197__$1);
            var G__23199 = cljs.core.chunk_rest.call(null, seq__21924_23197__$1);
            var G__23200 = c__4616__auto___23198;
            var G__23201 = cljs.core.count.call(null, c__4616__auto___23198);
            var G__23202 = 0;
            seq__21924_23187 = G__23199;
            chunk__21925_23188 = G__23200;
            count__21926_23189 = G__23201;
            i__21927_23190 = G__23202;
            continue;
          } else {
            var arg__9396__auto___23203 = cljs.core.first.call(null, seq__21924_23197__$1);
            a__9395__auto__.push(arg__9396__auto___23203);
            var G__23204 = cljs.core.next.call(null, seq__21924_23197__$1);
            var G__23205 = null;
            var G__23206 = 0;
            var G__23207 = 0;
            seq__21924_23187 = G__23204;
            chunk__21925_23188 = G__23205;
            count__21926_23189 = G__23206;
            i__21927_23190 = G__23207;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.colgroup.apply(null, a__9395__auto__);
  };
  var colgroup = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23208__i = 0, G__23208__a = new Array(arguments.length - 0);
      while (G__23208__i < G__23208__a.length) {
        G__23208__a[G__23208__i] = arguments[G__23208__i + 0];
        ++G__23208__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23208__a, 0);
    }
    return colgroup__delegate.call(this, args__9394__auto__);
  };
  colgroup.cljs$lang$maxFixedArity = 0;
  colgroup.cljs$lang$applyTo = function(arglist__23209) {
    var args__9394__auto__ = cljs.core.seq(arglist__23209);
    return colgroup__delegate(args__9394__auto__);
  };
  colgroup.cljs$core$IFn$_invoke$arity$variadic = colgroup__delegate;
  return colgroup;
}();
quiescent.dom.data = function() {
  var data__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21932_23210 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21933_23211 = null;
    var count__21934_23212 = 0;
    var i__21935_23213 = 0;
    while (true) {
      if (i__21935_23213 < count__21934_23212) {
        var arg__9396__auto___23214 = cljs.core._nth.call(null, chunk__21933_23211, i__21935_23213);
        a__9395__auto__.push(arg__9396__auto___23214);
        var G__23215 = seq__21932_23210;
        var G__23216 = chunk__21933_23211;
        var G__23217 = count__21934_23212;
        var G__23218 = i__21935_23213 + 1;
        seq__21932_23210 = G__23215;
        chunk__21933_23211 = G__23216;
        count__21934_23212 = G__23217;
        i__21935_23213 = G__23218;
        continue;
      } else {
        var temp__4126__auto___23219 = cljs.core.seq.call(null, seq__21932_23210);
        if (temp__4126__auto___23219) {
          var seq__21932_23220__$1 = temp__4126__auto___23219;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21932_23220__$1)) {
            var c__4616__auto___23221 = cljs.core.chunk_first.call(null, seq__21932_23220__$1);
            var G__23222 = cljs.core.chunk_rest.call(null, seq__21932_23220__$1);
            var G__23223 = c__4616__auto___23221;
            var G__23224 = cljs.core.count.call(null, c__4616__auto___23221);
            var G__23225 = 0;
            seq__21932_23210 = G__23222;
            chunk__21933_23211 = G__23223;
            count__21934_23212 = G__23224;
            i__21935_23213 = G__23225;
            continue;
          } else {
            var arg__9396__auto___23226 = cljs.core.first.call(null, seq__21932_23220__$1);
            a__9395__auto__.push(arg__9396__auto___23226);
            var G__23227 = cljs.core.next.call(null, seq__21932_23220__$1);
            var G__23228 = null;
            var G__23229 = 0;
            var G__23230 = 0;
            seq__21932_23210 = G__23227;
            chunk__21933_23211 = G__23228;
            count__21934_23212 = G__23229;
            i__21935_23213 = G__23230;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.data.apply(null, a__9395__auto__);
  };
  var data = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23231__i = 0, G__23231__a = new Array(arguments.length - 0);
      while (G__23231__i < G__23231__a.length) {
        G__23231__a[G__23231__i] = arguments[G__23231__i + 0];
        ++G__23231__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23231__a, 0);
    }
    return data__delegate.call(this, args__9394__auto__);
  };
  data.cljs$lang$maxFixedArity = 0;
  data.cljs$lang$applyTo = function(arglist__23232) {
    var args__9394__auto__ = cljs.core.seq(arglist__23232);
    return data__delegate(args__9394__auto__);
  };
  data.cljs$core$IFn$_invoke$arity$variadic = data__delegate;
  return data;
}();
quiescent.dom.datalist = function() {
  var datalist__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21940_23233 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21941_23234 = null;
    var count__21942_23235 = 0;
    var i__21943_23236 = 0;
    while (true) {
      if (i__21943_23236 < count__21942_23235) {
        var arg__9396__auto___23237 = cljs.core._nth.call(null, chunk__21941_23234, i__21943_23236);
        a__9395__auto__.push(arg__9396__auto___23237);
        var G__23238 = seq__21940_23233;
        var G__23239 = chunk__21941_23234;
        var G__23240 = count__21942_23235;
        var G__23241 = i__21943_23236 + 1;
        seq__21940_23233 = G__23238;
        chunk__21941_23234 = G__23239;
        count__21942_23235 = G__23240;
        i__21943_23236 = G__23241;
        continue;
      } else {
        var temp__4126__auto___23242 = cljs.core.seq.call(null, seq__21940_23233);
        if (temp__4126__auto___23242) {
          var seq__21940_23243__$1 = temp__4126__auto___23242;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21940_23243__$1)) {
            var c__4616__auto___23244 = cljs.core.chunk_first.call(null, seq__21940_23243__$1);
            var G__23245 = cljs.core.chunk_rest.call(null, seq__21940_23243__$1);
            var G__23246 = c__4616__auto___23244;
            var G__23247 = cljs.core.count.call(null, c__4616__auto___23244);
            var G__23248 = 0;
            seq__21940_23233 = G__23245;
            chunk__21941_23234 = G__23246;
            count__21942_23235 = G__23247;
            i__21943_23236 = G__23248;
            continue;
          } else {
            var arg__9396__auto___23249 = cljs.core.first.call(null, seq__21940_23243__$1);
            a__9395__auto__.push(arg__9396__auto___23249);
            var G__23250 = cljs.core.next.call(null, seq__21940_23243__$1);
            var G__23251 = null;
            var G__23252 = 0;
            var G__23253 = 0;
            seq__21940_23233 = G__23250;
            chunk__21941_23234 = G__23251;
            count__21942_23235 = G__23252;
            i__21943_23236 = G__23253;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.datalist.apply(null, a__9395__auto__);
  };
  var datalist = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23254__i = 0, G__23254__a = new Array(arguments.length - 0);
      while (G__23254__i < G__23254__a.length) {
        G__23254__a[G__23254__i] = arguments[G__23254__i + 0];
        ++G__23254__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23254__a, 0);
    }
    return datalist__delegate.call(this, args__9394__auto__);
  };
  datalist.cljs$lang$maxFixedArity = 0;
  datalist.cljs$lang$applyTo = function(arglist__23255) {
    var args__9394__auto__ = cljs.core.seq(arglist__23255);
    return datalist__delegate(args__9394__auto__);
  };
  datalist.cljs$core$IFn$_invoke$arity$variadic = datalist__delegate;
  return datalist;
}();
quiescent.dom.dd = function() {
  var dd__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21948_23256 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21949_23257 = null;
    var count__21950_23258 = 0;
    var i__21951_23259 = 0;
    while (true) {
      if (i__21951_23259 < count__21950_23258) {
        var arg__9396__auto___23260 = cljs.core._nth.call(null, chunk__21949_23257, i__21951_23259);
        a__9395__auto__.push(arg__9396__auto___23260);
        var G__23261 = seq__21948_23256;
        var G__23262 = chunk__21949_23257;
        var G__23263 = count__21950_23258;
        var G__23264 = i__21951_23259 + 1;
        seq__21948_23256 = G__23261;
        chunk__21949_23257 = G__23262;
        count__21950_23258 = G__23263;
        i__21951_23259 = G__23264;
        continue;
      } else {
        var temp__4126__auto___23265 = cljs.core.seq.call(null, seq__21948_23256);
        if (temp__4126__auto___23265) {
          var seq__21948_23266__$1 = temp__4126__auto___23265;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21948_23266__$1)) {
            var c__4616__auto___23267 = cljs.core.chunk_first.call(null, seq__21948_23266__$1);
            var G__23268 = cljs.core.chunk_rest.call(null, seq__21948_23266__$1);
            var G__23269 = c__4616__auto___23267;
            var G__23270 = cljs.core.count.call(null, c__4616__auto___23267);
            var G__23271 = 0;
            seq__21948_23256 = G__23268;
            chunk__21949_23257 = G__23269;
            count__21950_23258 = G__23270;
            i__21951_23259 = G__23271;
            continue;
          } else {
            var arg__9396__auto___23272 = cljs.core.first.call(null, seq__21948_23266__$1);
            a__9395__auto__.push(arg__9396__auto___23272);
            var G__23273 = cljs.core.next.call(null, seq__21948_23266__$1);
            var G__23274 = null;
            var G__23275 = 0;
            var G__23276 = 0;
            seq__21948_23256 = G__23273;
            chunk__21949_23257 = G__23274;
            count__21950_23258 = G__23275;
            i__21951_23259 = G__23276;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dd.apply(null, a__9395__auto__);
  };
  var dd = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23277__i = 0, G__23277__a = new Array(arguments.length - 0);
      while (G__23277__i < G__23277__a.length) {
        G__23277__a[G__23277__i] = arguments[G__23277__i + 0];
        ++G__23277__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23277__a, 0);
    }
    return dd__delegate.call(this, args__9394__auto__);
  };
  dd.cljs$lang$maxFixedArity = 0;
  dd.cljs$lang$applyTo = function(arglist__23278) {
    var args__9394__auto__ = cljs.core.seq(arglist__23278);
    return dd__delegate(args__9394__auto__);
  };
  dd.cljs$core$IFn$_invoke$arity$variadic = dd__delegate;
  return dd;
}();
quiescent.dom.del = function() {
  var del__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21956_23279 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21957_23280 = null;
    var count__21958_23281 = 0;
    var i__21959_23282 = 0;
    while (true) {
      if (i__21959_23282 < count__21958_23281) {
        var arg__9396__auto___23283 = cljs.core._nth.call(null, chunk__21957_23280, i__21959_23282);
        a__9395__auto__.push(arg__9396__auto___23283);
        var G__23284 = seq__21956_23279;
        var G__23285 = chunk__21957_23280;
        var G__23286 = count__21958_23281;
        var G__23287 = i__21959_23282 + 1;
        seq__21956_23279 = G__23284;
        chunk__21957_23280 = G__23285;
        count__21958_23281 = G__23286;
        i__21959_23282 = G__23287;
        continue;
      } else {
        var temp__4126__auto___23288 = cljs.core.seq.call(null, seq__21956_23279);
        if (temp__4126__auto___23288) {
          var seq__21956_23289__$1 = temp__4126__auto___23288;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21956_23289__$1)) {
            var c__4616__auto___23290 = cljs.core.chunk_first.call(null, seq__21956_23289__$1);
            var G__23291 = cljs.core.chunk_rest.call(null, seq__21956_23289__$1);
            var G__23292 = c__4616__auto___23290;
            var G__23293 = cljs.core.count.call(null, c__4616__auto___23290);
            var G__23294 = 0;
            seq__21956_23279 = G__23291;
            chunk__21957_23280 = G__23292;
            count__21958_23281 = G__23293;
            i__21959_23282 = G__23294;
            continue;
          } else {
            var arg__9396__auto___23295 = cljs.core.first.call(null, seq__21956_23289__$1);
            a__9395__auto__.push(arg__9396__auto___23295);
            var G__23296 = cljs.core.next.call(null, seq__21956_23289__$1);
            var G__23297 = null;
            var G__23298 = 0;
            var G__23299 = 0;
            seq__21956_23279 = G__23296;
            chunk__21957_23280 = G__23297;
            count__21958_23281 = G__23298;
            i__21959_23282 = G__23299;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.del.apply(null, a__9395__auto__);
  };
  var del = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23300__i = 0, G__23300__a = new Array(arguments.length - 0);
      while (G__23300__i < G__23300__a.length) {
        G__23300__a[G__23300__i] = arguments[G__23300__i + 0];
        ++G__23300__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23300__a, 0);
    }
    return del__delegate.call(this, args__9394__auto__);
  };
  del.cljs$lang$maxFixedArity = 0;
  del.cljs$lang$applyTo = function(arglist__23301) {
    var args__9394__auto__ = cljs.core.seq(arglist__23301);
    return del__delegate(args__9394__auto__);
  };
  del.cljs$core$IFn$_invoke$arity$variadic = del__delegate;
  return del;
}();
quiescent.dom.details = function() {
  var details__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21964_23302 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21965_23303 = null;
    var count__21966_23304 = 0;
    var i__21967_23305 = 0;
    while (true) {
      if (i__21967_23305 < count__21966_23304) {
        var arg__9396__auto___23306 = cljs.core._nth.call(null, chunk__21965_23303, i__21967_23305);
        a__9395__auto__.push(arg__9396__auto___23306);
        var G__23307 = seq__21964_23302;
        var G__23308 = chunk__21965_23303;
        var G__23309 = count__21966_23304;
        var G__23310 = i__21967_23305 + 1;
        seq__21964_23302 = G__23307;
        chunk__21965_23303 = G__23308;
        count__21966_23304 = G__23309;
        i__21967_23305 = G__23310;
        continue;
      } else {
        var temp__4126__auto___23311 = cljs.core.seq.call(null, seq__21964_23302);
        if (temp__4126__auto___23311) {
          var seq__21964_23312__$1 = temp__4126__auto___23311;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21964_23312__$1)) {
            var c__4616__auto___23313 = cljs.core.chunk_first.call(null, seq__21964_23312__$1);
            var G__23314 = cljs.core.chunk_rest.call(null, seq__21964_23312__$1);
            var G__23315 = c__4616__auto___23313;
            var G__23316 = cljs.core.count.call(null, c__4616__auto___23313);
            var G__23317 = 0;
            seq__21964_23302 = G__23314;
            chunk__21965_23303 = G__23315;
            count__21966_23304 = G__23316;
            i__21967_23305 = G__23317;
            continue;
          } else {
            var arg__9396__auto___23318 = cljs.core.first.call(null, seq__21964_23312__$1);
            a__9395__auto__.push(arg__9396__auto___23318);
            var G__23319 = cljs.core.next.call(null, seq__21964_23312__$1);
            var G__23320 = null;
            var G__23321 = 0;
            var G__23322 = 0;
            seq__21964_23302 = G__23319;
            chunk__21965_23303 = G__23320;
            count__21966_23304 = G__23321;
            i__21967_23305 = G__23322;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.details.apply(null, a__9395__auto__);
  };
  var details = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23323__i = 0, G__23323__a = new Array(arguments.length - 0);
      while (G__23323__i < G__23323__a.length) {
        G__23323__a[G__23323__i] = arguments[G__23323__i + 0];
        ++G__23323__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23323__a, 0);
    }
    return details__delegate.call(this, args__9394__auto__);
  };
  details.cljs$lang$maxFixedArity = 0;
  details.cljs$lang$applyTo = function(arglist__23324) {
    var args__9394__auto__ = cljs.core.seq(arglist__23324);
    return details__delegate(args__9394__auto__);
  };
  details.cljs$core$IFn$_invoke$arity$variadic = details__delegate;
  return details;
}();
quiescent.dom.dfn = function() {
  var dfn__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21972_23325 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21973_23326 = null;
    var count__21974_23327 = 0;
    var i__21975_23328 = 0;
    while (true) {
      if (i__21975_23328 < count__21974_23327) {
        var arg__9396__auto___23329 = cljs.core._nth.call(null, chunk__21973_23326, i__21975_23328);
        a__9395__auto__.push(arg__9396__auto___23329);
        var G__23330 = seq__21972_23325;
        var G__23331 = chunk__21973_23326;
        var G__23332 = count__21974_23327;
        var G__23333 = i__21975_23328 + 1;
        seq__21972_23325 = G__23330;
        chunk__21973_23326 = G__23331;
        count__21974_23327 = G__23332;
        i__21975_23328 = G__23333;
        continue;
      } else {
        var temp__4126__auto___23334 = cljs.core.seq.call(null, seq__21972_23325);
        if (temp__4126__auto___23334) {
          var seq__21972_23335__$1 = temp__4126__auto___23334;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21972_23335__$1)) {
            var c__4616__auto___23336 = cljs.core.chunk_first.call(null, seq__21972_23335__$1);
            var G__23337 = cljs.core.chunk_rest.call(null, seq__21972_23335__$1);
            var G__23338 = c__4616__auto___23336;
            var G__23339 = cljs.core.count.call(null, c__4616__auto___23336);
            var G__23340 = 0;
            seq__21972_23325 = G__23337;
            chunk__21973_23326 = G__23338;
            count__21974_23327 = G__23339;
            i__21975_23328 = G__23340;
            continue;
          } else {
            var arg__9396__auto___23341 = cljs.core.first.call(null, seq__21972_23335__$1);
            a__9395__auto__.push(arg__9396__auto___23341);
            var G__23342 = cljs.core.next.call(null, seq__21972_23335__$1);
            var G__23343 = null;
            var G__23344 = 0;
            var G__23345 = 0;
            seq__21972_23325 = G__23342;
            chunk__21973_23326 = G__23343;
            count__21974_23327 = G__23344;
            i__21975_23328 = G__23345;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dfn.apply(null, a__9395__auto__);
  };
  var dfn = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23346__i = 0, G__23346__a = new Array(arguments.length - 0);
      while (G__23346__i < G__23346__a.length) {
        G__23346__a[G__23346__i] = arguments[G__23346__i + 0];
        ++G__23346__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23346__a, 0);
    }
    return dfn__delegate.call(this, args__9394__auto__);
  };
  dfn.cljs$lang$maxFixedArity = 0;
  dfn.cljs$lang$applyTo = function(arglist__23347) {
    var args__9394__auto__ = cljs.core.seq(arglist__23347);
    return dfn__delegate(args__9394__auto__);
  };
  dfn.cljs$core$IFn$_invoke$arity$variadic = dfn__delegate;
  return dfn;
}();
quiescent.dom.div = function() {
  var div__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21980_23348 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21981_23349 = null;
    var count__21982_23350 = 0;
    var i__21983_23351 = 0;
    while (true) {
      if (i__21983_23351 < count__21982_23350) {
        var arg__9396__auto___23352 = cljs.core._nth.call(null, chunk__21981_23349, i__21983_23351);
        a__9395__auto__.push(arg__9396__auto___23352);
        var G__23353 = seq__21980_23348;
        var G__23354 = chunk__21981_23349;
        var G__23355 = count__21982_23350;
        var G__23356 = i__21983_23351 + 1;
        seq__21980_23348 = G__23353;
        chunk__21981_23349 = G__23354;
        count__21982_23350 = G__23355;
        i__21983_23351 = G__23356;
        continue;
      } else {
        var temp__4126__auto___23357 = cljs.core.seq.call(null, seq__21980_23348);
        if (temp__4126__auto___23357) {
          var seq__21980_23358__$1 = temp__4126__auto___23357;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21980_23358__$1)) {
            var c__4616__auto___23359 = cljs.core.chunk_first.call(null, seq__21980_23358__$1);
            var G__23360 = cljs.core.chunk_rest.call(null, seq__21980_23358__$1);
            var G__23361 = c__4616__auto___23359;
            var G__23362 = cljs.core.count.call(null, c__4616__auto___23359);
            var G__23363 = 0;
            seq__21980_23348 = G__23360;
            chunk__21981_23349 = G__23361;
            count__21982_23350 = G__23362;
            i__21983_23351 = G__23363;
            continue;
          } else {
            var arg__9396__auto___23364 = cljs.core.first.call(null, seq__21980_23358__$1);
            a__9395__auto__.push(arg__9396__auto___23364);
            var G__23365 = cljs.core.next.call(null, seq__21980_23358__$1);
            var G__23366 = null;
            var G__23367 = 0;
            var G__23368 = 0;
            seq__21980_23348 = G__23365;
            chunk__21981_23349 = G__23366;
            count__21982_23350 = G__23367;
            i__21983_23351 = G__23368;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.div.apply(null, a__9395__auto__);
  };
  var div = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23369__i = 0, G__23369__a = new Array(arguments.length - 0);
      while (G__23369__i < G__23369__a.length) {
        G__23369__a[G__23369__i] = arguments[G__23369__i + 0];
        ++G__23369__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23369__a, 0);
    }
    return div__delegate.call(this, args__9394__auto__);
  };
  div.cljs$lang$maxFixedArity = 0;
  div.cljs$lang$applyTo = function(arglist__23370) {
    var args__9394__auto__ = cljs.core.seq(arglist__23370);
    return div__delegate(args__9394__auto__);
  };
  div.cljs$core$IFn$_invoke$arity$variadic = div__delegate;
  return div;
}();
quiescent.dom.dl = function() {
  var dl__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21988_23371 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21989_23372 = null;
    var count__21990_23373 = 0;
    var i__21991_23374 = 0;
    while (true) {
      if (i__21991_23374 < count__21990_23373) {
        var arg__9396__auto___23375 = cljs.core._nth.call(null, chunk__21989_23372, i__21991_23374);
        a__9395__auto__.push(arg__9396__auto___23375);
        var G__23376 = seq__21988_23371;
        var G__23377 = chunk__21989_23372;
        var G__23378 = count__21990_23373;
        var G__23379 = i__21991_23374 + 1;
        seq__21988_23371 = G__23376;
        chunk__21989_23372 = G__23377;
        count__21990_23373 = G__23378;
        i__21991_23374 = G__23379;
        continue;
      } else {
        var temp__4126__auto___23380 = cljs.core.seq.call(null, seq__21988_23371);
        if (temp__4126__auto___23380) {
          var seq__21988_23381__$1 = temp__4126__auto___23380;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21988_23381__$1)) {
            var c__4616__auto___23382 = cljs.core.chunk_first.call(null, seq__21988_23381__$1);
            var G__23383 = cljs.core.chunk_rest.call(null, seq__21988_23381__$1);
            var G__23384 = c__4616__auto___23382;
            var G__23385 = cljs.core.count.call(null, c__4616__auto___23382);
            var G__23386 = 0;
            seq__21988_23371 = G__23383;
            chunk__21989_23372 = G__23384;
            count__21990_23373 = G__23385;
            i__21991_23374 = G__23386;
            continue;
          } else {
            var arg__9396__auto___23387 = cljs.core.first.call(null, seq__21988_23381__$1);
            a__9395__auto__.push(arg__9396__auto___23387);
            var G__23388 = cljs.core.next.call(null, seq__21988_23381__$1);
            var G__23389 = null;
            var G__23390 = 0;
            var G__23391 = 0;
            seq__21988_23371 = G__23388;
            chunk__21989_23372 = G__23389;
            count__21990_23373 = G__23390;
            i__21991_23374 = G__23391;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dl.apply(null, a__9395__auto__);
  };
  var dl = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23392__i = 0, G__23392__a = new Array(arguments.length - 0);
      while (G__23392__i < G__23392__a.length) {
        G__23392__a[G__23392__i] = arguments[G__23392__i + 0];
        ++G__23392__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23392__a, 0);
    }
    return dl__delegate.call(this, args__9394__auto__);
  };
  dl.cljs$lang$maxFixedArity = 0;
  dl.cljs$lang$applyTo = function(arglist__23393) {
    var args__9394__auto__ = cljs.core.seq(arglist__23393);
    return dl__delegate(args__9394__auto__);
  };
  dl.cljs$core$IFn$_invoke$arity$variadic = dl__delegate;
  return dl;
}();
quiescent.dom.dt = function() {
  var dt__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__21996_23394 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__21997_23395 = null;
    var count__21998_23396 = 0;
    var i__21999_23397 = 0;
    while (true) {
      if (i__21999_23397 < count__21998_23396) {
        var arg__9396__auto___23398 = cljs.core._nth.call(null, chunk__21997_23395, i__21999_23397);
        a__9395__auto__.push(arg__9396__auto___23398);
        var G__23399 = seq__21996_23394;
        var G__23400 = chunk__21997_23395;
        var G__23401 = count__21998_23396;
        var G__23402 = i__21999_23397 + 1;
        seq__21996_23394 = G__23399;
        chunk__21997_23395 = G__23400;
        count__21998_23396 = G__23401;
        i__21999_23397 = G__23402;
        continue;
      } else {
        var temp__4126__auto___23403 = cljs.core.seq.call(null, seq__21996_23394);
        if (temp__4126__auto___23403) {
          var seq__21996_23404__$1 = temp__4126__auto___23403;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21996_23404__$1)) {
            var c__4616__auto___23405 = cljs.core.chunk_first.call(null, seq__21996_23404__$1);
            var G__23406 = cljs.core.chunk_rest.call(null, seq__21996_23404__$1);
            var G__23407 = c__4616__auto___23405;
            var G__23408 = cljs.core.count.call(null, c__4616__auto___23405);
            var G__23409 = 0;
            seq__21996_23394 = G__23406;
            chunk__21997_23395 = G__23407;
            count__21998_23396 = G__23408;
            i__21999_23397 = G__23409;
            continue;
          } else {
            var arg__9396__auto___23410 = cljs.core.first.call(null, seq__21996_23404__$1);
            a__9395__auto__.push(arg__9396__auto___23410);
            var G__23411 = cljs.core.next.call(null, seq__21996_23404__$1);
            var G__23412 = null;
            var G__23413 = 0;
            var G__23414 = 0;
            seq__21996_23394 = G__23411;
            chunk__21997_23395 = G__23412;
            count__21998_23396 = G__23413;
            i__21999_23397 = G__23414;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dt.apply(null, a__9395__auto__);
  };
  var dt = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23415__i = 0, G__23415__a = new Array(arguments.length - 0);
      while (G__23415__i < G__23415__a.length) {
        G__23415__a[G__23415__i] = arguments[G__23415__i + 0];
        ++G__23415__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23415__a, 0);
    }
    return dt__delegate.call(this, args__9394__auto__);
  };
  dt.cljs$lang$maxFixedArity = 0;
  dt.cljs$lang$applyTo = function(arglist__23416) {
    var args__9394__auto__ = cljs.core.seq(arglist__23416);
    return dt__delegate(args__9394__auto__);
  };
  dt.cljs$core$IFn$_invoke$arity$variadic = dt__delegate;
  return dt;
}();
quiescent.dom.em = function() {
  var em__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22004_23417 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22005_23418 = null;
    var count__22006_23419 = 0;
    var i__22007_23420 = 0;
    while (true) {
      if (i__22007_23420 < count__22006_23419) {
        var arg__9396__auto___23421 = cljs.core._nth.call(null, chunk__22005_23418, i__22007_23420);
        a__9395__auto__.push(arg__9396__auto___23421);
        var G__23422 = seq__22004_23417;
        var G__23423 = chunk__22005_23418;
        var G__23424 = count__22006_23419;
        var G__23425 = i__22007_23420 + 1;
        seq__22004_23417 = G__23422;
        chunk__22005_23418 = G__23423;
        count__22006_23419 = G__23424;
        i__22007_23420 = G__23425;
        continue;
      } else {
        var temp__4126__auto___23426 = cljs.core.seq.call(null, seq__22004_23417);
        if (temp__4126__auto___23426) {
          var seq__22004_23427__$1 = temp__4126__auto___23426;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22004_23427__$1)) {
            var c__4616__auto___23428 = cljs.core.chunk_first.call(null, seq__22004_23427__$1);
            var G__23429 = cljs.core.chunk_rest.call(null, seq__22004_23427__$1);
            var G__23430 = c__4616__auto___23428;
            var G__23431 = cljs.core.count.call(null, c__4616__auto___23428);
            var G__23432 = 0;
            seq__22004_23417 = G__23429;
            chunk__22005_23418 = G__23430;
            count__22006_23419 = G__23431;
            i__22007_23420 = G__23432;
            continue;
          } else {
            var arg__9396__auto___23433 = cljs.core.first.call(null, seq__22004_23427__$1);
            a__9395__auto__.push(arg__9396__auto___23433);
            var G__23434 = cljs.core.next.call(null, seq__22004_23427__$1);
            var G__23435 = null;
            var G__23436 = 0;
            var G__23437 = 0;
            seq__22004_23417 = G__23434;
            chunk__22005_23418 = G__23435;
            count__22006_23419 = G__23436;
            i__22007_23420 = G__23437;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.em.apply(null, a__9395__auto__);
  };
  var em = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23438__i = 0, G__23438__a = new Array(arguments.length - 0);
      while (G__23438__i < G__23438__a.length) {
        G__23438__a[G__23438__i] = arguments[G__23438__i + 0];
        ++G__23438__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23438__a, 0);
    }
    return em__delegate.call(this, args__9394__auto__);
  };
  em.cljs$lang$maxFixedArity = 0;
  em.cljs$lang$applyTo = function(arglist__23439) {
    var args__9394__auto__ = cljs.core.seq(arglist__23439);
    return em__delegate(args__9394__auto__);
  };
  em.cljs$core$IFn$_invoke$arity$variadic = em__delegate;
  return em;
}();
quiescent.dom.embed = function() {
  var embed__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22020_23440 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22021_23441 = null;
    var count__22022_23442 = 0;
    var i__22023_23443 = 0;
    while (true) {
      if (i__22023_23443 < count__22022_23442) {
        var arg__9396__auto___23444 = cljs.core._nth.call(null, chunk__22021_23441, i__22023_23443);
        a__9395__auto__.push(arg__9396__auto___23444);
        var G__23445 = seq__22020_23440;
        var G__23446 = chunk__22021_23441;
        var G__23447 = count__22022_23442;
        var G__23448 = i__22023_23443 + 1;
        seq__22020_23440 = G__23445;
        chunk__22021_23441 = G__23446;
        count__22022_23442 = G__23447;
        i__22023_23443 = G__23448;
        continue;
      } else {
        var temp__4126__auto___23449 = cljs.core.seq.call(null, seq__22020_23440);
        if (temp__4126__auto___23449) {
          var seq__22020_23450__$1 = temp__4126__auto___23449;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22020_23450__$1)) {
            var c__4616__auto___23451 = cljs.core.chunk_first.call(null, seq__22020_23450__$1);
            var G__23452 = cljs.core.chunk_rest.call(null, seq__22020_23450__$1);
            var G__23453 = c__4616__auto___23451;
            var G__23454 = cljs.core.count.call(null, c__4616__auto___23451);
            var G__23455 = 0;
            seq__22020_23440 = G__23452;
            chunk__22021_23441 = G__23453;
            count__22022_23442 = G__23454;
            i__22023_23443 = G__23455;
            continue;
          } else {
            var arg__9396__auto___23456 = cljs.core.first.call(null, seq__22020_23450__$1);
            a__9395__auto__.push(arg__9396__auto___23456);
            var G__23457 = cljs.core.next.call(null, seq__22020_23450__$1);
            var G__23458 = null;
            var G__23459 = 0;
            var G__23460 = 0;
            seq__22020_23440 = G__23457;
            chunk__22021_23441 = G__23458;
            count__22022_23442 = G__23459;
            i__22023_23443 = G__23460;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.embed.apply(null, a__9395__auto__);
  };
  var embed = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23461__i = 0, G__23461__a = new Array(arguments.length - 0);
      while (G__23461__i < G__23461__a.length) {
        G__23461__a[G__23461__i] = arguments[G__23461__i + 0];
        ++G__23461__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23461__a, 0);
    }
    return embed__delegate.call(this, args__9394__auto__);
  };
  embed.cljs$lang$maxFixedArity = 0;
  embed.cljs$lang$applyTo = function(arglist__23462) {
    var args__9394__auto__ = cljs.core.seq(arglist__23462);
    return embed__delegate(args__9394__auto__);
  };
  embed.cljs$core$IFn$_invoke$arity$variadic = embed__delegate;
  return embed;
}();
quiescent.dom.fieldset = function() {
  var fieldset__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22028_23463 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22029_23464 = null;
    var count__22030_23465 = 0;
    var i__22031_23466 = 0;
    while (true) {
      if (i__22031_23466 < count__22030_23465) {
        var arg__9396__auto___23467 = cljs.core._nth.call(null, chunk__22029_23464, i__22031_23466);
        a__9395__auto__.push(arg__9396__auto___23467);
        var G__23468 = seq__22028_23463;
        var G__23469 = chunk__22029_23464;
        var G__23470 = count__22030_23465;
        var G__23471 = i__22031_23466 + 1;
        seq__22028_23463 = G__23468;
        chunk__22029_23464 = G__23469;
        count__22030_23465 = G__23470;
        i__22031_23466 = G__23471;
        continue;
      } else {
        var temp__4126__auto___23472 = cljs.core.seq.call(null, seq__22028_23463);
        if (temp__4126__auto___23472) {
          var seq__22028_23473__$1 = temp__4126__auto___23472;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22028_23473__$1)) {
            var c__4616__auto___23474 = cljs.core.chunk_first.call(null, seq__22028_23473__$1);
            var G__23475 = cljs.core.chunk_rest.call(null, seq__22028_23473__$1);
            var G__23476 = c__4616__auto___23474;
            var G__23477 = cljs.core.count.call(null, c__4616__auto___23474);
            var G__23478 = 0;
            seq__22028_23463 = G__23475;
            chunk__22029_23464 = G__23476;
            count__22030_23465 = G__23477;
            i__22031_23466 = G__23478;
            continue;
          } else {
            var arg__9396__auto___23479 = cljs.core.first.call(null, seq__22028_23473__$1);
            a__9395__auto__.push(arg__9396__auto___23479);
            var G__23480 = cljs.core.next.call(null, seq__22028_23473__$1);
            var G__23481 = null;
            var G__23482 = 0;
            var G__23483 = 0;
            seq__22028_23463 = G__23480;
            chunk__22029_23464 = G__23481;
            count__22030_23465 = G__23482;
            i__22031_23466 = G__23483;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.fieldset.apply(null, a__9395__auto__);
  };
  var fieldset = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23484__i = 0, G__23484__a = new Array(arguments.length - 0);
      while (G__23484__i < G__23484__a.length) {
        G__23484__a[G__23484__i] = arguments[G__23484__i + 0];
        ++G__23484__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23484__a, 0);
    }
    return fieldset__delegate.call(this, args__9394__auto__);
  };
  fieldset.cljs$lang$maxFixedArity = 0;
  fieldset.cljs$lang$applyTo = function(arglist__23485) {
    var args__9394__auto__ = cljs.core.seq(arglist__23485);
    return fieldset__delegate(args__9394__auto__);
  };
  fieldset.cljs$core$IFn$_invoke$arity$variadic = fieldset__delegate;
  return fieldset;
}();
quiescent.dom.figcaption = function() {
  var figcaption__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22036_23486 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22037_23487 = null;
    var count__22038_23488 = 0;
    var i__22039_23489 = 0;
    while (true) {
      if (i__22039_23489 < count__22038_23488) {
        var arg__9396__auto___23490 = cljs.core._nth.call(null, chunk__22037_23487, i__22039_23489);
        a__9395__auto__.push(arg__9396__auto___23490);
        var G__23491 = seq__22036_23486;
        var G__23492 = chunk__22037_23487;
        var G__23493 = count__22038_23488;
        var G__23494 = i__22039_23489 + 1;
        seq__22036_23486 = G__23491;
        chunk__22037_23487 = G__23492;
        count__22038_23488 = G__23493;
        i__22039_23489 = G__23494;
        continue;
      } else {
        var temp__4126__auto___23495 = cljs.core.seq.call(null, seq__22036_23486);
        if (temp__4126__auto___23495) {
          var seq__22036_23496__$1 = temp__4126__auto___23495;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22036_23496__$1)) {
            var c__4616__auto___23497 = cljs.core.chunk_first.call(null, seq__22036_23496__$1);
            var G__23498 = cljs.core.chunk_rest.call(null, seq__22036_23496__$1);
            var G__23499 = c__4616__auto___23497;
            var G__23500 = cljs.core.count.call(null, c__4616__auto___23497);
            var G__23501 = 0;
            seq__22036_23486 = G__23498;
            chunk__22037_23487 = G__23499;
            count__22038_23488 = G__23500;
            i__22039_23489 = G__23501;
            continue;
          } else {
            var arg__9396__auto___23502 = cljs.core.first.call(null, seq__22036_23496__$1);
            a__9395__auto__.push(arg__9396__auto___23502);
            var G__23503 = cljs.core.next.call(null, seq__22036_23496__$1);
            var G__23504 = null;
            var G__23505 = 0;
            var G__23506 = 0;
            seq__22036_23486 = G__23503;
            chunk__22037_23487 = G__23504;
            count__22038_23488 = G__23505;
            i__22039_23489 = G__23506;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.figcaption.apply(null, a__9395__auto__);
  };
  var figcaption = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23507__i = 0, G__23507__a = new Array(arguments.length - 0);
      while (G__23507__i < G__23507__a.length) {
        G__23507__a[G__23507__i] = arguments[G__23507__i + 0];
        ++G__23507__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23507__a, 0);
    }
    return figcaption__delegate.call(this, args__9394__auto__);
  };
  figcaption.cljs$lang$maxFixedArity = 0;
  figcaption.cljs$lang$applyTo = function(arglist__23508) {
    var args__9394__auto__ = cljs.core.seq(arglist__23508);
    return figcaption__delegate(args__9394__auto__);
  };
  figcaption.cljs$core$IFn$_invoke$arity$variadic = figcaption__delegate;
  return figcaption;
}();
quiescent.dom.figure = function() {
  var figure__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22044_23509 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22045_23510 = null;
    var count__22046_23511 = 0;
    var i__22047_23512 = 0;
    while (true) {
      if (i__22047_23512 < count__22046_23511) {
        var arg__9396__auto___23513 = cljs.core._nth.call(null, chunk__22045_23510, i__22047_23512);
        a__9395__auto__.push(arg__9396__auto___23513);
        var G__23514 = seq__22044_23509;
        var G__23515 = chunk__22045_23510;
        var G__23516 = count__22046_23511;
        var G__23517 = i__22047_23512 + 1;
        seq__22044_23509 = G__23514;
        chunk__22045_23510 = G__23515;
        count__22046_23511 = G__23516;
        i__22047_23512 = G__23517;
        continue;
      } else {
        var temp__4126__auto___23518 = cljs.core.seq.call(null, seq__22044_23509);
        if (temp__4126__auto___23518) {
          var seq__22044_23519__$1 = temp__4126__auto___23518;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22044_23519__$1)) {
            var c__4616__auto___23520 = cljs.core.chunk_first.call(null, seq__22044_23519__$1);
            var G__23521 = cljs.core.chunk_rest.call(null, seq__22044_23519__$1);
            var G__23522 = c__4616__auto___23520;
            var G__23523 = cljs.core.count.call(null, c__4616__auto___23520);
            var G__23524 = 0;
            seq__22044_23509 = G__23521;
            chunk__22045_23510 = G__23522;
            count__22046_23511 = G__23523;
            i__22047_23512 = G__23524;
            continue;
          } else {
            var arg__9396__auto___23525 = cljs.core.first.call(null, seq__22044_23519__$1);
            a__9395__auto__.push(arg__9396__auto___23525);
            var G__23526 = cljs.core.next.call(null, seq__22044_23519__$1);
            var G__23527 = null;
            var G__23528 = 0;
            var G__23529 = 0;
            seq__22044_23509 = G__23526;
            chunk__22045_23510 = G__23527;
            count__22046_23511 = G__23528;
            i__22047_23512 = G__23529;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.figure.apply(null, a__9395__auto__);
  };
  var figure = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23530__i = 0, G__23530__a = new Array(arguments.length - 0);
      while (G__23530__i < G__23530__a.length) {
        G__23530__a[G__23530__i] = arguments[G__23530__i + 0];
        ++G__23530__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23530__a, 0);
    }
    return figure__delegate.call(this, args__9394__auto__);
  };
  figure.cljs$lang$maxFixedArity = 0;
  figure.cljs$lang$applyTo = function(arglist__23531) {
    var args__9394__auto__ = cljs.core.seq(arglist__23531);
    return figure__delegate(args__9394__auto__);
  };
  figure.cljs$core$IFn$_invoke$arity$variadic = figure__delegate;
  return figure;
}();
quiescent.dom.footer = function() {
  var footer__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22052_23532 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22053_23533 = null;
    var count__22054_23534 = 0;
    var i__22055_23535 = 0;
    while (true) {
      if (i__22055_23535 < count__22054_23534) {
        var arg__9396__auto___23536 = cljs.core._nth.call(null, chunk__22053_23533, i__22055_23535);
        a__9395__auto__.push(arg__9396__auto___23536);
        var G__23537 = seq__22052_23532;
        var G__23538 = chunk__22053_23533;
        var G__23539 = count__22054_23534;
        var G__23540 = i__22055_23535 + 1;
        seq__22052_23532 = G__23537;
        chunk__22053_23533 = G__23538;
        count__22054_23534 = G__23539;
        i__22055_23535 = G__23540;
        continue;
      } else {
        var temp__4126__auto___23541 = cljs.core.seq.call(null, seq__22052_23532);
        if (temp__4126__auto___23541) {
          var seq__22052_23542__$1 = temp__4126__auto___23541;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22052_23542__$1)) {
            var c__4616__auto___23543 = cljs.core.chunk_first.call(null, seq__22052_23542__$1);
            var G__23544 = cljs.core.chunk_rest.call(null, seq__22052_23542__$1);
            var G__23545 = c__4616__auto___23543;
            var G__23546 = cljs.core.count.call(null, c__4616__auto___23543);
            var G__23547 = 0;
            seq__22052_23532 = G__23544;
            chunk__22053_23533 = G__23545;
            count__22054_23534 = G__23546;
            i__22055_23535 = G__23547;
            continue;
          } else {
            var arg__9396__auto___23548 = cljs.core.first.call(null, seq__22052_23542__$1);
            a__9395__auto__.push(arg__9396__auto___23548);
            var G__23549 = cljs.core.next.call(null, seq__22052_23542__$1);
            var G__23550 = null;
            var G__23551 = 0;
            var G__23552 = 0;
            seq__22052_23532 = G__23549;
            chunk__22053_23533 = G__23550;
            count__22054_23534 = G__23551;
            i__22055_23535 = G__23552;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.footer.apply(null, a__9395__auto__);
  };
  var footer = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23553__i = 0, G__23553__a = new Array(arguments.length - 0);
      while (G__23553__i < G__23553__a.length) {
        G__23553__a[G__23553__i] = arguments[G__23553__i + 0];
        ++G__23553__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23553__a, 0);
    }
    return footer__delegate.call(this, args__9394__auto__);
  };
  footer.cljs$lang$maxFixedArity = 0;
  footer.cljs$lang$applyTo = function(arglist__23554) {
    var args__9394__auto__ = cljs.core.seq(arglist__23554);
    return footer__delegate(args__9394__auto__);
  };
  footer.cljs$core$IFn$_invoke$arity$variadic = footer__delegate;
  return footer;
}();
quiescent.dom.form = function() {
  var form__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22060_23555 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22061_23556 = null;
    var count__22062_23557 = 0;
    var i__22063_23558 = 0;
    while (true) {
      if (i__22063_23558 < count__22062_23557) {
        var arg__9396__auto___23559 = cljs.core._nth.call(null, chunk__22061_23556, i__22063_23558);
        a__9395__auto__.push(arg__9396__auto___23559);
        var G__23560 = seq__22060_23555;
        var G__23561 = chunk__22061_23556;
        var G__23562 = count__22062_23557;
        var G__23563 = i__22063_23558 + 1;
        seq__22060_23555 = G__23560;
        chunk__22061_23556 = G__23561;
        count__22062_23557 = G__23562;
        i__22063_23558 = G__23563;
        continue;
      } else {
        var temp__4126__auto___23564 = cljs.core.seq.call(null, seq__22060_23555);
        if (temp__4126__auto___23564) {
          var seq__22060_23565__$1 = temp__4126__auto___23564;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22060_23565__$1)) {
            var c__4616__auto___23566 = cljs.core.chunk_first.call(null, seq__22060_23565__$1);
            var G__23567 = cljs.core.chunk_rest.call(null, seq__22060_23565__$1);
            var G__23568 = c__4616__auto___23566;
            var G__23569 = cljs.core.count.call(null, c__4616__auto___23566);
            var G__23570 = 0;
            seq__22060_23555 = G__23567;
            chunk__22061_23556 = G__23568;
            count__22062_23557 = G__23569;
            i__22063_23558 = G__23570;
            continue;
          } else {
            var arg__9396__auto___23571 = cljs.core.first.call(null, seq__22060_23565__$1);
            a__9395__auto__.push(arg__9396__auto___23571);
            var G__23572 = cljs.core.next.call(null, seq__22060_23565__$1);
            var G__23573 = null;
            var G__23574 = 0;
            var G__23575 = 0;
            seq__22060_23555 = G__23572;
            chunk__22061_23556 = G__23573;
            count__22062_23557 = G__23574;
            i__22063_23558 = G__23575;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.form.apply(null, a__9395__auto__);
  };
  var form = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23576__i = 0, G__23576__a = new Array(arguments.length - 0);
      while (G__23576__i < G__23576__a.length) {
        G__23576__a[G__23576__i] = arguments[G__23576__i + 0];
        ++G__23576__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23576__a, 0);
    }
    return form__delegate.call(this, args__9394__auto__);
  };
  form.cljs$lang$maxFixedArity = 0;
  form.cljs$lang$applyTo = function(arglist__23577) {
    var args__9394__auto__ = cljs.core.seq(arglist__23577);
    return form__delegate(args__9394__auto__);
  };
  form.cljs$core$IFn$_invoke$arity$variadic = form__delegate;
  return form;
}();
quiescent.dom.h1 = function() {
  var h1__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22068_23578 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22069_23579 = null;
    var count__22070_23580 = 0;
    var i__22071_23581 = 0;
    while (true) {
      if (i__22071_23581 < count__22070_23580) {
        var arg__9396__auto___23582 = cljs.core._nth.call(null, chunk__22069_23579, i__22071_23581);
        a__9395__auto__.push(arg__9396__auto___23582);
        var G__23583 = seq__22068_23578;
        var G__23584 = chunk__22069_23579;
        var G__23585 = count__22070_23580;
        var G__23586 = i__22071_23581 + 1;
        seq__22068_23578 = G__23583;
        chunk__22069_23579 = G__23584;
        count__22070_23580 = G__23585;
        i__22071_23581 = G__23586;
        continue;
      } else {
        var temp__4126__auto___23587 = cljs.core.seq.call(null, seq__22068_23578);
        if (temp__4126__auto___23587) {
          var seq__22068_23588__$1 = temp__4126__auto___23587;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22068_23588__$1)) {
            var c__4616__auto___23589 = cljs.core.chunk_first.call(null, seq__22068_23588__$1);
            var G__23590 = cljs.core.chunk_rest.call(null, seq__22068_23588__$1);
            var G__23591 = c__4616__auto___23589;
            var G__23592 = cljs.core.count.call(null, c__4616__auto___23589);
            var G__23593 = 0;
            seq__22068_23578 = G__23590;
            chunk__22069_23579 = G__23591;
            count__22070_23580 = G__23592;
            i__22071_23581 = G__23593;
            continue;
          } else {
            var arg__9396__auto___23594 = cljs.core.first.call(null, seq__22068_23588__$1);
            a__9395__auto__.push(arg__9396__auto___23594);
            var G__23595 = cljs.core.next.call(null, seq__22068_23588__$1);
            var G__23596 = null;
            var G__23597 = 0;
            var G__23598 = 0;
            seq__22068_23578 = G__23595;
            chunk__22069_23579 = G__23596;
            count__22070_23580 = G__23597;
            i__22071_23581 = G__23598;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h1.apply(null, a__9395__auto__);
  };
  var h1 = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23599__i = 0, G__23599__a = new Array(arguments.length - 0);
      while (G__23599__i < G__23599__a.length) {
        G__23599__a[G__23599__i] = arguments[G__23599__i + 0];
        ++G__23599__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23599__a, 0);
    }
    return h1__delegate.call(this, args__9394__auto__);
  };
  h1.cljs$lang$maxFixedArity = 0;
  h1.cljs$lang$applyTo = function(arglist__23600) {
    var args__9394__auto__ = cljs.core.seq(arglist__23600);
    return h1__delegate(args__9394__auto__);
  };
  h1.cljs$core$IFn$_invoke$arity$variadic = h1__delegate;
  return h1;
}();
quiescent.dom.h2 = function() {
  var h2__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22076_23601 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22077_23602 = null;
    var count__22078_23603 = 0;
    var i__22079_23604 = 0;
    while (true) {
      if (i__22079_23604 < count__22078_23603) {
        var arg__9396__auto___23605 = cljs.core._nth.call(null, chunk__22077_23602, i__22079_23604);
        a__9395__auto__.push(arg__9396__auto___23605);
        var G__23606 = seq__22076_23601;
        var G__23607 = chunk__22077_23602;
        var G__23608 = count__22078_23603;
        var G__23609 = i__22079_23604 + 1;
        seq__22076_23601 = G__23606;
        chunk__22077_23602 = G__23607;
        count__22078_23603 = G__23608;
        i__22079_23604 = G__23609;
        continue;
      } else {
        var temp__4126__auto___23610 = cljs.core.seq.call(null, seq__22076_23601);
        if (temp__4126__auto___23610) {
          var seq__22076_23611__$1 = temp__4126__auto___23610;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22076_23611__$1)) {
            var c__4616__auto___23612 = cljs.core.chunk_first.call(null, seq__22076_23611__$1);
            var G__23613 = cljs.core.chunk_rest.call(null, seq__22076_23611__$1);
            var G__23614 = c__4616__auto___23612;
            var G__23615 = cljs.core.count.call(null, c__4616__auto___23612);
            var G__23616 = 0;
            seq__22076_23601 = G__23613;
            chunk__22077_23602 = G__23614;
            count__22078_23603 = G__23615;
            i__22079_23604 = G__23616;
            continue;
          } else {
            var arg__9396__auto___23617 = cljs.core.first.call(null, seq__22076_23611__$1);
            a__9395__auto__.push(arg__9396__auto___23617);
            var G__23618 = cljs.core.next.call(null, seq__22076_23611__$1);
            var G__23619 = null;
            var G__23620 = 0;
            var G__23621 = 0;
            seq__22076_23601 = G__23618;
            chunk__22077_23602 = G__23619;
            count__22078_23603 = G__23620;
            i__22079_23604 = G__23621;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h2.apply(null, a__9395__auto__);
  };
  var h2 = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23622__i = 0, G__23622__a = new Array(arguments.length - 0);
      while (G__23622__i < G__23622__a.length) {
        G__23622__a[G__23622__i] = arguments[G__23622__i + 0];
        ++G__23622__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23622__a, 0);
    }
    return h2__delegate.call(this, args__9394__auto__);
  };
  h2.cljs$lang$maxFixedArity = 0;
  h2.cljs$lang$applyTo = function(arglist__23623) {
    var args__9394__auto__ = cljs.core.seq(arglist__23623);
    return h2__delegate(args__9394__auto__);
  };
  h2.cljs$core$IFn$_invoke$arity$variadic = h2__delegate;
  return h2;
}();
quiescent.dom.h3 = function() {
  var h3__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22084_23624 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22085_23625 = null;
    var count__22086_23626 = 0;
    var i__22087_23627 = 0;
    while (true) {
      if (i__22087_23627 < count__22086_23626) {
        var arg__9396__auto___23628 = cljs.core._nth.call(null, chunk__22085_23625, i__22087_23627);
        a__9395__auto__.push(arg__9396__auto___23628);
        var G__23629 = seq__22084_23624;
        var G__23630 = chunk__22085_23625;
        var G__23631 = count__22086_23626;
        var G__23632 = i__22087_23627 + 1;
        seq__22084_23624 = G__23629;
        chunk__22085_23625 = G__23630;
        count__22086_23626 = G__23631;
        i__22087_23627 = G__23632;
        continue;
      } else {
        var temp__4126__auto___23633 = cljs.core.seq.call(null, seq__22084_23624);
        if (temp__4126__auto___23633) {
          var seq__22084_23634__$1 = temp__4126__auto___23633;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22084_23634__$1)) {
            var c__4616__auto___23635 = cljs.core.chunk_first.call(null, seq__22084_23634__$1);
            var G__23636 = cljs.core.chunk_rest.call(null, seq__22084_23634__$1);
            var G__23637 = c__4616__auto___23635;
            var G__23638 = cljs.core.count.call(null, c__4616__auto___23635);
            var G__23639 = 0;
            seq__22084_23624 = G__23636;
            chunk__22085_23625 = G__23637;
            count__22086_23626 = G__23638;
            i__22087_23627 = G__23639;
            continue;
          } else {
            var arg__9396__auto___23640 = cljs.core.first.call(null, seq__22084_23634__$1);
            a__9395__auto__.push(arg__9396__auto___23640);
            var G__23641 = cljs.core.next.call(null, seq__22084_23634__$1);
            var G__23642 = null;
            var G__23643 = 0;
            var G__23644 = 0;
            seq__22084_23624 = G__23641;
            chunk__22085_23625 = G__23642;
            count__22086_23626 = G__23643;
            i__22087_23627 = G__23644;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h3.apply(null, a__9395__auto__);
  };
  var h3 = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23645__i = 0, G__23645__a = new Array(arguments.length - 0);
      while (G__23645__i < G__23645__a.length) {
        G__23645__a[G__23645__i] = arguments[G__23645__i + 0];
        ++G__23645__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23645__a, 0);
    }
    return h3__delegate.call(this, args__9394__auto__);
  };
  h3.cljs$lang$maxFixedArity = 0;
  h3.cljs$lang$applyTo = function(arglist__23646) {
    var args__9394__auto__ = cljs.core.seq(arglist__23646);
    return h3__delegate(args__9394__auto__);
  };
  h3.cljs$core$IFn$_invoke$arity$variadic = h3__delegate;
  return h3;
}();
quiescent.dom.h4 = function() {
  var h4__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22092_23647 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22093_23648 = null;
    var count__22094_23649 = 0;
    var i__22095_23650 = 0;
    while (true) {
      if (i__22095_23650 < count__22094_23649) {
        var arg__9396__auto___23651 = cljs.core._nth.call(null, chunk__22093_23648, i__22095_23650);
        a__9395__auto__.push(arg__9396__auto___23651);
        var G__23652 = seq__22092_23647;
        var G__23653 = chunk__22093_23648;
        var G__23654 = count__22094_23649;
        var G__23655 = i__22095_23650 + 1;
        seq__22092_23647 = G__23652;
        chunk__22093_23648 = G__23653;
        count__22094_23649 = G__23654;
        i__22095_23650 = G__23655;
        continue;
      } else {
        var temp__4126__auto___23656 = cljs.core.seq.call(null, seq__22092_23647);
        if (temp__4126__auto___23656) {
          var seq__22092_23657__$1 = temp__4126__auto___23656;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22092_23657__$1)) {
            var c__4616__auto___23658 = cljs.core.chunk_first.call(null, seq__22092_23657__$1);
            var G__23659 = cljs.core.chunk_rest.call(null, seq__22092_23657__$1);
            var G__23660 = c__4616__auto___23658;
            var G__23661 = cljs.core.count.call(null, c__4616__auto___23658);
            var G__23662 = 0;
            seq__22092_23647 = G__23659;
            chunk__22093_23648 = G__23660;
            count__22094_23649 = G__23661;
            i__22095_23650 = G__23662;
            continue;
          } else {
            var arg__9396__auto___23663 = cljs.core.first.call(null, seq__22092_23657__$1);
            a__9395__auto__.push(arg__9396__auto___23663);
            var G__23664 = cljs.core.next.call(null, seq__22092_23657__$1);
            var G__23665 = null;
            var G__23666 = 0;
            var G__23667 = 0;
            seq__22092_23647 = G__23664;
            chunk__22093_23648 = G__23665;
            count__22094_23649 = G__23666;
            i__22095_23650 = G__23667;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h4.apply(null, a__9395__auto__);
  };
  var h4 = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23668__i = 0, G__23668__a = new Array(arguments.length - 0);
      while (G__23668__i < G__23668__a.length) {
        G__23668__a[G__23668__i] = arguments[G__23668__i + 0];
        ++G__23668__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23668__a, 0);
    }
    return h4__delegate.call(this, args__9394__auto__);
  };
  h4.cljs$lang$maxFixedArity = 0;
  h4.cljs$lang$applyTo = function(arglist__23669) {
    var args__9394__auto__ = cljs.core.seq(arglist__23669);
    return h4__delegate(args__9394__auto__);
  };
  h4.cljs$core$IFn$_invoke$arity$variadic = h4__delegate;
  return h4;
}();
quiescent.dom.h5 = function() {
  var h5__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22100_23670 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22101_23671 = null;
    var count__22102_23672 = 0;
    var i__22103_23673 = 0;
    while (true) {
      if (i__22103_23673 < count__22102_23672) {
        var arg__9396__auto___23674 = cljs.core._nth.call(null, chunk__22101_23671, i__22103_23673);
        a__9395__auto__.push(arg__9396__auto___23674);
        var G__23675 = seq__22100_23670;
        var G__23676 = chunk__22101_23671;
        var G__23677 = count__22102_23672;
        var G__23678 = i__22103_23673 + 1;
        seq__22100_23670 = G__23675;
        chunk__22101_23671 = G__23676;
        count__22102_23672 = G__23677;
        i__22103_23673 = G__23678;
        continue;
      } else {
        var temp__4126__auto___23679 = cljs.core.seq.call(null, seq__22100_23670);
        if (temp__4126__auto___23679) {
          var seq__22100_23680__$1 = temp__4126__auto___23679;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22100_23680__$1)) {
            var c__4616__auto___23681 = cljs.core.chunk_first.call(null, seq__22100_23680__$1);
            var G__23682 = cljs.core.chunk_rest.call(null, seq__22100_23680__$1);
            var G__23683 = c__4616__auto___23681;
            var G__23684 = cljs.core.count.call(null, c__4616__auto___23681);
            var G__23685 = 0;
            seq__22100_23670 = G__23682;
            chunk__22101_23671 = G__23683;
            count__22102_23672 = G__23684;
            i__22103_23673 = G__23685;
            continue;
          } else {
            var arg__9396__auto___23686 = cljs.core.first.call(null, seq__22100_23680__$1);
            a__9395__auto__.push(arg__9396__auto___23686);
            var G__23687 = cljs.core.next.call(null, seq__22100_23680__$1);
            var G__23688 = null;
            var G__23689 = 0;
            var G__23690 = 0;
            seq__22100_23670 = G__23687;
            chunk__22101_23671 = G__23688;
            count__22102_23672 = G__23689;
            i__22103_23673 = G__23690;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h5.apply(null, a__9395__auto__);
  };
  var h5 = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23691__i = 0, G__23691__a = new Array(arguments.length - 0);
      while (G__23691__i < G__23691__a.length) {
        G__23691__a[G__23691__i] = arguments[G__23691__i + 0];
        ++G__23691__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23691__a, 0);
    }
    return h5__delegate.call(this, args__9394__auto__);
  };
  h5.cljs$lang$maxFixedArity = 0;
  h5.cljs$lang$applyTo = function(arglist__23692) {
    var args__9394__auto__ = cljs.core.seq(arglist__23692);
    return h5__delegate(args__9394__auto__);
  };
  h5.cljs$core$IFn$_invoke$arity$variadic = h5__delegate;
  return h5;
}();
quiescent.dom.h6 = function() {
  var h6__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22108_23693 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22109_23694 = null;
    var count__22110_23695 = 0;
    var i__22111_23696 = 0;
    while (true) {
      if (i__22111_23696 < count__22110_23695) {
        var arg__9396__auto___23697 = cljs.core._nth.call(null, chunk__22109_23694, i__22111_23696);
        a__9395__auto__.push(arg__9396__auto___23697);
        var G__23698 = seq__22108_23693;
        var G__23699 = chunk__22109_23694;
        var G__23700 = count__22110_23695;
        var G__23701 = i__22111_23696 + 1;
        seq__22108_23693 = G__23698;
        chunk__22109_23694 = G__23699;
        count__22110_23695 = G__23700;
        i__22111_23696 = G__23701;
        continue;
      } else {
        var temp__4126__auto___23702 = cljs.core.seq.call(null, seq__22108_23693);
        if (temp__4126__auto___23702) {
          var seq__22108_23703__$1 = temp__4126__auto___23702;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22108_23703__$1)) {
            var c__4616__auto___23704 = cljs.core.chunk_first.call(null, seq__22108_23703__$1);
            var G__23705 = cljs.core.chunk_rest.call(null, seq__22108_23703__$1);
            var G__23706 = c__4616__auto___23704;
            var G__23707 = cljs.core.count.call(null, c__4616__auto___23704);
            var G__23708 = 0;
            seq__22108_23693 = G__23705;
            chunk__22109_23694 = G__23706;
            count__22110_23695 = G__23707;
            i__22111_23696 = G__23708;
            continue;
          } else {
            var arg__9396__auto___23709 = cljs.core.first.call(null, seq__22108_23703__$1);
            a__9395__auto__.push(arg__9396__auto___23709);
            var G__23710 = cljs.core.next.call(null, seq__22108_23703__$1);
            var G__23711 = null;
            var G__23712 = 0;
            var G__23713 = 0;
            seq__22108_23693 = G__23710;
            chunk__22109_23694 = G__23711;
            count__22110_23695 = G__23712;
            i__22111_23696 = G__23713;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h6.apply(null, a__9395__auto__);
  };
  var h6 = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23714__i = 0, G__23714__a = new Array(arguments.length - 0);
      while (G__23714__i < G__23714__a.length) {
        G__23714__a[G__23714__i] = arguments[G__23714__i + 0];
        ++G__23714__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23714__a, 0);
    }
    return h6__delegate.call(this, args__9394__auto__);
  };
  h6.cljs$lang$maxFixedArity = 0;
  h6.cljs$lang$applyTo = function(arglist__23715) {
    var args__9394__auto__ = cljs.core.seq(arglist__23715);
    return h6__delegate(args__9394__auto__);
  };
  h6.cljs$core$IFn$_invoke$arity$variadic = h6__delegate;
  return h6;
}();
quiescent.dom.head = function() {
  var head__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22116_23716 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22117_23717 = null;
    var count__22118_23718 = 0;
    var i__22119_23719 = 0;
    while (true) {
      if (i__22119_23719 < count__22118_23718) {
        var arg__9396__auto___23720 = cljs.core._nth.call(null, chunk__22117_23717, i__22119_23719);
        a__9395__auto__.push(arg__9396__auto___23720);
        var G__23721 = seq__22116_23716;
        var G__23722 = chunk__22117_23717;
        var G__23723 = count__22118_23718;
        var G__23724 = i__22119_23719 + 1;
        seq__22116_23716 = G__23721;
        chunk__22117_23717 = G__23722;
        count__22118_23718 = G__23723;
        i__22119_23719 = G__23724;
        continue;
      } else {
        var temp__4126__auto___23725 = cljs.core.seq.call(null, seq__22116_23716);
        if (temp__4126__auto___23725) {
          var seq__22116_23726__$1 = temp__4126__auto___23725;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22116_23726__$1)) {
            var c__4616__auto___23727 = cljs.core.chunk_first.call(null, seq__22116_23726__$1);
            var G__23728 = cljs.core.chunk_rest.call(null, seq__22116_23726__$1);
            var G__23729 = c__4616__auto___23727;
            var G__23730 = cljs.core.count.call(null, c__4616__auto___23727);
            var G__23731 = 0;
            seq__22116_23716 = G__23728;
            chunk__22117_23717 = G__23729;
            count__22118_23718 = G__23730;
            i__22119_23719 = G__23731;
            continue;
          } else {
            var arg__9396__auto___23732 = cljs.core.first.call(null, seq__22116_23726__$1);
            a__9395__auto__.push(arg__9396__auto___23732);
            var G__23733 = cljs.core.next.call(null, seq__22116_23726__$1);
            var G__23734 = null;
            var G__23735 = 0;
            var G__23736 = 0;
            seq__22116_23716 = G__23733;
            chunk__22117_23717 = G__23734;
            count__22118_23718 = G__23735;
            i__22119_23719 = G__23736;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.head.apply(null, a__9395__auto__);
  };
  var head = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23737__i = 0, G__23737__a = new Array(arguments.length - 0);
      while (G__23737__i < G__23737__a.length) {
        G__23737__a[G__23737__i] = arguments[G__23737__i + 0];
        ++G__23737__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23737__a, 0);
    }
    return head__delegate.call(this, args__9394__auto__);
  };
  head.cljs$lang$maxFixedArity = 0;
  head.cljs$lang$applyTo = function(arglist__23738) {
    var args__9394__auto__ = cljs.core.seq(arglist__23738);
    return head__delegate(args__9394__auto__);
  };
  head.cljs$core$IFn$_invoke$arity$variadic = head__delegate;
  return head;
}();
quiescent.dom.header = function() {
  var header__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22124_23739 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22125_23740 = null;
    var count__22126_23741 = 0;
    var i__22127_23742 = 0;
    while (true) {
      if (i__22127_23742 < count__22126_23741) {
        var arg__9396__auto___23743 = cljs.core._nth.call(null, chunk__22125_23740, i__22127_23742);
        a__9395__auto__.push(arg__9396__auto___23743);
        var G__23744 = seq__22124_23739;
        var G__23745 = chunk__22125_23740;
        var G__23746 = count__22126_23741;
        var G__23747 = i__22127_23742 + 1;
        seq__22124_23739 = G__23744;
        chunk__22125_23740 = G__23745;
        count__22126_23741 = G__23746;
        i__22127_23742 = G__23747;
        continue;
      } else {
        var temp__4126__auto___23748 = cljs.core.seq.call(null, seq__22124_23739);
        if (temp__4126__auto___23748) {
          var seq__22124_23749__$1 = temp__4126__auto___23748;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22124_23749__$1)) {
            var c__4616__auto___23750 = cljs.core.chunk_first.call(null, seq__22124_23749__$1);
            var G__23751 = cljs.core.chunk_rest.call(null, seq__22124_23749__$1);
            var G__23752 = c__4616__auto___23750;
            var G__23753 = cljs.core.count.call(null, c__4616__auto___23750);
            var G__23754 = 0;
            seq__22124_23739 = G__23751;
            chunk__22125_23740 = G__23752;
            count__22126_23741 = G__23753;
            i__22127_23742 = G__23754;
            continue;
          } else {
            var arg__9396__auto___23755 = cljs.core.first.call(null, seq__22124_23749__$1);
            a__9395__auto__.push(arg__9396__auto___23755);
            var G__23756 = cljs.core.next.call(null, seq__22124_23749__$1);
            var G__23757 = null;
            var G__23758 = 0;
            var G__23759 = 0;
            seq__22124_23739 = G__23756;
            chunk__22125_23740 = G__23757;
            count__22126_23741 = G__23758;
            i__22127_23742 = G__23759;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.header.apply(null, a__9395__auto__);
  };
  var header = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23760__i = 0, G__23760__a = new Array(arguments.length - 0);
      while (G__23760__i < G__23760__a.length) {
        G__23760__a[G__23760__i] = arguments[G__23760__i + 0];
        ++G__23760__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23760__a, 0);
    }
    return header__delegate.call(this, args__9394__auto__);
  };
  header.cljs$lang$maxFixedArity = 0;
  header.cljs$lang$applyTo = function(arglist__23761) {
    var args__9394__auto__ = cljs.core.seq(arglist__23761);
    return header__delegate(args__9394__auto__);
  };
  header.cljs$core$IFn$_invoke$arity$variadic = header__delegate;
  return header;
}();
quiescent.dom.hr = function() {
  var hr__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22132_23762 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22133_23763 = null;
    var count__22134_23764 = 0;
    var i__22135_23765 = 0;
    while (true) {
      if (i__22135_23765 < count__22134_23764) {
        var arg__9396__auto___23766 = cljs.core._nth.call(null, chunk__22133_23763, i__22135_23765);
        a__9395__auto__.push(arg__9396__auto___23766);
        var G__23767 = seq__22132_23762;
        var G__23768 = chunk__22133_23763;
        var G__23769 = count__22134_23764;
        var G__23770 = i__22135_23765 + 1;
        seq__22132_23762 = G__23767;
        chunk__22133_23763 = G__23768;
        count__22134_23764 = G__23769;
        i__22135_23765 = G__23770;
        continue;
      } else {
        var temp__4126__auto___23771 = cljs.core.seq.call(null, seq__22132_23762);
        if (temp__4126__auto___23771) {
          var seq__22132_23772__$1 = temp__4126__auto___23771;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22132_23772__$1)) {
            var c__4616__auto___23773 = cljs.core.chunk_first.call(null, seq__22132_23772__$1);
            var G__23774 = cljs.core.chunk_rest.call(null, seq__22132_23772__$1);
            var G__23775 = c__4616__auto___23773;
            var G__23776 = cljs.core.count.call(null, c__4616__auto___23773);
            var G__23777 = 0;
            seq__22132_23762 = G__23774;
            chunk__22133_23763 = G__23775;
            count__22134_23764 = G__23776;
            i__22135_23765 = G__23777;
            continue;
          } else {
            var arg__9396__auto___23778 = cljs.core.first.call(null, seq__22132_23772__$1);
            a__9395__auto__.push(arg__9396__auto___23778);
            var G__23779 = cljs.core.next.call(null, seq__22132_23772__$1);
            var G__23780 = null;
            var G__23781 = 0;
            var G__23782 = 0;
            seq__22132_23762 = G__23779;
            chunk__22133_23763 = G__23780;
            count__22134_23764 = G__23781;
            i__22135_23765 = G__23782;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.hr.apply(null, a__9395__auto__);
  };
  var hr = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23783__i = 0, G__23783__a = new Array(arguments.length - 0);
      while (G__23783__i < G__23783__a.length) {
        G__23783__a[G__23783__i] = arguments[G__23783__i + 0];
        ++G__23783__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23783__a, 0);
    }
    return hr__delegate.call(this, args__9394__auto__);
  };
  hr.cljs$lang$maxFixedArity = 0;
  hr.cljs$lang$applyTo = function(arglist__23784) {
    var args__9394__auto__ = cljs.core.seq(arglist__23784);
    return hr__delegate(args__9394__auto__);
  };
  hr.cljs$core$IFn$_invoke$arity$variadic = hr__delegate;
  return hr;
}();
quiescent.dom.html = function() {
  var html__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22140_23785 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22141_23786 = null;
    var count__22142_23787 = 0;
    var i__22143_23788 = 0;
    while (true) {
      if (i__22143_23788 < count__22142_23787) {
        var arg__9396__auto___23789 = cljs.core._nth.call(null, chunk__22141_23786, i__22143_23788);
        a__9395__auto__.push(arg__9396__auto___23789);
        var G__23790 = seq__22140_23785;
        var G__23791 = chunk__22141_23786;
        var G__23792 = count__22142_23787;
        var G__23793 = i__22143_23788 + 1;
        seq__22140_23785 = G__23790;
        chunk__22141_23786 = G__23791;
        count__22142_23787 = G__23792;
        i__22143_23788 = G__23793;
        continue;
      } else {
        var temp__4126__auto___23794 = cljs.core.seq.call(null, seq__22140_23785);
        if (temp__4126__auto___23794) {
          var seq__22140_23795__$1 = temp__4126__auto___23794;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22140_23795__$1)) {
            var c__4616__auto___23796 = cljs.core.chunk_first.call(null, seq__22140_23795__$1);
            var G__23797 = cljs.core.chunk_rest.call(null, seq__22140_23795__$1);
            var G__23798 = c__4616__auto___23796;
            var G__23799 = cljs.core.count.call(null, c__4616__auto___23796);
            var G__23800 = 0;
            seq__22140_23785 = G__23797;
            chunk__22141_23786 = G__23798;
            count__22142_23787 = G__23799;
            i__22143_23788 = G__23800;
            continue;
          } else {
            var arg__9396__auto___23801 = cljs.core.first.call(null, seq__22140_23795__$1);
            a__9395__auto__.push(arg__9396__auto___23801);
            var G__23802 = cljs.core.next.call(null, seq__22140_23795__$1);
            var G__23803 = null;
            var G__23804 = 0;
            var G__23805 = 0;
            seq__22140_23785 = G__23802;
            chunk__22141_23786 = G__23803;
            count__22142_23787 = G__23804;
            i__22143_23788 = G__23805;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.html.apply(null, a__9395__auto__);
  };
  var html = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23806__i = 0, G__23806__a = new Array(arguments.length - 0);
      while (G__23806__i < G__23806__a.length) {
        G__23806__a[G__23806__i] = arguments[G__23806__i + 0];
        ++G__23806__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23806__a, 0);
    }
    return html__delegate.call(this, args__9394__auto__);
  };
  html.cljs$lang$maxFixedArity = 0;
  html.cljs$lang$applyTo = function(arglist__23807) {
    var args__9394__auto__ = cljs.core.seq(arglist__23807);
    return html__delegate(args__9394__auto__);
  };
  html.cljs$core$IFn$_invoke$arity$variadic = html__delegate;
  return html;
}();
quiescent.dom.i = function() {
  var i__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22148_23808 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22149_23809 = null;
    var count__22150_23810 = 0;
    var i__22151_23811 = 0;
    while (true) {
      if (i__22151_23811 < count__22150_23810) {
        var arg__9396__auto___23812 = cljs.core._nth.call(null, chunk__22149_23809, i__22151_23811);
        a__9395__auto__.push(arg__9396__auto___23812);
        var G__23813 = seq__22148_23808;
        var G__23814 = chunk__22149_23809;
        var G__23815 = count__22150_23810;
        var G__23816 = i__22151_23811 + 1;
        seq__22148_23808 = G__23813;
        chunk__22149_23809 = G__23814;
        count__22150_23810 = G__23815;
        i__22151_23811 = G__23816;
        continue;
      } else {
        var temp__4126__auto___23817 = cljs.core.seq.call(null, seq__22148_23808);
        if (temp__4126__auto___23817) {
          var seq__22148_23818__$1 = temp__4126__auto___23817;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22148_23818__$1)) {
            var c__4616__auto___23819 = cljs.core.chunk_first.call(null, seq__22148_23818__$1);
            var G__23820 = cljs.core.chunk_rest.call(null, seq__22148_23818__$1);
            var G__23821 = c__4616__auto___23819;
            var G__23822 = cljs.core.count.call(null, c__4616__auto___23819);
            var G__23823 = 0;
            seq__22148_23808 = G__23820;
            chunk__22149_23809 = G__23821;
            count__22150_23810 = G__23822;
            i__22151_23811 = G__23823;
            continue;
          } else {
            var arg__9396__auto___23824 = cljs.core.first.call(null, seq__22148_23818__$1);
            a__9395__auto__.push(arg__9396__auto___23824);
            var G__23825 = cljs.core.next.call(null, seq__22148_23818__$1);
            var G__23826 = null;
            var G__23827 = 0;
            var G__23828 = 0;
            seq__22148_23808 = G__23825;
            chunk__22149_23809 = G__23826;
            count__22150_23810 = G__23827;
            i__22151_23811 = G__23828;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.i.apply(null, a__9395__auto__);
  };
  var i = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23829__i = 0, G__23829__a = new Array(arguments.length - 0);
      while (G__23829__i < G__23829__a.length) {
        G__23829__a[G__23829__i] = arguments[G__23829__i + 0];
        ++G__23829__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23829__a, 0);
    }
    return i__delegate.call(this, args__9394__auto__);
  };
  i.cljs$lang$maxFixedArity = 0;
  i.cljs$lang$applyTo = function(arglist__23830) {
    var args__9394__auto__ = cljs.core.seq(arglist__23830);
    return i__delegate(args__9394__auto__);
  };
  i.cljs$core$IFn$_invoke$arity$variadic = i__delegate;
  return i;
}();
quiescent.dom.iframe = function() {
  var iframe__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22156_23831 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22157_23832 = null;
    var count__22158_23833 = 0;
    var i__22159_23834 = 0;
    while (true) {
      if (i__22159_23834 < count__22158_23833) {
        var arg__9396__auto___23835 = cljs.core._nth.call(null, chunk__22157_23832, i__22159_23834);
        a__9395__auto__.push(arg__9396__auto___23835);
        var G__23836 = seq__22156_23831;
        var G__23837 = chunk__22157_23832;
        var G__23838 = count__22158_23833;
        var G__23839 = i__22159_23834 + 1;
        seq__22156_23831 = G__23836;
        chunk__22157_23832 = G__23837;
        count__22158_23833 = G__23838;
        i__22159_23834 = G__23839;
        continue;
      } else {
        var temp__4126__auto___23840 = cljs.core.seq.call(null, seq__22156_23831);
        if (temp__4126__auto___23840) {
          var seq__22156_23841__$1 = temp__4126__auto___23840;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22156_23841__$1)) {
            var c__4616__auto___23842 = cljs.core.chunk_first.call(null, seq__22156_23841__$1);
            var G__23843 = cljs.core.chunk_rest.call(null, seq__22156_23841__$1);
            var G__23844 = c__4616__auto___23842;
            var G__23845 = cljs.core.count.call(null, c__4616__auto___23842);
            var G__23846 = 0;
            seq__22156_23831 = G__23843;
            chunk__22157_23832 = G__23844;
            count__22158_23833 = G__23845;
            i__22159_23834 = G__23846;
            continue;
          } else {
            var arg__9396__auto___23847 = cljs.core.first.call(null, seq__22156_23841__$1);
            a__9395__auto__.push(arg__9396__auto___23847);
            var G__23848 = cljs.core.next.call(null, seq__22156_23841__$1);
            var G__23849 = null;
            var G__23850 = 0;
            var G__23851 = 0;
            seq__22156_23831 = G__23848;
            chunk__22157_23832 = G__23849;
            count__22158_23833 = G__23850;
            i__22159_23834 = G__23851;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.iframe.apply(null, a__9395__auto__);
  };
  var iframe = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23852__i = 0, G__23852__a = new Array(arguments.length - 0);
      while (G__23852__i < G__23852__a.length) {
        G__23852__a[G__23852__i] = arguments[G__23852__i + 0];
        ++G__23852__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23852__a, 0);
    }
    return iframe__delegate.call(this, args__9394__auto__);
  };
  iframe.cljs$lang$maxFixedArity = 0;
  iframe.cljs$lang$applyTo = function(arglist__23853) {
    var args__9394__auto__ = cljs.core.seq(arglist__23853);
    return iframe__delegate(args__9394__auto__);
  };
  iframe.cljs$core$IFn$_invoke$arity$variadic = iframe__delegate;
  return iframe;
}();
quiescent.dom.img = function() {
  var img__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22164_23854 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22165_23855 = null;
    var count__22166_23856 = 0;
    var i__22167_23857 = 0;
    while (true) {
      if (i__22167_23857 < count__22166_23856) {
        var arg__9396__auto___23858 = cljs.core._nth.call(null, chunk__22165_23855, i__22167_23857);
        a__9395__auto__.push(arg__9396__auto___23858);
        var G__23859 = seq__22164_23854;
        var G__23860 = chunk__22165_23855;
        var G__23861 = count__22166_23856;
        var G__23862 = i__22167_23857 + 1;
        seq__22164_23854 = G__23859;
        chunk__22165_23855 = G__23860;
        count__22166_23856 = G__23861;
        i__22167_23857 = G__23862;
        continue;
      } else {
        var temp__4126__auto___23863 = cljs.core.seq.call(null, seq__22164_23854);
        if (temp__4126__auto___23863) {
          var seq__22164_23864__$1 = temp__4126__auto___23863;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22164_23864__$1)) {
            var c__4616__auto___23865 = cljs.core.chunk_first.call(null, seq__22164_23864__$1);
            var G__23866 = cljs.core.chunk_rest.call(null, seq__22164_23864__$1);
            var G__23867 = c__4616__auto___23865;
            var G__23868 = cljs.core.count.call(null, c__4616__auto___23865);
            var G__23869 = 0;
            seq__22164_23854 = G__23866;
            chunk__22165_23855 = G__23867;
            count__22166_23856 = G__23868;
            i__22167_23857 = G__23869;
            continue;
          } else {
            var arg__9396__auto___23870 = cljs.core.first.call(null, seq__22164_23864__$1);
            a__9395__auto__.push(arg__9396__auto___23870);
            var G__23871 = cljs.core.next.call(null, seq__22164_23864__$1);
            var G__23872 = null;
            var G__23873 = 0;
            var G__23874 = 0;
            seq__22164_23854 = G__23871;
            chunk__22165_23855 = G__23872;
            count__22166_23856 = G__23873;
            i__22167_23857 = G__23874;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.img.apply(null, a__9395__auto__);
  };
  var img = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23875__i = 0, G__23875__a = new Array(arguments.length - 0);
      while (G__23875__i < G__23875__a.length) {
        G__23875__a[G__23875__i] = arguments[G__23875__i + 0];
        ++G__23875__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23875__a, 0);
    }
    return img__delegate.call(this, args__9394__auto__);
  };
  img.cljs$lang$maxFixedArity = 0;
  img.cljs$lang$applyTo = function(arglist__23876) {
    var args__9394__auto__ = cljs.core.seq(arglist__23876);
    return img__delegate(args__9394__auto__);
  };
  img.cljs$core$IFn$_invoke$arity$variadic = img__delegate;
  return img;
}();
quiescent.dom.input = function() {
  var input__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22172_23877 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22173_23878 = null;
    var count__22174_23879 = 0;
    var i__22175_23880 = 0;
    while (true) {
      if (i__22175_23880 < count__22174_23879) {
        var arg__9396__auto___23881 = cljs.core._nth.call(null, chunk__22173_23878, i__22175_23880);
        a__9395__auto__.push(arg__9396__auto___23881);
        var G__23882 = seq__22172_23877;
        var G__23883 = chunk__22173_23878;
        var G__23884 = count__22174_23879;
        var G__23885 = i__22175_23880 + 1;
        seq__22172_23877 = G__23882;
        chunk__22173_23878 = G__23883;
        count__22174_23879 = G__23884;
        i__22175_23880 = G__23885;
        continue;
      } else {
        var temp__4126__auto___23886 = cljs.core.seq.call(null, seq__22172_23877);
        if (temp__4126__auto___23886) {
          var seq__22172_23887__$1 = temp__4126__auto___23886;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22172_23887__$1)) {
            var c__4616__auto___23888 = cljs.core.chunk_first.call(null, seq__22172_23887__$1);
            var G__23889 = cljs.core.chunk_rest.call(null, seq__22172_23887__$1);
            var G__23890 = c__4616__auto___23888;
            var G__23891 = cljs.core.count.call(null, c__4616__auto___23888);
            var G__23892 = 0;
            seq__22172_23877 = G__23889;
            chunk__22173_23878 = G__23890;
            count__22174_23879 = G__23891;
            i__22175_23880 = G__23892;
            continue;
          } else {
            var arg__9396__auto___23893 = cljs.core.first.call(null, seq__22172_23887__$1);
            a__9395__auto__.push(arg__9396__auto___23893);
            var G__23894 = cljs.core.next.call(null, seq__22172_23887__$1);
            var G__23895 = null;
            var G__23896 = 0;
            var G__23897 = 0;
            seq__22172_23877 = G__23894;
            chunk__22173_23878 = G__23895;
            count__22174_23879 = G__23896;
            i__22175_23880 = G__23897;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.input.apply(null, a__9395__auto__);
  };
  var input = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23898__i = 0, G__23898__a = new Array(arguments.length - 0);
      while (G__23898__i < G__23898__a.length) {
        G__23898__a[G__23898__i] = arguments[G__23898__i + 0];
        ++G__23898__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23898__a, 0);
    }
    return input__delegate.call(this, args__9394__auto__);
  };
  input.cljs$lang$maxFixedArity = 0;
  input.cljs$lang$applyTo = function(arglist__23899) {
    var args__9394__auto__ = cljs.core.seq(arglist__23899);
    return input__delegate(args__9394__auto__);
  };
  input.cljs$core$IFn$_invoke$arity$variadic = input__delegate;
  return input;
}();
quiescent.dom.ins = function() {
  var ins__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22180_23900 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22181_23901 = null;
    var count__22182_23902 = 0;
    var i__22183_23903 = 0;
    while (true) {
      if (i__22183_23903 < count__22182_23902) {
        var arg__9396__auto___23904 = cljs.core._nth.call(null, chunk__22181_23901, i__22183_23903);
        a__9395__auto__.push(arg__9396__auto___23904);
        var G__23905 = seq__22180_23900;
        var G__23906 = chunk__22181_23901;
        var G__23907 = count__22182_23902;
        var G__23908 = i__22183_23903 + 1;
        seq__22180_23900 = G__23905;
        chunk__22181_23901 = G__23906;
        count__22182_23902 = G__23907;
        i__22183_23903 = G__23908;
        continue;
      } else {
        var temp__4126__auto___23909 = cljs.core.seq.call(null, seq__22180_23900);
        if (temp__4126__auto___23909) {
          var seq__22180_23910__$1 = temp__4126__auto___23909;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22180_23910__$1)) {
            var c__4616__auto___23911 = cljs.core.chunk_first.call(null, seq__22180_23910__$1);
            var G__23912 = cljs.core.chunk_rest.call(null, seq__22180_23910__$1);
            var G__23913 = c__4616__auto___23911;
            var G__23914 = cljs.core.count.call(null, c__4616__auto___23911);
            var G__23915 = 0;
            seq__22180_23900 = G__23912;
            chunk__22181_23901 = G__23913;
            count__22182_23902 = G__23914;
            i__22183_23903 = G__23915;
            continue;
          } else {
            var arg__9396__auto___23916 = cljs.core.first.call(null, seq__22180_23910__$1);
            a__9395__auto__.push(arg__9396__auto___23916);
            var G__23917 = cljs.core.next.call(null, seq__22180_23910__$1);
            var G__23918 = null;
            var G__23919 = 0;
            var G__23920 = 0;
            seq__22180_23900 = G__23917;
            chunk__22181_23901 = G__23918;
            count__22182_23902 = G__23919;
            i__22183_23903 = G__23920;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ins.apply(null, a__9395__auto__);
  };
  var ins = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23921__i = 0, G__23921__a = new Array(arguments.length - 0);
      while (G__23921__i < G__23921__a.length) {
        G__23921__a[G__23921__i] = arguments[G__23921__i + 0];
        ++G__23921__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23921__a, 0);
    }
    return ins__delegate.call(this, args__9394__auto__);
  };
  ins.cljs$lang$maxFixedArity = 0;
  ins.cljs$lang$applyTo = function(arglist__23922) {
    var args__9394__auto__ = cljs.core.seq(arglist__23922);
    return ins__delegate(args__9394__auto__);
  };
  ins.cljs$core$IFn$_invoke$arity$variadic = ins__delegate;
  return ins;
}();
quiescent.dom.kbd = function() {
  var kbd__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22188_23923 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22189_23924 = null;
    var count__22190_23925 = 0;
    var i__22191_23926 = 0;
    while (true) {
      if (i__22191_23926 < count__22190_23925) {
        var arg__9396__auto___23927 = cljs.core._nth.call(null, chunk__22189_23924, i__22191_23926);
        a__9395__auto__.push(arg__9396__auto___23927);
        var G__23928 = seq__22188_23923;
        var G__23929 = chunk__22189_23924;
        var G__23930 = count__22190_23925;
        var G__23931 = i__22191_23926 + 1;
        seq__22188_23923 = G__23928;
        chunk__22189_23924 = G__23929;
        count__22190_23925 = G__23930;
        i__22191_23926 = G__23931;
        continue;
      } else {
        var temp__4126__auto___23932 = cljs.core.seq.call(null, seq__22188_23923);
        if (temp__4126__auto___23932) {
          var seq__22188_23933__$1 = temp__4126__auto___23932;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22188_23933__$1)) {
            var c__4616__auto___23934 = cljs.core.chunk_first.call(null, seq__22188_23933__$1);
            var G__23935 = cljs.core.chunk_rest.call(null, seq__22188_23933__$1);
            var G__23936 = c__4616__auto___23934;
            var G__23937 = cljs.core.count.call(null, c__4616__auto___23934);
            var G__23938 = 0;
            seq__22188_23923 = G__23935;
            chunk__22189_23924 = G__23936;
            count__22190_23925 = G__23937;
            i__22191_23926 = G__23938;
            continue;
          } else {
            var arg__9396__auto___23939 = cljs.core.first.call(null, seq__22188_23933__$1);
            a__9395__auto__.push(arg__9396__auto___23939);
            var G__23940 = cljs.core.next.call(null, seq__22188_23933__$1);
            var G__23941 = null;
            var G__23942 = 0;
            var G__23943 = 0;
            seq__22188_23923 = G__23940;
            chunk__22189_23924 = G__23941;
            count__22190_23925 = G__23942;
            i__22191_23926 = G__23943;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.kbd.apply(null, a__9395__auto__);
  };
  var kbd = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23944__i = 0, G__23944__a = new Array(arguments.length - 0);
      while (G__23944__i < G__23944__a.length) {
        G__23944__a[G__23944__i] = arguments[G__23944__i + 0];
        ++G__23944__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23944__a, 0);
    }
    return kbd__delegate.call(this, args__9394__auto__);
  };
  kbd.cljs$lang$maxFixedArity = 0;
  kbd.cljs$lang$applyTo = function(arglist__23945) {
    var args__9394__auto__ = cljs.core.seq(arglist__23945);
    return kbd__delegate(args__9394__auto__);
  };
  kbd.cljs$core$IFn$_invoke$arity$variadic = kbd__delegate;
  return kbd;
}();
quiescent.dom.keygen = function() {
  var keygen__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22196_23946 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22197_23947 = null;
    var count__22198_23948 = 0;
    var i__22199_23949 = 0;
    while (true) {
      if (i__22199_23949 < count__22198_23948) {
        var arg__9396__auto___23950 = cljs.core._nth.call(null, chunk__22197_23947, i__22199_23949);
        a__9395__auto__.push(arg__9396__auto___23950);
        var G__23951 = seq__22196_23946;
        var G__23952 = chunk__22197_23947;
        var G__23953 = count__22198_23948;
        var G__23954 = i__22199_23949 + 1;
        seq__22196_23946 = G__23951;
        chunk__22197_23947 = G__23952;
        count__22198_23948 = G__23953;
        i__22199_23949 = G__23954;
        continue;
      } else {
        var temp__4126__auto___23955 = cljs.core.seq.call(null, seq__22196_23946);
        if (temp__4126__auto___23955) {
          var seq__22196_23956__$1 = temp__4126__auto___23955;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22196_23956__$1)) {
            var c__4616__auto___23957 = cljs.core.chunk_first.call(null, seq__22196_23956__$1);
            var G__23958 = cljs.core.chunk_rest.call(null, seq__22196_23956__$1);
            var G__23959 = c__4616__auto___23957;
            var G__23960 = cljs.core.count.call(null, c__4616__auto___23957);
            var G__23961 = 0;
            seq__22196_23946 = G__23958;
            chunk__22197_23947 = G__23959;
            count__22198_23948 = G__23960;
            i__22199_23949 = G__23961;
            continue;
          } else {
            var arg__9396__auto___23962 = cljs.core.first.call(null, seq__22196_23956__$1);
            a__9395__auto__.push(arg__9396__auto___23962);
            var G__23963 = cljs.core.next.call(null, seq__22196_23956__$1);
            var G__23964 = null;
            var G__23965 = 0;
            var G__23966 = 0;
            seq__22196_23946 = G__23963;
            chunk__22197_23947 = G__23964;
            count__22198_23948 = G__23965;
            i__22199_23949 = G__23966;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.keygen.apply(null, a__9395__auto__);
  };
  var keygen = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23967__i = 0, G__23967__a = new Array(arguments.length - 0);
      while (G__23967__i < G__23967__a.length) {
        G__23967__a[G__23967__i] = arguments[G__23967__i + 0];
        ++G__23967__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23967__a, 0);
    }
    return keygen__delegate.call(this, args__9394__auto__);
  };
  keygen.cljs$lang$maxFixedArity = 0;
  keygen.cljs$lang$applyTo = function(arglist__23968) {
    var args__9394__auto__ = cljs.core.seq(arglist__23968);
    return keygen__delegate(args__9394__auto__);
  };
  keygen.cljs$core$IFn$_invoke$arity$variadic = keygen__delegate;
  return keygen;
}();
quiescent.dom.label = function() {
  var label__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22204_23969 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22205_23970 = null;
    var count__22206_23971 = 0;
    var i__22207_23972 = 0;
    while (true) {
      if (i__22207_23972 < count__22206_23971) {
        var arg__9396__auto___23973 = cljs.core._nth.call(null, chunk__22205_23970, i__22207_23972);
        a__9395__auto__.push(arg__9396__auto___23973);
        var G__23974 = seq__22204_23969;
        var G__23975 = chunk__22205_23970;
        var G__23976 = count__22206_23971;
        var G__23977 = i__22207_23972 + 1;
        seq__22204_23969 = G__23974;
        chunk__22205_23970 = G__23975;
        count__22206_23971 = G__23976;
        i__22207_23972 = G__23977;
        continue;
      } else {
        var temp__4126__auto___23978 = cljs.core.seq.call(null, seq__22204_23969);
        if (temp__4126__auto___23978) {
          var seq__22204_23979__$1 = temp__4126__auto___23978;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22204_23979__$1)) {
            var c__4616__auto___23980 = cljs.core.chunk_first.call(null, seq__22204_23979__$1);
            var G__23981 = cljs.core.chunk_rest.call(null, seq__22204_23979__$1);
            var G__23982 = c__4616__auto___23980;
            var G__23983 = cljs.core.count.call(null, c__4616__auto___23980);
            var G__23984 = 0;
            seq__22204_23969 = G__23981;
            chunk__22205_23970 = G__23982;
            count__22206_23971 = G__23983;
            i__22207_23972 = G__23984;
            continue;
          } else {
            var arg__9396__auto___23985 = cljs.core.first.call(null, seq__22204_23979__$1);
            a__9395__auto__.push(arg__9396__auto___23985);
            var G__23986 = cljs.core.next.call(null, seq__22204_23979__$1);
            var G__23987 = null;
            var G__23988 = 0;
            var G__23989 = 0;
            seq__22204_23969 = G__23986;
            chunk__22205_23970 = G__23987;
            count__22206_23971 = G__23988;
            i__22207_23972 = G__23989;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.label.apply(null, a__9395__auto__);
  };
  var label = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__23990__i = 0, G__23990__a = new Array(arguments.length - 0);
      while (G__23990__i < G__23990__a.length) {
        G__23990__a[G__23990__i] = arguments[G__23990__i + 0];
        ++G__23990__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__23990__a, 0);
    }
    return label__delegate.call(this, args__9394__auto__);
  };
  label.cljs$lang$maxFixedArity = 0;
  label.cljs$lang$applyTo = function(arglist__23991) {
    var args__9394__auto__ = cljs.core.seq(arglist__23991);
    return label__delegate(args__9394__auto__);
  };
  label.cljs$core$IFn$_invoke$arity$variadic = label__delegate;
  return label;
}();
quiescent.dom.legend = function() {
  var legend__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22212_23992 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22213_23993 = null;
    var count__22214_23994 = 0;
    var i__22215_23995 = 0;
    while (true) {
      if (i__22215_23995 < count__22214_23994) {
        var arg__9396__auto___23996 = cljs.core._nth.call(null, chunk__22213_23993, i__22215_23995);
        a__9395__auto__.push(arg__9396__auto___23996);
        var G__23997 = seq__22212_23992;
        var G__23998 = chunk__22213_23993;
        var G__23999 = count__22214_23994;
        var G__24000 = i__22215_23995 + 1;
        seq__22212_23992 = G__23997;
        chunk__22213_23993 = G__23998;
        count__22214_23994 = G__23999;
        i__22215_23995 = G__24000;
        continue;
      } else {
        var temp__4126__auto___24001 = cljs.core.seq.call(null, seq__22212_23992);
        if (temp__4126__auto___24001) {
          var seq__22212_24002__$1 = temp__4126__auto___24001;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22212_24002__$1)) {
            var c__4616__auto___24003 = cljs.core.chunk_first.call(null, seq__22212_24002__$1);
            var G__24004 = cljs.core.chunk_rest.call(null, seq__22212_24002__$1);
            var G__24005 = c__4616__auto___24003;
            var G__24006 = cljs.core.count.call(null, c__4616__auto___24003);
            var G__24007 = 0;
            seq__22212_23992 = G__24004;
            chunk__22213_23993 = G__24005;
            count__22214_23994 = G__24006;
            i__22215_23995 = G__24007;
            continue;
          } else {
            var arg__9396__auto___24008 = cljs.core.first.call(null, seq__22212_24002__$1);
            a__9395__auto__.push(arg__9396__auto___24008);
            var G__24009 = cljs.core.next.call(null, seq__22212_24002__$1);
            var G__24010 = null;
            var G__24011 = 0;
            var G__24012 = 0;
            seq__22212_23992 = G__24009;
            chunk__22213_23993 = G__24010;
            count__22214_23994 = G__24011;
            i__22215_23995 = G__24012;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.legend.apply(null, a__9395__auto__);
  };
  var legend = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24013__i = 0, G__24013__a = new Array(arguments.length - 0);
      while (G__24013__i < G__24013__a.length) {
        G__24013__a[G__24013__i] = arguments[G__24013__i + 0];
        ++G__24013__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24013__a, 0);
    }
    return legend__delegate.call(this, args__9394__auto__);
  };
  legend.cljs$lang$maxFixedArity = 0;
  legend.cljs$lang$applyTo = function(arglist__24014) {
    var args__9394__auto__ = cljs.core.seq(arglist__24014);
    return legend__delegate(args__9394__auto__);
  };
  legend.cljs$core$IFn$_invoke$arity$variadic = legend__delegate;
  return legend;
}();
quiescent.dom.li = function() {
  var li__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22220_24015 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22221_24016 = null;
    var count__22222_24017 = 0;
    var i__22223_24018 = 0;
    while (true) {
      if (i__22223_24018 < count__22222_24017) {
        var arg__9396__auto___24019 = cljs.core._nth.call(null, chunk__22221_24016, i__22223_24018);
        a__9395__auto__.push(arg__9396__auto___24019);
        var G__24020 = seq__22220_24015;
        var G__24021 = chunk__22221_24016;
        var G__24022 = count__22222_24017;
        var G__24023 = i__22223_24018 + 1;
        seq__22220_24015 = G__24020;
        chunk__22221_24016 = G__24021;
        count__22222_24017 = G__24022;
        i__22223_24018 = G__24023;
        continue;
      } else {
        var temp__4126__auto___24024 = cljs.core.seq.call(null, seq__22220_24015);
        if (temp__4126__auto___24024) {
          var seq__22220_24025__$1 = temp__4126__auto___24024;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22220_24025__$1)) {
            var c__4616__auto___24026 = cljs.core.chunk_first.call(null, seq__22220_24025__$1);
            var G__24027 = cljs.core.chunk_rest.call(null, seq__22220_24025__$1);
            var G__24028 = c__4616__auto___24026;
            var G__24029 = cljs.core.count.call(null, c__4616__auto___24026);
            var G__24030 = 0;
            seq__22220_24015 = G__24027;
            chunk__22221_24016 = G__24028;
            count__22222_24017 = G__24029;
            i__22223_24018 = G__24030;
            continue;
          } else {
            var arg__9396__auto___24031 = cljs.core.first.call(null, seq__22220_24025__$1);
            a__9395__auto__.push(arg__9396__auto___24031);
            var G__24032 = cljs.core.next.call(null, seq__22220_24025__$1);
            var G__24033 = null;
            var G__24034 = 0;
            var G__24035 = 0;
            seq__22220_24015 = G__24032;
            chunk__22221_24016 = G__24033;
            count__22222_24017 = G__24034;
            i__22223_24018 = G__24035;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.li.apply(null, a__9395__auto__);
  };
  var li = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24036__i = 0, G__24036__a = new Array(arguments.length - 0);
      while (G__24036__i < G__24036__a.length) {
        G__24036__a[G__24036__i] = arguments[G__24036__i + 0];
        ++G__24036__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24036__a, 0);
    }
    return li__delegate.call(this, args__9394__auto__);
  };
  li.cljs$lang$maxFixedArity = 0;
  li.cljs$lang$applyTo = function(arglist__24037) {
    var args__9394__auto__ = cljs.core.seq(arglist__24037);
    return li__delegate(args__9394__auto__);
  };
  li.cljs$core$IFn$_invoke$arity$variadic = li__delegate;
  return li;
}();
quiescent.dom.link = function() {
  var link__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22228_24038 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22229_24039 = null;
    var count__22230_24040 = 0;
    var i__22231_24041 = 0;
    while (true) {
      if (i__22231_24041 < count__22230_24040) {
        var arg__9396__auto___24042 = cljs.core._nth.call(null, chunk__22229_24039, i__22231_24041);
        a__9395__auto__.push(arg__9396__auto___24042);
        var G__24043 = seq__22228_24038;
        var G__24044 = chunk__22229_24039;
        var G__24045 = count__22230_24040;
        var G__24046 = i__22231_24041 + 1;
        seq__22228_24038 = G__24043;
        chunk__22229_24039 = G__24044;
        count__22230_24040 = G__24045;
        i__22231_24041 = G__24046;
        continue;
      } else {
        var temp__4126__auto___24047 = cljs.core.seq.call(null, seq__22228_24038);
        if (temp__4126__auto___24047) {
          var seq__22228_24048__$1 = temp__4126__auto___24047;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22228_24048__$1)) {
            var c__4616__auto___24049 = cljs.core.chunk_first.call(null, seq__22228_24048__$1);
            var G__24050 = cljs.core.chunk_rest.call(null, seq__22228_24048__$1);
            var G__24051 = c__4616__auto___24049;
            var G__24052 = cljs.core.count.call(null, c__4616__auto___24049);
            var G__24053 = 0;
            seq__22228_24038 = G__24050;
            chunk__22229_24039 = G__24051;
            count__22230_24040 = G__24052;
            i__22231_24041 = G__24053;
            continue;
          } else {
            var arg__9396__auto___24054 = cljs.core.first.call(null, seq__22228_24048__$1);
            a__9395__auto__.push(arg__9396__auto___24054);
            var G__24055 = cljs.core.next.call(null, seq__22228_24048__$1);
            var G__24056 = null;
            var G__24057 = 0;
            var G__24058 = 0;
            seq__22228_24038 = G__24055;
            chunk__22229_24039 = G__24056;
            count__22230_24040 = G__24057;
            i__22231_24041 = G__24058;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.link.apply(null, a__9395__auto__);
  };
  var link = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24059__i = 0, G__24059__a = new Array(arguments.length - 0);
      while (G__24059__i < G__24059__a.length) {
        G__24059__a[G__24059__i] = arguments[G__24059__i + 0];
        ++G__24059__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24059__a, 0);
    }
    return link__delegate.call(this, args__9394__auto__);
  };
  link.cljs$lang$maxFixedArity = 0;
  link.cljs$lang$applyTo = function(arglist__24060) {
    var args__9394__auto__ = cljs.core.seq(arglist__24060);
    return link__delegate(args__9394__auto__);
  };
  link.cljs$core$IFn$_invoke$arity$variadic = link__delegate;
  return link;
}();
quiescent.dom.main = function() {
  var main__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22236_24061 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22237_24062 = null;
    var count__22238_24063 = 0;
    var i__22239_24064 = 0;
    while (true) {
      if (i__22239_24064 < count__22238_24063) {
        var arg__9396__auto___24065 = cljs.core._nth.call(null, chunk__22237_24062, i__22239_24064);
        a__9395__auto__.push(arg__9396__auto___24065);
        var G__24066 = seq__22236_24061;
        var G__24067 = chunk__22237_24062;
        var G__24068 = count__22238_24063;
        var G__24069 = i__22239_24064 + 1;
        seq__22236_24061 = G__24066;
        chunk__22237_24062 = G__24067;
        count__22238_24063 = G__24068;
        i__22239_24064 = G__24069;
        continue;
      } else {
        var temp__4126__auto___24070 = cljs.core.seq.call(null, seq__22236_24061);
        if (temp__4126__auto___24070) {
          var seq__22236_24071__$1 = temp__4126__auto___24070;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22236_24071__$1)) {
            var c__4616__auto___24072 = cljs.core.chunk_first.call(null, seq__22236_24071__$1);
            var G__24073 = cljs.core.chunk_rest.call(null, seq__22236_24071__$1);
            var G__24074 = c__4616__auto___24072;
            var G__24075 = cljs.core.count.call(null, c__4616__auto___24072);
            var G__24076 = 0;
            seq__22236_24061 = G__24073;
            chunk__22237_24062 = G__24074;
            count__22238_24063 = G__24075;
            i__22239_24064 = G__24076;
            continue;
          } else {
            var arg__9396__auto___24077 = cljs.core.first.call(null, seq__22236_24071__$1);
            a__9395__auto__.push(arg__9396__auto___24077);
            var G__24078 = cljs.core.next.call(null, seq__22236_24071__$1);
            var G__24079 = null;
            var G__24080 = 0;
            var G__24081 = 0;
            seq__22236_24061 = G__24078;
            chunk__22237_24062 = G__24079;
            count__22238_24063 = G__24080;
            i__22239_24064 = G__24081;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.main.apply(null, a__9395__auto__);
  };
  var main = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24082__i = 0, G__24082__a = new Array(arguments.length - 0);
      while (G__24082__i < G__24082__a.length) {
        G__24082__a[G__24082__i] = arguments[G__24082__i + 0];
        ++G__24082__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24082__a, 0);
    }
    return main__delegate.call(this, args__9394__auto__);
  };
  main.cljs$lang$maxFixedArity = 0;
  main.cljs$lang$applyTo = function(arglist__24083) {
    var args__9394__auto__ = cljs.core.seq(arglist__24083);
    return main__delegate(args__9394__auto__);
  };
  main.cljs$core$IFn$_invoke$arity$variadic = main__delegate;
  return main;
}();
quiescent.dom.map = function() {
  var map__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22244_24084 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22245_24085 = null;
    var count__22246_24086 = 0;
    var i__22247_24087 = 0;
    while (true) {
      if (i__22247_24087 < count__22246_24086) {
        var arg__9396__auto___24088 = cljs.core._nth.call(null, chunk__22245_24085, i__22247_24087);
        a__9395__auto__.push(arg__9396__auto___24088);
        var G__24089 = seq__22244_24084;
        var G__24090 = chunk__22245_24085;
        var G__24091 = count__22246_24086;
        var G__24092 = i__22247_24087 + 1;
        seq__22244_24084 = G__24089;
        chunk__22245_24085 = G__24090;
        count__22246_24086 = G__24091;
        i__22247_24087 = G__24092;
        continue;
      } else {
        var temp__4126__auto___24093 = cljs.core.seq.call(null, seq__22244_24084);
        if (temp__4126__auto___24093) {
          var seq__22244_24094__$1 = temp__4126__auto___24093;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22244_24094__$1)) {
            var c__4616__auto___24095 = cljs.core.chunk_first.call(null, seq__22244_24094__$1);
            var G__24096 = cljs.core.chunk_rest.call(null, seq__22244_24094__$1);
            var G__24097 = c__4616__auto___24095;
            var G__24098 = cljs.core.count.call(null, c__4616__auto___24095);
            var G__24099 = 0;
            seq__22244_24084 = G__24096;
            chunk__22245_24085 = G__24097;
            count__22246_24086 = G__24098;
            i__22247_24087 = G__24099;
            continue;
          } else {
            var arg__9396__auto___24100 = cljs.core.first.call(null, seq__22244_24094__$1);
            a__9395__auto__.push(arg__9396__auto___24100);
            var G__24101 = cljs.core.next.call(null, seq__22244_24094__$1);
            var G__24102 = null;
            var G__24103 = 0;
            var G__24104 = 0;
            seq__22244_24084 = G__24101;
            chunk__22245_24085 = G__24102;
            count__22246_24086 = G__24103;
            i__22247_24087 = G__24104;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.map.apply(null, a__9395__auto__);
  };
  var map = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24105__i = 0, G__24105__a = new Array(arguments.length - 0);
      while (G__24105__i < G__24105__a.length) {
        G__24105__a[G__24105__i] = arguments[G__24105__i + 0];
        ++G__24105__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24105__a, 0);
    }
    return map__delegate.call(this, args__9394__auto__);
  };
  map.cljs$lang$maxFixedArity = 0;
  map.cljs$lang$applyTo = function(arglist__24106) {
    var args__9394__auto__ = cljs.core.seq(arglist__24106);
    return map__delegate(args__9394__auto__);
  };
  map.cljs$core$IFn$_invoke$arity$variadic = map__delegate;
  return map;
}();
quiescent.dom.mark = function() {
  var mark__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22252_24107 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22253_24108 = null;
    var count__22254_24109 = 0;
    var i__22255_24110 = 0;
    while (true) {
      if (i__22255_24110 < count__22254_24109) {
        var arg__9396__auto___24111 = cljs.core._nth.call(null, chunk__22253_24108, i__22255_24110);
        a__9395__auto__.push(arg__9396__auto___24111);
        var G__24112 = seq__22252_24107;
        var G__24113 = chunk__22253_24108;
        var G__24114 = count__22254_24109;
        var G__24115 = i__22255_24110 + 1;
        seq__22252_24107 = G__24112;
        chunk__22253_24108 = G__24113;
        count__22254_24109 = G__24114;
        i__22255_24110 = G__24115;
        continue;
      } else {
        var temp__4126__auto___24116 = cljs.core.seq.call(null, seq__22252_24107);
        if (temp__4126__auto___24116) {
          var seq__22252_24117__$1 = temp__4126__auto___24116;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22252_24117__$1)) {
            var c__4616__auto___24118 = cljs.core.chunk_first.call(null, seq__22252_24117__$1);
            var G__24119 = cljs.core.chunk_rest.call(null, seq__22252_24117__$1);
            var G__24120 = c__4616__auto___24118;
            var G__24121 = cljs.core.count.call(null, c__4616__auto___24118);
            var G__24122 = 0;
            seq__22252_24107 = G__24119;
            chunk__22253_24108 = G__24120;
            count__22254_24109 = G__24121;
            i__22255_24110 = G__24122;
            continue;
          } else {
            var arg__9396__auto___24123 = cljs.core.first.call(null, seq__22252_24117__$1);
            a__9395__auto__.push(arg__9396__auto___24123);
            var G__24124 = cljs.core.next.call(null, seq__22252_24117__$1);
            var G__24125 = null;
            var G__24126 = 0;
            var G__24127 = 0;
            seq__22252_24107 = G__24124;
            chunk__22253_24108 = G__24125;
            count__22254_24109 = G__24126;
            i__22255_24110 = G__24127;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.mark.apply(null, a__9395__auto__);
  };
  var mark = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24128__i = 0, G__24128__a = new Array(arguments.length - 0);
      while (G__24128__i < G__24128__a.length) {
        G__24128__a[G__24128__i] = arguments[G__24128__i + 0];
        ++G__24128__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24128__a, 0);
    }
    return mark__delegate.call(this, args__9394__auto__);
  };
  mark.cljs$lang$maxFixedArity = 0;
  mark.cljs$lang$applyTo = function(arglist__24129) {
    var args__9394__auto__ = cljs.core.seq(arglist__24129);
    return mark__delegate(args__9394__auto__);
  };
  mark.cljs$core$IFn$_invoke$arity$variadic = mark__delegate;
  return mark;
}();
quiescent.dom.menu = function() {
  var menu__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22260_24130 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22261_24131 = null;
    var count__22262_24132 = 0;
    var i__22263_24133 = 0;
    while (true) {
      if (i__22263_24133 < count__22262_24132) {
        var arg__9396__auto___24134 = cljs.core._nth.call(null, chunk__22261_24131, i__22263_24133);
        a__9395__auto__.push(arg__9396__auto___24134);
        var G__24135 = seq__22260_24130;
        var G__24136 = chunk__22261_24131;
        var G__24137 = count__22262_24132;
        var G__24138 = i__22263_24133 + 1;
        seq__22260_24130 = G__24135;
        chunk__22261_24131 = G__24136;
        count__22262_24132 = G__24137;
        i__22263_24133 = G__24138;
        continue;
      } else {
        var temp__4126__auto___24139 = cljs.core.seq.call(null, seq__22260_24130);
        if (temp__4126__auto___24139) {
          var seq__22260_24140__$1 = temp__4126__auto___24139;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22260_24140__$1)) {
            var c__4616__auto___24141 = cljs.core.chunk_first.call(null, seq__22260_24140__$1);
            var G__24142 = cljs.core.chunk_rest.call(null, seq__22260_24140__$1);
            var G__24143 = c__4616__auto___24141;
            var G__24144 = cljs.core.count.call(null, c__4616__auto___24141);
            var G__24145 = 0;
            seq__22260_24130 = G__24142;
            chunk__22261_24131 = G__24143;
            count__22262_24132 = G__24144;
            i__22263_24133 = G__24145;
            continue;
          } else {
            var arg__9396__auto___24146 = cljs.core.first.call(null, seq__22260_24140__$1);
            a__9395__auto__.push(arg__9396__auto___24146);
            var G__24147 = cljs.core.next.call(null, seq__22260_24140__$1);
            var G__24148 = null;
            var G__24149 = 0;
            var G__24150 = 0;
            seq__22260_24130 = G__24147;
            chunk__22261_24131 = G__24148;
            count__22262_24132 = G__24149;
            i__22263_24133 = G__24150;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.menu.apply(null, a__9395__auto__);
  };
  var menu = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24151__i = 0, G__24151__a = new Array(arguments.length - 0);
      while (G__24151__i < G__24151__a.length) {
        G__24151__a[G__24151__i] = arguments[G__24151__i + 0];
        ++G__24151__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24151__a, 0);
    }
    return menu__delegate.call(this, args__9394__auto__);
  };
  menu.cljs$lang$maxFixedArity = 0;
  menu.cljs$lang$applyTo = function(arglist__24152) {
    var args__9394__auto__ = cljs.core.seq(arglist__24152);
    return menu__delegate(args__9394__auto__);
  };
  menu.cljs$core$IFn$_invoke$arity$variadic = menu__delegate;
  return menu;
}();
quiescent.dom.menuitem = function() {
  var menuitem__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22268_24153 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22269_24154 = null;
    var count__22270_24155 = 0;
    var i__22271_24156 = 0;
    while (true) {
      if (i__22271_24156 < count__22270_24155) {
        var arg__9396__auto___24157 = cljs.core._nth.call(null, chunk__22269_24154, i__22271_24156);
        a__9395__auto__.push(arg__9396__auto___24157);
        var G__24158 = seq__22268_24153;
        var G__24159 = chunk__22269_24154;
        var G__24160 = count__22270_24155;
        var G__24161 = i__22271_24156 + 1;
        seq__22268_24153 = G__24158;
        chunk__22269_24154 = G__24159;
        count__22270_24155 = G__24160;
        i__22271_24156 = G__24161;
        continue;
      } else {
        var temp__4126__auto___24162 = cljs.core.seq.call(null, seq__22268_24153);
        if (temp__4126__auto___24162) {
          var seq__22268_24163__$1 = temp__4126__auto___24162;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22268_24163__$1)) {
            var c__4616__auto___24164 = cljs.core.chunk_first.call(null, seq__22268_24163__$1);
            var G__24165 = cljs.core.chunk_rest.call(null, seq__22268_24163__$1);
            var G__24166 = c__4616__auto___24164;
            var G__24167 = cljs.core.count.call(null, c__4616__auto___24164);
            var G__24168 = 0;
            seq__22268_24153 = G__24165;
            chunk__22269_24154 = G__24166;
            count__22270_24155 = G__24167;
            i__22271_24156 = G__24168;
            continue;
          } else {
            var arg__9396__auto___24169 = cljs.core.first.call(null, seq__22268_24163__$1);
            a__9395__auto__.push(arg__9396__auto___24169);
            var G__24170 = cljs.core.next.call(null, seq__22268_24163__$1);
            var G__24171 = null;
            var G__24172 = 0;
            var G__24173 = 0;
            seq__22268_24153 = G__24170;
            chunk__22269_24154 = G__24171;
            count__22270_24155 = G__24172;
            i__22271_24156 = G__24173;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.menuitem.apply(null, a__9395__auto__);
  };
  var menuitem = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24174__i = 0, G__24174__a = new Array(arguments.length - 0);
      while (G__24174__i < G__24174__a.length) {
        G__24174__a[G__24174__i] = arguments[G__24174__i + 0];
        ++G__24174__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24174__a, 0);
    }
    return menuitem__delegate.call(this, args__9394__auto__);
  };
  menuitem.cljs$lang$maxFixedArity = 0;
  menuitem.cljs$lang$applyTo = function(arglist__24175) {
    var args__9394__auto__ = cljs.core.seq(arglist__24175);
    return menuitem__delegate(args__9394__auto__);
  };
  menuitem.cljs$core$IFn$_invoke$arity$variadic = menuitem__delegate;
  return menuitem;
}();
quiescent.dom.meta = function() {
  var meta__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22276_24176 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22277_24177 = null;
    var count__22278_24178 = 0;
    var i__22279_24179 = 0;
    while (true) {
      if (i__22279_24179 < count__22278_24178) {
        var arg__9396__auto___24180 = cljs.core._nth.call(null, chunk__22277_24177, i__22279_24179);
        a__9395__auto__.push(arg__9396__auto___24180);
        var G__24181 = seq__22276_24176;
        var G__24182 = chunk__22277_24177;
        var G__24183 = count__22278_24178;
        var G__24184 = i__22279_24179 + 1;
        seq__22276_24176 = G__24181;
        chunk__22277_24177 = G__24182;
        count__22278_24178 = G__24183;
        i__22279_24179 = G__24184;
        continue;
      } else {
        var temp__4126__auto___24185 = cljs.core.seq.call(null, seq__22276_24176);
        if (temp__4126__auto___24185) {
          var seq__22276_24186__$1 = temp__4126__auto___24185;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22276_24186__$1)) {
            var c__4616__auto___24187 = cljs.core.chunk_first.call(null, seq__22276_24186__$1);
            var G__24188 = cljs.core.chunk_rest.call(null, seq__22276_24186__$1);
            var G__24189 = c__4616__auto___24187;
            var G__24190 = cljs.core.count.call(null, c__4616__auto___24187);
            var G__24191 = 0;
            seq__22276_24176 = G__24188;
            chunk__22277_24177 = G__24189;
            count__22278_24178 = G__24190;
            i__22279_24179 = G__24191;
            continue;
          } else {
            var arg__9396__auto___24192 = cljs.core.first.call(null, seq__22276_24186__$1);
            a__9395__auto__.push(arg__9396__auto___24192);
            var G__24193 = cljs.core.next.call(null, seq__22276_24186__$1);
            var G__24194 = null;
            var G__24195 = 0;
            var G__24196 = 0;
            seq__22276_24176 = G__24193;
            chunk__22277_24177 = G__24194;
            count__22278_24178 = G__24195;
            i__22279_24179 = G__24196;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.meta.apply(null, a__9395__auto__);
  };
  var meta = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24197__i = 0, G__24197__a = new Array(arguments.length - 0);
      while (G__24197__i < G__24197__a.length) {
        G__24197__a[G__24197__i] = arguments[G__24197__i + 0];
        ++G__24197__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24197__a, 0);
    }
    return meta__delegate.call(this, args__9394__auto__);
  };
  meta.cljs$lang$maxFixedArity = 0;
  meta.cljs$lang$applyTo = function(arglist__24198) {
    var args__9394__auto__ = cljs.core.seq(arglist__24198);
    return meta__delegate(args__9394__auto__);
  };
  meta.cljs$core$IFn$_invoke$arity$variadic = meta__delegate;
  return meta;
}();
quiescent.dom.meter = function() {
  var meter__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22284_24199 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22285_24200 = null;
    var count__22286_24201 = 0;
    var i__22287_24202 = 0;
    while (true) {
      if (i__22287_24202 < count__22286_24201) {
        var arg__9396__auto___24203 = cljs.core._nth.call(null, chunk__22285_24200, i__22287_24202);
        a__9395__auto__.push(arg__9396__auto___24203);
        var G__24204 = seq__22284_24199;
        var G__24205 = chunk__22285_24200;
        var G__24206 = count__22286_24201;
        var G__24207 = i__22287_24202 + 1;
        seq__22284_24199 = G__24204;
        chunk__22285_24200 = G__24205;
        count__22286_24201 = G__24206;
        i__22287_24202 = G__24207;
        continue;
      } else {
        var temp__4126__auto___24208 = cljs.core.seq.call(null, seq__22284_24199);
        if (temp__4126__auto___24208) {
          var seq__22284_24209__$1 = temp__4126__auto___24208;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22284_24209__$1)) {
            var c__4616__auto___24210 = cljs.core.chunk_first.call(null, seq__22284_24209__$1);
            var G__24211 = cljs.core.chunk_rest.call(null, seq__22284_24209__$1);
            var G__24212 = c__4616__auto___24210;
            var G__24213 = cljs.core.count.call(null, c__4616__auto___24210);
            var G__24214 = 0;
            seq__22284_24199 = G__24211;
            chunk__22285_24200 = G__24212;
            count__22286_24201 = G__24213;
            i__22287_24202 = G__24214;
            continue;
          } else {
            var arg__9396__auto___24215 = cljs.core.first.call(null, seq__22284_24209__$1);
            a__9395__auto__.push(arg__9396__auto___24215);
            var G__24216 = cljs.core.next.call(null, seq__22284_24209__$1);
            var G__24217 = null;
            var G__24218 = 0;
            var G__24219 = 0;
            seq__22284_24199 = G__24216;
            chunk__22285_24200 = G__24217;
            count__22286_24201 = G__24218;
            i__22287_24202 = G__24219;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.meter.apply(null, a__9395__auto__);
  };
  var meter = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24220__i = 0, G__24220__a = new Array(arguments.length - 0);
      while (G__24220__i < G__24220__a.length) {
        G__24220__a[G__24220__i] = arguments[G__24220__i + 0];
        ++G__24220__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24220__a, 0);
    }
    return meter__delegate.call(this, args__9394__auto__);
  };
  meter.cljs$lang$maxFixedArity = 0;
  meter.cljs$lang$applyTo = function(arglist__24221) {
    var args__9394__auto__ = cljs.core.seq(arglist__24221);
    return meter__delegate(args__9394__auto__);
  };
  meter.cljs$core$IFn$_invoke$arity$variadic = meter__delegate;
  return meter;
}();
quiescent.dom.nav = function() {
  var nav__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22292_24222 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22293_24223 = null;
    var count__22294_24224 = 0;
    var i__22295_24225 = 0;
    while (true) {
      if (i__22295_24225 < count__22294_24224) {
        var arg__9396__auto___24226 = cljs.core._nth.call(null, chunk__22293_24223, i__22295_24225);
        a__9395__auto__.push(arg__9396__auto___24226);
        var G__24227 = seq__22292_24222;
        var G__24228 = chunk__22293_24223;
        var G__24229 = count__22294_24224;
        var G__24230 = i__22295_24225 + 1;
        seq__22292_24222 = G__24227;
        chunk__22293_24223 = G__24228;
        count__22294_24224 = G__24229;
        i__22295_24225 = G__24230;
        continue;
      } else {
        var temp__4126__auto___24231 = cljs.core.seq.call(null, seq__22292_24222);
        if (temp__4126__auto___24231) {
          var seq__22292_24232__$1 = temp__4126__auto___24231;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22292_24232__$1)) {
            var c__4616__auto___24233 = cljs.core.chunk_first.call(null, seq__22292_24232__$1);
            var G__24234 = cljs.core.chunk_rest.call(null, seq__22292_24232__$1);
            var G__24235 = c__4616__auto___24233;
            var G__24236 = cljs.core.count.call(null, c__4616__auto___24233);
            var G__24237 = 0;
            seq__22292_24222 = G__24234;
            chunk__22293_24223 = G__24235;
            count__22294_24224 = G__24236;
            i__22295_24225 = G__24237;
            continue;
          } else {
            var arg__9396__auto___24238 = cljs.core.first.call(null, seq__22292_24232__$1);
            a__9395__auto__.push(arg__9396__auto___24238);
            var G__24239 = cljs.core.next.call(null, seq__22292_24232__$1);
            var G__24240 = null;
            var G__24241 = 0;
            var G__24242 = 0;
            seq__22292_24222 = G__24239;
            chunk__22293_24223 = G__24240;
            count__22294_24224 = G__24241;
            i__22295_24225 = G__24242;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.nav.apply(null, a__9395__auto__);
  };
  var nav = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24243__i = 0, G__24243__a = new Array(arguments.length - 0);
      while (G__24243__i < G__24243__a.length) {
        G__24243__a[G__24243__i] = arguments[G__24243__i + 0];
        ++G__24243__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24243__a, 0);
    }
    return nav__delegate.call(this, args__9394__auto__);
  };
  nav.cljs$lang$maxFixedArity = 0;
  nav.cljs$lang$applyTo = function(arglist__24244) {
    var args__9394__auto__ = cljs.core.seq(arglist__24244);
    return nav__delegate(args__9394__auto__);
  };
  nav.cljs$core$IFn$_invoke$arity$variadic = nav__delegate;
  return nav;
}();
quiescent.dom.noscript = function() {
  var noscript__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22300_24245 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22301_24246 = null;
    var count__22302_24247 = 0;
    var i__22303_24248 = 0;
    while (true) {
      if (i__22303_24248 < count__22302_24247) {
        var arg__9396__auto___24249 = cljs.core._nth.call(null, chunk__22301_24246, i__22303_24248);
        a__9395__auto__.push(arg__9396__auto___24249);
        var G__24250 = seq__22300_24245;
        var G__24251 = chunk__22301_24246;
        var G__24252 = count__22302_24247;
        var G__24253 = i__22303_24248 + 1;
        seq__22300_24245 = G__24250;
        chunk__22301_24246 = G__24251;
        count__22302_24247 = G__24252;
        i__22303_24248 = G__24253;
        continue;
      } else {
        var temp__4126__auto___24254 = cljs.core.seq.call(null, seq__22300_24245);
        if (temp__4126__auto___24254) {
          var seq__22300_24255__$1 = temp__4126__auto___24254;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22300_24255__$1)) {
            var c__4616__auto___24256 = cljs.core.chunk_first.call(null, seq__22300_24255__$1);
            var G__24257 = cljs.core.chunk_rest.call(null, seq__22300_24255__$1);
            var G__24258 = c__4616__auto___24256;
            var G__24259 = cljs.core.count.call(null, c__4616__auto___24256);
            var G__24260 = 0;
            seq__22300_24245 = G__24257;
            chunk__22301_24246 = G__24258;
            count__22302_24247 = G__24259;
            i__22303_24248 = G__24260;
            continue;
          } else {
            var arg__9396__auto___24261 = cljs.core.first.call(null, seq__22300_24255__$1);
            a__9395__auto__.push(arg__9396__auto___24261);
            var G__24262 = cljs.core.next.call(null, seq__22300_24255__$1);
            var G__24263 = null;
            var G__24264 = 0;
            var G__24265 = 0;
            seq__22300_24245 = G__24262;
            chunk__22301_24246 = G__24263;
            count__22302_24247 = G__24264;
            i__22303_24248 = G__24265;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.noscript.apply(null, a__9395__auto__);
  };
  var noscript = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24266__i = 0, G__24266__a = new Array(arguments.length - 0);
      while (G__24266__i < G__24266__a.length) {
        G__24266__a[G__24266__i] = arguments[G__24266__i + 0];
        ++G__24266__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24266__a, 0);
    }
    return noscript__delegate.call(this, args__9394__auto__);
  };
  noscript.cljs$lang$maxFixedArity = 0;
  noscript.cljs$lang$applyTo = function(arglist__24267) {
    var args__9394__auto__ = cljs.core.seq(arglist__24267);
    return noscript__delegate(args__9394__auto__);
  };
  noscript.cljs$core$IFn$_invoke$arity$variadic = noscript__delegate;
  return noscript;
}();
quiescent.dom.object = function() {
  var object__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22308_24268 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22309_24269 = null;
    var count__22310_24270 = 0;
    var i__22311_24271 = 0;
    while (true) {
      if (i__22311_24271 < count__22310_24270) {
        var arg__9396__auto___24272 = cljs.core._nth.call(null, chunk__22309_24269, i__22311_24271);
        a__9395__auto__.push(arg__9396__auto___24272);
        var G__24273 = seq__22308_24268;
        var G__24274 = chunk__22309_24269;
        var G__24275 = count__22310_24270;
        var G__24276 = i__22311_24271 + 1;
        seq__22308_24268 = G__24273;
        chunk__22309_24269 = G__24274;
        count__22310_24270 = G__24275;
        i__22311_24271 = G__24276;
        continue;
      } else {
        var temp__4126__auto___24277 = cljs.core.seq.call(null, seq__22308_24268);
        if (temp__4126__auto___24277) {
          var seq__22308_24278__$1 = temp__4126__auto___24277;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22308_24278__$1)) {
            var c__4616__auto___24279 = cljs.core.chunk_first.call(null, seq__22308_24278__$1);
            var G__24280 = cljs.core.chunk_rest.call(null, seq__22308_24278__$1);
            var G__24281 = c__4616__auto___24279;
            var G__24282 = cljs.core.count.call(null, c__4616__auto___24279);
            var G__24283 = 0;
            seq__22308_24268 = G__24280;
            chunk__22309_24269 = G__24281;
            count__22310_24270 = G__24282;
            i__22311_24271 = G__24283;
            continue;
          } else {
            var arg__9396__auto___24284 = cljs.core.first.call(null, seq__22308_24278__$1);
            a__9395__auto__.push(arg__9396__auto___24284);
            var G__24285 = cljs.core.next.call(null, seq__22308_24278__$1);
            var G__24286 = null;
            var G__24287 = 0;
            var G__24288 = 0;
            seq__22308_24268 = G__24285;
            chunk__22309_24269 = G__24286;
            count__22310_24270 = G__24287;
            i__22311_24271 = G__24288;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.object.apply(null, a__9395__auto__);
  };
  var object = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24289__i = 0, G__24289__a = new Array(arguments.length - 0);
      while (G__24289__i < G__24289__a.length) {
        G__24289__a[G__24289__i] = arguments[G__24289__i + 0];
        ++G__24289__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24289__a, 0);
    }
    return object__delegate.call(this, args__9394__auto__);
  };
  object.cljs$lang$maxFixedArity = 0;
  object.cljs$lang$applyTo = function(arglist__24290) {
    var args__9394__auto__ = cljs.core.seq(arglist__24290);
    return object__delegate(args__9394__auto__);
  };
  object.cljs$core$IFn$_invoke$arity$variadic = object__delegate;
  return object;
}();
quiescent.dom.ol = function() {
  var ol__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22316_24291 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22317_24292 = null;
    var count__22318_24293 = 0;
    var i__22319_24294 = 0;
    while (true) {
      if (i__22319_24294 < count__22318_24293) {
        var arg__9396__auto___24295 = cljs.core._nth.call(null, chunk__22317_24292, i__22319_24294);
        a__9395__auto__.push(arg__9396__auto___24295);
        var G__24296 = seq__22316_24291;
        var G__24297 = chunk__22317_24292;
        var G__24298 = count__22318_24293;
        var G__24299 = i__22319_24294 + 1;
        seq__22316_24291 = G__24296;
        chunk__22317_24292 = G__24297;
        count__22318_24293 = G__24298;
        i__22319_24294 = G__24299;
        continue;
      } else {
        var temp__4126__auto___24300 = cljs.core.seq.call(null, seq__22316_24291);
        if (temp__4126__auto___24300) {
          var seq__22316_24301__$1 = temp__4126__auto___24300;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22316_24301__$1)) {
            var c__4616__auto___24302 = cljs.core.chunk_first.call(null, seq__22316_24301__$1);
            var G__24303 = cljs.core.chunk_rest.call(null, seq__22316_24301__$1);
            var G__24304 = c__4616__auto___24302;
            var G__24305 = cljs.core.count.call(null, c__4616__auto___24302);
            var G__24306 = 0;
            seq__22316_24291 = G__24303;
            chunk__22317_24292 = G__24304;
            count__22318_24293 = G__24305;
            i__22319_24294 = G__24306;
            continue;
          } else {
            var arg__9396__auto___24307 = cljs.core.first.call(null, seq__22316_24301__$1);
            a__9395__auto__.push(arg__9396__auto___24307);
            var G__24308 = cljs.core.next.call(null, seq__22316_24301__$1);
            var G__24309 = null;
            var G__24310 = 0;
            var G__24311 = 0;
            seq__22316_24291 = G__24308;
            chunk__22317_24292 = G__24309;
            count__22318_24293 = G__24310;
            i__22319_24294 = G__24311;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ol.apply(null, a__9395__auto__);
  };
  var ol = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24312__i = 0, G__24312__a = new Array(arguments.length - 0);
      while (G__24312__i < G__24312__a.length) {
        G__24312__a[G__24312__i] = arguments[G__24312__i + 0];
        ++G__24312__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24312__a, 0);
    }
    return ol__delegate.call(this, args__9394__auto__);
  };
  ol.cljs$lang$maxFixedArity = 0;
  ol.cljs$lang$applyTo = function(arglist__24313) {
    var args__9394__auto__ = cljs.core.seq(arglist__24313);
    return ol__delegate(args__9394__auto__);
  };
  ol.cljs$core$IFn$_invoke$arity$variadic = ol__delegate;
  return ol;
}();
quiescent.dom.optgroup = function() {
  var optgroup__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22324_24314 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22325_24315 = null;
    var count__22326_24316 = 0;
    var i__22327_24317 = 0;
    while (true) {
      if (i__22327_24317 < count__22326_24316) {
        var arg__9396__auto___24318 = cljs.core._nth.call(null, chunk__22325_24315, i__22327_24317);
        a__9395__auto__.push(arg__9396__auto___24318);
        var G__24319 = seq__22324_24314;
        var G__24320 = chunk__22325_24315;
        var G__24321 = count__22326_24316;
        var G__24322 = i__22327_24317 + 1;
        seq__22324_24314 = G__24319;
        chunk__22325_24315 = G__24320;
        count__22326_24316 = G__24321;
        i__22327_24317 = G__24322;
        continue;
      } else {
        var temp__4126__auto___24323 = cljs.core.seq.call(null, seq__22324_24314);
        if (temp__4126__auto___24323) {
          var seq__22324_24324__$1 = temp__4126__auto___24323;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22324_24324__$1)) {
            var c__4616__auto___24325 = cljs.core.chunk_first.call(null, seq__22324_24324__$1);
            var G__24326 = cljs.core.chunk_rest.call(null, seq__22324_24324__$1);
            var G__24327 = c__4616__auto___24325;
            var G__24328 = cljs.core.count.call(null, c__4616__auto___24325);
            var G__24329 = 0;
            seq__22324_24314 = G__24326;
            chunk__22325_24315 = G__24327;
            count__22326_24316 = G__24328;
            i__22327_24317 = G__24329;
            continue;
          } else {
            var arg__9396__auto___24330 = cljs.core.first.call(null, seq__22324_24324__$1);
            a__9395__auto__.push(arg__9396__auto___24330);
            var G__24331 = cljs.core.next.call(null, seq__22324_24324__$1);
            var G__24332 = null;
            var G__24333 = 0;
            var G__24334 = 0;
            seq__22324_24314 = G__24331;
            chunk__22325_24315 = G__24332;
            count__22326_24316 = G__24333;
            i__22327_24317 = G__24334;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.optgroup.apply(null, a__9395__auto__);
  };
  var optgroup = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24335__i = 0, G__24335__a = new Array(arguments.length - 0);
      while (G__24335__i < G__24335__a.length) {
        G__24335__a[G__24335__i] = arguments[G__24335__i + 0];
        ++G__24335__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24335__a, 0);
    }
    return optgroup__delegate.call(this, args__9394__auto__);
  };
  optgroup.cljs$lang$maxFixedArity = 0;
  optgroup.cljs$lang$applyTo = function(arglist__24336) {
    var args__9394__auto__ = cljs.core.seq(arglist__24336);
    return optgroup__delegate(args__9394__auto__);
  };
  optgroup.cljs$core$IFn$_invoke$arity$variadic = optgroup__delegate;
  return optgroup;
}();
quiescent.dom.option = function() {
  var option__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22332_24337 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22333_24338 = null;
    var count__22334_24339 = 0;
    var i__22335_24340 = 0;
    while (true) {
      if (i__22335_24340 < count__22334_24339) {
        var arg__9396__auto___24341 = cljs.core._nth.call(null, chunk__22333_24338, i__22335_24340);
        a__9395__auto__.push(arg__9396__auto___24341);
        var G__24342 = seq__22332_24337;
        var G__24343 = chunk__22333_24338;
        var G__24344 = count__22334_24339;
        var G__24345 = i__22335_24340 + 1;
        seq__22332_24337 = G__24342;
        chunk__22333_24338 = G__24343;
        count__22334_24339 = G__24344;
        i__22335_24340 = G__24345;
        continue;
      } else {
        var temp__4126__auto___24346 = cljs.core.seq.call(null, seq__22332_24337);
        if (temp__4126__auto___24346) {
          var seq__22332_24347__$1 = temp__4126__auto___24346;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22332_24347__$1)) {
            var c__4616__auto___24348 = cljs.core.chunk_first.call(null, seq__22332_24347__$1);
            var G__24349 = cljs.core.chunk_rest.call(null, seq__22332_24347__$1);
            var G__24350 = c__4616__auto___24348;
            var G__24351 = cljs.core.count.call(null, c__4616__auto___24348);
            var G__24352 = 0;
            seq__22332_24337 = G__24349;
            chunk__22333_24338 = G__24350;
            count__22334_24339 = G__24351;
            i__22335_24340 = G__24352;
            continue;
          } else {
            var arg__9396__auto___24353 = cljs.core.first.call(null, seq__22332_24347__$1);
            a__9395__auto__.push(arg__9396__auto___24353);
            var G__24354 = cljs.core.next.call(null, seq__22332_24347__$1);
            var G__24355 = null;
            var G__24356 = 0;
            var G__24357 = 0;
            seq__22332_24337 = G__24354;
            chunk__22333_24338 = G__24355;
            count__22334_24339 = G__24356;
            i__22335_24340 = G__24357;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.option.apply(null, a__9395__auto__);
  };
  var option = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24358__i = 0, G__24358__a = new Array(arguments.length - 0);
      while (G__24358__i < G__24358__a.length) {
        G__24358__a[G__24358__i] = arguments[G__24358__i + 0];
        ++G__24358__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24358__a, 0);
    }
    return option__delegate.call(this, args__9394__auto__);
  };
  option.cljs$lang$maxFixedArity = 0;
  option.cljs$lang$applyTo = function(arglist__24359) {
    var args__9394__auto__ = cljs.core.seq(arglist__24359);
    return option__delegate(args__9394__auto__);
  };
  option.cljs$core$IFn$_invoke$arity$variadic = option__delegate;
  return option;
}();
quiescent.dom.output = function() {
  var output__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22340_24360 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22341_24361 = null;
    var count__22342_24362 = 0;
    var i__22343_24363 = 0;
    while (true) {
      if (i__22343_24363 < count__22342_24362) {
        var arg__9396__auto___24364 = cljs.core._nth.call(null, chunk__22341_24361, i__22343_24363);
        a__9395__auto__.push(arg__9396__auto___24364);
        var G__24365 = seq__22340_24360;
        var G__24366 = chunk__22341_24361;
        var G__24367 = count__22342_24362;
        var G__24368 = i__22343_24363 + 1;
        seq__22340_24360 = G__24365;
        chunk__22341_24361 = G__24366;
        count__22342_24362 = G__24367;
        i__22343_24363 = G__24368;
        continue;
      } else {
        var temp__4126__auto___24369 = cljs.core.seq.call(null, seq__22340_24360);
        if (temp__4126__auto___24369) {
          var seq__22340_24370__$1 = temp__4126__auto___24369;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22340_24370__$1)) {
            var c__4616__auto___24371 = cljs.core.chunk_first.call(null, seq__22340_24370__$1);
            var G__24372 = cljs.core.chunk_rest.call(null, seq__22340_24370__$1);
            var G__24373 = c__4616__auto___24371;
            var G__24374 = cljs.core.count.call(null, c__4616__auto___24371);
            var G__24375 = 0;
            seq__22340_24360 = G__24372;
            chunk__22341_24361 = G__24373;
            count__22342_24362 = G__24374;
            i__22343_24363 = G__24375;
            continue;
          } else {
            var arg__9396__auto___24376 = cljs.core.first.call(null, seq__22340_24370__$1);
            a__9395__auto__.push(arg__9396__auto___24376);
            var G__24377 = cljs.core.next.call(null, seq__22340_24370__$1);
            var G__24378 = null;
            var G__24379 = 0;
            var G__24380 = 0;
            seq__22340_24360 = G__24377;
            chunk__22341_24361 = G__24378;
            count__22342_24362 = G__24379;
            i__22343_24363 = G__24380;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.output.apply(null, a__9395__auto__);
  };
  var output = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24381__i = 0, G__24381__a = new Array(arguments.length - 0);
      while (G__24381__i < G__24381__a.length) {
        G__24381__a[G__24381__i] = arguments[G__24381__i + 0];
        ++G__24381__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24381__a, 0);
    }
    return output__delegate.call(this, args__9394__auto__);
  };
  output.cljs$lang$maxFixedArity = 0;
  output.cljs$lang$applyTo = function(arglist__24382) {
    var args__9394__auto__ = cljs.core.seq(arglist__24382);
    return output__delegate(args__9394__auto__);
  };
  output.cljs$core$IFn$_invoke$arity$variadic = output__delegate;
  return output;
}();
quiescent.dom.p = function() {
  var p__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22348_24383 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22349_24384 = null;
    var count__22350_24385 = 0;
    var i__22351_24386 = 0;
    while (true) {
      if (i__22351_24386 < count__22350_24385) {
        var arg__9396__auto___24387 = cljs.core._nth.call(null, chunk__22349_24384, i__22351_24386);
        a__9395__auto__.push(arg__9396__auto___24387);
        var G__24388 = seq__22348_24383;
        var G__24389 = chunk__22349_24384;
        var G__24390 = count__22350_24385;
        var G__24391 = i__22351_24386 + 1;
        seq__22348_24383 = G__24388;
        chunk__22349_24384 = G__24389;
        count__22350_24385 = G__24390;
        i__22351_24386 = G__24391;
        continue;
      } else {
        var temp__4126__auto___24392 = cljs.core.seq.call(null, seq__22348_24383);
        if (temp__4126__auto___24392) {
          var seq__22348_24393__$1 = temp__4126__auto___24392;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22348_24393__$1)) {
            var c__4616__auto___24394 = cljs.core.chunk_first.call(null, seq__22348_24393__$1);
            var G__24395 = cljs.core.chunk_rest.call(null, seq__22348_24393__$1);
            var G__24396 = c__4616__auto___24394;
            var G__24397 = cljs.core.count.call(null, c__4616__auto___24394);
            var G__24398 = 0;
            seq__22348_24383 = G__24395;
            chunk__22349_24384 = G__24396;
            count__22350_24385 = G__24397;
            i__22351_24386 = G__24398;
            continue;
          } else {
            var arg__9396__auto___24399 = cljs.core.first.call(null, seq__22348_24393__$1);
            a__9395__auto__.push(arg__9396__auto___24399);
            var G__24400 = cljs.core.next.call(null, seq__22348_24393__$1);
            var G__24401 = null;
            var G__24402 = 0;
            var G__24403 = 0;
            seq__22348_24383 = G__24400;
            chunk__22349_24384 = G__24401;
            count__22350_24385 = G__24402;
            i__22351_24386 = G__24403;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.p.apply(null, a__9395__auto__);
  };
  var p = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24404__i = 0, G__24404__a = new Array(arguments.length - 0);
      while (G__24404__i < G__24404__a.length) {
        G__24404__a[G__24404__i] = arguments[G__24404__i + 0];
        ++G__24404__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24404__a, 0);
    }
    return p__delegate.call(this, args__9394__auto__);
  };
  p.cljs$lang$maxFixedArity = 0;
  p.cljs$lang$applyTo = function(arglist__24405) {
    var args__9394__auto__ = cljs.core.seq(arglist__24405);
    return p__delegate(args__9394__auto__);
  };
  p.cljs$core$IFn$_invoke$arity$variadic = p__delegate;
  return p;
}();
quiescent.dom.param = function() {
  var param__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22356_24406 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22357_24407 = null;
    var count__22358_24408 = 0;
    var i__22359_24409 = 0;
    while (true) {
      if (i__22359_24409 < count__22358_24408) {
        var arg__9396__auto___24410 = cljs.core._nth.call(null, chunk__22357_24407, i__22359_24409);
        a__9395__auto__.push(arg__9396__auto___24410);
        var G__24411 = seq__22356_24406;
        var G__24412 = chunk__22357_24407;
        var G__24413 = count__22358_24408;
        var G__24414 = i__22359_24409 + 1;
        seq__22356_24406 = G__24411;
        chunk__22357_24407 = G__24412;
        count__22358_24408 = G__24413;
        i__22359_24409 = G__24414;
        continue;
      } else {
        var temp__4126__auto___24415 = cljs.core.seq.call(null, seq__22356_24406);
        if (temp__4126__auto___24415) {
          var seq__22356_24416__$1 = temp__4126__auto___24415;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22356_24416__$1)) {
            var c__4616__auto___24417 = cljs.core.chunk_first.call(null, seq__22356_24416__$1);
            var G__24418 = cljs.core.chunk_rest.call(null, seq__22356_24416__$1);
            var G__24419 = c__4616__auto___24417;
            var G__24420 = cljs.core.count.call(null, c__4616__auto___24417);
            var G__24421 = 0;
            seq__22356_24406 = G__24418;
            chunk__22357_24407 = G__24419;
            count__22358_24408 = G__24420;
            i__22359_24409 = G__24421;
            continue;
          } else {
            var arg__9396__auto___24422 = cljs.core.first.call(null, seq__22356_24416__$1);
            a__9395__auto__.push(arg__9396__auto___24422);
            var G__24423 = cljs.core.next.call(null, seq__22356_24416__$1);
            var G__24424 = null;
            var G__24425 = 0;
            var G__24426 = 0;
            seq__22356_24406 = G__24423;
            chunk__22357_24407 = G__24424;
            count__22358_24408 = G__24425;
            i__22359_24409 = G__24426;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.param.apply(null, a__9395__auto__);
  };
  var param = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24427__i = 0, G__24427__a = new Array(arguments.length - 0);
      while (G__24427__i < G__24427__a.length) {
        G__24427__a[G__24427__i] = arguments[G__24427__i + 0];
        ++G__24427__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24427__a, 0);
    }
    return param__delegate.call(this, args__9394__auto__);
  };
  param.cljs$lang$maxFixedArity = 0;
  param.cljs$lang$applyTo = function(arglist__24428) {
    var args__9394__auto__ = cljs.core.seq(arglist__24428);
    return param__delegate(args__9394__auto__);
  };
  param.cljs$core$IFn$_invoke$arity$variadic = param__delegate;
  return param;
}();
quiescent.dom.pre = function() {
  var pre__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22364_24429 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22365_24430 = null;
    var count__22366_24431 = 0;
    var i__22367_24432 = 0;
    while (true) {
      if (i__22367_24432 < count__22366_24431) {
        var arg__9396__auto___24433 = cljs.core._nth.call(null, chunk__22365_24430, i__22367_24432);
        a__9395__auto__.push(arg__9396__auto___24433);
        var G__24434 = seq__22364_24429;
        var G__24435 = chunk__22365_24430;
        var G__24436 = count__22366_24431;
        var G__24437 = i__22367_24432 + 1;
        seq__22364_24429 = G__24434;
        chunk__22365_24430 = G__24435;
        count__22366_24431 = G__24436;
        i__22367_24432 = G__24437;
        continue;
      } else {
        var temp__4126__auto___24438 = cljs.core.seq.call(null, seq__22364_24429);
        if (temp__4126__auto___24438) {
          var seq__22364_24439__$1 = temp__4126__auto___24438;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22364_24439__$1)) {
            var c__4616__auto___24440 = cljs.core.chunk_first.call(null, seq__22364_24439__$1);
            var G__24441 = cljs.core.chunk_rest.call(null, seq__22364_24439__$1);
            var G__24442 = c__4616__auto___24440;
            var G__24443 = cljs.core.count.call(null, c__4616__auto___24440);
            var G__24444 = 0;
            seq__22364_24429 = G__24441;
            chunk__22365_24430 = G__24442;
            count__22366_24431 = G__24443;
            i__22367_24432 = G__24444;
            continue;
          } else {
            var arg__9396__auto___24445 = cljs.core.first.call(null, seq__22364_24439__$1);
            a__9395__auto__.push(arg__9396__auto___24445);
            var G__24446 = cljs.core.next.call(null, seq__22364_24439__$1);
            var G__24447 = null;
            var G__24448 = 0;
            var G__24449 = 0;
            seq__22364_24429 = G__24446;
            chunk__22365_24430 = G__24447;
            count__22366_24431 = G__24448;
            i__22367_24432 = G__24449;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.pre.apply(null, a__9395__auto__);
  };
  var pre = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24450__i = 0, G__24450__a = new Array(arguments.length - 0);
      while (G__24450__i < G__24450__a.length) {
        G__24450__a[G__24450__i] = arguments[G__24450__i + 0];
        ++G__24450__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24450__a, 0);
    }
    return pre__delegate.call(this, args__9394__auto__);
  };
  pre.cljs$lang$maxFixedArity = 0;
  pre.cljs$lang$applyTo = function(arglist__24451) {
    var args__9394__auto__ = cljs.core.seq(arglist__24451);
    return pre__delegate(args__9394__auto__);
  };
  pre.cljs$core$IFn$_invoke$arity$variadic = pre__delegate;
  return pre;
}();
quiescent.dom.progress = function() {
  var progress__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22372_24452 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22373_24453 = null;
    var count__22374_24454 = 0;
    var i__22375_24455 = 0;
    while (true) {
      if (i__22375_24455 < count__22374_24454) {
        var arg__9396__auto___24456 = cljs.core._nth.call(null, chunk__22373_24453, i__22375_24455);
        a__9395__auto__.push(arg__9396__auto___24456);
        var G__24457 = seq__22372_24452;
        var G__24458 = chunk__22373_24453;
        var G__24459 = count__22374_24454;
        var G__24460 = i__22375_24455 + 1;
        seq__22372_24452 = G__24457;
        chunk__22373_24453 = G__24458;
        count__22374_24454 = G__24459;
        i__22375_24455 = G__24460;
        continue;
      } else {
        var temp__4126__auto___24461 = cljs.core.seq.call(null, seq__22372_24452);
        if (temp__4126__auto___24461) {
          var seq__22372_24462__$1 = temp__4126__auto___24461;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22372_24462__$1)) {
            var c__4616__auto___24463 = cljs.core.chunk_first.call(null, seq__22372_24462__$1);
            var G__24464 = cljs.core.chunk_rest.call(null, seq__22372_24462__$1);
            var G__24465 = c__4616__auto___24463;
            var G__24466 = cljs.core.count.call(null, c__4616__auto___24463);
            var G__24467 = 0;
            seq__22372_24452 = G__24464;
            chunk__22373_24453 = G__24465;
            count__22374_24454 = G__24466;
            i__22375_24455 = G__24467;
            continue;
          } else {
            var arg__9396__auto___24468 = cljs.core.first.call(null, seq__22372_24462__$1);
            a__9395__auto__.push(arg__9396__auto___24468);
            var G__24469 = cljs.core.next.call(null, seq__22372_24462__$1);
            var G__24470 = null;
            var G__24471 = 0;
            var G__24472 = 0;
            seq__22372_24452 = G__24469;
            chunk__22373_24453 = G__24470;
            count__22374_24454 = G__24471;
            i__22375_24455 = G__24472;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.progress.apply(null, a__9395__auto__);
  };
  var progress = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24473__i = 0, G__24473__a = new Array(arguments.length - 0);
      while (G__24473__i < G__24473__a.length) {
        G__24473__a[G__24473__i] = arguments[G__24473__i + 0];
        ++G__24473__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24473__a, 0);
    }
    return progress__delegate.call(this, args__9394__auto__);
  };
  progress.cljs$lang$maxFixedArity = 0;
  progress.cljs$lang$applyTo = function(arglist__24474) {
    var args__9394__auto__ = cljs.core.seq(arglist__24474);
    return progress__delegate(args__9394__auto__);
  };
  progress.cljs$core$IFn$_invoke$arity$variadic = progress__delegate;
  return progress;
}();
quiescent.dom.q = function() {
  var q__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22380_24475 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22381_24476 = null;
    var count__22382_24477 = 0;
    var i__22383_24478 = 0;
    while (true) {
      if (i__22383_24478 < count__22382_24477) {
        var arg__9396__auto___24479 = cljs.core._nth.call(null, chunk__22381_24476, i__22383_24478);
        a__9395__auto__.push(arg__9396__auto___24479);
        var G__24480 = seq__22380_24475;
        var G__24481 = chunk__22381_24476;
        var G__24482 = count__22382_24477;
        var G__24483 = i__22383_24478 + 1;
        seq__22380_24475 = G__24480;
        chunk__22381_24476 = G__24481;
        count__22382_24477 = G__24482;
        i__22383_24478 = G__24483;
        continue;
      } else {
        var temp__4126__auto___24484 = cljs.core.seq.call(null, seq__22380_24475);
        if (temp__4126__auto___24484) {
          var seq__22380_24485__$1 = temp__4126__auto___24484;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22380_24485__$1)) {
            var c__4616__auto___24486 = cljs.core.chunk_first.call(null, seq__22380_24485__$1);
            var G__24487 = cljs.core.chunk_rest.call(null, seq__22380_24485__$1);
            var G__24488 = c__4616__auto___24486;
            var G__24489 = cljs.core.count.call(null, c__4616__auto___24486);
            var G__24490 = 0;
            seq__22380_24475 = G__24487;
            chunk__22381_24476 = G__24488;
            count__22382_24477 = G__24489;
            i__22383_24478 = G__24490;
            continue;
          } else {
            var arg__9396__auto___24491 = cljs.core.first.call(null, seq__22380_24485__$1);
            a__9395__auto__.push(arg__9396__auto___24491);
            var G__24492 = cljs.core.next.call(null, seq__22380_24485__$1);
            var G__24493 = null;
            var G__24494 = 0;
            var G__24495 = 0;
            seq__22380_24475 = G__24492;
            chunk__22381_24476 = G__24493;
            count__22382_24477 = G__24494;
            i__22383_24478 = G__24495;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.q.apply(null, a__9395__auto__);
  };
  var q = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24496__i = 0, G__24496__a = new Array(arguments.length - 0);
      while (G__24496__i < G__24496__a.length) {
        G__24496__a[G__24496__i] = arguments[G__24496__i + 0];
        ++G__24496__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24496__a, 0);
    }
    return q__delegate.call(this, args__9394__auto__);
  };
  q.cljs$lang$maxFixedArity = 0;
  q.cljs$lang$applyTo = function(arglist__24497) {
    var args__9394__auto__ = cljs.core.seq(arglist__24497);
    return q__delegate(args__9394__auto__);
  };
  q.cljs$core$IFn$_invoke$arity$variadic = q__delegate;
  return q;
}();
quiescent.dom.rp = function() {
  var rp__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22388_24498 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22389_24499 = null;
    var count__22390_24500 = 0;
    var i__22391_24501 = 0;
    while (true) {
      if (i__22391_24501 < count__22390_24500) {
        var arg__9396__auto___24502 = cljs.core._nth.call(null, chunk__22389_24499, i__22391_24501);
        a__9395__auto__.push(arg__9396__auto___24502);
        var G__24503 = seq__22388_24498;
        var G__24504 = chunk__22389_24499;
        var G__24505 = count__22390_24500;
        var G__24506 = i__22391_24501 + 1;
        seq__22388_24498 = G__24503;
        chunk__22389_24499 = G__24504;
        count__22390_24500 = G__24505;
        i__22391_24501 = G__24506;
        continue;
      } else {
        var temp__4126__auto___24507 = cljs.core.seq.call(null, seq__22388_24498);
        if (temp__4126__auto___24507) {
          var seq__22388_24508__$1 = temp__4126__auto___24507;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22388_24508__$1)) {
            var c__4616__auto___24509 = cljs.core.chunk_first.call(null, seq__22388_24508__$1);
            var G__24510 = cljs.core.chunk_rest.call(null, seq__22388_24508__$1);
            var G__24511 = c__4616__auto___24509;
            var G__24512 = cljs.core.count.call(null, c__4616__auto___24509);
            var G__24513 = 0;
            seq__22388_24498 = G__24510;
            chunk__22389_24499 = G__24511;
            count__22390_24500 = G__24512;
            i__22391_24501 = G__24513;
            continue;
          } else {
            var arg__9396__auto___24514 = cljs.core.first.call(null, seq__22388_24508__$1);
            a__9395__auto__.push(arg__9396__auto___24514);
            var G__24515 = cljs.core.next.call(null, seq__22388_24508__$1);
            var G__24516 = null;
            var G__24517 = 0;
            var G__24518 = 0;
            seq__22388_24498 = G__24515;
            chunk__22389_24499 = G__24516;
            count__22390_24500 = G__24517;
            i__22391_24501 = G__24518;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.rp.apply(null, a__9395__auto__);
  };
  var rp = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24519__i = 0, G__24519__a = new Array(arguments.length - 0);
      while (G__24519__i < G__24519__a.length) {
        G__24519__a[G__24519__i] = arguments[G__24519__i + 0];
        ++G__24519__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24519__a, 0);
    }
    return rp__delegate.call(this, args__9394__auto__);
  };
  rp.cljs$lang$maxFixedArity = 0;
  rp.cljs$lang$applyTo = function(arglist__24520) {
    var args__9394__auto__ = cljs.core.seq(arglist__24520);
    return rp__delegate(args__9394__auto__);
  };
  rp.cljs$core$IFn$_invoke$arity$variadic = rp__delegate;
  return rp;
}();
quiescent.dom.rt = function() {
  var rt__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22396_24521 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22397_24522 = null;
    var count__22398_24523 = 0;
    var i__22399_24524 = 0;
    while (true) {
      if (i__22399_24524 < count__22398_24523) {
        var arg__9396__auto___24525 = cljs.core._nth.call(null, chunk__22397_24522, i__22399_24524);
        a__9395__auto__.push(arg__9396__auto___24525);
        var G__24526 = seq__22396_24521;
        var G__24527 = chunk__22397_24522;
        var G__24528 = count__22398_24523;
        var G__24529 = i__22399_24524 + 1;
        seq__22396_24521 = G__24526;
        chunk__22397_24522 = G__24527;
        count__22398_24523 = G__24528;
        i__22399_24524 = G__24529;
        continue;
      } else {
        var temp__4126__auto___24530 = cljs.core.seq.call(null, seq__22396_24521);
        if (temp__4126__auto___24530) {
          var seq__22396_24531__$1 = temp__4126__auto___24530;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22396_24531__$1)) {
            var c__4616__auto___24532 = cljs.core.chunk_first.call(null, seq__22396_24531__$1);
            var G__24533 = cljs.core.chunk_rest.call(null, seq__22396_24531__$1);
            var G__24534 = c__4616__auto___24532;
            var G__24535 = cljs.core.count.call(null, c__4616__auto___24532);
            var G__24536 = 0;
            seq__22396_24521 = G__24533;
            chunk__22397_24522 = G__24534;
            count__22398_24523 = G__24535;
            i__22399_24524 = G__24536;
            continue;
          } else {
            var arg__9396__auto___24537 = cljs.core.first.call(null, seq__22396_24531__$1);
            a__9395__auto__.push(arg__9396__auto___24537);
            var G__24538 = cljs.core.next.call(null, seq__22396_24531__$1);
            var G__24539 = null;
            var G__24540 = 0;
            var G__24541 = 0;
            seq__22396_24521 = G__24538;
            chunk__22397_24522 = G__24539;
            count__22398_24523 = G__24540;
            i__22399_24524 = G__24541;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.rt.apply(null, a__9395__auto__);
  };
  var rt = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24542__i = 0, G__24542__a = new Array(arguments.length - 0);
      while (G__24542__i < G__24542__a.length) {
        G__24542__a[G__24542__i] = arguments[G__24542__i + 0];
        ++G__24542__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24542__a, 0);
    }
    return rt__delegate.call(this, args__9394__auto__);
  };
  rt.cljs$lang$maxFixedArity = 0;
  rt.cljs$lang$applyTo = function(arglist__24543) {
    var args__9394__auto__ = cljs.core.seq(arglist__24543);
    return rt__delegate(args__9394__auto__);
  };
  rt.cljs$core$IFn$_invoke$arity$variadic = rt__delegate;
  return rt;
}();
quiescent.dom.ruby = function() {
  var ruby__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22404_24544 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22405_24545 = null;
    var count__22406_24546 = 0;
    var i__22407_24547 = 0;
    while (true) {
      if (i__22407_24547 < count__22406_24546) {
        var arg__9396__auto___24548 = cljs.core._nth.call(null, chunk__22405_24545, i__22407_24547);
        a__9395__auto__.push(arg__9396__auto___24548);
        var G__24549 = seq__22404_24544;
        var G__24550 = chunk__22405_24545;
        var G__24551 = count__22406_24546;
        var G__24552 = i__22407_24547 + 1;
        seq__22404_24544 = G__24549;
        chunk__22405_24545 = G__24550;
        count__22406_24546 = G__24551;
        i__22407_24547 = G__24552;
        continue;
      } else {
        var temp__4126__auto___24553 = cljs.core.seq.call(null, seq__22404_24544);
        if (temp__4126__auto___24553) {
          var seq__22404_24554__$1 = temp__4126__auto___24553;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22404_24554__$1)) {
            var c__4616__auto___24555 = cljs.core.chunk_first.call(null, seq__22404_24554__$1);
            var G__24556 = cljs.core.chunk_rest.call(null, seq__22404_24554__$1);
            var G__24557 = c__4616__auto___24555;
            var G__24558 = cljs.core.count.call(null, c__4616__auto___24555);
            var G__24559 = 0;
            seq__22404_24544 = G__24556;
            chunk__22405_24545 = G__24557;
            count__22406_24546 = G__24558;
            i__22407_24547 = G__24559;
            continue;
          } else {
            var arg__9396__auto___24560 = cljs.core.first.call(null, seq__22404_24554__$1);
            a__9395__auto__.push(arg__9396__auto___24560);
            var G__24561 = cljs.core.next.call(null, seq__22404_24554__$1);
            var G__24562 = null;
            var G__24563 = 0;
            var G__24564 = 0;
            seq__22404_24544 = G__24561;
            chunk__22405_24545 = G__24562;
            count__22406_24546 = G__24563;
            i__22407_24547 = G__24564;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ruby.apply(null, a__9395__auto__);
  };
  var ruby = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24565__i = 0, G__24565__a = new Array(arguments.length - 0);
      while (G__24565__i < G__24565__a.length) {
        G__24565__a[G__24565__i] = arguments[G__24565__i + 0];
        ++G__24565__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24565__a, 0);
    }
    return ruby__delegate.call(this, args__9394__auto__);
  };
  ruby.cljs$lang$maxFixedArity = 0;
  ruby.cljs$lang$applyTo = function(arglist__24566) {
    var args__9394__auto__ = cljs.core.seq(arglist__24566);
    return ruby__delegate(args__9394__auto__);
  };
  ruby.cljs$core$IFn$_invoke$arity$variadic = ruby__delegate;
  return ruby;
}();
quiescent.dom.s = function() {
  var s__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22412_24567 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22413_24568 = null;
    var count__22414_24569 = 0;
    var i__22415_24570 = 0;
    while (true) {
      if (i__22415_24570 < count__22414_24569) {
        var arg__9396__auto___24571 = cljs.core._nth.call(null, chunk__22413_24568, i__22415_24570);
        a__9395__auto__.push(arg__9396__auto___24571);
        var G__24572 = seq__22412_24567;
        var G__24573 = chunk__22413_24568;
        var G__24574 = count__22414_24569;
        var G__24575 = i__22415_24570 + 1;
        seq__22412_24567 = G__24572;
        chunk__22413_24568 = G__24573;
        count__22414_24569 = G__24574;
        i__22415_24570 = G__24575;
        continue;
      } else {
        var temp__4126__auto___24576 = cljs.core.seq.call(null, seq__22412_24567);
        if (temp__4126__auto___24576) {
          var seq__22412_24577__$1 = temp__4126__auto___24576;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22412_24577__$1)) {
            var c__4616__auto___24578 = cljs.core.chunk_first.call(null, seq__22412_24577__$1);
            var G__24579 = cljs.core.chunk_rest.call(null, seq__22412_24577__$1);
            var G__24580 = c__4616__auto___24578;
            var G__24581 = cljs.core.count.call(null, c__4616__auto___24578);
            var G__24582 = 0;
            seq__22412_24567 = G__24579;
            chunk__22413_24568 = G__24580;
            count__22414_24569 = G__24581;
            i__22415_24570 = G__24582;
            continue;
          } else {
            var arg__9396__auto___24583 = cljs.core.first.call(null, seq__22412_24577__$1);
            a__9395__auto__.push(arg__9396__auto___24583);
            var G__24584 = cljs.core.next.call(null, seq__22412_24577__$1);
            var G__24585 = null;
            var G__24586 = 0;
            var G__24587 = 0;
            seq__22412_24567 = G__24584;
            chunk__22413_24568 = G__24585;
            count__22414_24569 = G__24586;
            i__22415_24570 = G__24587;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.s.apply(null, a__9395__auto__);
  };
  var s = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24588__i = 0, G__24588__a = new Array(arguments.length - 0);
      while (G__24588__i < G__24588__a.length) {
        G__24588__a[G__24588__i] = arguments[G__24588__i + 0];
        ++G__24588__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24588__a, 0);
    }
    return s__delegate.call(this, args__9394__auto__);
  };
  s.cljs$lang$maxFixedArity = 0;
  s.cljs$lang$applyTo = function(arglist__24589) {
    var args__9394__auto__ = cljs.core.seq(arglist__24589);
    return s__delegate(args__9394__auto__);
  };
  s.cljs$core$IFn$_invoke$arity$variadic = s__delegate;
  return s;
}();
quiescent.dom.samp = function() {
  var samp__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22420_24590 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22421_24591 = null;
    var count__22422_24592 = 0;
    var i__22423_24593 = 0;
    while (true) {
      if (i__22423_24593 < count__22422_24592) {
        var arg__9396__auto___24594 = cljs.core._nth.call(null, chunk__22421_24591, i__22423_24593);
        a__9395__auto__.push(arg__9396__auto___24594);
        var G__24595 = seq__22420_24590;
        var G__24596 = chunk__22421_24591;
        var G__24597 = count__22422_24592;
        var G__24598 = i__22423_24593 + 1;
        seq__22420_24590 = G__24595;
        chunk__22421_24591 = G__24596;
        count__22422_24592 = G__24597;
        i__22423_24593 = G__24598;
        continue;
      } else {
        var temp__4126__auto___24599 = cljs.core.seq.call(null, seq__22420_24590);
        if (temp__4126__auto___24599) {
          var seq__22420_24600__$1 = temp__4126__auto___24599;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22420_24600__$1)) {
            var c__4616__auto___24601 = cljs.core.chunk_first.call(null, seq__22420_24600__$1);
            var G__24602 = cljs.core.chunk_rest.call(null, seq__22420_24600__$1);
            var G__24603 = c__4616__auto___24601;
            var G__24604 = cljs.core.count.call(null, c__4616__auto___24601);
            var G__24605 = 0;
            seq__22420_24590 = G__24602;
            chunk__22421_24591 = G__24603;
            count__22422_24592 = G__24604;
            i__22423_24593 = G__24605;
            continue;
          } else {
            var arg__9396__auto___24606 = cljs.core.first.call(null, seq__22420_24600__$1);
            a__9395__auto__.push(arg__9396__auto___24606);
            var G__24607 = cljs.core.next.call(null, seq__22420_24600__$1);
            var G__24608 = null;
            var G__24609 = 0;
            var G__24610 = 0;
            seq__22420_24590 = G__24607;
            chunk__22421_24591 = G__24608;
            count__22422_24592 = G__24609;
            i__22423_24593 = G__24610;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.samp.apply(null, a__9395__auto__);
  };
  var samp = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24611__i = 0, G__24611__a = new Array(arguments.length - 0);
      while (G__24611__i < G__24611__a.length) {
        G__24611__a[G__24611__i] = arguments[G__24611__i + 0];
        ++G__24611__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24611__a, 0);
    }
    return samp__delegate.call(this, args__9394__auto__);
  };
  samp.cljs$lang$maxFixedArity = 0;
  samp.cljs$lang$applyTo = function(arglist__24612) {
    var args__9394__auto__ = cljs.core.seq(arglist__24612);
    return samp__delegate(args__9394__auto__);
  };
  samp.cljs$core$IFn$_invoke$arity$variadic = samp__delegate;
  return samp;
}();
quiescent.dom.script = function() {
  var script__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22428_24613 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22429_24614 = null;
    var count__22430_24615 = 0;
    var i__22431_24616 = 0;
    while (true) {
      if (i__22431_24616 < count__22430_24615) {
        var arg__9396__auto___24617 = cljs.core._nth.call(null, chunk__22429_24614, i__22431_24616);
        a__9395__auto__.push(arg__9396__auto___24617);
        var G__24618 = seq__22428_24613;
        var G__24619 = chunk__22429_24614;
        var G__24620 = count__22430_24615;
        var G__24621 = i__22431_24616 + 1;
        seq__22428_24613 = G__24618;
        chunk__22429_24614 = G__24619;
        count__22430_24615 = G__24620;
        i__22431_24616 = G__24621;
        continue;
      } else {
        var temp__4126__auto___24622 = cljs.core.seq.call(null, seq__22428_24613);
        if (temp__4126__auto___24622) {
          var seq__22428_24623__$1 = temp__4126__auto___24622;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22428_24623__$1)) {
            var c__4616__auto___24624 = cljs.core.chunk_first.call(null, seq__22428_24623__$1);
            var G__24625 = cljs.core.chunk_rest.call(null, seq__22428_24623__$1);
            var G__24626 = c__4616__auto___24624;
            var G__24627 = cljs.core.count.call(null, c__4616__auto___24624);
            var G__24628 = 0;
            seq__22428_24613 = G__24625;
            chunk__22429_24614 = G__24626;
            count__22430_24615 = G__24627;
            i__22431_24616 = G__24628;
            continue;
          } else {
            var arg__9396__auto___24629 = cljs.core.first.call(null, seq__22428_24623__$1);
            a__9395__auto__.push(arg__9396__auto___24629);
            var G__24630 = cljs.core.next.call(null, seq__22428_24623__$1);
            var G__24631 = null;
            var G__24632 = 0;
            var G__24633 = 0;
            seq__22428_24613 = G__24630;
            chunk__22429_24614 = G__24631;
            count__22430_24615 = G__24632;
            i__22431_24616 = G__24633;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.script.apply(null, a__9395__auto__);
  };
  var script = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24634__i = 0, G__24634__a = new Array(arguments.length - 0);
      while (G__24634__i < G__24634__a.length) {
        G__24634__a[G__24634__i] = arguments[G__24634__i + 0];
        ++G__24634__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24634__a, 0);
    }
    return script__delegate.call(this, args__9394__auto__);
  };
  script.cljs$lang$maxFixedArity = 0;
  script.cljs$lang$applyTo = function(arglist__24635) {
    var args__9394__auto__ = cljs.core.seq(arglist__24635);
    return script__delegate(args__9394__auto__);
  };
  script.cljs$core$IFn$_invoke$arity$variadic = script__delegate;
  return script;
}();
quiescent.dom.section = function() {
  var section__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22436_24636 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22437_24637 = null;
    var count__22438_24638 = 0;
    var i__22439_24639 = 0;
    while (true) {
      if (i__22439_24639 < count__22438_24638) {
        var arg__9396__auto___24640 = cljs.core._nth.call(null, chunk__22437_24637, i__22439_24639);
        a__9395__auto__.push(arg__9396__auto___24640);
        var G__24641 = seq__22436_24636;
        var G__24642 = chunk__22437_24637;
        var G__24643 = count__22438_24638;
        var G__24644 = i__22439_24639 + 1;
        seq__22436_24636 = G__24641;
        chunk__22437_24637 = G__24642;
        count__22438_24638 = G__24643;
        i__22439_24639 = G__24644;
        continue;
      } else {
        var temp__4126__auto___24645 = cljs.core.seq.call(null, seq__22436_24636);
        if (temp__4126__auto___24645) {
          var seq__22436_24646__$1 = temp__4126__auto___24645;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22436_24646__$1)) {
            var c__4616__auto___24647 = cljs.core.chunk_first.call(null, seq__22436_24646__$1);
            var G__24648 = cljs.core.chunk_rest.call(null, seq__22436_24646__$1);
            var G__24649 = c__4616__auto___24647;
            var G__24650 = cljs.core.count.call(null, c__4616__auto___24647);
            var G__24651 = 0;
            seq__22436_24636 = G__24648;
            chunk__22437_24637 = G__24649;
            count__22438_24638 = G__24650;
            i__22439_24639 = G__24651;
            continue;
          } else {
            var arg__9396__auto___24652 = cljs.core.first.call(null, seq__22436_24646__$1);
            a__9395__auto__.push(arg__9396__auto___24652);
            var G__24653 = cljs.core.next.call(null, seq__22436_24646__$1);
            var G__24654 = null;
            var G__24655 = 0;
            var G__24656 = 0;
            seq__22436_24636 = G__24653;
            chunk__22437_24637 = G__24654;
            count__22438_24638 = G__24655;
            i__22439_24639 = G__24656;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.section.apply(null, a__9395__auto__);
  };
  var section = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24657__i = 0, G__24657__a = new Array(arguments.length - 0);
      while (G__24657__i < G__24657__a.length) {
        G__24657__a[G__24657__i] = arguments[G__24657__i + 0];
        ++G__24657__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24657__a, 0);
    }
    return section__delegate.call(this, args__9394__auto__);
  };
  section.cljs$lang$maxFixedArity = 0;
  section.cljs$lang$applyTo = function(arglist__24658) {
    var args__9394__auto__ = cljs.core.seq(arglist__24658);
    return section__delegate(args__9394__auto__);
  };
  section.cljs$core$IFn$_invoke$arity$variadic = section__delegate;
  return section;
}();
quiescent.dom.select = function() {
  var select__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22444_24659 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22445_24660 = null;
    var count__22446_24661 = 0;
    var i__22447_24662 = 0;
    while (true) {
      if (i__22447_24662 < count__22446_24661) {
        var arg__9396__auto___24663 = cljs.core._nth.call(null, chunk__22445_24660, i__22447_24662);
        a__9395__auto__.push(arg__9396__auto___24663);
        var G__24664 = seq__22444_24659;
        var G__24665 = chunk__22445_24660;
        var G__24666 = count__22446_24661;
        var G__24667 = i__22447_24662 + 1;
        seq__22444_24659 = G__24664;
        chunk__22445_24660 = G__24665;
        count__22446_24661 = G__24666;
        i__22447_24662 = G__24667;
        continue;
      } else {
        var temp__4126__auto___24668 = cljs.core.seq.call(null, seq__22444_24659);
        if (temp__4126__auto___24668) {
          var seq__22444_24669__$1 = temp__4126__auto___24668;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22444_24669__$1)) {
            var c__4616__auto___24670 = cljs.core.chunk_first.call(null, seq__22444_24669__$1);
            var G__24671 = cljs.core.chunk_rest.call(null, seq__22444_24669__$1);
            var G__24672 = c__4616__auto___24670;
            var G__24673 = cljs.core.count.call(null, c__4616__auto___24670);
            var G__24674 = 0;
            seq__22444_24659 = G__24671;
            chunk__22445_24660 = G__24672;
            count__22446_24661 = G__24673;
            i__22447_24662 = G__24674;
            continue;
          } else {
            var arg__9396__auto___24675 = cljs.core.first.call(null, seq__22444_24669__$1);
            a__9395__auto__.push(arg__9396__auto___24675);
            var G__24676 = cljs.core.next.call(null, seq__22444_24669__$1);
            var G__24677 = null;
            var G__24678 = 0;
            var G__24679 = 0;
            seq__22444_24659 = G__24676;
            chunk__22445_24660 = G__24677;
            count__22446_24661 = G__24678;
            i__22447_24662 = G__24679;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.select.apply(null, a__9395__auto__);
  };
  var select = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24680__i = 0, G__24680__a = new Array(arguments.length - 0);
      while (G__24680__i < G__24680__a.length) {
        G__24680__a[G__24680__i] = arguments[G__24680__i + 0];
        ++G__24680__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24680__a, 0);
    }
    return select__delegate.call(this, args__9394__auto__);
  };
  select.cljs$lang$maxFixedArity = 0;
  select.cljs$lang$applyTo = function(arglist__24681) {
    var args__9394__auto__ = cljs.core.seq(arglist__24681);
    return select__delegate(args__9394__auto__);
  };
  select.cljs$core$IFn$_invoke$arity$variadic = select__delegate;
  return select;
}();
quiescent.dom.small = function() {
  var small__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22452_24682 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22453_24683 = null;
    var count__22454_24684 = 0;
    var i__22455_24685 = 0;
    while (true) {
      if (i__22455_24685 < count__22454_24684) {
        var arg__9396__auto___24686 = cljs.core._nth.call(null, chunk__22453_24683, i__22455_24685);
        a__9395__auto__.push(arg__9396__auto___24686);
        var G__24687 = seq__22452_24682;
        var G__24688 = chunk__22453_24683;
        var G__24689 = count__22454_24684;
        var G__24690 = i__22455_24685 + 1;
        seq__22452_24682 = G__24687;
        chunk__22453_24683 = G__24688;
        count__22454_24684 = G__24689;
        i__22455_24685 = G__24690;
        continue;
      } else {
        var temp__4126__auto___24691 = cljs.core.seq.call(null, seq__22452_24682);
        if (temp__4126__auto___24691) {
          var seq__22452_24692__$1 = temp__4126__auto___24691;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22452_24692__$1)) {
            var c__4616__auto___24693 = cljs.core.chunk_first.call(null, seq__22452_24692__$1);
            var G__24694 = cljs.core.chunk_rest.call(null, seq__22452_24692__$1);
            var G__24695 = c__4616__auto___24693;
            var G__24696 = cljs.core.count.call(null, c__4616__auto___24693);
            var G__24697 = 0;
            seq__22452_24682 = G__24694;
            chunk__22453_24683 = G__24695;
            count__22454_24684 = G__24696;
            i__22455_24685 = G__24697;
            continue;
          } else {
            var arg__9396__auto___24698 = cljs.core.first.call(null, seq__22452_24692__$1);
            a__9395__auto__.push(arg__9396__auto___24698);
            var G__24699 = cljs.core.next.call(null, seq__22452_24692__$1);
            var G__24700 = null;
            var G__24701 = 0;
            var G__24702 = 0;
            seq__22452_24682 = G__24699;
            chunk__22453_24683 = G__24700;
            count__22454_24684 = G__24701;
            i__22455_24685 = G__24702;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.small.apply(null, a__9395__auto__);
  };
  var small = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24703__i = 0, G__24703__a = new Array(arguments.length - 0);
      while (G__24703__i < G__24703__a.length) {
        G__24703__a[G__24703__i] = arguments[G__24703__i + 0];
        ++G__24703__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24703__a, 0);
    }
    return small__delegate.call(this, args__9394__auto__);
  };
  small.cljs$lang$maxFixedArity = 0;
  small.cljs$lang$applyTo = function(arglist__24704) {
    var args__9394__auto__ = cljs.core.seq(arglist__24704);
    return small__delegate(args__9394__auto__);
  };
  small.cljs$core$IFn$_invoke$arity$variadic = small__delegate;
  return small;
}();
quiescent.dom.source = function() {
  var source__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22460_24705 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22461_24706 = null;
    var count__22462_24707 = 0;
    var i__22463_24708 = 0;
    while (true) {
      if (i__22463_24708 < count__22462_24707) {
        var arg__9396__auto___24709 = cljs.core._nth.call(null, chunk__22461_24706, i__22463_24708);
        a__9395__auto__.push(arg__9396__auto___24709);
        var G__24710 = seq__22460_24705;
        var G__24711 = chunk__22461_24706;
        var G__24712 = count__22462_24707;
        var G__24713 = i__22463_24708 + 1;
        seq__22460_24705 = G__24710;
        chunk__22461_24706 = G__24711;
        count__22462_24707 = G__24712;
        i__22463_24708 = G__24713;
        continue;
      } else {
        var temp__4126__auto___24714 = cljs.core.seq.call(null, seq__22460_24705);
        if (temp__4126__auto___24714) {
          var seq__22460_24715__$1 = temp__4126__auto___24714;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22460_24715__$1)) {
            var c__4616__auto___24716 = cljs.core.chunk_first.call(null, seq__22460_24715__$1);
            var G__24717 = cljs.core.chunk_rest.call(null, seq__22460_24715__$1);
            var G__24718 = c__4616__auto___24716;
            var G__24719 = cljs.core.count.call(null, c__4616__auto___24716);
            var G__24720 = 0;
            seq__22460_24705 = G__24717;
            chunk__22461_24706 = G__24718;
            count__22462_24707 = G__24719;
            i__22463_24708 = G__24720;
            continue;
          } else {
            var arg__9396__auto___24721 = cljs.core.first.call(null, seq__22460_24715__$1);
            a__9395__auto__.push(arg__9396__auto___24721);
            var G__24722 = cljs.core.next.call(null, seq__22460_24715__$1);
            var G__24723 = null;
            var G__24724 = 0;
            var G__24725 = 0;
            seq__22460_24705 = G__24722;
            chunk__22461_24706 = G__24723;
            count__22462_24707 = G__24724;
            i__22463_24708 = G__24725;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.source.apply(null, a__9395__auto__);
  };
  var source = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24726__i = 0, G__24726__a = new Array(arguments.length - 0);
      while (G__24726__i < G__24726__a.length) {
        G__24726__a[G__24726__i] = arguments[G__24726__i + 0];
        ++G__24726__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24726__a, 0);
    }
    return source__delegate.call(this, args__9394__auto__);
  };
  source.cljs$lang$maxFixedArity = 0;
  source.cljs$lang$applyTo = function(arglist__24727) {
    var args__9394__auto__ = cljs.core.seq(arglist__24727);
    return source__delegate(args__9394__auto__);
  };
  source.cljs$core$IFn$_invoke$arity$variadic = source__delegate;
  return source;
}();
quiescent.dom.span = function() {
  var span__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22468_24728 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22469_24729 = null;
    var count__22470_24730 = 0;
    var i__22471_24731 = 0;
    while (true) {
      if (i__22471_24731 < count__22470_24730) {
        var arg__9396__auto___24732 = cljs.core._nth.call(null, chunk__22469_24729, i__22471_24731);
        a__9395__auto__.push(arg__9396__auto___24732);
        var G__24733 = seq__22468_24728;
        var G__24734 = chunk__22469_24729;
        var G__24735 = count__22470_24730;
        var G__24736 = i__22471_24731 + 1;
        seq__22468_24728 = G__24733;
        chunk__22469_24729 = G__24734;
        count__22470_24730 = G__24735;
        i__22471_24731 = G__24736;
        continue;
      } else {
        var temp__4126__auto___24737 = cljs.core.seq.call(null, seq__22468_24728);
        if (temp__4126__auto___24737) {
          var seq__22468_24738__$1 = temp__4126__auto___24737;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22468_24738__$1)) {
            var c__4616__auto___24739 = cljs.core.chunk_first.call(null, seq__22468_24738__$1);
            var G__24740 = cljs.core.chunk_rest.call(null, seq__22468_24738__$1);
            var G__24741 = c__4616__auto___24739;
            var G__24742 = cljs.core.count.call(null, c__4616__auto___24739);
            var G__24743 = 0;
            seq__22468_24728 = G__24740;
            chunk__22469_24729 = G__24741;
            count__22470_24730 = G__24742;
            i__22471_24731 = G__24743;
            continue;
          } else {
            var arg__9396__auto___24744 = cljs.core.first.call(null, seq__22468_24738__$1);
            a__9395__auto__.push(arg__9396__auto___24744);
            var G__24745 = cljs.core.next.call(null, seq__22468_24738__$1);
            var G__24746 = null;
            var G__24747 = 0;
            var G__24748 = 0;
            seq__22468_24728 = G__24745;
            chunk__22469_24729 = G__24746;
            count__22470_24730 = G__24747;
            i__22471_24731 = G__24748;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.span.apply(null, a__9395__auto__);
  };
  var span = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24749__i = 0, G__24749__a = new Array(arguments.length - 0);
      while (G__24749__i < G__24749__a.length) {
        G__24749__a[G__24749__i] = arguments[G__24749__i + 0];
        ++G__24749__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24749__a, 0);
    }
    return span__delegate.call(this, args__9394__auto__);
  };
  span.cljs$lang$maxFixedArity = 0;
  span.cljs$lang$applyTo = function(arglist__24750) {
    var args__9394__auto__ = cljs.core.seq(arglist__24750);
    return span__delegate(args__9394__auto__);
  };
  span.cljs$core$IFn$_invoke$arity$variadic = span__delegate;
  return span;
}();
quiescent.dom.strong = function() {
  var strong__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22476_24751 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22477_24752 = null;
    var count__22478_24753 = 0;
    var i__22479_24754 = 0;
    while (true) {
      if (i__22479_24754 < count__22478_24753) {
        var arg__9396__auto___24755 = cljs.core._nth.call(null, chunk__22477_24752, i__22479_24754);
        a__9395__auto__.push(arg__9396__auto___24755);
        var G__24756 = seq__22476_24751;
        var G__24757 = chunk__22477_24752;
        var G__24758 = count__22478_24753;
        var G__24759 = i__22479_24754 + 1;
        seq__22476_24751 = G__24756;
        chunk__22477_24752 = G__24757;
        count__22478_24753 = G__24758;
        i__22479_24754 = G__24759;
        continue;
      } else {
        var temp__4126__auto___24760 = cljs.core.seq.call(null, seq__22476_24751);
        if (temp__4126__auto___24760) {
          var seq__22476_24761__$1 = temp__4126__auto___24760;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22476_24761__$1)) {
            var c__4616__auto___24762 = cljs.core.chunk_first.call(null, seq__22476_24761__$1);
            var G__24763 = cljs.core.chunk_rest.call(null, seq__22476_24761__$1);
            var G__24764 = c__4616__auto___24762;
            var G__24765 = cljs.core.count.call(null, c__4616__auto___24762);
            var G__24766 = 0;
            seq__22476_24751 = G__24763;
            chunk__22477_24752 = G__24764;
            count__22478_24753 = G__24765;
            i__22479_24754 = G__24766;
            continue;
          } else {
            var arg__9396__auto___24767 = cljs.core.first.call(null, seq__22476_24761__$1);
            a__9395__auto__.push(arg__9396__auto___24767);
            var G__24768 = cljs.core.next.call(null, seq__22476_24761__$1);
            var G__24769 = null;
            var G__24770 = 0;
            var G__24771 = 0;
            seq__22476_24751 = G__24768;
            chunk__22477_24752 = G__24769;
            count__22478_24753 = G__24770;
            i__22479_24754 = G__24771;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.strong.apply(null, a__9395__auto__);
  };
  var strong = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24772__i = 0, G__24772__a = new Array(arguments.length - 0);
      while (G__24772__i < G__24772__a.length) {
        G__24772__a[G__24772__i] = arguments[G__24772__i + 0];
        ++G__24772__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24772__a, 0);
    }
    return strong__delegate.call(this, args__9394__auto__);
  };
  strong.cljs$lang$maxFixedArity = 0;
  strong.cljs$lang$applyTo = function(arglist__24773) {
    var args__9394__auto__ = cljs.core.seq(arglist__24773);
    return strong__delegate(args__9394__auto__);
  };
  strong.cljs$core$IFn$_invoke$arity$variadic = strong__delegate;
  return strong;
}();
quiescent.dom.style = function() {
  var style__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22484_24774 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22485_24775 = null;
    var count__22486_24776 = 0;
    var i__22487_24777 = 0;
    while (true) {
      if (i__22487_24777 < count__22486_24776) {
        var arg__9396__auto___24778 = cljs.core._nth.call(null, chunk__22485_24775, i__22487_24777);
        a__9395__auto__.push(arg__9396__auto___24778);
        var G__24779 = seq__22484_24774;
        var G__24780 = chunk__22485_24775;
        var G__24781 = count__22486_24776;
        var G__24782 = i__22487_24777 + 1;
        seq__22484_24774 = G__24779;
        chunk__22485_24775 = G__24780;
        count__22486_24776 = G__24781;
        i__22487_24777 = G__24782;
        continue;
      } else {
        var temp__4126__auto___24783 = cljs.core.seq.call(null, seq__22484_24774);
        if (temp__4126__auto___24783) {
          var seq__22484_24784__$1 = temp__4126__auto___24783;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22484_24784__$1)) {
            var c__4616__auto___24785 = cljs.core.chunk_first.call(null, seq__22484_24784__$1);
            var G__24786 = cljs.core.chunk_rest.call(null, seq__22484_24784__$1);
            var G__24787 = c__4616__auto___24785;
            var G__24788 = cljs.core.count.call(null, c__4616__auto___24785);
            var G__24789 = 0;
            seq__22484_24774 = G__24786;
            chunk__22485_24775 = G__24787;
            count__22486_24776 = G__24788;
            i__22487_24777 = G__24789;
            continue;
          } else {
            var arg__9396__auto___24790 = cljs.core.first.call(null, seq__22484_24784__$1);
            a__9395__auto__.push(arg__9396__auto___24790);
            var G__24791 = cljs.core.next.call(null, seq__22484_24784__$1);
            var G__24792 = null;
            var G__24793 = 0;
            var G__24794 = 0;
            seq__22484_24774 = G__24791;
            chunk__22485_24775 = G__24792;
            count__22486_24776 = G__24793;
            i__22487_24777 = G__24794;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.style.apply(null, a__9395__auto__);
  };
  var style = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24795__i = 0, G__24795__a = new Array(arguments.length - 0);
      while (G__24795__i < G__24795__a.length) {
        G__24795__a[G__24795__i] = arguments[G__24795__i + 0];
        ++G__24795__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24795__a, 0);
    }
    return style__delegate.call(this, args__9394__auto__);
  };
  style.cljs$lang$maxFixedArity = 0;
  style.cljs$lang$applyTo = function(arglist__24796) {
    var args__9394__auto__ = cljs.core.seq(arglist__24796);
    return style__delegate(args__9394__auto__);
  };
  style.cljs$core$IFn$_invoke$arity$variadic = style__delegate;
  return style;
}();
quiescent.dom.sub = function() {
  var sub__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22492_24797 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22493_24798 = null;
    var count__22494_24799 = 0;
    var i__22495_24800 = 0;
    while (true) {
      if (i__22495_24800 < count__22494_24799) {
        var arg__9396__auto___24801 = cljs.core._nth.call(null, chunk__22493_24798, i__22495_24800);
        a__9395__auto__.push(arg__9396__auto___24801);
        var G__24802 = seq__22492_24797;
        var G__24803 = chunk__22493_24798;
        var G__24804 = count__22494_24799;
        var G__24805 = i__22495_24800 + 1;
        seq__22492_24797 = G__24802;
        chunk__22493_24798 = G__24803;
        count__22494_24799 = G__24804;
        i__22495_24800 = G__24805;
        continue;
      } else {
        var temp__4126__auto___24806 = cljs.core.seq.call(null, seq__22492_24797);
        if (temp__4126__auto___24806) {
          var seq__22492_24807__$1 = temp__4126__auto___24806;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22492_24807__$1)) {
            var c__4616__auto___24808 = cljs.core.chunk_first.call(null, seq__22492_24807__$1);
            var G__24809 = cljs.core.chunk_rest.call(null, seq__22492_24807__$1);
            var G__24810 = c__4616__auto___24808;
            var G__24811 = cljs.core.count.call(null, c__4616__auto___24808);
            var G__24812 = 0;
            seq__22492_24797 = G__24809;
            chunk__22493_24798 = G__24810;
            count__22494_24799 = G__24811;
            i__22495_24800 = G__24812;
            continue;
          } else {
            var arg__9396__auto___24813 = cljs.core.first.call(null, seq__22492_24807__$1);
            a__9395__auto__.push(arg__9396__auto___24813);
            var G__24814 = cljs.core.next.call(null, seq__22492_24807__$1);
            var G__24815 = null;
            var G__24816 = 0;
            var G__24817 = 0;
            seq__22492_24797 = G__24814;
            chunk__22493_24798 = G__24815;
            count__22494_24799 = G__24816;
            i__22495_24800 = G__24817;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.sub.apply(null, a__9395__auto__);
  };
  var sub = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24818__i = 0, G__24818__a = new Array(arguments.length - 0);
      while (G__24818__i < G__24818__a.length) {
        G__24818__a[G__24818__i] = arguments[G__24818__i + 0];
        ++G__24818__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24818__a, 0);
    }
    return sub__delegate.call(this, args__9394__auto__);
  };
  sub.cljs$lang$maxFixedArity = 0;
  sub.cljs$lang$applyTo = function(arglist__24819) {
    var args__9394__auto__ = cljs.core.seq(arglist__24819);
    return sub__delegate(args__9394__auto__);
  };
  sub.cljs$core$IFn$_invoke$arity$variadic = sub__delegate;
  return sub;
}();
quiescent.dom.summary = function() {
  var summary__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22500_24820 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22501_24821 = null;
    var count__22502_24822 = 0;
    var i__22503_24823 = 0;
    while (true) {
      if (i__22503_24823 < count__22502_24822) {
        var arg__9396__auto___24824 = cljs.core._nth.call(null, chunk__22501_24821, i__22503_24823);
        a__9395__auto__.push(arg__9396__auto___24824);
        var G__24825 = seq__22500_24820;
        var G__24826 = chunk__22501_24821;
        var G__24827 = count__22502_24822;
        var G__24828 = i__22503_24823 + 1;
        seq__22500_24820 = G__24825;
        chunk__22501_24821 = G__24826;
        count__22502_24822 = G__24827;
        i__22503_24823 = G__24828;
        continue;
      } else {
        var temp__4126__auto___24829 = cljs.core.seq.call(null, seq__22500_24820);
        if (temp__4126__auto___24829) {
          var seq__22500_24830__$1 = temp__4126__auto___24829;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22500_24830__$1)) {
            var c__4616__auto___24831 = cljs.core.chunk_first.call(null, seq__22500_24830__$1);
            var G__24832 = cljs.core.chunk_rest.call(null, seq__22500_24830__$1);
            var G__24833 = c__4616__auto___24831;
            var G__24834 = cljs.core.count.call(null, c__4616__auto___24831);
            var G__24835 = 0;
            seq__22500_24820 = G__24832;
            chunk__22501_24821 = G__24833;
            count__22502_24822 = G__24834;
            i__22503_24823 = G__24835;
            continue;
          } else {
            var arg__9396__auto___24836 = cljs.core.first.call(null, seq__22500_24830__$1);
            a__9395__auto__.push(arg__9396__auto___24836);
            var G__24837 = cljs.core.next.call(null, seq__22500_24830__$1);
            var G__24838 = null;
            var G__24839 = 0;
            var G__24840 = 0;
            seq__22500_24820 = G__24837;
            chunk__22501_24821 = G__24838;
            count__22502_24822 = G__24839;
            i__22503_24823 = G__24840;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.summary.apply(null, a__9395__auto__);
  };
  var summary = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24841__i = 0, G__24841__a = new Array(arguments.length - 0);
      while (G__24841__i < G__24841__a.length) {
        G__24841__a[G__24841__i] = arguments[G__24841__i + 0];
        ++G__24841__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24841__a, 0);
    }
    return summary__delegate.call(this, args__9394__auto__);
  };
  summary.cljs$lang$maxFixedArity = 0;
  summary.cljs$lang$applyTo = function(arglist__24842) {
    var args__9394__auto__ = cljs.core.seq(arglist__24842);
    return summary__delegate(args__9394__auto__);
  };
  summary.cljs$core$IFn$_invoke$arity$variadic = summary__delegate;
  return summary;
}();
quiescent.dom.sup = function() {
  var sup__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22508_24843 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22509_24844 = null;
    var count__22510_24845 = 0;
    var i__22511_24846 = 0;
    while (true) {
      if (i__22511_24846 < count__22510_24845) {
        var arg__9396__auto___24847 = cljs.core._nth.call(null, chunk__22509_24844, i__22511_24846);
        a__9395__auto__.push(arg__9396__auto___24847);
        var G__24848 = seq__22508_24843;
        var G__24849 = chunk__22509_24844;
        var G__24850 = count__22510_24845;
        var G__24851 = i__22511_24846 + 1;
        seq__22508_24843 = G__24848;
        chunk__22509_24844 = G__24849;
        count__22510_24845 = G__24850;
        i__22511_24846 = G__24851;
        continue;
      } else {
        var temp__4126__auto___24852 = cljs.core.seq.call(null, seq__22508_24843);
        if (temp__4126__auto___24852) {
          var seq__22508_24853__$1 = temp__4126__auto___24852;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22508_24853__$1)) {
            var c__4616__auto___24854 = cljs.core.chunk_first.call(null, seq__22508_24853__$1);
            var G__24855 = cljs.core.chunk_rest.call(null, seq__22508_24853__$1);
            var G__24856 = c__4616__auto___24854;
            var G__24857 = cljs.core.count.call(null, c__4616__auto___24854);
            var G__24858 = 0;
            seq__22508_24843 = G__24855;
            chunk__22509_24844 = G__24856;
            count__22510_24845 = G__24857;
            i__22511_24846 = G__24858;
            continue;
          } else {
            var arg__9396__auto___24859 = cljs.core.first.call(null, seq__22508_24853__$1);
            a__9395__auto__.push(arg__9396__auto___24859);
            var G__24860 = cljs.core.next.call(null, seq__22508_24853__$1);
            var G__24861 = null;
            var G__24862 = 0;
            var G__24863 = 0;
            seq__22508_24843 = G__24860;
            chunk__22509_24844 = G__24861;
            count__22510_24845 = G__24862;
            i__22511_24846 = G__24863;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.sup.apply(null, a__9395__auto__);
  };
  var sup = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24864__i = 0, G__24864__a = new Array(arguments.length - 0);
      while (G__24864__i < G__24864__a.length) {
        G__24864__a[G__24864__i] = arguments[G__24864__i + 0];
        ++G__24864__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24864__a, 0);
    }
    return sup__delegate.call(this, args__9394__auto__);
  };
  sup.cljs$lang$maxFixedArity = 0;
  sup.cljs$lang$applyTo = function(arglist__24865) {
    var args__9394__auto__ = cljs.core.seq(arglist__24865);
    return sup__delegate(args__9394__auto__);
  };
  sup.cljs$core$IFn$_invoke$arity$variadic = sup__delegate;
  return sup;
}();
quiescent.dom.table = function() {
  var table__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22516_24866 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22517_24867 = null;
    var count__22518_24868 = 0;
    var i__22519_24869 = 0;
    while (true) {
      if (i__22519_24869 < count__22518_24868) {
        var arg__9396__auto___24870 = cljs.core._nth.call(null, chunk__22517_24867, i__22519_24869);
        a__9395__auto__.push(arg__9396__auto___24870);
        var G__24871 = seq__22516_24866;
        var G__24872 = chunk__22517_24867;
        var G__24873 = count__22518_24868;
        var G__24874 = i__22519_24869 + 1;
        seq__22516_24866 = G__24871;
        chunk__22517_24867 = G__24872;
        count__22518_24868 = G__24873;
        i__22519_24869 = G__24874;
        continue;
      } else {
        var temp__4126__auto___24875 = cljs.core.seq.call(null, seq__22516_24866);
        if (temp__4126__auto___24875) {
          var seq__22516_24876__$1 = temp__4126__auto___24875;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22516_24876__$1)) {
            var c__4616__auto___24877 = cljs.core.chunk_first.call(null, seq__22516_24876__$1);
            var G__24878 = cljs.core.chunk_rest.call(null, seq__22516_24876__$1);
            var G__24879 = c__4616__auto___24877;
            var G__24880 = cljs.core.count.call(null, c__4616__auto___24877);
            var G__24881 = 0;
            seq__22516_24866 = G__24878;
            chunk__22517_24867 = G__24879;
            count__22518_24868 = G__24880;
            i__22519_24869 = G__24881;
            continue;
          } else {
            var arg__9396__auto___24882 = cljs.core.first.call(null, seq__22516_24876__$1);
            a__9395__auto__.push(arg__9396__auto___24882);
            var G__24883 = cljs.core.next.call(null, seq__22516_24876__$1);
            var G__24884 = null;
            var G__24885 = 0;
            var G__24886 = 0;
            seq__22516_24866 = G__24883;
            chunk__22517_24867 = G__24884;
            count__22518_24868 = G__24885;
            i__22519_24869 = G__24886;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.table.apply(null, a__9395__auto__);
  };
  var table = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24887__i = 0, G__24887__a = new Array(arguments.length - 0);
      while (G__24887__i < G__24887__a.length) {
        G__24887__a[G__24887__i] = arguments[G__24887__i + 0];
        ++G__24887__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24887__a, 0);
    }
    return table__delegate.call(this, args__9394__auto__);
  };
  table.cljs$lang$maxFixedArity = 0;
  table.cljs$lang$applyTo = function(arglist__24888) {
    var args__9394__auto__ = cljs.core.seq(arglist__24888);
    return table__delegate(args__9394__auto__);
  };
  table.cljs$core$IFn$_invoke$arity$variadic = table__delegate;
  return table;
}();
quiescent.dom.tbody = function() {
  var tbody__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22524_24889 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22525_24890 = null;
    var count__22526_24891 = 0;
    var i__22527_24892 = 0;
    while (true) {
      if (i__22527_24892 < count__22526_24891) {
        var arg__9396__auto___24893 = cljs.core._nth.call(null, chunk__22525_24890, i__22527_24892);
        a__9395__auto__.push(arg__9396__auto___24893);
        var G__24894 = seq__22524_24889;
        var G__24895 = chunk__22525_24890;
        var G__24896 = count__22526_24891;
        var G__24897 = i__22527_24892 + 1;
        seq__22524_24889 = G__24894;
        chunk__22525_24890 = G__24895;
        count__22526_24891 = G__24896;
        i__22527_24892 = G__24897;
        continue;
      } else {
        var temp__4126__auto___24898 = cljs.core.seq.call(null, seq__22524_24889);
        if (temp__4126__auto___24898) {
          var seq__22524_24899__$1 = temp__4126__auto___24898;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22524_24899__$1)) {
            var c__4616__auto___24900 = cljs.core.chunk_first.call(null, seq__22524_24899__$1);
            var G__24901 = cljs.core.chunk_rest.call(null, seq__22524_24899__$1);
            var G__24902 = c__4616__auto___24900;
            var G__24903 = cljs.core.count.call(null, c__4616__auto___24900);
            var G__24904 = 0;
            seq__22524_24889 = G__24901;
            chunk__22525_24890 = G__24902;
            count__22526_24891 = G__24903;
            i__22527_24892 = G__24904;
            continue;
          } else {
            var arg__9396__auto___24905 = cljs.core.first.call(null, seq__22524_24899__$1);
            a__9395__auto__.push(arg__9396__auto___24905);
            var G__24906 = cljs.core.next.call(null, seq__22524_24899__$1);
            var G__24907 = null;
            var G__24908 = 0;
            var G__24909 = 0;
            seq__22524_24889 = G__24906;
            chunk__22525_24890 = G__24907;
            count__22526_24891 = G__24908;
            i__22527_24892 = G__24909;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.tbody.apply(null, a__9395__auto__);
  };
  var tbody = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24910__i = 0, G__24910__a = new Array(arguments.length - 0);
      while (G__24910__i < G__24910__a.length) {
        G__24910__a[G__24910__i] = arguments[G__24910__i + 0];
        ++G__24910__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24910__a, 0);
    }
    return tbody__delegate.call(this, args__9394__auto__);
  };
  tbody.cljs$lang$maxFixedArity = 0;
  tbody.cljs$lang$applyTo = function(arglist__24911) {
    var args__9394__auto__ = cljs.core.seq(arglist__24911);
    return tbody__delegate(args__9394__auto__);
  };
  tbody.cljs$core$IFn$_invoke$arity$variadic = tbody__delegate;
  return tbody;
}();
quiescent.dom.td = function() {
  var td__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22532_24912 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22533_24913 = null;
    var count__22534_24914 = 0;
    var i__22535_24915 = 0;
    while (true) {
      if (i__22535_24915 < count__22534_24914) {
        var arg__9396__auto___24916 = cljs.core._nth.call(null, chunk__22533_24913, i__22535_24915);
        a__9395__auto__.push(arg__9396__auto___24916);
        var G__24917 = seq__22532_24912;
        var G__24918 = chunk__22533_24913;
        var G__24919 = count__22534_24914;
        var G__24920 = i__22535_24915 + 1;
        seq__22532_24912 = G__24917;
        chunk__22533_24913 = G__24918;
        count__22534_24914 = G__24919;
        i__22535_24915 = G__24920;
        continue;
      } else {
        var temp__4126__auto___24921 = cljs.core.seq.call(null, seq__22532_24912);
        if (temp__4126__auto___24921) {
          var seq__22532_24922__$1 = temp__4126__auto___24921;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22532_24922__$1)) {
            var c__4616__auto___24923 = cljs.core.chunk_first.call(null, seq__22532_24922__$1);
            var G__24924 = cljs.core.chunk_rest.call(null, seq__22532_24922__$1);
            var G__24925 = c__4616__auto___24923;
            var G__24926 = cljs.core.count.call(null, c__4616__auto___24923);
            var G__24927 = 0;
            seq__22532_24912 = G__24924;
            chunk__22533_24913 = G__24925;
            count__22534_24914 = G__24926;
            i__22535_24915 = G__24927;
            continue;
          } else {
            var arg__9396__auto___24928 = cljs.core.first.call(null, seq__22532_24922__$1);
            a__9395__auto__.push(arg__9396__auto___24928);
            var G__24929 = cljs.core.next.call(null, seq__22532_24922__$1);
            var G__24930 = null;
            var G__24931 = 0;
            var G__24932 = 0;
            seq__22532_24912 = G__24929;
            chunk__22533_24913 = G__24930;
            count__22534_24914 = G__24931;
            i__22535_24915 = G__24932;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.td.apply(null, a__9395__auto__);
  };
  var td = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24933__i = 0, G__24933__a = new Array(arguments.length - 0);
      while (G__24933__i < G__24933__a.length) {
        G__24933__a[G__24933__i] = arguments[G__24933__i + 0];
        ++G__24933__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24933__a, 0);
    }
    return td__delegate.call(this, args__9394__auto__);
  };
  td.cljs$lang$maxFixedArity = 0;
  td.cljs$lang$applyTo = function(arglist__24934) {
    var args__9394__auto__ = cljs.core.seq(arglist__24934);
    return td__delegate(args__9394__auto__);
  };
  td.cljs$core$IFn$_invoke$arity$variadic = td__delegate;
  return td;
}();
quiescent.dom.textarea = function() {
  var textarea__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22540_24935 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22541_24936 = null;
    var count__22542_24937 = 0;
    var i__22543_24938 = 0;
    while (true) {
      if (i__22543_24938 < count__22542_24937) {
        var arg__9396__auto___24939 = cljs.core._nth.call(null, chunk__22541_24936, i__22543_24938);
        a__9395__auto__.push(arg__9396__auto___24939);
        var G__24940 = seq__22540_24935;
        var G__24941 = chunk__22541_24936;
        var G__24942 = count__22542_24937;
        var G__24943 = i__22543_24938 + 1;
        seq__22540_24935 = G__24940;
        chunk__22541_24936 = G__24941;
        count__22542_24937 = G__24942;
        i__22543_24938 = G__24943;
        continue;
      } else {
        var temp__4126__auto___24944 = cljs.core.seq.call(null, seq__22540_24935);
        if (temp__4126__auto___24944) {
          var seq__22540_24945__$1 = temp__4126__auto___24944;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22540_24945__$1)) {
            var c__4616__auto___24946 = cljs.core.chunk_first.call(null, seq__22540_24945__$1);
            var G__24947 = cljs.core.chunk_rest.call(null, seq__22540_24945__$1);
            var G__24948 = c__4616__auto___24946;
            var G__24949 = cljs.core.count.call(null, c__4616__auto___24946);
            var G__24950 = 0;
            seq__22540_24935 = G__24947;
            chunk__22541_24936 = G__24948;
            count__22542_24937 = G__24949;
            i__22543_24938 = G__24950;
            continue;
          } else {
            var arg__9396__auto___24951 = cljs.core.first.call(null, seq__22540_24945__$1);
            a__9395__auto__.push(arg__9396__auto___24951);
            var G__24952 = cljs.core.next.call(null, seq__22540_24945__$1);
            var G__24953 = null;
            var G__24954 = 0;
            var G__24955 = 0;
            seq__22540_24935 = G__24952;
            chunk__22541_24936 = G__24953;
            count__22542_24937 = G__24954;
            i__22543_24938 = G__24955;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.textarea.apply(null, a__9395__auto__);
  };
  var textarea = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24956__i = 0, G__24956__a = new Array(arguments.length - 0);
      while (G__24956__i < G__24956__a.length) {
        G__24956__a[G__24956__i] = arguments[G__24956__i + 0];
        ++G__24956__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24956__a, 0);
    }
    return textarea__delegate.call(this, args__9394__auto__);
  };
  textarea.cljs$lang$maxFixedArity = 0;
  textarea.cljs$lang$applyTo = function(arglist__24957) {
    var args__9394__auto__ = cljs.core.seq(arglist__24957);
    return textarea__delegate(args__9394__auto__);
  };
  textarea.cljs$core$IFn$_invoke$arity$variadic = textarea__delegate;
  return textarea;
}();
quiescent.dom.tfoot = function() {
  var tfoot__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22548_24958 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22549_24959 = null;
    var count__22550_24960 = 0;
    var i__22551_24961 = 0;
    while (true) {
      if (i__22551_24961 < count__22550_24960) {
        var arg__9396__auto___24962 = cljs.core._nth.call(null, chunk__22549_24959, i__22551_24961);
        a__9395__auto__.push(arg__9396__auto___24962);
        var G__24963 = seq__22548_24958;
        var G__24964 = chunk__22549_24959;
        var G__24965 = count__22550_24960;
        var G__24966 = i__22551_24961 + 1;
        seq__22548_24958 = G__24963;
        chunk__22549_24959 = G__24964;
        count__22550_24960 = G__24965;
        i__22551_24961 = G__24966;
        continue;
      } else {
        var temp__4126__auto___24967 = cljs.core.seq.call(null, seq__22548_24958);
        if (temp__4126__auto___24967) {
          var seq__22548_24968__$1 = temp__4126__auto___24967;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22548_24968__$1)) {
            var c__4616__auto___24969 = cljs.core.chunk_first.call(null, seq__22548_24968__$1);
            var G__24970 = cljs.core.chunk_rest.call(null, seq__22548_24968__$1);
            var G__24971 = c__4616__auto___24969;
            var G__24972 = cljs.core.count.call(null, c__4616__auto___24969);
            var G__24973 = 0;
            seq__22548_24958 = G__24970;
            chunk__22549_24959 = G__24971;
            count__22550_24960 = G__24972;
            i__22551_24961 = G__24973;
            continue;
          } else {
            var arg__9396__auto___24974 = cljs.core.first.call(null, seq__22548_24968__$1);
            a__9395__auto__.push(arg__9396__auto___24974);
            var G__24975 = cljs.core.next.call(null, seq__22548_24968__$1);
            var G__24976 = null;
            var G__24977 = 0;
            var G__24978 = 0;
            seq__22548_24958 = G__24975;
            chunk__22549_24959 = G__24976;
            count__22550_24960 = G__24977;
            i__22551_24961 = G__24978;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.tfoot.apply(null, a__9395__auto__);
  };
  var tfoot = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__24979__i = 0, G__24979__a = new Array(arguments.length - 0);
      while (G__24979__i < G__24979__a.length) {
        G__24979__a[G__24979__i] = arguments[G__24979__i + 0];
        ++G__24979__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__24979__a, 0);
    }
    return tfoot__delegate.call(this, args__9394__auto__);
  };
  tfoot.cljs$lang$maxFixedArity = 0;
  tfoot.cljs$lang$applyTo = function(arglist__24980) {
    var args__9394__auto__ = cljs.core.seq(arglist__24980);
    return tfoot__delegate(args__9394__auto__);
  };
  tfoot.cljs$core$IFn$_invoke$arity$variadic = tfoot__delegate;
  return tfoot;
}();
quiescent.dom.th = function() {
  var th__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22556_24981 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22557_24982 = null;
    var count__22558_24983 = 0;
    var i__22559_24984 = 0;
    while (true) {
      if (i__22559_24984 < count__22558_24983) {
        var arg__9396__auto___24985 = cljs.core._nth.call(null, chunk__22557_24982, i__22559_24984);
        a__9395__auto__.push(arg__9396__auto___24985);
        var G__24986 = seq__22556_24981;
        var G__24987 = chunk__22557_24982;
        var G__24988 = count__22558_24983;
        var G__24989 = i__22559_24984 + 1;
        seq__22556_24981 = G__24986;
        chunk__22557_24982 = G__24987;
        count__22558_24983 = G__24988;
        i__22559_24984 = G__24989;
        continue;
      } else {
        var temp__4126__auto___24990 = cljs.core.seq.call(null, seq__22556_24981);
        if (temp__4126__auto___24990) {
          var seq__22556_24991__$1 = temp__4126__auto___24990;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22556_24991__$1)) {
            var c__4616__auto___24992 = cljs.core.chunk_first.call(null, seq__22556_24991__$1);
            var G__24993 = cljs.core.chunk_rest.call(null, seq__22556_24991__$1);
            var G__24994 = c__4616__auto___24992;
            var G__24995 = cljs.core.count.call(null, c__4616__auto___24992);
            var G__24996 = 0;
            seq__22556_24981 = G__24993;
            chunk__22557_24982 = G__24994;
            count__22558_24983 = G__24995;
            i__22559_24984 = G__24996;
            continue;
          } else {
            var arg__9396__auto___24997 = cljs.core.first.call(null, seq__22556_24991__$1);
            a__9395__auto__.push(arg__9396__auto___24997);
            var G__24998 = cljs.core.next.call(null, seq__22556_24991__$1);
            var G__24999 = null;
            var G__25000 = 0;
            var G__25001 = 0;
            seq__22556_24981 = G__24998;
            chunk__22557_24982 = G__24999;
            count__22558_24983 = G__25000;
            i__22559_24984 = G__25001;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.th.apply(null, a__9395__auto__);
  };
  var th = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__25002__i = 0, G__25002__a = new Array(arguments.length - 0);
      while (G__25002__i < G__25002__a.length) {
        G__25002__a[G__25002__i] = arguments[G__25002__i + 0];
        ++G__25002__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__25002__a, 0);
    }
    return th__delegate.call(this, args__9394__auto__);
  };
  th.cljs$lang$maxFixedArity = 0;
  th.cljs$lang$applyTo = function(arglist__25003) {
    var args__9394__auto__ = cljs.core.seq(arglist__25003);
    return th__delegate(args__9394__auto__);
  };
  th.cljs$core$IFn$_invoke$arity$variadic = th__delegate;
  return th;
}();
quiescent.dom.thead = function() {
  var thead__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22564_25004 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22565_25005 = null;
    var count__22566_25006 = 0;
    var i__22567_25007 = 0;
    while (true) {
      if (i__22567_25007 < count__22566_25006) {
        var arg__9396__auto___25008 = cljs.core._nth.call(null, chunk__22565_25005, i__22567_25007);
        a__9395__auto__.push(arg__9396__auto___25008);
        var G__25009 = seq__22564_25004;
        var G__25010 = chunk__22565_25005;
        var G__25011 = count__22566_25006;
        var G__25012 = i__22567_25007 + 1;
        seq__22564_25004 = G__25009;
        chunk__22565_25005 = G__25010;
        count__22566_25006 = G__25011;
        i__22567_25007 = G__25012;
        continue;
      } else {
        var temp__4126__auto___25013 = cljs.core.seq.call(null, seq__22564_25004);
        if (temp__4126__auto___25013) {
          var seq__22564_25014__$1 = temp__4126__auto___25013;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22564_25014__$1)) {
            var c__4616__auto___25015 = cljs.core.chunk_first.call(null, seq__22564_25014__$1);
            var G__25016 = cljs.core.chunk_rest.call(null, seq__22564_25014__$1);
            var G__25017 = c__4616__auto___25015;
            var G__25018 = cljs.core.count.call(null, c__4616__auto___25015);
            var G__25019 = 0;
            seq__22564_25004 = G__25016;
            chunk__22565_25005 = G__25017;
            count__22566_25006 = G__25018;
            i__22567_25007 = G__25019;
            continue;
          } else {
            var arg__9396__auto___25020 = cljs.core.first.call(null, seq__22564_25014__$1);
            a__9395__auto__.push(arg__9396__auto___25020);
            var G__25021 = cljs.core.next.call(null, seq__22564_25014__$1);
            var G__25022 = null;
            var G__25023 = 0;
            var G__25024 = 0;
            seq__22564_25004 = G__25021;
            chunk__22565_25005 = G__25022;
            count__22566_25006 = G__25023;
            i__22567_25007 = G__25024;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.thead.apply(null, a__9395__auto__);
  };
  var thead = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__25025__i = 0, G__25025__a = new Array(arguments.length - 0);
      while (G__25025__i < G__25025__a.length) {
        G__25025__a[G__25025__i] = arguments[G__25025__i + 0];
        ++G__25025__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__25025__a, 0);
    }
    return thead__delegate.call(this, args__9394__auto__);
  };
  thead.cljs$lang$maxFixedArity = 0;
  thead.cljs$lang$applyTo = function(arglist__25026) {
    var args__9394__auto__ = cljs.core.seq(arglist__25026);
    return thead__delegate(args__9394__auto__);
  };
  thead.cljs$core$IFn$_invoke$arity$variadic = thead__delegate;
  return thead;
}();
quiescent.dom.time = function() {
  var time__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22572_25027 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22573_25028 = null;
    var count__22574_25029 = 0;
    var i__22575_25030 = 0;
    while (true) {
      if (i__22575_25030 < count__22574_25029) {
        var arg__9396__auto___25031 = cljs.core._nth.call(null, chunk__22573_25028, i__22575_25030);
        a__9395__auto__.push(arg__9396__auto___25031);
        var G__25032 = seq__22572_25027;
        var G__25033 = chunk__22573_25028;
        var G__25034 = count__22574_25029;
        var G__25035 = i__22575_25030 + 1;
        seq__22572_25027 = G__25032;
        chunk__22573_25028 = G__25033;
        count__22574_25029 = G__25034;
        i__22575_25030 = G__25035;
        continue;
      } else {
        var temp__4126__auto___25036 = cljs.core.seq.call(null, seq__22572_25027);
        if (temp__4126__auto___25036) {
          var seq__22572_25037__$1 = temp__4126__auto___25036;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22572_25037__$1)) {
            var c__4616__auto___25038 = cljs.core.chunk_first.call(null, seq__22572_25037__$1);
            var G__25039 = cljs.core.chunk_rest.call(null, seq__22572_25037__$1);
            var G__25040 = c__4616__auto___25038;
            var G__25041 = cljs.core.count.call(null, c__4616__auto___25038);
            var G__25042 = 0;
            seq__22572_25027 = G__25039;
            chunk__22573_25028 = G__25040;
            count__22574_25029 = G__25041;
            i__22575_25030 = G__25042;
            continue;
          } else {
            var arg__9396__auto___25043 = cljs.core.first.call(null, seq__22572_25037__$1);
            a__9395__auto__.push(arg__9396__auto___25043);
            var G__25044 = cljs.core.next.call(null, seq__22572_25037__$1);
            var G__25045 = null;
            var G__25046 = 0;
            var G__25047 = 0;
            seq__22572_25027 = G__25044;
            chunk__22573_25028 = G__25045;
            count__22574_25029 = G__25046;
            i__22575_25030 = G__25047;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.time.apply(null, a__9395__auto__);
  };
  var time = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__25048__i = 0, G__25048__a = new Array(arguments.length - 0);
      while (G__25048__i < G__25048__a.length) {
        G__25048__a[G__25048__i] = arguments[G__25048__i + 0];
        ++G__25048__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__25048__a, 0);
    }
    return time__delegate.call(this, args__9394__auto__);
  };
  time.cljs$lang$maxFixedArity = 0;
  time.cljs$lang$applyTo = function(arglist__25049) {
    var args__9394__auto__ = cljs.core.seq(arglist__25049);
    return time__delegate(args__9394__auto__);
  };
  time.cljs$core$IFn$_invoke$arity$variadic = time__delegate;
  return time;
}();
quiescent.dom.title = function() {
  var title__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22580_25050 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22581_25051 = null;
    var count__22582_25052 = 0;
    var i__22583_25053 = 0;
    while (true) {
      if (i__22583_25053 < count__22582_25052) {
        var arg__9396__auto___25054 = cljs.core._nth.call(null, chunk__22581_25051, i__22583_25053);
        a__9395__auto__.push(arg__9396__auto___25054);
        var G__25055 = seq__22580_25050;
        var G__25056 = chunk__22581_25051;
        var G__25057 = count__22582_25052;
        var G__25058 = i__22583_25053 + 1;
        seq__22580_25050 = G__25055;
        chunk__22581_25051 = G__25056;
        count__22582_25052 = G__25057;
        i__22583_25053 = G__25058;
        continue;
      } else {
        var temp__4126__auto___25059 = cljs.core.seq.call(null, seq__22580_25050);
        if (temp__4126__auto___25059) {
          var seq__22580_25060__$1 = temp__4126__auto___25059;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22580_25060__$1)) {
            var c__4616__auto___25061 = cljs.core.chunk_first.call(null, seq__22580_25060__$1);
            var G__25062 = cljs.core.chunk_rest.call(null, seq__22580_25060__$1);
            var G__25063 = c__4616__auto___25061;
            var G__25064 = cljs.core.count.call(null, c__4616__auto___25061);
            var G__25065 = 0;
            seq__22580_25050 = G__25062;
            chunk__22581_25051 = G__25063;
            count__22582_25052 = G__25064;
            i__22583_25053 = G__25065;
            continue;
          } else {
            var arg__9396__auto___25066 = cljs.core.first.call(null, seq__22580_25060__$1);
            a__9395__auto__.push(arg__9396__auto___25066);
            var G__25067 = cljs.core.next.call(null, seq__22580_25060__$1);
            var G__25068 = null;
            var G__25069 = 0;
            var G__25070 = 0;
            seq__22580_25050 = G__25067;
            chunk__22581_25051 = G__25068;
            count__22582_25052 = G__25069;
            i__22583_25053 = G__25070;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.title.apply(null, a__9395__auto__);
  };
  var title = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__25071__i = 0, G__25071__a = new Array(arguments.length - 0);
      while (G__25071__i < G__25071__a.length) {
        G__25071__a[G__25071__i] = arguments[G__25071__i + 0];
        ++G__25071__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__25071__a, 0);
    }
    return title__delegate.call(this, args__9394__auto__);
  };
  title.cljs$lang$maxFixedArity = 0;
  title.cljs$lang$applyTo = function(arglist__25072) {
    var args__9394__auto__ = cljs.core.seq(arglist__25072);
    return title__delegate(args__9394__auto__);
  };
  title.cljs$core$IFn$_invoke$arity$variadic = title__delegate;
  return title;
}();
quiescent.dom.tr = function() {
  var tr__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22588_25073 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22589_25074 = null;
    var count__22590_25075 = 0;
    var i__22591_25076 = 0;
    while (true) {
      if (i__22591_25076 < count__22590_25075) {
        var arg__9396__auto___25077 = cljs.core._nth.call(null, chunk__22589_25074, i__22591_25076);
        a__9395__auto__.push(arg__9396__auto___25077);
        var G__25078 = seq__22588_25073;
        var G__25079 = chunk__22589_25074;
        var G__25080 = count__22590_25075;
        var G__25081 = i__22591_25076 + 1;
        seq__22588_25073 = G__25078;
        chunk__22589_25074 = G__25079;
        count__22590_25075 = G__25080;
        i__22591_25076 = G__25081;
        continue;
      } else {
        var temp__4126__auto___25082 = cljs.core.seq.call(null, seq__22588_25073);
        if (temp__4126__auto___25082) {
          var seq__22588_25083__$1 = temp__4126__auto___25082;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22588_25083__$1)) {
            var c__4616__auto___25084 = cljs.core.chunk_first.call(null, seq__22588_25083__$1);
            var G__25085 = cljs.core.chunk_rest.call(null, seq__22588_25083__$1);
            var G__25086 = c__4616__auto___25084;
            var G__25087 = cljs.core.count.call(null, c__4616__auto___25084);
            var G__25088 = 0;
            seq__22588_25073 = G__25085;
            chunk__22589_25074 = G__25086;
            count__22590_25075 = G__25087;
            i__22591_25076 = G__25088;
            continue;
          } else {
            var arg__9396__auto___25089 = cljs.core.first.call(null, seq__22588_25083__$1);
            a__9395__auto__.push(arg__9396__auto___25089);
            var G__25090 = cljs.core.next.call(null, seq__22588_25083__$1);
            var G__25091 = null;
            var G__25092 = 0;
            var G__25093 = 0;
            seq__22588_25073 = G__25090;
            chunk__22589_25074 = G__25091;
            count__22590_25075 = G__25092;
            i__22591_25076 = G__25093;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.tr.apply(null, a__9395__auto__);
  };
  var tr = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__25094__i = 0, G__25094__a = new Array(arguments.length - 0);
      while (G__25094__i < G__25094__a.length) {
        G__25094__a[G__25094__i] = arguments[G__25094__i + 0];
        ++G__25094__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__25094__a, 0);
    }
    return tr__delegate.call(this, args__9394__auto__);
  };
  tr.cljs$lang$maxFixedArity = 0;
  tr.cljs$lang$applyTo = function(arglist__25095) {
    var args__9394__auto__ = cljs.core.seq(arglist__25095);
    return tr__delegate(args__9394__auto__);
  };
  tr.cljs$core$IFn$_invoke$arity$variadic = tr__delegate;
  return tr;
}();
quiescent.dom.track = function() {
  var track__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22596_25096 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22597_25097 = null;
    var count__22598_25098 = 0;
    var i__22599_25099 = 0;
    while (true) {
      if (i__22599_25099 < count__22598_25098) {
        var arg__9396__auto___25100 = cljs.core._nth.call(null, chunk__22597_25097, i__22599_25099);
        a__9395__auto__.push(arg__9396__auto___25100);
        var G__25101 = seq__22596_25096;
        var G__25102 = chunk__22597_25097;
        var G__25103 = count__22598_25098;
        var G__25104 = i__22599_25099 + 1;
        seq__22596_25096 = G__25101;
        chunk__22597_25097 = G__25102;
        count__22598_25098 = G__25103;
        i__22599_25099 = G__25104;
        continue;
      } else {
        var temp__4126__auto___25105 = cljs.core.seq.call(null, seq__22596_25096);
        if (temp__4126__auto___25105) {
          var seq__22596_25106__$1 = temp__4126__auto___25105;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22596_25106__$1)) {
            var c__4616__auto___25107 = cljs.core.chunk_first.call(null, seq__22596_25106__$1);
            var G__25108 = cljs.core.chunk_rest.call(null, seq__22596_25106__$1);
            var G__25109 = c__4616__auto___25107;
            var G__25110 = cljs.core.count.call(null, c__4616__auto___25107);
            var G__25111 = 0;
            seq__22596_25096 = G__25108;
            chunk__22597_25097 = G__25109;
            count__22598_25098 = G__25110;
            i__22599_25099 = G__25111;
            continue;
          } else {
            var arg__9396__auto___25112 = cljs.core.first.call(null, seq__22596_25106__$1);
            a__9395__auto__.push(arg__9396__auto___25112);
            var G__25113 = cljs.core.next.call(null, seq__22596_25106__$1);
            var G__25114 = null;
            var G__25115 = 0;
            var G__25116 = 0;
            seq__22596_25096 = G__25113;
            chunk__22597_25097 = G__25114;
            count__22598_25098 = G__25115;
            i__22599_25099 = G__25116;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.track.apply(null, a__9395__auto__);
  };
  var track = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__25117__i = 0, G__25117__a = new Array(arguments.length - 0);
      while (G__25117__i < G__25117__a.length) {
        G__25117__a[G__25117__i] = arguments[G__25117__i + 0];
        ++G__25117__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__25117__a, 0);
    }
    return track__delegate.call(this, args__9394__auto__);
  };
  track.cljs$lang$maxFixedArity = 0;
  track.cljs$lang$applyTo = function(arglist__25118) {
    var args__9394__auto__ = cljs.core.seq(arglist__25118);
    return track__delegate(args__9394__auto__);
  };
  track.cljs$core$IFn$_invoke$arity$variadic = track__delegate;
  return track;
}();
quiescent.dom.u = function() {
  var u__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22604_25119 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22605_25120 = null;
    var count__22606_25121 = 0;
    var i__22607_25122 = 0;
    while (true) {
      if (i__22607_25122 < count__22606_25121) {
        var arg__9396__auto___25123 = cljs.core._nth.call(null, chunk__22605_25120, i__22607_25122);
        a__9395__auto__.push(arg__9396__auto___25123);
        var G__25124 = seq__22604_25119;
        var G__25125 = chunk__22605_25120;
        var G__25126 = count__22606_25121;
        var G__25127 = i__22607_25122 + 1;
        seq__22604_25119 = G__25124;
        chunk__22605_25120 = G__25125;
        count__22606_25121 = G__25126;
        i__22607_25122 = G__25127;
        continue;
      } else {
        var temp__4126__auto___25128 = cljs.core.seq.call(null, seq__22604_25119);
        if (temp__4126__auto___25128) {
          var seq__22604_25129__$1 = temp__4126__auto___25128;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22604_25129__$1)) {
            var c__4616__auto___25130 = cljs.core.chunk_first.call(null, seq__22604_25129__$1);
            var G__25131 = cljs.core.chunk_rest.call(null, seq__22604_25129__$1);
            var G__25132 = c__4616__auto___25130;
            var G__25133 = cljs.core.count.call(null, c__4616__auto___25130);
            var G__25134 = 0;
            seq__22604_25119 = G__25131;
            chunk__22605_25120 = G__25132;
            count__22606_25121 = G__25133;
            i__22607_25122 = G__25134;
            continue;
          } else {
            var arg__9396__auto___25135 = cljs.core.first.call(null, seq__22604_25129__$1);
            a__9395__auto__.push(arg__9396__auto___25135);
            var G__25136 = cljs.core.next.call(null, seq__22604_25129__$1);
            var G__25137 = null;
            var G__25138 = 0;
            var G__25139 = 0;
            seq__22604_25119 = G__25136;
            chunk__22605_25120 = G__25137;
            count__22606_25121 = G__25138;
            i__22607_25122 = G__25139;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.u.apply(null, a__9395__auto__);
  };
  var u = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__25140__i = 0, G__25140__a = new Array(arguments.length - 0);
      while (G__25140__i < G__25140__a.length) {
        G__25140__a[G__25140__i] = arguments[G__25140__i + 0];
        ++G__25140__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__25140__a, 0);
    }
    return u__delegate.call(this, args__9394__auto__);
  };
  u.cljs$lang$maxFixedArity = 0;
  u.cljs$lang$applyTo = function(arglist__25141) {
    var args__9394__auto__ = cljs.core.seq(arglist__25141);
    return u__delegate(args__9394__auto__);
  };
  u.cljs$core$IFn$_invoke$arity$variadic = u__delegate;
  return u;
}();
quiescent.dom.ul = function() {
  var ul__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22612_25142 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22613_25143 = null;
    var count__22614_25144 = 0;
    var i__22615_25145 = 0;
    while (true) {
      if (i__22615_25145 < count__22614_25144) {
        var arg__9396__auto___25146 = cljs.core._nth.call(null, chunk__22613_25143, i__22615_25145);
        a__9395__auto__.push(arg__9396__auto___25146);
        var G__25147 = seq__22612_25142;
        var G__25148 = chunk__22613_25143;
        var G__25149 = count__22614_25144;
        var G__25150 = i__22615_25145 + 1;
        seq__22612_25142 = G__25147;
        chunk__22613_25143 = G__25148;
        count__22614_25144 = G__25149;
        i__22615_25145 = G__25150;
        continue;
      } else {
        var temp__4126__auto___25151 = cljs.core.seq.call(null, seq__22612_25142);
        if (temp__4126__auto___25151) {
          var seq__22612_25152__$1 = temp__4126__auto___25151;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22612_25152__$1)) {
            var c__4616__auto___25153 = cljs.core.chunk_first.call(null, seq__22612_25152__$1);
            var G__25154 = cljs.core.chunk_rest.call(null, seq__22612_25152__$1);
            var G__25155 = c__4616__auto___25153;
            var G__25156 = cljs.core.count.call(null, c__4616__auto___25153);
            var G__25157 = 0;
            seq__22612_25142 = G__25154;
            chunk__22613_25143 = G__25155;
            count__22614_25144 = G__25156;
            i__22615_25145 = G__25157;
            continue;
          } else {
            var arg__9396__auto___25158 = cljs.core.first.call(null, seq__22612_25152__$1);
            a__9395__auto__.push(arg__9396__auto___25158);
            var G__25159 = cljs.core.next.call(null, seq__22612_25152__$1);
            var G__25160 = null;
            var G__25161 = 0;
            var G__25162 = 0;
            seq__22612_25142 = G__25159;
            chunk__22613_25143 = G__25160;
            count__22614_25144 = G__25161;
            i__22615_25145 = G__25162;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ul.apply(null, a__9395__auto__);
  };
  var ul = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__25163__i = 0, G__25163__a = new Array(arguments.length - 0);
      while (G__25163__i < G__25163__a.length) {
        G__25163__a[G__25163__i] = arguments[G__25163__i + 0];
        ++G__25163__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__25163__a, 0);
    }
    return ul__delegate.call(this, args__9394__auto__);
  };
  ul.cljs$lang$maxFixedArity = 0;
  ul.cljs$lang$applyTo = function(arglist__25164) {
    var args__9394__auto__ = cljs.core.seq(arglist__25164);
    return ul__delegate(args__9394__auto__);
  };
  ul.cljs$core$IFn$_invoke$arity$variadic = ul__delegate;
  return ul;
}();
quiescent.dom.var$ = function() {
  var var$__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22620_25165 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22621_25166 = null;
    var count__22622_25167 = 0;
    var i__22623_25168 = 0;
    while (true) {
      if (i__22623_25168 < count__22622_25167) {
        var arg__9396__auto___25169 = cljs.core._nth.call(null, chunk__22621_25166, i__22623_25168);
        a__9395__auto__.push(arg__9396__auto___25169);
        var G__25170 = seq__22620_25165;
        var G__25171 = chunk__22621_25166;
        var G__25172 = count__22622_25167;
        var G__25173 = i__22623_25168 + 1;
        seq__22620_25165 = G__25170;
        chunk__22621_25166 = G__25171;
        count__22622_25167 = G__25172;
        i__22623_25168 = G__25173;
        continue;
      } else {
        var temp__4126__auto___25174 = cljs.core.seq.call(null, seq__22620_25165);
        if (temp__4126__auto___25174) {
          var seq__22620_25175__$1 = temp__4126__auto___25174;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22620_25175__$1)) {
            var c__4616__auto___25176 = cljs.core.chunk_first.call(null, seq__22620_25175__$1);
            var G__25177 = cljs.core.chunk_rest.call(null, seq__22620_25175__$1);
            var G__25178 = c__4616__auto___25176;
            var G__25179 = cljs.core.count.call(null, c__4616__auto___25176);
            var G__25180 = 0;
            seq__22620_25165 = G__25177;
            chunk__22621_25166 = G__25178;
            count__22622_25167 = G__25179;
            i__22623_25168 = G__25180;
            continue;
          } else {
            var arg__9396__auto___25181 = cljs.core.first.call(null, seq__22620_25175__$1);
            a__9395__auto__.push(arg__9396__auto___25181);
            var G__25182 = cljs.core.next.call(null, seq__22620_25175__$1);
            var G__25183 = null;
            var G__25184 = 0;
            var G__25185 = 0;
            seq__22620_25165 = G__25182;
            chunk__22621_25166 = G__25183;
            count__22622_25167 = G__25184;
            i__22623_25168 = G__25185;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.var$.apply(null, a__9395__auto__);
  };
  var var$ = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__25186__i = 0, G__25186__a = new Array(arguments.length - 0);
      while (G__25186__i < G__25186__a.length) {
        G__25186__a[G__25186__i] = arguments[G__25186__i + 0];
        ++G__25186__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__25186__a, 0);
    }
    return var$__delegate.call(this, args__9394__auto__);
  };
  var$.cljs$lang$maxFixedArity = 0;
  var$.cljs$lang$applyTo = function(arglist__25187) {
    var args__9394__auto__ = cljs.core.seq(arglist__25187);
    return var$__delegate(args__9394__auto__);
  };
  var$.cljs$core$IFn$_invoke$arity$variadic = var$__delegate;
  return var$;
}();
quiescent.dom.video = function() {
  var video__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22628_25188 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22629_25189 = null;
    var count__22630_25190 = 0;
    var i__22631_25191 = 0;
    while (true) {
      if (i__22631_25191 < count__22630_25190) {
        var arg__9396__auto___25192 = cljs.core._nth.call(null, chunk__22629_25189, i__22631_25191);
        a__9395__auto__.push(arg__9396__auto___25192);
        var G__25193 = seq__22628_25188;
        var G__25194 = chunk__22629_25189;
        var G__25195 = count__22630_25190;
        var G__25196 = i__22631_25191 + 1;
        seq__22628_25188 = G__25193;
        chunk__22629_25189 = G__25194;
        count__22630_25190 = G__25195;
        i__22631_25191 = G__25196;
        continue;
      } else {
        var temp__4126__auto___25197 = cljs.core.seq.call(null, seq__22628_25188);
        if (temp__4126__auto___25197) {
          var seq__22628_25198__$1 = temp__4126__auto___25197;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22628_25198__$1)) {
            var c__4616__auto___25199 = cljs.core.chunk_first.call(null, seq__22628_25198__$1);
            var G__25200 = cljs.core.chunk_rest.call(null, seq__22628_25198__$1);
            var G__25201 = c__4616__auto___25199;
            var G__25202 = cljs.core.count.call(null, c__4616__auto___25199);
            var G__25203 = 0;
            seq__22628_25188 = G__25200;
            chunk__22629_25189 = G__25201;
            count__22630_25190 = G__25202;
            i__22631_25191 = G__25203;
            continue;
          } else {
            var arg__9396__auto___25204 = cljs.core.first.call(null, seq__22628_25198__$1);
            a__9395__auto__.push(arg__9396__auto___25204);
            var G__25205 = cljs.core.next.call(null, seq__22628_25198__$1);
            var G__25206 = null;
            var G__25207 = 0;
            var G__25208 = 0;
            seq__22628_25188 = G__25205;
            chunk__22629_25189 = G__25206;
            count__22630_25190 = G__25207;
            i__22631_25191 = G__25208;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.video.apply(null, a__9395__auto__);
  };
  var video = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__25209__i = 0, G__25209__a = new Array(arguments.length - 0);
      while (G__25209__i < G__25209__a.length) {
        G__25209__a[G__25209__i] = arguments[G__25209__i + 0];
        ++G__25209__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__25209__a, 0);
    }
    return video__delegate.call(this, args__9394__auto__);
  };
  video.cljs$lang$maxFixedArity = 0;
  video.cljs$lang$applyTo = function(arglist__25210) {
    var args__9394__auto__ = cljs.core.seq(arglist__25210);
    return video__delegate(args__9394__auto__);
  };
  video.cljs$core$IFn$_invoke$arity$variadic = video__delegate;
  return video;
}();
quiescent.dom.wbr = function() {
  var wbr__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22636_25211 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22637_25212 = null;
    var count__22638_25213 = 0;
    var i__22639_25214 = 0;
    while (true) {
      if (i__22639_25214 < count__22638_25213) {
        var arg__9396__auto___25215 = cljs.core._nth.call(null, chunk__22637_25212, i__22639_25214);
        a__9395__auto__.push(arg__9396__auto___25215);
        var G__25216 = seq__22636_25211;
        var G__25217 = chunk__22637_25212;
        var G__25218 = count__22638_25213;
        var G__25219 = i__22639_25214 + 1;
        seq__22636_25211 = G__25216;
        chunk__22637_25212 = G__25217;
        count__22638_25213 = G__25218;
        i__22639_25214 = G__25219;
        continue;
      } else {
        var temp__4126__auto___25220 = cljs.core.seq.call(null, seq__22636_25211);
        if (temp__4126__auto___25220) {
          var seq__22636_25221__$1 = temp__4126__auto___25220;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22636_25221__$1)) {
            var c__4616__auto___25222 = cljs.core.chunk_first.call(null, seq__22636_25221__$1);
            var G__25223 = cljs.core.chunk_rest.call(null, seq__22636_25221__$1);
            var G__25224 = c__4616__auto___25222;
            var G__25225 = cljs.core.count.call(null, c__4616__auto___25222);
            var G__25226 = 0;
            seq__22636_25211 = G__25223;
            chunk__22637_25212 = G__25224;
            count__22638_25213 = G__25225;
            i__22639_25214 = G__25226;
            continue;
          } else {
            var arg__9396__auto___25227 = cljs.core.first.call(null, seq__22636_25221__$1);
            a__9395__auto__.push(arg__9396__auto___25227);
            var G__25228 = cljs.core.next.call(null, seq__22636_25221__$1);
            var G__25229 = null;
            var G__25230 = 0;
            var G__25231 = 0;
            seq__22636_25211 = G__25228;
            chunk__22637_25212 = G__25229;
            count__22638_25213 = G__25230;
            i__22639_25214 = G__25231;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.wbr.apply(null, a__9395__auto__);
  };
  var wbr = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__25232__i = 0, G__25232__a = new Array(arguments.length - 0);
      while (G__25232__i < G__25232__a.length) {
        G__25232__a[G__25232__i] = arguments[G__25232__i + 0];
        ++G__25232__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__25232__a, 0);
    }
    return wbr__delegate.call(this, args__9394__auto__);
  };
  wbr.cljs$lang$maxFixedArity = 0;
  wbr.cljs$lang$applyTo = function(arglist__25233) {
    var args__9394__auto__ = cljs.core.seq(arglist__25233);
    return wbr__delegate(args__9394__auto__);
  };
  wbr.cljs$core$IFn$_invoke$arity$variadic = wbr__delegate;
  return wbr;
}();
quiescent.dom.circle = function() {
  var circle__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22644_25234 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22645_25235 = null;
    var count__22646_25236 = 0;
    var i__22647_25237 = 0;
    while (true) {
      if (i__22647_25237 < count__22646_25236) {
        var arg__9396__auto___25238 = cljs.core._nth.call(null, chunk__22645_25235, i__22647_25237);
        a__9395__auto__.push(arg__9396__auto___25238);
        var G__25239 = seq__22644_25234;
        var G__25240 = chunk__22645_25235;
        var G__25241 = count__22646_25236;
        var G__25242 = i__22647_25237 + 1;
        seq__22644_25234 = G__25239;
        chunk__22645_25235 = G__25240;
        count__22646_25236 = G__25241;
        i__22647_25237 = G__25242;
        continue;
      } else {
        var temp__4126__auto___25243 = cljs.core.seq.call(null, seq__22644_25234);
        if (temp__4126__auto___25243) {
          var seq__22644_25244__$1 = temp__4126__auto___25243;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22644_25244__$1)) {
            var c__4616__auto___25245 = cljs.core.chunk_first.call(null, seq__22644_25244__$1);
            var G__25246 = cljs.core.chunk_rest.call(null, seq__22644_25244__$1);
            var G__25247 = c__4616__auto___25245;
            var G__25248 = cljs.core.count.call(null, c__4616__auto___25245);
            var G__25249 = 0;
            seq__22644_25234 = G__25246;
            chunk__22645_25235 = G__25247;
            count__22646_25236 = G__25248;
            i__22647_25237 = G__25249;
            continue;
          } else {
            var arg__9396__auto___25250 = cljs.core.first.call(null, seq__22644_25244__$1);
            a__9395__auto__.push(arg__9396__auto___25250);
            var G__25251 = cljs.core.next.call(null, seq__22644_25244__$1);
            var G__25252 = null;
            var G__25253 = 0;
            var G__25254 = 0;
            seq__22644_25234 = G__25251;
            chunk__22645_25235 = G__25252;
            count__22646_25236 = G__25253;
            i__22647_25237 = G__25254;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.circle.apply(null, a__9395__auto__);
  };
  var circle = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__25255__i = 0, G__25255__a = new Array(arguments.length - 0);
      while (G__25255__i < G__25255__a.length) {
        G__25255__a[G__25255__i] = arguments[G__25255__i + 0];
        ++G__25255__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__25255__a, 0);
    }
    return circle__delegate.call(this, args__9394__auto__);
  };
  circle.cljs$lang$maxFixedArity = 0;
  circle.cljs$lang$applyTo = function(arglist__25256) {
    var args__9394__auto__ = cljs.core.seq(arglist__25256);
    return circle__delegate(args__9394__auto__);
  };
  circle.cljs$core$IFn$_invoke$arity$variadic = circle__delegate;
  return circle;
}();
quiescent.dom.g = function() {
  var g__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22652_25257 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22653_25258 = null;
    var count__22654_25259 = 0;
    var i__22655_25260 = 0;
    while (true) {
      if (i__22655_25260 < count__22654_25259) {
        var arg__9396__auto___25261 = cljs.core._nth.call(null, chunk__22653_25258, i__22655_25260);
        a__9395__auto__.push(arg__9396__auto___25261);
        var G__25262 = seq__22652_25257;
        var G__25263 = chunk__22653_25258;
        var G__25264 = count__22654_25259;
        var G__25265 = i__22655_25260 + 1;
        seq__22652_25257 = G__25262;
        chunk__22653_25258 = G__25263;
        count__22654_25259 = G__25264;
        i__22655_25260 = G__25265;
        continue;
      } else {
        var temp__4126__auto___25266 = cljs.core.seq.call(null, seq__22652_25257);
        if (temp__4126__auto___25266) {
          var seq__22652_25267__$1 = temp__4126__auto___25266;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22652_25267__$1)) {
            var c__4616__auto___25268 = cljs.core.chunk_first.call(null, seq__22652_25267__$1);
            var G__25269 = cljs.core.chunk_rest.call(null, seq__22652_25267__$1);
            var G__25270 = c__4616__auto___25268;
            var G__25271 = cljs.core.count.call(null, c__4616__auto___25268);
            var G__25272 = 0;
            seq__22652_25257 = G__25269;
            chunk__22653_25258 = G__25270;
            count__22654_25259 = G__25271;
            i__22655_25260 = G__25272;
            continue;
          } else {
            var arg__9396__auto___25273 = cljs.core.first.call(null, seq__22652_25267__$1);
            a__9395__auto__.push(arg__9396__auto___25273);
            var G__25274 = cljs.core.next.call(null, seq__22652_25267__$1);
            var G__25275 = null;
            var G__25276 = 0;
            var G__25277 = 0;
            seq__22652_25257 = G__25274;
            chunk__22653_25258 = G__25275;
            count__22654_25259 = G__25276;
            i__22655_25260 = G__25277;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.g.apply(null, a__9395__auto__);
  };
  var g = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__25278__i = 0, G__25278__a = new Array(arguments.length - 0);
      while (G__25278__i < G__25278__a.length) {
        G__25278__a[G__25278__i] = arguments[G__25278__i + 0];
        ++G__25278__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__25278__a, 0);
    }
    return g__delegate.call(this, args__9394__auto__);
  };
  g.cljs$lang$maxFixedArity = 0;
  g.cljs$lang$applyTo = function(arglist__25279) {
    var args__9394__auto__ = cljs.core.seq(arglist__25279);
    return g__delegate(args__9394__auto__);
  };
  g.cljs$core$IFn$_invoke$arity$variadic = g__delegate;
  return g;
}();
quiescent.dom.line = function() {
  var line__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22660_25280 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22661_25281 = null;
    var count__22662_25282 = 0;
    var i__22663_25283 = 0;
    while (true) {
      if (i__22663_25283 < count__22662_25282) {
        var arg__9396__auto___25284 = cljs.core._nth.call(null, chunk__22661_25281, i__22663_25283);
        a__9395__auto__.push(arg__9396__auto___25284);
        var G__25285 = seq__22660_25280;
        var G__25286 = chunk__22661_25281;
        var G__25287 = count__22662_25282;
        var G__25288 = i__22663_25283 + 1;
        seq__22660_25280 = G__25285;
        chunk__22661_25281 = G__25286;
        count__22662_25282 = G__25287;
        i__22663_25283 = G__25288;
        continue;
      } else {
        var temp__4126__auto___25289 = cljs.core.seq.call(null, seq__22660_25280);
        if (temp__4126__auto___25289) {
          var seq__22660_25290__$1 = temp__4126__auto___25289;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22660_25290__$1)) {
            var c__4616__auto___25291 = cljs.core.chunk_first.call(null, seq__22660_25290__$1);
            var G__25292 = cljs.core.chunk_rest.call(null, seq__22660_25290__$1);
            var G__25293 = c__4616__auto___25291;
            var G__25294 = cljs.core.count.call(null, c__4616__auto___25291);
            var G__25295 = 0;
            seq__22660_25280 = G__25292;
            chunk__22661_25281 = G__25293;
            count__22662_25282 = G__25294;
            i__22663_25283 = G__25295;
            continue;
          } else {
            var arg__9396__auto___25296 = cljs.core.first.call(null, seq__22660_25290__$1);
            a__9395__auto__.push(arg__9396__auto___25296);
            var G__25297 = cljs.core.next.call(null, seq__22660_25290__$1);
            var G__25298 = null;
            var G__25299 = 0;
            var G__25300 = 0;
            seq__22660_25280 = G__25297;
            chunk__22661_25281 = G__25298;
            count__22662_25282 = G__25299;
            i__22663_25283 = G__25300;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.line.apply(null, a__9395__auto__);
  };
  var line = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__25301__i = 0, G__25301__a = new Array(arguments.length - 0);
      while (G__25301__i < G__25301__a.length) {
        G__25301__a[G__25301__i] = arguments[G__25301__i + 0];
        ++G__25301__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__25301__a, 0);
    }
    return line__delegate.call(this, args__9394__auto__);
  };
  line.cljs$lang$maxFixedArity = 0;
  line.cljs$lang$applyTo = function(arglist__25302) {
    var args__9394__auto__ = cljs.core.seq(arglist__25302);
    return line__delegate(args__9394__auto__);
  };
  line.cljs$core$IFn$_invoke$arity$variadic = line__delegate;
  return line;
}();
quiescent.dom.path = function() {
  var path__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22668_25303 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22669_25304 = null;
    var count__22670_25305 = 0;
    var i__22671_25306 = 0;
    while (true) {
      if (i__22671_25306 < count__22670_25305) {
        var arg__9396__auto___25307 = cljs.core._nth.call(null, chunk__22669_25304, i__22671_25306);
        a__9395__auto__.push(arg__9396__auto___25307);
        var G__25308 = seq__22668_25303;
        var G__25309 = chunk__22669_25304;
        var G__25310 = count__22670_25305;
        var G__25311 = i__22671_25306 + 1;
        seq__22668_25303 = G__25308;
        chunk__22669_25304 = G__25309;
        count__22670_25305 = G__25310;
        i__22671_25306 = G__25311;
        continue;
      } else {
        var temp__4126__auto___25312 = cljs.core.seq.call(null, seq__22668_25303);
        if (temp__4126__auto___25312) {
          var seq__22668_25313__$1 = temp__4126__auto___25312;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22668_25313__$1)) {
            var c__4616__auto___25314 = cljs.core.chunk_first.call(null, seq__22668_25313__$1);
            var G__25315 = cljs.core.chunk_rest.call(null, seq__22668_25313__$1);
            var G__25316 = c__4616__auto___25314;
            var G__25317 = cljs.core.count.call(null, c__4616__auto___25314);
            var G__25318 = 0;
            seq__22668_25303 = G__25315;
            chunk__22669_25304 = G__25316;
            count__22670_25305 = G__25317;
            i__22671_25306 = G__25318;
            continue;
          } else {
            var arg__9396__auto___25319 = cljs.core.first.call(null, seq__22668_25313__$1);
            a__9395__auto__.push(arg__9396__auto___25319);
            var G__25320 = cljs.core.next.call(null, seq__22668_25313__$1);
            var G__25321 = null;
            var G__25322 = 0;
            var G__25323 = 0;
            seq__22668_25303 = G__25320;
            chunk__22669_25304 = G__25321;
            count__22670_25305 = G__25322;
            i__22671_25306 = G__25323;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.path.apply(null, a__9395__auto__);
  };
  var path = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__25324__i = 0, G__25324__a = new Array(arguments.length - 0);
      while (G__25324__i < G__25324__a.length) {
        G__25324__a[G__25324__i] = arguments[G__25324__i + 0];
        ++G__25324__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__25324__a, 0);
    }
    return path__delegate.call(this, args__9394__auto__);
  };
  path.cljs$lang$maxFixedArity = 0;
  path.cljs$lang$applyTo = function(arglist__25325) {
    var args__9394__auto__ = cljs.core.seq(arglist__25325);
    return path__delegate(args__9394__auto__);
  };
  path.cljs$core$IFn$_invoke$arity$variadic = path__delegate;
  return path;
}();
quiescent.dom.polygon = function() {
  var polygon__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22676_25326 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22677_25327 = null;
    var count__22678_25328 = 0;
    var i__22679_25329 = 0;
    while (true) {
      if (i__22679_25329 < count__22678_25328) {
        var arg__9396__auto___25330 = cljs.core._nth.call(null, chunk__22677_25327, i__22679_25329);
        a__9395__auto__.push(arg__9396__auto___25330);
        var G__25331 = seq__22676_25326;
        var G__25332 = chunk__22677_25327;
        var G__25333 = count__22678_25328;
        var G__25334 = i__22679_25329 + 1;
        seq__22676_25326 = G__25331;
        chunk__22677_25327 = G__25332;
        count__22678_25328 = G__25333;
        i__22679_25329 = G__25334;
        continue;
      } else {
        var temp__4126__auto___25335 = cljs.core.seq.call(null, seq__22676_25326);
        if (temp__4126__auto___25335) {
          var seq__22676_25336__$1 = temp__4126__auto___25335;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22676_25336__$1)) {
            var c__4616__auto___25337 = cljs.core.chunk_first.call(null, seq__22676_25336__$1);
            var G__25338 = cljs.core.chunk_rest.call(null, seq__22676_25336__$1);
            var G__25339 = c__4616__auto___25337;
            var G__25340 = cljs.core.count.call(null, c__4616__auto___25337);
            var G__25341 = 0;
            seq__22676_25326 = G__25338;
            chunk__22677_25327 = G__25339;
            count__22678_25328 = G__25340;
            i__22679_25329 = G__25341;
            continue;
          } else {
            var arg__9396__auto___25342 = cljs.core.first.call(null, seq__22676_25336__$1);
            a__9395__auto__.push(arg__9396__auto___25342);
            var G__25343 = cljs.core.next.call(null, seq__22676_25336__$1);
            var G__25344 = null;
            var G__25345 = 0;
            var G__25346 = 0;
            seq__22676_25326 = G__25343;
            chunk__22677_25327 = G__25344;
            count__22678_25328 = G__25345;
            i__22679_25329 = G__25346;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.polygon.apply(null, a__9395__auto__);
  };
  var polygon = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__25347__i = 0, G__25347__a = new Array(arguments.length - 0);
      while (G__25347__i < G__25347__a.length) {
        G__25347__a[G__25347__i] = arguments[G__25347__i + 0];
        ++G__25347__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__25347__a, 0);
    }
    return polygon__delegate.call(this, args__9394__auto__);
  };
  polygon.cljs$lang$maxFixedArity = 0;
  polygon.cljs$lang$applyTo = function(arglist__25348) {
    var args__9394__auto__ = cljs.core.seq(arglist__25348);
    return polygon__delegate(args__9394__auto__);
  };
  polygon.cljs$core$IFn$_invoke$arity$variadic = polygon__delegate;
  return polygon;
}();
quiescent.dom.polyline = function() {
  var polyline__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22684_25349 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22685_25350 = null;
    var count__22686_25351 = 0;
    var i__22687_25352 = 0;
    while (true) {
      if (i__22687_25352 < count__22686_25351) {
        var arg__9396__auto___25353 = cljs.core._nth.call(null, chunk__22685_25350, i__22687_25352);
        a__9395__auto__.push(arg__9396__auto___25353);
        var G__25354 = seq__22684_25349;
        var G__25355 = chunk__22685_25350;
        var G__25356 = count__22686_25351;
        var G__25357 = i__22687_25352 + 1;
        seq__22684_25349 = G__25354;
        chunk__22685_25350 = G__25355;
        count__22686_25351 = G__25356;
        i__22687_25352 = G__25357;
        continue;
      } else {
        var temp__4126__auto___25358 = cljs.core.seq.call(null, seq__22684_25349);
        if (temp__4126__auto___25358) {
          var seq__22684_25359__$1 = temp__4126__auto___25358;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22684_25359__$1)) {
            var c__4616__auto___25360 = cljs.core.chunk_first.call(null, seq__22684_25359__$1);
            var G__25361 = cljs.core.chunk_rest.call(null, seq__22684_25359__$1);
            var G__25362 = c__4616__auto___25360;
            var G__25363 = cljs.core.count.call(null, c__4616__auto___25360);
            var G__25364 = 0;
            seq__22684_25349 = G__25361;
            chunk__22685_25350 = G__25362;
            count__22686_25351 = G__25363;
            i__22687_25352 = G__25364;
            continue;
          } else {
            var arg__9396__auto___25365 = cljs.core.first.call(null, seq__22684_25359__$1);
            a__9395__auto__.push(arg__9396__auto___25365);
            var G__25366 = cljs.core.next.call(null, seq__22684_25359__$1);
            var G__25367 = null;
            var G__25368 = 0;
            var G__25369 = 0;
            seq__22684_25349 = G__25366;
            chunk__22685_25350 = G__25367;
            count__22686_25351 = G__25368;
            i__22687_25352 = G__25369;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.polyline.apply(null, a__9395__auto__);
  };
  var polyline = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__25370__i = 0, G__25370__a = new Array(arguments.length - 0);
      while (G__25370__i < G__25370__a.length) {
        G__25370__a[G__25370__i] = arguments[G__25370__i + 0];
        ++G__25370__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__25370__a, 0);
    }
    return polyline__delegate.call(this, args__9394__auto__);
  };
  polyline.cljs$lang$maxFixedArity = 0;
  polyline.cljs$lang$applyTo = function(arglist__25371) {
    var args__9394__auto__ = cljs.core.seq(arglist__25371);
    return polyline__delegate(args__9394__auto__);
  };
  polyline.cljs$core$IFn$_invoke$arity$variadic = polyline__delegate;
  return polyline;
}();
quiescent.dom.rect = function() {
  var rect__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22692_25372 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22693_25373 = null;
    var count__22694_25374 = 0;
    var i__22695_25375 = 0;
    while (true) {
      if (i__22695_25375 < count__22694_25374) {
        var arg__9396__auto___25376 = cljs.core._nth.call(null, chunk__22693_25373, i__22695_25375);
        a__9395__auto__.push(arg__9396__auto___25376);
        var G__25377 = seq__22692_25372;
        var G__25378 = chunk__22693_25373;
        var G__25379 = count__22694_25374;
        var G__25380 = i__22695_25375 + 1;
        seq__22692_25372 = G__25377;
        chunk__22693_25373 = G__25378;
        count__22694_25374 = G__25379;
        i__22695_25375 = G__25380;
        continue;
      } else {
        var temp__4126__auto___25381 = cljs.core.seq.call(null, seq__22692_25372);
        if (temp__4126__auto___25381) {
          var seq__22692_25382__$1 = temp__4126__auto___25381;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22692_25382__$1)) {
            var c__4616__auto___25383 = cljs.core.chunk_first.call(null, seq__22692_25382__$1);
            var G__25384 = cljs.core.chunk_rest.call(null, seq__22692_25382__$1);
            var G__25385 = c__4616__auto___25383;
            var G__25386 = cljs.core.count.call(null, c__4616__auto___25383);
            var G__25387 = 0;
            seq__22692_25372 = G__25384;
            chunk__22693_25373 = G__25385;
            count__22694_25374 = G__25386;
            i__22695_25375 = G__25387;
            continue;
          } else {
            var arg__9396__auto___25388 = cljs.core.first.call(null, seq__22692_25382__$1);
            a__9395__auto__.push(arg__9396__auto___25388);
            var G__25389 = cljs.core.next.call(null, seq__22692_25382__$1);
            var G__25390 = null;
            var G__25391 = 0;
            var G__25392 = 0;
            seq__22692_25372 = G__25389;
            chunk__22693_25373 = G__25390;
            count__22694_25374 = G__25391;
            i__22695_25375 = G__25392;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.rect.apply(null, a__9395__auto__);
  };
  var rect = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__25393__i = 0, G__25393__a = new Array(arguments.length - 0);
      while (G__25393__i < G__25393__a.length) {
        G__25393__a[G__25393__i] = arguments[G__25393__i + 0];
        ++G__25393__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__25393__a, 0);
    }
    return rect__delegate.call(this, args__9394__auto__);
  };
  rect.cljs$lang$maxFixedArity = 0;
  rect.cljs$lang$applyTo = function(arglist__25394) {
    var args__9394__auto__ = cljs.core.seq(arglist__25394);
    return rect__delegate(args__9394__auto__);
  };
  rect.cljs$core$IFn$_invoke$arity$variadic = rect__delegate;
  return rect;
}();
quiescent.dom.svg = function() {
  var svg__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22700_25395 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22701_25396 = null;
    var count__22702_25397 = 0;
    var i__22703_25398 = 0;
    while (true) {
      if (i__22703_25398 < count__22702_25397) {
        var arg__9396__auto___25399 = cljs.core._nth.call(null, chunk__22701_25396, i__22703_25398);
        a__9395__auto__.push(arg__9396__auto___25399);
        var G__25400 = seq__22700_25395;
        var G__25401 = chunk__22701_25396;
        var G__25402 = count__22702_25397;
        var G__25403 = i__22703_25398 + 1;
        seq__22700_25395 = G__25400;
        chunk__22701_25396 = G__25401;
        count__22702_25397 = G__25402;
        i__22703_25398 = G__25403;
        continue;
      } else {
        var temp__4126__auto___25404 = cljs.core.seq.call(null, seq__22700_25395);
        if (temp__4126__auto___25404) {
          var seq__22700_25405__$1 = temp__4126__auto___25404;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22700_25405__$1)) {
            var c__4616__auto___25406 = cljs.core.chunk_first.call(null, seq__22700_25405__$1);
            var G__25407 = cljs.core.chunk_rest.call(null, seq__22700_25405__$1);
            var G__25408 = c__4616__auto___25406;
            var G__25409 = cljs.core.count.call(null, c__4616__auto___25406);
            var G__25410 = 0;
            seq__22700_25395 = G__25407;
            chunk__22701_25396 = G__25408;
            count__22702_25397 = G__25409;
            i__22703_25398 = G__25410;
            continue;
          } else {
            var arg__9396__auto___25411 = cljs.core.first.call(null, seq__22700_25405__$1);
            a__9395__auto__.push(arg__9396__auto___25411);
            var G__25412 = cljs.core.next.call(null, seq__22700_25405__$1);
            var G__25413 = null;
            var G__25414 = 0;
            var G__25415 = 0;
            seq__22700_25395 = G__25412;
            chunk__22701_25396 = G__25413;
            count__22702_25397 = G__25414;
            i__22703_25398 = G__25415;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.svg.apply(null, a__9395__auto__);
  };
  var svg = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__25416__i = 0, G__25416__a = new Array(arguments.length - 0);
      while (G__25416__i < G__25416__a.length) {
        G__25416__a[G__25416__i] = arguments[G__25416__i + 0];
        ++G__25416__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__25416__a, 0);
    }
    return svg__delegate.call(this, args__9394__auto__);
  };
  svg.cljs$lang$maxFixedArity = 0;
  svg.cljs$lang$applyTo = function(arglist__25417) {
    var args__9394__auto__ = cljs.core.seq(arglist__25417);
    return svg__delegate(args__9394__auto__);
  };
  svg.cljs$core$IFn$_invoke$arity$variadic = svg__delegate;
  return svg;
}();
quiescent.dom.text = function() {
  var text__delegate = function(args__9394__auto__) {
    var a__9395__auto__ = [];
    a__9395__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__9394__auto__)));
    var seq__22012_25418 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__9394__auto__));
    var chunk__22013_25419 = null;
    var count__22014_25420 = 0;
    var i__22015_25421 = 0;
    while (true) {
      if (i__22015_25421 < count__22014_25420) {
        var arg__9396__auto___25422 = cljs.core._nth.call(null, chunk__22013_25419, i__22015_25421);
        a__9395__auto__.push(arg__9396__auto___25422);
        var G__25423 = seq__22012_25418;
        var G__25424 = chunk__22013_25419;
        var G__25425 = count__22014_25420;
        var G__25426 = i__22015_25421 + 1;
        seq__22012_25418 = G__25423;
        chunk__22013_25419 = G__25424;
        count__22014_25420 = G__25425;
        i__22015_25421 = G__25426;
        continue;
      } else {
        var temp__4126__auto___25427 = cljs.core.seq.call(null, seq__22012_25418);
        if (temp__4126__auto___25427) {
          var seq__22012_25428__$1 = temp__4126__auto___25427;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22012_25428__$1)) {
            var c__4616__auto___25429 = cljs.core.chunk_first.call(null, seq__22012_25428__$1);
            var G__25430 = cljs.core.chunk_rest.call(null, seq__22012_25428__$1);
            var G__25431 = c__4616__auto___25429;
            var G__25432 = cljs.core.count.call(null, c__4616__auto___25429);
            var G__25433 = 0;
            seq__22012_25418 = G__25430;
            chunk__22013_25419 = G__25431;
            count__22014_25420 = G__25432;
            i__22015_25421 = G__25433;
            continue;
          } else {
            var arg__9396__auto___25434 = cljs.core.first.call(null, seq__22012_25428__$1);
            a__9395__auto__.push(arg__9396__auto___25434);
            var G__25435 = cljs.core.next.call(null, seq__22012_25428__$1);
            var G__25436 = null;
            var G__25437 = 0;
            var G__25438 = 0;
            seq__22012_25418 = G__25435;
            chunk__22013_25419 = G__25436;
            count__22014_25420 = G__25437;
            i__22015_25421 = G__25438;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.text.apply(null, a__9395__auto__);
  };
  var text = function(var_args) {
    var args__9394__auto__ = null;
    if (arguments.length > 0) {
      var G__25439__i = 0, G__25439__a = new Array(arguments.length - 0);
      while (G__25439__i < G__25439__a.length) {
        G__25439__a[G__25439__i] = arguments[G__25439__i + 0];
        ++G__25439__i;
      }
      args__9394__auto__ = new cljs.core.IndexedSeq(G__25439__a, 0);
    }
    return text__delegate.call(this, args__9394__auto__);
  };
  text.cljs$lang$maxFixedArity = 0;
  text.cljs$lang$applyTo = function(arglist__25440) {
    var args__9394__auto__ = cljs.core.seq(arglist__25440);
    return text__delegate(args__9394__auto__);
  };
  text.cljs$core$IFn$_invoke$arity$variadic = text__delegate;
  return text;
}();
quiescent.dom.defined_tags = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "thead", "thead", -291875296), new cljs.core.Keyword(null, "path", "path", -188191168), new cljs.core.Keyword(null, "del", "del", 574975584), new cljs.core.Keyword(null, "fieldset", "fieldset", -1949770816), new cljs.core.Keyword(null, "q", "q", 689001697), new cljs.core.Keyword(null, "figure", "figure", -561394079), new cljs.core.Keyword(null, "aside", "aside", 1414397537), new cljs.core.Keyword(null, 
"figcaption", "figcaption", -1790122047), new cljs.core.Keyword(null, "video", "video", 156888130), new cljs.core.Keyword(null, "address", "address", 559499426), new cljs.core.Keyword(null, "caption", "caption", -855383902), new cljs.core.Keyword(null, "bdi", "bdi", -1323025886), new cljs.core.Keyword(null, "rp", "rp", 2006698083), new cljs.core.Keyword(null, "hr", "hr", 1377740067), new cljs.core.Keyword(null, "dd", "dd", -1340437629), new cljs.core.Keyword(null, "meta", "meta", 1499536964), new cljs.core.Keyword(null, 
"tbody", "tbody", -80678300), new cljs.core.Keyword(null, "table", "table", -564943036), new cljs.core.Keyword(null, "ul", "ul", -1349521403), new cljs.core.Keyword(null, "pre", "pre", 2118456869), new cljs.core.Keyword(null, "sup", "sup", -2039492346), new cljs.core.Keyword(null, "script", "script", -1304443801), new cljs.core.Keyword(null, "big", "big", 903550151), new cljs.core.Keyword(null, "button", "button", 1456579943), new cljs.core.Keyword(null, "dfn", "dfn", 241908167), new cljs.core.Keyword(null, 
"sub", "sub", -2093760025), new cljs.core.Keyword(null, "mark", "mark", -373816345), new cljs.core.Keyword(null, "wbr", "wbr", 228661800), new cljs.core.Keyword(null, "strong", "strong", 269529E3), new cljs.core.Keyword(null, "td", "td", 1479933353), new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.Keyword(null, "dt", "dt", -368444759), new cljs.core.Keyword(null, "section", "section", -300141526), new cljs.core.Keyword(null, "th", "th", -545608566), new cljs.core.Keyword(null, "time", 
"time", 1385887882), new cljs.core.Keyword(null, "optgroup", "optgroup", 1738282218), new cljs.core.Keyword(null, "iframe", "iframe", 884422026), new cljs.core.Keyword(null, "tr", "tr", -1424774646), new cljs.core.Keyword(null, "circle", "circle", 1903212362), new cljs.core.Keyword(null, "article", "article", -21685045), new cljs.core.Keyword(null, "legend", "legend", -1027192245), new cljs.core.Keyword(null, "em", "em", 707813035), new cljs.core.Keyword(null, "kbd", "kbd", 316156875), new cljs.core.Keyword(null, 
"abbr", "abbr", 2088591884), new cljs.core.Keyword(null, "source", "source", -433931539), new cljs.core.Keyword(null, "output", "output", -1105869043), new cljs.core.Keyword(null, "ins", "ins", -1021983570), new cljs.core.Keyword(null, "footer", "footer", 1606445390), new cljs.core.Keyword(null, "header", "header", 119441134), new cljs.core.Keyword(null, "datalist", "datalist", -1235043474), new cljs.core.Keyword(null, "tfoot", "tfoot", -701599890), new cljs.core.Keyword(null, "s", "s", 1705939918), 
new cljs.core.Keyword(null, "h5", "h5", -1829156625), new cljs.core.Keyword(null, "canvas", "canvas", -1798817489), new cljs.core.Keyword(null, "param", "param", 2013631823), new cljs.core.Keyword(null, "title", "title", 636505583), new cljs.core.Keyword(null, "small", "small", 2133478704), new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.Keyword(null, "textarea", "textarea", -650375824), new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.Keyword(null, "option", 
"option", 65132272), new cljs.core.Keyword(null, "summary", "summary", 380847952), new cljs.core.Keyword(null, "samp", "samp", 1506141136), new cljs.core.Keyword(null, "h4", "h4", 2004862993), new cljs.core.Keyword(null, "head", "head", -771383919), new cljs.core.Keyword(null, "g", "g", 1738089905), new cljs.core.Keyword(null, "ol", "ol", 932524051), new cljs.core.Keyword(null, "details", "details", 1956795411), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "var", 
"var", -769682797), new cljs.core.Keyword(null, "h6", "h6", 557293780), new cljs.core.Keyword(null, "link", "link", -1769163468), new cljs.core.Keyword(null, "col", "col", -1959363084), new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.Keyword(null, "rt", "rt", 623480692), new cljs.core.Keyword(null, "colgroup", "colgroup", 651118645), new cljs.core.Keyword(null, "meter", "meter", -187641611), new cljs.core.Keyword(null, "svg", "svg", 856789142), new cljs.core.Keyword(null, 
"code", "code", 1586293142), new cljs.core.Keyword(null, "bdo", "bdo", -2131148202), new cljs.core.Keyword(null, "b", "b", 1482224470), new cljs.core.Keyword(null, "noscript", "noscript", -704777289), new cljs.core.Keyword(null, "h2", "h2", -372662728), new cljs.core.Keyword(null, "area", "area", 472007256), new cljs.core.Keyword(null, "br", "br", 934104792), new cljs.core.Keyword(null, "form", "form", -1624062471), new cljs.core.Keyword(null, "audio", "audio", 1819127321), new cljs.core.Keyword(null, 
"input", "input", 556931961), new cljs.core.Keyword(null, "menuitem", "menuitem", 1004047353), new cljs.core.Keyword(null, "base", "base", 185279322), new cljs.core.Keyword(null, "h1", "h1", -1896887462), new cljs.core.Keyword(null, "progress", "progress", 244323547), new cljs.core.Keyword(null, "main", "main", -2117802661), new cljs.core.Keyword(null, "embed", "embed", -1354913349), new cljs.core.Keyword(null, "h3", "h3", 2067611163), new cljs.core.Keyword(null, "body", "body", -2049205669), new cljs.core.Keyword(null, 
"keygen", "keygen", -571693253), new cljs.core.Keyword(null, "polyline", "polyline", -1731551044), new cljs.core.Keyword(null, "cite", "cite", 1909439996), new cljs.core.Keyword(null, "rect", "rect", -108902628), new cljs.core.Keyword(null, "p", "p", 151049309), new cljs.core.Keyword(null, "nav", "nav", 719540477), new cljs.core.Keyword(null, "ruby", "ruby", 2000737661), new cljs.core.Keyword(null, "map", "map", 1371690461), new cljs.core.Keyword(null, "object", "object", 1474613949), new cljs.core.Keyword(null, 
"i", "i", -1386841315), new cljs.core.Keyword(null, "menu", "menu", 352255198), new cljs.core.Keyword(null, "blockquote", "blockquote", 372264190), new cljs.core.Keyword(null, "img", "img", 1442687358), new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.Keyword(null, "dl", "dl", -2140151713), new cljs.core.Keyword(null, "select", "select", 1147833503), new cljs.core.Keyword(null, "polygon", "polygon", 837053759), new cljs.core.Keyword(null, "html", "html", -998796897), new cljs.core.Keyword(null, 
"text", "text", -1790561697), new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.Keyword(null, "track", "track", 195787487), new cljs.core.Keyword(null, "data", "data", -232669377), new cljs.core.Keyword(null, "u", "u", -1156634785)], [quiescent.dom.thead, quiescent.dom.path, quiescent.dom.del, quiescent.dom.fieldset, quiescent.dom.q, quiescent.dom.figure, quiescent.dom.aside, quiescent.dom.figcaption, quiescent.dom.video, quiescent.dom.address, quiescent.dom.caption, quiescent.dom.bdi, 
quiescent.dom.rp, quiescent.dom.hr, quiescent.dom.dd, quiescent.dom.meta, quiescent.dom.tbody, quiescent.dom.table, quiescent.dom.ul, quiescent.dom.pre, quiescent.dom.sup, quiescent.dom.script, quiescent.dom.big, quiescent.dom.button, quiescent.dom.dfn, quiescent.dom.sub, quiescent.dom.mark, quiescent.dom.wbr, quiescent.dom.strong, quiescent.dom.td, quiescent.dom.li, quiescent.dom.dt, quiescent.dom.section, quiescent.dom.th, quiescent.dom.time, quiescent.dom.optgroup, quiescent.dom.iframe, quiescent.dom.tr, 
quiescent.dom.circle, quiescent.dom.article, quiescent.dom.legend, quiescent.dom.em, quiescent.dom.kbd, quiescent.dom.abbr, quiescent.dom.source, quiescent.dom.output, quiescent.dom.ins, quiescent.dom.footer, quiescent.dom.header, quiescent.dom.datalist, quiescent.dom.tfoot, quiescent.dom.s, quiescent.dom.h5, quiescent.dom.canvas, quiescent.dom.param, quiescent.dom.title, quiescent.dom.small, quiescent.dom.style, quiescent.dom.textarea, quiescent.dom.div, quiescent.dom.option, quiescent.dom.summary, 
quiescent.dom.samp, quiescent.dom.h4, quiescent.dom.head, quiescent.dom.g, quiescent.dom.ol, quiescent.dom.details, quiescent.dom.line, quiescent.dom.var$, quiescent.dom.h6, quiescent.dom.link, quiescent.dom.col, quiescent.dom.label, quiescent.dom.rt, quiescent.dom.colgroup, quiescent.dom.meter, quiescent.dom.svg, quiescent.dom.code, quiescent.dom.bdo, quiescent.dom.b, quiescent.dom.noscript, quiescent.dom.h2, quiescent.dom.area, quiescent.dom.br, quiescent.dom.form, quiescent.dom.audio, quiescent.dom.input, 
quiescent.dom.menuitem, quiescent.dom.base, quiescent.dom.h1, quiescent.dom.progress, quiescent.dom.main, quiescent.dom.embed, quiescent.dom.h3, quiescent.dom.body, quiescent.dom.keygen, quiescent.dom.polyline, quiescent.dom.cite, quiescent.dom.rect, quiescent.dom.p, quiescent.dom.nav, quiescent.dom.ruby, quiescent.dom.map, quiescent.dom.object, quiescent.dom.i, quiescent.dom.menu, quiescent.dom.blockquote, quiescent.dom.img, quiescent.dom.a, quiescent.dom.dl, quiescent.dom.select, quiescent.dom.polygon, 
quiescent.dom.html, quiescent.dom.text, quiescent.dom.span, quiescent.dom.track, quiescent.dom.data, quiescent.dom.u]);
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    var sb = new goog.string.StringBuffer;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var G__25443 = sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
        var G__25444 = cljs.core.next.call(null, coll__$1);
        sb = G__25443;
        coll__$1 = G__25444;
        continue;
      } else {
        return sb.toString();
      }
      break;
    }
  };
  var join__2 = function(separator, coll) {
    var sb = new goog.string.StringBuffer;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
        var coll__$2 = cljs.core.next.call(null, coll__$1);
        if (coll__$2 == null) {
        } else {
          sb.append(separator);
        }
        var G__25445 = sb;
        var G__25446 = coll__$2;
        sb = G__25445;
        coll__$1 = G__25446;
        continue;
      } else {
        return sb.toString();
      }
      break;
    }
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__25447 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__25447;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__25451 = cljs.core._EQ_;
    var expr__25452 = limit;
    if (cljs.core.truth_(pred__25451.call(null, 1, expr__25452))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__25451.call(null, 2, expr__25452))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__25454 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__25455 = limit__$1 - 1;
            var G__25456 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__25454;
            limit__$1 = G__25455;
            parts = G__25456;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__25457 = index - 1;
        index = G__25457;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___25458 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___25458)) {
        var replacement_25459 = temp__4124__auto___25458;
        buffer.append([cljs.core.str(replacement_25459)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__25460 = index + 1;
      index = G__25460;
      continue;
    }
    break;
  }
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj21639 = {};
  return obj21639;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3817__auto__ = reader;
    if (and__3817__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4473__auto__ = reader == null ? null : reader;
    return function() {
      var or__3829__auto__ = cljs.reader.read_char[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.reader.read_char["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3817__auto__ = reader;
    if (and__3817__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3817__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4473__auto__ = reader == null ? null : reader;
    return function() {
      var or__3829__auto__ = cljs.reader.unread[goog.typeOf(x__4473__auto__)];
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.reader.unread["_"];
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write.call(null, writer__4417__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3829__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3829__auto__)) {
    return or__3829__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      var G__21640__i = 0, G__21640__a = new Array(arguments.length - 1);
      while (G__21640__i < G__21640__a.length) {
        G__21640__a[G__21640__i] = arguments[G__21640__i + 1];
        ++G__21640__i;
      }
      msg = new cljs.core.IndexedSeq(G__21640__a, 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__21641) {
    var rdr = cljs.core.first(arglist__21641);
    var msg = cljs.core.rest(arglist__21641);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3817__auto__ = !(ch === "#");
  if (and__3817__auto__) {
    var and__3817__auto____$1 = !(ch === "'");
    if (and__3817__auto____$1) {
      var and__3817__auto____$2 = !(ch === ":");
      if (and__3817__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3817__auto____$2;
      }
    } else {
      return and__3817__auto____$1;
    }
  } else {
    return and__3817__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__21642 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__21643 = cljs.reader.read_char.call(null, rdr);
      sb = G__21642;
      ch = G__21643;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__21644 = cljs.reader.read_char.call(null, rdr);
      ch = G__21644;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__21645 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__21645;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__21646 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__21646;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmatched delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3829__auto__ = ch == null;
      if (or__3829__auto__) {
        return or__3829__auto__;
      } else {
        var or__3829__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3829__auto____$1) {
          return or__3829__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3829__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3829__auto__)) {
        return or__3829__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__21647 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__21648 = cljs.reader.read_char.call(null, reader);
      buffer = G__21647;
      ch = G__21648;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__21649 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__21650 = cljs.reader.read_char.call(null, reader);
        buffer = G__21649;
        ch = G__21650;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__21651 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__21652 = cljs.reader.read_char.call(null, reader);
          buffer = G__21651;
          ch = G__21652;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__21657 = function() {
            var G__21655 = buffer;
            G__21655.append(nch);
            return G__21655;
          }();
          var G__21658 = cljs.reader.read_char.call(null, reader);
          buffer = G__21657;
          ch = G__21658;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__21659 = function() {
            var G__21656 = buffer;
            G__21656.append(ch);
            return G__21656;
          }();
          var G__21660 = cljs.reader.read_char.call(null, reader);
          buffer = G__21659;
          ch = G__21660;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (t === "/") {
          return new cljs.core.Symbol(null, "/", "/", -1371932971, null);
        } else {
          return not_found;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(function() {
    var and__3817__auto__ = goog.string.contains(token, "/");
    if (cljs.core.truth_(and__3817__auto__)) {
      return!(token.length === 1);
    } else {
      return and__3817__auto__;
    }
  }())) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__21662 = o;
    if (G__21662) {
      var bit__4510__auto__ = G__21662.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4510__auto__ || G__21662.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__21662.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__21662);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__21662);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__21663 = reader;
        var G__21664 = eof_is_error;
        var G__21665 = sentinel;
        var G__21666 = is_recursive;
        reader = G__21663;
        eof_is_error = G__21664;
        sentinel = G__21665;
        is_recursive = G__21666;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__21667 = cljs.reader.read_comment.call(null, reader, ch);
          var G__21668 = eof_is_error;
          var G__21669 = sentinel;
          var G__21670 = is_recursive;
          reader = G__21667;
          eof_is_error = G__21668;
          sentinel = G__21669;
          is_recursive = G__21670;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__21671 = reader;
            var G__21672 = eof_is_error;
            var G__21673 = sentinel;
            var G__21674 = is_recursive;
            reader = G__21671;
            eof_is_error = G__21672;
            sentinel = G__21673;
            is_recursive = G__21674;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__21675 = b.append("0");
          b = G__21675;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__21677 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__21677, 0, null);
  var years = cljs.core.nth.call(null, vec__21677, 1, null);
  var months = cljs.core.nth.call(null, vec__21677, 2, null);
  var days = cljs.core.nth.call(null, vec__21677, 3, null);
  var hours = cljs.core.nth.call(null, vec__21677, 4, null);
  var minutes = cljs.core.nth.call(null, vec__21677, 5, null);
  var seconds = cljs.core.nth.call(null, vec__21677, 6, null);
  var fraction = cljs.core.nth.call(null, vec__21677, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__21677, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__21677, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__21677, 10, null);
  var v = vec__21677;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3829__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3829__auto__)) {
        return or__3829__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3829__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3829__auto__)) {
        return or__3829__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3829__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3829__auto__)) {
        return or__3829__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3829__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3829__auto__)) {
        return or__3829__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3829__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3829__auto__)) {
        return or__3829__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3829__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3829__auto__)) {
        return or__3829__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3829__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3829__auto__)) {
        return or__3829__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3829__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3829__auto__)) {
        return or__3829__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__21679 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__21679, 0, null);
    var months = cljs.core.nth.call(null, vec__21679, 1, null);
    var days = cljs.core.nth.call(null, vec__21679, 2, null);
    var hours = cljs.core.nth.call(null, vec__21679, 3, null);
    var minutes = cljs.core.nth.call(null, vec__21679, 4, null);
    var seconds = cljs.core.nth.call(null, vec__21679, 5, null);
    var ms = cljs.core.nth.call(null, vec__21679, 6, null);
    var offset = cljs.core.nth.call(null, vec__21679, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__21692_21704 = cljs.core.seq.call(null, form);
    var chunk__21693_21705 = null;
    var count__21694_21706 = 0;
    var i__21695_21707 = 0;
    while (true) {
      if (i__21695_21707 < count__21694_21706) {
        var x_21708 = cljs.core._nth.call(null, chunk__21693_21705, i__21695_21707);
        arr.push(x_21708);
        var G__21709 = seq__21692_21704;
        var G__21710 = chunk__21693_21705;
        var G__21711 = count__21694_21706;
        var G__21712 = i__21695_21707 + 1;
        seq__21692_21704 = G__21709;
        chunk__21693_21705 = G__21710;
        count__21694_21706 = G__21711;
        i__21695_21707 = G__21712;
        continue;
      } else {
        var temp__4126__auto___21713 = cljs.core.seq.call(null, seq__21692_21704);
        if (temp__4126__auto___21713) {
          var seq__21692_21714__$1 = temp__4126__auto___21713;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__21692_21714__$1)) {
            var c__4616__auto___21715 = cljs.core.chunk_first.call(null, seq__21692_21714__$1);
            var G__21716 = cljs.core.chunk_rest.call(null, seq__21692_21714__$1);
            var G__21717 = c__4616__auto___21715;
            var G__21718 = cljs.core.count.call(null, c__4616__auto___21715);
            var G__21719 = 0;
            seq__21692_21704 = G__21716;
            chunk__21693_21705 = G__21717;
            count__21694_21706 = G__21718;
            i__21695_21707 = G__21719;
            continue;
          } else {
            var x_21720 = cljs.core.first.call(null, seq__21692_21714__$1);
            arr.push(x_21720);
            var G__21721 = cljs.core.next.call(null, seq__21692_21714__$1);
            var G__21722 = null;
            var G__21723 = 0;
            var G__21724 = 0;
            seq__21692_21704 = G__21721;
            chunk__21693_21705 = G__21722;
            count__21694_21706 = G__21723;
            i__21695_21707 = G__21724;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj21697 = {};
        return obj21697;
      }();
      var seq__21698_21725 = cljs.core.seq.call(null, form);
      var chunk__21699_21726 = null;
      var count__21700_21727 = 0;
      var i__21701_21728 = 0;
      while (true) {
        if (i__21701_21728 < count__21700_21727) {
          var vec__21702_21729 = cljs.core._nth.call(null, chunk__21699_21726, i__21701_21728);
          var k_21730 = cljs.core.nth.call(null, vec__21702_21729, 0, null);
          var v_21731 = cljs.core.nth.call(null, vec__21702_21729, 1, null);
          obj[cljs.core.name.call(null, k_21730)] = v_21731;
          var G__21732 = seq__21698_21725;
          var G__21733 = chunk__21699_21726;
          var G__21734 = count__21700_21727;
          var G__21735 = i__21701_21728 + 1;
          seq__21698_21725 = G__21732;
          chunk__21699_21726 = G__21733;
          count__21700_21727 = G__21734;
          i__21701_21728 = G__21735;
          continue;
        } else {
          var temp__4126__auto___21736 = cljs.core.seq.call(null, seq__21698_21725);
          if (temp__4126__auto___21736) {
            var seq__21698_21737__$1 = temp__4126__auto___21736;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__21698_21737__$1)) {
              var c__4616__auto___21738 = cljs.core.chunk_first.call(null, seq__21698_21737__$1);
              var G__21739 = cljs.core.chunk_rest.call(null, seq__21698_21737__$1);
              var G__21740 = c__4616__auto___21738;
              var G__21741 = cljs.core.count.call(null, c__4616__auto___21738);
              var G__21742 = 0;
              seq__21698_21725 = G__21739;
              chunk__21699_21726 = G__21740;
              count__21700_21727 = G__21741;
              i__21701_21728 = G__21742;
              continue;
            } else {
              var vec__21703_21743 = cljs.core.first.call(null, seq__21698_21737__$1);
              var k_21744 = cljs.core.nth.call(null, vec__21703_21743, 0, null);
              var v_21745 = cljs.core.nth.call(null, vec__21703_21743, 1, null);
              obj[cljs.core.name.call(null, k_21744)] = v_21745;
              var G__21746 = cljs.core.next.call(null, seq__21698_21737__$1);
              var G__21747 = null;
              var G__21748 = 0;
              var G__21749 = 0;
              seq__21698_21725 = G__21746;
              chunk__21699_21726 = G__21747;
              count__21700_21727 = G__21748;
              i__21701_21728 = G__21749;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function walk(inner, outer, form) {
  if (cljs.core.seq_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)));
  } else {
    if (cljs.core.coll_QMARK_.call(null, form)) {
      return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)));
    } else {
      return outer.call(null, form);
    }
  }
};
clojure.walk.postwalk = function postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, postwalk, f), f, form);
};
clojure.walk.prewalk = function prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, prewalk, f), cljs.core.identity, f.call(null, form));
};
clojure.walk.keywordize_keys = function keywordize_keys(m) {
  var f = function(p__25465) {
    var vec__25466 = p__25465;
    var k = cljs.core.nth.call(null, vec__25466, 0, null);
    var v = cljs.core.nth.call(null, vec__25466, 1, null);
    if (typeof k === "string") {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.stringify_keys = function stringify_keys(m) {
  var f = function(p__25469) {
    var vec__25470 = p__25469;
    var k = cljs.core.nth.call(null, vec__25470, 0, null);
    var v = cljs.core.nth.call(null, vec__25470, 1, null);
    if (k instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.name.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.prewalk_replace = function prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
clojure.walk.postwalk_replace = function postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
goog.provide("speicher.render");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.walk");
goog.require("quiescent.dom");
goog.require("quiescent");
goog.require("cljs.reader");
goog.require("cljs.core.async");
speicher.render.toArray = function toArray(js_col) {
  return cljs.core.js__GT_clj.call(null, cljs.core.clj__GT_js.call(null, cljs.core.PersistentVector.EMPTY).slice.call(js_col));
};
speicher.render.serialize_form = function serialize_form(e) {
  return clojure.walk.keywordize_keys.call(null, cljs.core.reduce.call(null, function(p1__21225_SHARP_, p2__21224_SHARP_) {
    var k = p2__21224_SHARP_.name;
    var v = p2__21224_SHARP_.value;
    return cljs.core.assoc.call(null, p1__21225_SHARP_, k, v);
  }, cljs.core.PersistentArrayMap.EMPTY, cljs.core.filter.call(null, function(p1__21223_SHARP_) {
    return p1__21223_SHARP_.checked;
  }, speicher.render.toArray.call(null, e.target.elements))));
};
speicher.render.Nav = quiescent.component.call(null, function(title) {
  return quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "navbar"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "navbar-inner"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "left"], null), quiescent.dom.a.call(null, 
  new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "href", "href", -793805698), "#", new cljs.core.Keyword(null, "className", "className", -1983287057), "back link"], null), quiescent.dom.i.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "icon icon-back"], null)), quiescent.dom.span.call(null, null, "Back"))), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
  "className", "className", -1983287057), "center", new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "left", "left", -399115937), "22px"], null)], null), title), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "right"], null))));
});
speicher.render.Wordrow = quiescent.component.call(null, function(row, input_chan) {
  return quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "accordion-item"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "accordion-item-toggle"], null), quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "href", "href", -793805698), "#", new cljs.core.Keyword(null, 
  "className", "className", -1983287057), "item-content item-link"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "item-inner"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "item-title"], null), cljs.core.first.call(null, row))))), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "accordion-item-content"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "content-block"], null), cljs.core.second.call(null, row))));
});
speicher.render.WordList = quiescent.component.call(null, function(state, input_chan) {
  return quiescent.dom.div.call(null, null, speicher.render.Nav.call(null, "Review"), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "page-content"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "accordion-list list-block"], null), cljs.core.apply.call(null, quiescent.dom.ul, null, cljs.core.map.call(null, 
  function(p1__21226_SHARP_) {
    return speicher.render.Wordrow.call(null, p1__21226_SHARP_, input_chan);
  }, (new cljs.core.Keyword(null, "words", "words", 1924933001)).cljs$core$IFn$_invoke$arity$1(state))))));
});
speicher.render.handle_search_submit = function handle_search_submit(input_chan, e) {
  var term_21277 = document.getElementById("term").value;
  var c__6120__auto___21278 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6120__auto___21278, term_21277) {
    return function() {
      var f__6121__auto__ = function() {
        var switch__6064__auto__ = function(c__6120__auto___21278, term_21277) {
          return function(state_21264) {
            var state_val_21265 = state_21264[1];
            if (state_val_21265 === 5) {
              var inst_21259 = state_21264[2];
              var state_21264__$1 = state_21264;
              var statearr_21266_21279 = state_21264__$1;
              statearr_21266_21279[2] = inst_21259;
              statearr_21266_21279[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_21265 === 4) {
                var inst_21262 = state_21264[2];
                var state_21264__$1 = state_21264;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21264__$1, inst_21262);
              } else {
                if (state_val_21265 === 3) {
                  var state_21264__$1 = state_21264;
                  var statearr_21267_21280 = state_21264__$1;
                  statearr_21267_21280[2] = null;
                  statearr_21267_21280[1] = 4;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21265 === 2) {
                    var inst_21255 = cljs.core.PersistentVector.EMPTY_NODE;
                    var inst_21256 = [new cljs.core.Keyword(null, "search-term", "search-term", 356193544), term_21277];
                    var inst_21257 = new cljs.core.PersistentVector(null, 2, 5, inst_21255, inst_21256, null);
                    var state_21264__$1 = state_21264;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21264__$1, 5, input_chan, inst_21257);
                  } else {
                    if (state_val_21265 === 1) {
                      var inst_21252 = cljs.core.count.call(null, term_21277);
                      var inst_21253 = 2 < inst_21252;
                      var state_21264__$1 = state_21264;
                      if (cljs.core.truth_(inst_21253)) {
                        var statearr_21268_21281 = state_21264__$1;
                        statearr_21268_21281[1] = 2;
                      } else {
                        var statearr_21269_21282 = state_21264__$1;
                        statearr_21269_21282[1] = 3;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__6120__auto___21278, term_21277);
        return function(switch__6064__auto__, c__6120__auto___21278, term_21277) {
          return function() {
            var state_machine__6065__auto__ = null;
            var state_machine__6065__auto____0 = function() {
              var statearr_21273 = [null, null, null, null, null, null, null];
              statearr_21273[0] = state_machine__6065__auto__;
              statearr_21273[1] = 1;
              return statearr_21273;
            };
            var state_machine__6065__auto____1 = function(state_21264) {
              while (true) {
                var ret_value__6066__auto__ = function() {
                  try {
                    while (true) {
                      var result__6067__auto__ = switch__6064__auto__.call(null, state_21264);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6067__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6067__auto__;
                      }
                      break;
                    }
                  } catch (e21274) {
                    if (e21274 instanceof Object) {
                      var ex__6068__auto__ = e21274;
                      var statearr_21275_21283 = state_21264;
                      statearr_21275_21283[5] = ex__6068__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21264);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e21274;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6066__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__21284 = state_21264;
                  state_21264 = G__21284;
                  continue;
                } else {
                  return ret_value__6066__auto__;
                }
                break;
              }
            };
            state_machine__6065__auto__ = function(state_21264) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6065__auto____0.call(this);
                case 1:
                  return state_machine__6065__auto____1.call(this, state_21264);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6065__auto____0;
            state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6065__auto____1;
            return state_machine__6065__auto__;
          }();
        }(switch__6064__auto__, c__6120__auto___21278, term_21277);
      }();
      var state__6122__auto__ = function() {
        var statearr_21276 = f__6121__auto__.call(null);
        statearr_21276[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6120__auto___21278;
        return statearr_21276;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6122__auto__);
    };
  }(c__6120__auto___21278, term_21277));
  return false;
};
speicher.render.handle_new_word_submit = function handle_new_word_submit(input_chan, e) {
  var form = speicher.render.serialize_form.call(null, e);
  var c__6120__auto___21315 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6120__auto___21315, form) {
    return function() {
      var f__6121__auto__ = function() {
        var switch__6064__auto__ = function(c__6120__auto___21315, form) {
          return function(state_21306) {
            var state_val_21307 = state_21306[1];
            if (state_val_21307 === 2) {
              var inst_21304 = state_21306[2];
              var state_21306__$1 = state_21306;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21306__$1, inst_21304);
            } else {
              if (state_val_21307 === 1) {
                var inst_21300 = cljs.core.PersistentVector.EMPTY_NODE;
                var inst_21301 = [new cljs.core.Keyword(null, "submit-selected", "submit-selected", -548982554), form];
                var inst_21302 = new cljs.core.PersistentVector(null, 2, 5, inst_21300, inst_21301, null);
                var state_21306__$1 = state_21306;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21306__$1, 2, input_chan, inst_21302);
              } else {
                return null;
              }
            }
          };
        }(c__6120__auto___21315, form);
        return function(switch__6064__auto__, c__6120__auto___21315, form) {
          return function() {
            var state_machine__6065__auto__ = null;
            var state_machine__6065__auto____0 = function() {
              var statearr_21311 = [null, null, null, null, null, null, null];
              statearr_21311[0] = state_machine__6065__auto__;
              statearr_21311[1] = 1;
              return statearr_21311;
            };
            var state_machine__6065__auto____1 = function(state_21306) {
              while (true) {
                var ret_value__6066__auto__ = function() {
                  try {
                    while (true) {
                      var result__6067__auto__ = switch__6064__auto__.call(null, state_21306);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6067__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6067__auto__;
                      }
                      break;
                    }
                  } catch (e21312) {
                    if (e21312 instanceof Object) {
                      var ex__6068__auto__ = e21312;
                      var statearr_21313_21316 = state_21306;
                      statearr_21313_21316[5] = ex__6068__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21306);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e21312;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6066__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__21317 = state_21306;
                  state_21306 = G__21317;
                  continue;
                } else {
                  return ret_value__6066__auto__;
                }
                break;
              }
            };
            state_machine__6065__auto__ = function(state_21306) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6065__auto____0.call(this);
                case 1:
                  return state_machine__6065__auto____1.call(this, state_21306);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6065__auto____0;
            state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6065__auto____1;
            return state_machine__6065__auto__;
          }();
        }(switch__6064__auto__, c__6120__auto___21315, form);
      }();
      var state__6122__auto__ = function() {
        var statearr_21314 = f__6121__auto__.call(null);
        statearr_21314[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6120__auto___21315;
        return statearr_21314;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6122__auto__);
    };
  }(c__6120__auto___21315, form));
  return false;
};
speicher.render.handle_enter_word_submit = function handle_enter_word_submit(input_chan, e) {
  var ger = document.getElementById("ger");
  var eng = document.getElementById("eng");
  var g = ger.value;
  var e__$1 = eng.value;
  if (cljs.core.truth_(function() {
    var or__3829__auto__ = clojure.string.blank_QMARK_.call(null, g);
    if (cljs.core.truth_(or__3829__auto__)) {
      return or__3829__auto__;
    } else {
      return clojure.string.blank_QMARK_.call(null, e__$1);
    }
  }())) {
  } else {
    var c__6120__auto___21354 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6120__auto___21354, ger, eng, g, e__$1) {
      return function() {
        var f__6121__auto__ = function() {
          var switch__6064__auto__ = function(c__6120__auto___21354, ger, eng, g, e__$1) {
            return function(state_21345) {
              var state_val_21346 = state_21345[1];
              if (state_val_21346 === 2) {
                var inst_21343 = state_21345[2];
                var state_21345__$1 = state_21345;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21345__$1, inst_21343);
              } else {
                if (state_val_21346 === 1) {
                  var inst_21336 = cljs.core.PersistentVector.EMPTY_NODE;
                  var inst_21337 = cljs.core.PersistentVector.EMPTY_NODE;
                  var inst_21338 = [g, e__$1];
                  var inst_21339 = new cljs.core.PersistentVector(null, 2, 5, inst_21337, inst_21338, null);
                  var inst_21340 = [new cljs.core.Keyword(null, "submit-entered", "submit-entered", -1080659330), inst_21339];
                  var inst_21341 = new cljs.core.PersistentVector(null, 2, 5, inst_21336, inst_21340, null);
                  var state_21345__$1 = state_21345;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21345__$1, 2, input_chan, inst_21341);
                } else {
                  return null;
                }
              }
            };
          }(c__6120__auto___21354, ger, eng, g, e__$1);
          return function(switch__6064__auto__, c__6120__auto___21354, ger, eng, g, e__$1) {
            return function() {
              var state_machine__6065__auto__ = null;
              var state_machine__6065__auto____0 = function() {
                var statearr_21350 = [null, null, null, null, null, null, null];
                statearr_21350[0] = state_machine__6065__auto__;
                statearr_21350[1] = 1;
                return statearr_21350;
              };
              var state_machine__6065__auto____1 = function(state_21345) {
                while (true) {
                  var ret_value__6066__auto__ = function() {
                    try {
                      while (true) {
                        var result__6067__auto__ = switch__6064__auto__.call(null, state_21345);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6067__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6067__auto__;
                        }
                        break;
                      }
                    } catch (e21351) {
                      if (e21351 instanceof Object) {
                        var ex__6068__auto__ = e21351;
                        var statearr_21352_21355 = state_21345;
                        statearr_21352_21355[5] = ex__6068__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21345);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e21351;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6066__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__21356 = state_21345;
                    state_21345 = G__21356;
                    continue;
                  } else {
                    return ret_value__6066__auto__;
                  }
                  break;
                }
              };
              state_machine__6065__auto__ = function(state_21345) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6065__auto____0.call(this);
                  case 1:
                    return state_machine__6065__auto____1.call(this, state_21345);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6065__auto____0;
              state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6065__auto____1;
              return state_machine__6065__auto__;
            }();
          }(switch__6064__auto__, c__6120__auto___21354, ger, eng, g, e__$1);
        }();
        var state__6122__auto__ = function() {
          var statearr_21353 = f__6121__auto__.call(null);
          statearr_21353[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6120__auto___21354;
          return statearr_21353;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6122__auto__);
      };
    }(c__6120__auto___21354, ger, eng, g, e__$1));
    ger.value = "";
    eng.value = "";
  }
  return false;
};
speicher.render.format_entry = function format_entry(entry) {
  var pair = clojure.string.split.call(null, entry, / :: /);
  return cljs.core.map.call(null, function(pair) {
    return function(g, e) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [g, e], null);
    };
  }(pair), clojure.string.split.call(null, cljs.core.first.call(null, pair), / \|/), clojure.string.split.call(null, cljs.core.second.call(null, pair), / \|/));
};
speicher.render.format_entries = function format_entries(dict) {
  return cljs.core.map.call(null, speicher.render.format_entry, dict);
};
speicher.render.init_slider = function init_slider(state) {
  var app = (new cljs.core.Keyword(null, "f7", "f7", 356150168)).cljs$core$IFn$_invoke$arity$1(state);
  return app.swiper(".swiper-container", {"prevButton":".swiper-prev-button", "nextButton":".swiper-next-button"});
};
speicher.render.Slides = quiescent.component.call(null, function(ch, idx, word) {
  if (cljs.core.even_QMARK_.call(null, idx)) {
    return quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "swiper-slide"], null), quiescent.dom.span.call(null, null, word));
  } else {
    return quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "swiper-slide"], null), quiescent.dom.span.call(null, null, word), quiescent.dom.br.call(null, null), quiescent.dom.button.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "className", "className", -1983287057), "button button-big  color-green", new cljs.core.Keyword(null, "onClick", "onClick", -1991238530), function() {
      var c__6120__auto__ = cljs.core.async.chan.call(null, 1);
      cljs.core.async.impl.dispatch.run.call(null, function(c__6120__auto__) {
        return function() {
          var f__6121__auto__ = function() {
            var switch__6064__auto__ = function(c__6120__auto__) {
              return function(state_21364) {
                var state_val_21365 = state_21364[1];
                if (state_val_21365 === 2) {
                  var inst_21362 = state_21364[2];
                  var state_21364__$1 = state_21364;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21364__$1, inst_21362);
                } else {
                  if (state_val_21365 === 1) {
                    var inst_21357 = cljs.core.PersistentVector.EMPTY_NODE;
                    var inst_21358 = cljs.core.quot.call(null, idx, 2);
                    var inst_21359 = [new cljs.core.Keyword(null, "correct", "correct", 984806334), inst_21358];
                    var inst_21360 = new cljs.core.PersistentVector(null, 2, 5, inst_21357, inst_21359, null);
                    var state_21364__$1 = state_21364;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21364__$1, 2, ch, inst_21360);
                  } else {
                    return null;
                  }
                }
              };
            }(c__6120__auto__);
            return function(switch__6064__auto__, c__6120__auto__) {
              return function() {
                var state_machine__6065__auto__ = null;
                var state_machine__6065__auto____0 = function() {
                  var statearr_21369 = [null, null, null, null, null, null, null];
                  statearr_21369[0] = state_machine__6065__auto__;
                  statearr_21369[1] = 1;
                  return statearr_21369;
                };
                var state_machine__6065__auto____1 = function(state_21364) {
                  while (true) {
                    var ret_value__6066__auto__ = function() {
                      try {
                        while (true) {
                          var result__6067__auto__ = switch__6064__auto__.call(null, state_21364);
                          if (cljs.core.keyword_identical_QMARK_.call(null, result__6067__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                            continue;
                          } else {
                            return result__6067__auto__;
                          }
                          break;
                        }
                      } catch (e21370) {
                        if (e21370 instanceof Object) {
                          var ex__6068__auto__ = e21370;
                          var statearr_21371_21373 = state_21364;
                          statearr_21371_21373[5] = ex__6068__auto__;
                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21364);
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          throw e21370;
                        }
                      }
                    }();
                    if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6066__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                      var G__21374 = state_21364;
                      state_21364 = G__21374;
                      continue;
                    } else {
                      return ret_value__6066__auto__;
                    }
                    break;
                  }
                };
                state_machine__6065__auto__ = function(state_21364) {
                  switch(arguments.length) {
                    case 0:
                      return state_machine__6065__auto____0.call(this);
                    case 1:
                      return state_machine__6065__auto____1.call(this, state_21364);
                  }
                  throw new Error("Invalid arity: " + arguments.length);
                };
                state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6065__auto____0;
                state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6065__auto____1;
                return state_machine__6065__auto__;
              }();
            }(switch__6064__auto__, c__6120__auto__);
          }();
          var state__6122__auto__ = function() {
            var statearr_21372 = f__6121__auto__.call(null);
            statearr_21372[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6120__auto__;
            return statearr_21372;
          }();
          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6122__auto__);
        };
      }(c__6120__auto__));
      return c__6120__auto__;
    }], null), "I remember"));
  }
});
speicher.render.ReviewPage = quiescent.component.call(null, function(state) {
  return cljs.core.apply.call(null, quiescent.dom.div, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "swiper-wrapper"], null), cljs.core.map_indexed.call(null, function(idx, word) {
    return speicher.render.Slides.call(null, (new cljs.core.Keyword(null, "input-chan", "input-chan", -1487255360)).cljs$core$IFn$_invoke$arity$1(state), idx, word);
  }, cljs.core.flatten.call(null, cljs.core.map.call(null, function(x) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, x), cljs.core.second.call(null, x)], null);
  }, (new cljs.core.Keyword(null, "words", "words", 1924933001)).cljs$core$IFn$_invoke$arity$1(state)))));
});
speicher.render.SearchTableRow = quiescent.component.call(null, function(id, top_QMARK_, g, e) {
  return quiescent.dom.li.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "accordion-item"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "item-content"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "item-inner"], null), quiescent.dom.div.call(null, 
  new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "item-title"], null), g), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "item-after"], null), e))));
});
speicher.render.SearchPage = quiescent.component.call(null, function(p__21375) {
  var map__21376 = p__21375;
  var map__21376__$1 = cljs.core.seq_QMARK_.call(null, map__21376) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21376) : map__21376;
  var dictionary = cljs.core.get.call(null, map__21376__$1, new cljs.core.Keyword(null, "dictionary", "dictionary", -2013643865));
  var input_chan = cljs.core.get.call(null, map__21376__$1, new cljs.core.Keyword(null, "input-chan", "input-chan", -1487255360));
  var handle_search = cljs.core.partial.call(null, speicher.render.handle_search_submit, input_chan);
  var handle_new_word = cljs.core.partial.call(null, speicher.render.handle_new_word_submit, input_chan);
  return quiescent.dom.div.call(null, null, speicher.render.Nav.call(null, "Enter German Word"), quiescent.dom.form.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "className", "className", -1983287057), "searchbar", new cljs.core.Keyword(null, "onSubmit", "onSubmit", 761425194), handle_search], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "searchbar-input"], null), 
  quiescent.dom.input.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), "search", new cljs.core.Keyword(null, "name", "name", 1843675177), "search", new cljs.core.Keyword(null, "id", "id", -1388402092), "term", new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083), "Search"], null)), quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "href", "href", -793805698), "#", new cljs.core.Keyword(null, 
  "className", "className", -1983287057), "searchbar-clear"], null))), quiescent.dom.button.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), "submit", new cljs.core.Keyword(null, "className", "className", -1983287057), "button button-round"], null), "\x3e")), cljs.core.truth_(dictionary) ? quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "page-content"], 
  null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "accordion-item list-block"], null), cljs.core.apply.call(null, quiescent.dom.ul, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map_indexed.call(null, function(handle_search, handle_new_word, map__21376, map__21376__$1, dictionary, input_chan) {
    return function(ind, entry) {
      cljs.core.println.call(null, "Search Page", entry);
      return speicher.render.SearchTableRow.call(null, ind, null, cljs.core.ffirst.call(null, entry), cljs.core.second.call(null, cljs.core.first.call(null, entry)));
    };
  }(handle_search, handle_new_word, map__21376, map__21376__$1, dictionary, input_chan), speicher.render.format_entries.call(null, dictionary))))) : null);
});
speicher.render.NextPage = quiescent.component.call(null, function(state) {
  return quiescent.dom.div.call(null, null, quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "navbar"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "navbar-inner"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), 
  "left"], null), quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "href", "href", -793805698), "index.html", new cljs.core.Keyword(null, "className", "className", -1983287057), "link"], null), quiescent.dom.i.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "icon icon-home"], null)), quiescent.dom.span.call(null, null, "Home"))), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 
  2, [new cljs.core.Keyword(null, "className", "className", -1983287057), "center", new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "left", "left", -399115937), "22px"], null)], null), "Choose another list"), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "right"], null)))), quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "href", "href", -793805698), "review.html?list\x3dweekly"], null), "Weekly"));
});
speicher.render.Link = quiescent.component.call(null, function(state) {
  return quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "className", "className", -1983287057), "link", new cljs.core.Keyword(null, "onClick", "onClick", -1991238530), function() {
    var c__6120__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6120__auto__) {
      return function() {
        var f__6121__auto__ = function() {
          var switch__6064__auto__ = function(c__6120__auto__) {
            return function(state_21387) {
              var state_val_21388 = state_21387[1];
              if (state_val_21388 === 2) {
                var inst_21385 = state_21387[2];
                var state_21387__$1 = function() {
                  var statearr_21389 = state_21387;
                  statearr_21389[7] = inst_21385;
                  return statearr_21389;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21387__$1, false);
              } else {
                if (state_val_21388 === 1) {
                  var inst_21377 = (new cljs.core.Keyword(null, "main-view", "main-view", 343997885)).cljs$core$IFn$_invoke$arity$1(state);
                  var inst_21378 = (new cljs.core.Keyword(null, "input-chan", "input-chan", -1487255360)).cljs$core$IFn$_invoke$arity$1(state);
                  var inst_21379 = inst_21377.router;
                  var inst_21380 = inst_21379.loadPage("review.html");
                  var inst_21381 = cljs.core.PersistentVector.EMPTY_NODE;
                  var inst_21382 = [new cljs.core.Keyword(null, "show-list", "show-list", -483536849), new cljs.core.Keyword(null, "daily", "daily", -697831483)];
                  var inst_21383 = new cljs.core.PersistentVector(null, 2, 5, inst_21381, inst_21382, null);
                  var state_21387__$1 = function() {
                    var statearr_21390 = state_21387;
                    statearr_21390[8] = inst_21380;
                    return statearr_21390;
                  }();
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21387__$1, 2, inst_21378, inst_21383);
                } else {
                  return null;
                }
              }
            };
          }(c__6120__auto__);
          return function(switch__6064__auto__, c__6120__auto__) {
            return function() {
              var state_machine__6065__auto__ = null;
              var state_machine__6065__auto____0 = function() {
                var statearr_21394 = [null, null, null, null, null, null, null, null, null];
                statearr_21394[0] = state_machine__6065__auto__;
                statearr_21394[1] = 1;
                return statearr_21394;
              };
              var state_machine__6065__auto____1 = function(state_21387) {
                while (true) {
                  var ret_value__6066__auto__ = function() {
                    try {
                      while (true) {
                        var result__6067__auto__ = switch__6064__auto__.call(null, state_21387);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6067__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6067__auto__;
                        }
                        break;
                      }
                    } catch (e21395) {
                      if (e21395 instanceof Object) {
                        var ex__6068__auto__ = e21395;
                        var statearr_21396_21398 = state_21387;
                        statearr_21396_21398[5] = ex__6068__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21387);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e21395;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6066__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__21399 = state_21387;
                    state_21387 = G__21399;
                    continue;
                  } else {
                    return ret_value__6066__auto__;
                  }
                  break;
                }
              };
              state_machine__6065__auto__ = function(state_21387) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6065__auto____0.call(this);
                  case 1:
                    return state_machine__6065__auto____1.call(this, state_21387);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6065__auto____0;
              state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6065__auto____1;
              return state_machine__6065__auto__;
            }();
          }(switch__6064__auto__, c__6120__auto__);
        }();
        var state__6122__auto__ = function() {
          var statearr_21397 = f__6121__auto__.call(null);
          statearr_21397[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6120__auto__;
          return statearr_21397;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6122__auto__);
      };
    }(c__6120__auto__));
    return c__6120__auto__;
  }], null), "Show List ");
});
speicher.render.Popup = quiescent.component.call(null, function(p__21400) {
  var map__21401 = p__21400;
  var map__21401__$1 = cljs.core.seq_QMARK_.call(null, map__21401) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21401) : map__21401;
  var ch = cljs.core.get.call(null, map__21401__$1, new cljs.core.Keyword(null, "input-chan", "input-chan", -1487255360));
  var handle_enter_word = cljs.core.partial.call(null, speicher.render.handle_enter_word_submit, ch);
  return quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "popup popup-add"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "content-block"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "content-block-title"], 
  null), "Add Words"), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "list-block"], null), quiescent.dom.form.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "onSubmit", "onSubmit", 761425194), handle_enter_word, new cljs.core.Keyword(null, "name", "name", 1843675177), "new-word"], null), quiescent.dom.ul.call(null, null, quiescent.dom.li.call(null, null, quiescent.dom.div.call(null, 
  new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "item-content"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "item-inner"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "item-input"], null), quiescent.dom.input.call(null, new cljs.core.PersistentArrayMap(null, 
  4, [new cljs.core.Keyword(null, "type", "type", 1174270348), "text", new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083), "German Word", new cljs.core.Keyword(null, "name", "name", 1843675177), "ger", new cljs.core.Keyword(null, "id", "id", -1388402092), "ger"], null)))))), quiescent.dom.li.call(null, null, quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "item-content"], null), quiescent.dom.div.call(null, 
  new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "item-inner"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "item-input"], null), quiescent.dom.input.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), "text", new cljs.core.Keyword(null, "placeholder", "placeholder", -104873083), 
  "English Word", new cljs.core.Keyword(null, "name", "name", 1843675177), "eng", new cljs.core.Keyword(null, "id", "id", -1388402092), "eng"], null))))))), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "content-block"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "row"], null), quiescent.dom.div.call(null, 
  new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "col-50"], null), quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "href", "href", -793805698), "#", new cljs.core.Keyword(null, "className", "className", -1983287057), "button button-big button-fill color-red close-popup"], null), "Cancel")), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "className", "className", -1983287057), "col-50"], null), quiescent.dom.input.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), "submit", new cljs.core.Keyword(null, "value", "value", 305978217), "Submit", new cljs.core.Keyword(null, "className", "className", -1983287057), "close-popup button button-big button-fill color-green"], null)))))))));
});
speicher.render.HomePage = quiescent.component.call(null, function(p__21402) {
  var map__21403 = p__21402;
  var map__21403__$1 = cljs.core.seq_QMARK_.call(null, map__21403) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21403) : map__21403;
  var main_view = cljs.core.get.call(null, map__21403__$1, new cljs.core.Keyword(null, "main-view", "main-view", 343997885));
  var input_chan = cljs.core.get.call(null, map__21403__$1, new cljs.core.Keyword(null, "input-chan", "input-chan", -1487255360));
  var load_page = function(map__21403, map__21403__$1, main_view, input_chan) {
    return function load_page(file) {
      return main_view.router.loadPage(file);
    };
  }(map__21403, map__21403__$1, main_view, input_chan);
  return quiescent.dom.div.call(null, null, quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "content-block-title"], null), "What would you like to do?"), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "list-block"], null), quiescent.dom.ul.call(null, null, quiescent.dom.li.call(null, null, quiescent.dom.a.call(null, 
  new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "href", "href", -793805698), "#", new cljs.core.Keyword(null, "className", "className", -1983287057), "item-link", new cljs.core.Keyword(null, "onClick", "onClick", -1991238530), function(map__21403, map__21403__$1, main_view, input_chan) {
    return function() {
      var c__6120__auto__ = cljs.core.async.chan.call(null, 1);
      cljs.core.async.impl.dispatch.run.call(null, function(c__6120__auto__, map__21403, map__21403__$1, main_view, input_chan) {
        return function() {
          var f__6121__auto__ = function() {
            var switch__6064__auto__ = function(c__6120__auto__, map__21403, map__21403__$1, main_view, input_chan) {
              return function(state_21411) {
                var state_val_21412 = state_21411[1];
                if (state_val_21412 === 2) {
                  var inst_21409 = state_21411[2];
                  var state_21411__$1 = state_21411;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21411__$1, inst_21409);
                } else {
                  if (state_val_21412 === 1) {
                    var inst_21404 = load_page.call(null, "review.html");
                    var inst_21405 = cljs.core.PersistentVector.EMPTY_NODE;
                    var inst_21406 = [new cljs.core.Keyword(null, "show-list", "show-list", -483536849), new cljs.core.Keyword(null, "daily", "daily", -697831483)];
                    var inst_21407 = new cljs.core.PersistentVector(null, 2, 5, inst_21405, inst_21406, null);
                    var state_21411__$1 = function() {
                      var statearr_21413 = state_21411;
                      statearr_21413[7] = inst_21404;
                      return statearr_21413;
                    }();
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21411__$1, 2, input_chan, inst_21407);
                  } else {
                    return null;
                  }
                }
              };
            }(c__6120__auto__, map__21403, map__21403__$1, main_view, input_chan);
            return function(switch__6064__auto__, c__6120__auto__, map__21403, map__21403__$1, main_view, input_chan) {
              return function() {
                var state_machine__6065__auto__ = null;
                var state_machine__6065__auto____0 = function() {
                  var statearr_21417 = [null, null, null, null, null, null, null, null];
                  statearr_21417[0] = state_machine__6065__auto__;
                  statearr_21417[1] = 1;
                  return statearr_21417;
                };
                var state_machine__6065__auto____1 = function(state_21411) {
                  while (true) {
                    var ret_value__6066__auto__ = function() {
                      try {
                        while (true) {
                          var result__6067__auto__ = switch__6064__auto__.call(null, state_21411);
                          if (cljs.core.keyword_identical_QMARK_.call(null, result__6067__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                            continue;
                          } else {
                            return result__6067__auto__;
                          }
                          break;
                        }
                      } catch (e21418) {
                        if (e21418 instanceof Object) {
                          var ex__6068__auto__ = e21418;
                          var statearr_21419_21449 = state_21411;
                          statearr_21419_21449[5] = ex__6068__auto__;
                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21411);
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          throw e21418;
                        }
                      }
                    }();
                    if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6066__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                      var G__21450 = state_21411;
                      state_21411 = G__21450;
                      continue;
                    } else {
                      return ret_value__6066__auto__;
                    }
                    break;
                  }
                };
                state_machine__6065__auto__ = function(state_21411) {
                  switch(arguments.length) {
                    case 0:
                      return state_machine__6065__auto____0.call(this);
                    case 1:
                      return state_machine__6065__auto____1.call(this, state_21411);
                  }
                  throw new Error("Invalid arity: " + arguments.length);
                };
                state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6065__auto____0;
                state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6065__auto____1;
                return state_machine__6065__auto__;
              }();
            }(switch__6064__auto__, c__6120__auto__, map__21403, map__21403__$1, main_view, input_chan);
          }();
          var state__6122__auto__ = function() {
            var statearr_21420 = f__6121__auto__.call(null);
            statearr_21420[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6120__auto__;
            return statearr_21420;
          }();
          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6122__auto__);
        };
      }(c__6120__auto__, map__21403, map__21403__$1, main_view, input_chan));
      return c__6120__auto__;
    };
  }(map__21403, map__21403__$1, main_view, input_chan)], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "item-content"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "item-inner"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", 
  "className", -1983287057), "item-title"], null), "Review Daily List"))))), quiescent.dom.li.call(null, null, quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "href", "href", -793805698), "#", new cljs.core.Keyword(null, "className", "className", -1983287057), "item-link", new cljs.core.Keyword(null, "onClick", "onClick", -1991238530), function(map__21403, map__21403__$1, main_view, input_chan) {
    return function() {
      var c__6120__auto__ = cljs.core.async.chan.call(null, 1);
      cljs.core.async.impl.dispatch.run.call(null, function(c__6120__auto__, map__21403, map__21403__$1, main_view, input_chan) {
        return function() {
          var f__6121__auto__ = function() {
            var switch__6064__auto__ = function(c__6120__auto__, map__21403, map__21403__$1, main_view, input_chan) {
              return function(state_21428) {
                var state_val_21429 = state_21428[1];
                if (state_val_21429 === 2) {
                  var inst_21426 = state_21428[2];
                  var state_21428__$1 = state_21428;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21428__$1, inst_21426);
                } else {
                  if (state_val_21429 === 1) {
                    var inst_21421 = load_page.call(null, "review.html");
                    var inst_21422 = cljs.core.PersistentVector.EMPTY_NODE;
                    var inst_21423 = [new cljs.core.Keyword(null, "show-list", "show-list", -483536849), new cljs.core.Keyword(null, "weekly", "weekly", 319200344)];
                    var inst_21424 = new cljs.core.PersistentVector(null, 2, 5, inst_21422, inst_21423, null);
                    var state_21428__$1 = function() {
                      var statearr_21430 = state_21428;
                      statearr_21430[7] = inst_21421;
                      return statearr_21430;
                    }();
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21428__$1, 2, input_chan, inst_21424);
                  } else {
                    return null;
                  }
                }
              };
            }(c__6120__auto__, map__21403, map__21403__$1, main_view, input_chan);
            return function(switch__6064__auto__, c__6120__auto__, map__21403, map__21403__$1, main_view, input_chan) {
              return function() {
                var state_machine__6065__auto__ = null;
                var state_machine__6065__auto____0 = function() {
                  var statearr_21434 = [null, null, null, null, null, null, null, null];
                  statearr_21434[0] = state_machine__6065__auto__;
                  statearr_21434[1] = 1;
                  return statearr_21434;
                };
                var state_machine__6065__auto____1 = function(state_21428) {
                  while (true) {
                    var ret_value__6066__auto__ = function() {
                      try {
                        while (true) {
                          var result__6067__auto__ = switch__6064__auto__.call(null, state_21428);
                          if (cljs.core.keyword_identical_QMARK_.call(null, result__6067__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                            continue;
                          } else {
                            return result__6067__auto__;
                          }
                          break;
                        }
                      } catch (e21435) {
                        if (e21435 instanceof Object) {
                          var ex__6068__auto__ = e21435;
                          var statearr_21436_21451 = state_21428;
                          statearr_21436_21451[5] = ex__6068__auto__;
                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21428);
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          throw e21435;
                        }
                      }
                    }();
                    if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6066__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                      var G__21452 = state_21428;
                      state_21428 = G__21452;
                      continue;
                    } else {
                      return ret_value__6066__auto__;
                    }
                    break;
                  }
                };
                state_machine__6065__auto__ = function(state_21428) {
                  switch(arguments.length) {
                    case 0:
                      return state_machine__6065__auto____0.call(this);
                    case 1:
                      return state_machine__6065__auto____1.call(this, state_21428);
                  }
                  throw new Error("Invalid arity: " + arguments.length);
                };
                state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6065__auto____0;
                state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6065__auto____1;
                return state_machine__6065__auto__;
              }();
            }(switch__6064__auto__, c__6120__auto__, map__21403, map__21403__$1, main_view, input_chan);
          }();
          var state__6122__auto__ = function() {
            var statearr_21437 = f__6121__auto__.call(null);
            statearr_21437[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6120__auto__;
            return statearr_21437;
          }();
          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6122__auto__);
        };
      }(c__6120__auto__, map__21403, map__21403__$1, main_view, input_chan));
      return c__6120__auto__;
    };
  }(map__21403, map__21403__$1, main_view, input_chan)], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "item-content"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "item-inner"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", 
  "className", -1983287057), "item-title"], null), "Review Weekly List"))))), quiescent.dom.li.call(null, null, quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "href", "href", -793805698), "#", new cljs.core.Keyword(null, "className", "className", -1983287057), "item-link", new cljs.core.Keyword(null, "onClick", "onClick", -1991238530), function(map__21403, map__21403__$1, main_view, input_chan) {
    return function() {
      var c__6120__auto__ = cljs.core.async.chan.call(null, 1);
      cljs.core.async.impl.dispatch.run.call(null, function(c__6120__auto__, map__21403, map__21403__$1, main_view, input_chan) {
        return function() {
          var f__6121__auto__ = function() {
            var switch__6064__auto__ = function(c__6120__auto__, map__21403, map__21403__$1, main_view, input_chan) {
              return function(state_21440) {
                var state_val_21441 = state_21440[1];
                if (state_val_21441 === 1) {
                  var inst_21438 = load_page.call(null, "search.html");
                  var state_21440__$1 = state_21440;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21440__$1, inst_21438);
                } else {
                  return null;
                }
              };
            }(c__6120__auto__, map__21403, map__21403__$1, main_view, input_chan);
            return function(switch__6064__auto__, c__6120__auto__, map__21403, map__21403__$1, main_view, input_chan) {
              return function() {
                var state_machine__6065__auto__ = null;
                var state_machine__6065__auto____0 = function() {
                  var statearr_21445 = [null, null, null, null, null, null, null];
                  statearr_21445[0] = state_machine__6065__auto__;
                  statearr_21445[1] = 1;
                  return statearr_21445;
                };
                var state_machine__6065__auto____1 = function(state_21440) {
                  while (true) {
                    var ret_value__6066__auto__ = function() {
                      try {
                        while (true) {
                          var result__6067__auto__ = switch__6064__auto__.call(null, state_21440);
                          if (cljs.core.keyword_identical_QMARK_.call(null, result__6067__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                            continue;
                          } else {
                            return result__6067__auto__;
                          }
                          break;
                        }
                      } catch (e21446) {
                        if (e21446 instanceof Object) {
                          var ex__6068__auto__ = e21446;
                          var statearr_21447_21453 = state_21440;
                          statearr_21447_21453[5] = ex__6068__auto__;
                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21440);
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          throw e21446;
                        }
                      }
                    }();
                    if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6066__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                      var G__21454 = state_21440;
                      state_21440 = G__21454;
                      continue;
                    } else {
                      return ret_value__6066__auto__;
                    }
                    break;
                  }
                };
                state_machine__6065__auto__ = function(state_21440) {
                  switch(arguments.length) {
                    case 0:
                      return state_machine__6065__auto____0.call(this);
                    case 1:
                      return state_machine__6065__auto____1.call(this, state_21440);
                  }
                  throw new Error("Invalid arity: " + arguments.length);
                };
                state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6065__auto____0;
                state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6065__auto____1;
                return state_machine__6065__auto__;
              }();
            }(switch__6064__auto__, c__6120__auto__, map__21403, map__21403__$1, main_view, input_chan);
          }();
          var state__6122__auto__ = function() {
            var statearr_21448 = f__6121__auto__.call(null);
            statearr_21448[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6120__auto__;
            return statearr_21448;
          }();
          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6122__auto__);
        };
      }(c__6120__auto__, map__21403, map__21403__$1, main_view, input_chan));
      return c__6120__auto__;
    };
  }(map__21403, map__21403__$1, main_view, input_chan)], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "item-content"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "item-inner"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", 
  "className", -1983287057), "item-title"], null), "Look up new word in Dictionary"))))), quiescent.dom.li.call(null, null, quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "href", "href", -793805698), "#", new cljs.core.Keyword(null, "className", "className", -1983287057), "item-link"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "item-content"], 
  null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "item-inner"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "item-title"], null), "Enter new word and definition"))))))));
});
var render_pending_QMARK__21493 = cljs.core.atom.call(null, false);
speicher.render.request_render = function(render_pending_QMARK__21493) {
  return function request_render(state) {
    if (cljs.core.compare_and_set_BANG_.call(null, render_pending_QMARK__21493, false, true)) {
      window.requestAnimationFrame(function(render_pending_QMARK__21493) {
        return function() {
          var temp__4126__auto___21494 = document.getElementById("popup");
          if (cljs.core.truth_(temp__4126__auto___21494)) {
            var el_21495 = temp__4126__auto___21494;
            quiescent.render.call(null, speicher.render.Popup.call(null, state), el_21495);
          } else {
          }
          var pred__21474 = cljs.core._EQ_;
          var expr__21475 = (new cljs.core.Keyword(null, "mode", "mode", 654403691)).cljs$core$IFn$_invoke$arity$1(state);
          if (cljs.core.truth_(pred__21474.call(null, new cljs.core.Keyword(null, "show-list", "show-list", -483536849), expr__21475))) {
            return quiescent.render.call(null, speicher.render.WordList.call(null, state), document.getElementById("show-page"));
          } else {
            if (cljs.core.truth_(pred__21474.call(null, new cljs.core.Keyword(null, "review-list", "review-list", -2126749986), expr__21475))) {
              quiescent.render.call(null, speicher.render.ReviewPage.call(null, state), document.getElementById("swiper"));
              if (cljs.core.truth_(function() {
                var and__3817__auto__ = (new cljs.core.Keyword(null, "words", "words", 1924933001)).cljs$core$IFn$_invoke$arity$1(state);
                if (cljs.core.truth_(and__3817__auto__)) {
                  return(new cljs.core.Keyword(null, "swiper-init?", "swiper-init?", 65165134)).cljs$core$IFn$_invoke$arity$1(state) === false;
                } else {
                  return and__3817__auto__;
                }
              }())) {
                var c__6120__auto__ = cljs.core.async.chan.call(null, 1);
                cljs.core.async.impl.dispatch.run.call(null, function(c__6120__auto__, pred__21474, expr__21475, render_pending_QMARK__21493) {
                  return function() {
                    var f__6121__auto__ = function() {
                      var switch__6064__auto__ = function(c__6120__auto__, pred__21474, expr__21475, render_pending_QMARK__21493) {
                        return function(state_21484) {
                          var state_val_21485 = state_21484[1];
                          if (state_val_21485 === 2) {
                            var inst_21482 = state_21484[2];
                            var state_21484__$1 = state_21484;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21484__$1, inst_21482);
                          } else {
                            if (state_val_21485 === 1) {
                              var inst_21477 = (new cljs.core.Keyword(null, "input-chan", "input-chan", -1487255360)).cljs$core$IFn$_invoke$arity$1(state);
                              var inst_21478 = cljs.core.PersistentVector.EMPTY_NODE;
                              var inst_21479 = [new cljs.core.Keyword(null, "init-swiper", "init-swiper", 998548847), null];
                              var inst_21480 = new cljs.core.PersistentVector(null, 2, 5, inst_21478, inst_21479, null);
                              var state_21484__$1 = state_21484;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21484__$1, 2, inst_21477, inst_21480);
                            } else {
                              return null;
                            }
                          }
                        };
                      }(c__6120__auto__, pred__21474, expr__21475, render_pending_QMARK__21493);
                      return function(switch__6064__auto__, c__6120__auto__, pred__21474, expr__21475, render_pending_QMARK__21493) {
                        return function() {
                          var state_machine__6065__auto__ = null;
                          var state_machine__6065__auto____0 = function() {
                            var statearr_21489 = [null, null, null, null, null, null, null];
                            statearr_21489[0] = state_machine__6065__auto__;
                            statearr_21489[1] = 1;
                            return statearr_21489;
                          };
                          var state_machine__6065__auto____1 = function(state_21484) {
                            while (true) {
                              var ret_value__6066__auto__ = function() {
                                try {
                                  while (true) {
                                    var result__6067__auto__ = switch__6064__auto__.call(null, state_21484);
                                    if (cljs.core.keyword_identical_QMARK_.call(null, result__6067__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                      continue;
                                    } else {
                                      return result__6067__auto__;
                                    }
                                    break;
                                  }
                                } catch (e21490) {
                                  if (e21490 instanceof Object) {
                                    var ex__6068__auto__ = e21490;
                                    var statearr_21491_21496 = state_21484;
                                    statearr_21491_21496[5] = ex__6068__auto__;
                                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21484);
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    throw e21490;
                                  }
                                }
                              }();
                              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6066__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                var G__21497 = state_21484;
                                state_21484 = G__21497;
                                continue;
                              } else {
                                return ret_value__6066__auto__;
                              }
                              break;
                            }
                          };
                          state_machine__6065__auto__ = function(state_21484) {
                            switch(arguments.length) {
                              case 0:
                                return state_machine__6065__auto____0.call(this);
                              case 1:
                                return state_machine__6065__auto____1.call(this, state_21484);
                            }
                            throw new Error("Invalid arity: " + arguments.length);
                          };
                          state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6065__auto____0;
                          state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6065__auto____1;
                          return state_machine__6065__auto__;
                        }();
                      }(switch__6064__auto__, c__6120__auto__, pred__21474, expr__21475, render_pending_QMARK__21493);
                    }();
                    var state__6122__auto__ = function() {
                      var statearr_21492 = f__6121__auto__.call(null);
                      statearr_21492[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6120__auto__;
                      return statearr_21492;
                    }();
                    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6122__auto__);
                  };
                }(c__6120__auto__, pred__21474, expr__21475, render_pending_QMARK__21493));
                return c__6120__auto__;
              } else {
                return null;
              }
            } else {
              if (cljs.core.truth_(pred__21474.call(null, new cljs.core.Keyword(null, "search-page", "search-page", -705609891), expr__21475))) {
                return quiescent.render.call(null, speicher.render.SearchPage.call(null, state), document.getElementById("search-page"));
              } else {
                if (cljs.core.truth_(pred__21474.call(null, new cljs.core.Keyword(null, "next", "next", -117701485), expr__21475))) {
                  return quiescent.render.call(null, speicher.render.NextPage.call(null, state), document.getElementById("next-page"));
                } else {
                  if (cljs.core.truth_(pred__21474.call(null, new cljs.core.Keyword(null, "start", "start", -355208981), expr__21475))) {
                    return speicher.render.WordList.call(null, state, (new cljs.core.Keyword(null, "input-chan", "input-chan", -1487255360)).cljs$core$IFn$_invoke$arity$1(state), document.getElementById("nav-options"));
                  } else {
                    throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__21475)].join(""));
                  }
                }
              }
            }
          }
        };
      }(render_pending_QMARK__21493));
      return cljs.core.reset_BANG_.call(null, render_pending_QMARK__21493, false);
    } else {
      return null;
    }
  };
}(render_pending_QMARK__21493);
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS") && !goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return goog.labs.userAgent.browser.getOperaVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.labs.userAgent.browser.getOperaVersion_ = function(userAgent) {
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgent);
  var lastTuple = goog.array.peek(versionTuples);
  if (lastTuple[0] == "OPR" && lastTuple[1]) {
    return lastTuple[1];
  }
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.getVersionFromTuples_ = function(versionTuples) {
  goog.asserts.assert(versionTuples.length > 2, "Couldn't extract version tuple from user agent string");
  return versionTuples[2] && versionTuples[2][1] ? versionTuples[2][1] : "";
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit");
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = tuples[1];
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  if (goog.userAgent.GECKO) {
    re = /rv\:([^\);]+)(\)|;)/;
  } else {
    if (goog.userAgent.IE) {
      re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.WEBKIT) {
        re = /WebKit\/(\S+)/;
      }
    }
  }
  if (re) {
    var arr = re.exec(goog.userAgent.getUserAgentString());
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", 
SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", 
ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", 
COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", 
DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return-1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = (key);
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.removeAllNativeListeners = function() {
  goog.events.listenerCountEstimate_ = 0;
  return 0;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return[];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return!!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = 1;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, true, evt);
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, false, evt);
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = .8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.json");
goog.provide("goog.json.Replacer");
goog.provide("goog.json.Reviver");
goog.provide("goog.json.Serializer");
goog.define("goog.json.USE_NATIVE_JSON", false);
goog.json.isValid = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  var o = String(s);
  if (goog.json.isValid(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["stringify"]) : function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serializeInternal(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serializeInternal = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serializeInternal(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serializeInternal(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var iterator = goog.iter.toIterator(arguments);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.chainFromIterable = function(iterable) {
  return goog.iter.chain.apply(undefined, iterable);
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  return goog.iter.every(pairs, function(pair) {
    return pair[0] == pair[1];
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return!!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return[this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return[];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt((opt_end)) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return!goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available";
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href;
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name) {
    return{"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (typeof err == "string") {
    error = Error(err);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (goog.STRICT_MODE_COMPATIBLE) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
  }
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};
goog.debug.getStacktrace = function(opt_fn) {
  var stack;
  if (goog.STRICT_MODE_COMPATIBLE) {
    var contextFn = opt_fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    stack = goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
  }
  return stack;
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.debug.Logger.ROOT_LOGGER_NAME = "";
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return!!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception, goog.debug.Logger.prototype.log));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception, opt_fnStackContext) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    var context;
    if (goog.STRICT_MODE_COMPATIBLE) {
      context = opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord;
    } else {
      context = opt_fnStackContext || arguments.callee.caller;
    }
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);
    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XhrLike");
goog.net.XhrLike = function() {
};
goog.net.XhrLike.OrNative;
goog.net.XhrLike.prototype.onreadystatechange;
goog.net.XhrLike.prototype.responseText;
goog.net.XhrLike.prototype.responseXML;
goog.net.XhrLike.prototype.readyState;
goog.net.XhrLike.prototype.status;
goog.net.XhrLike.prototype.statusText;
goog.net.XhrLike.prototype.open = function(method, url, opt_async, opt_user, opt_password) {
};
goog.net.XhrLike.prototype.send = function(opt_data) {
};
goog.net.XhrLike.prototype.abort = function() {
};
goog.net.XhrLike.prototype.setRequestHeader = function(header, value) {
};
goog.net.XhrLike.prototype.getResponseHeader = function(header) {
};
goog.net.XhrLike.prototype.getAllResponseHeaders = function() {
};
goog.provide("goog.net.XmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.provide("goog.net.XmlHttpDefines");
goog.require("goog.asserts");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.define("goog.net.XmlHttp.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttpDefines = {};
goog.define("goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR || goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined") {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  goog.uri.utils.phishingProtection_();
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.needsPhishingProtection_ = goog.userAgent.WEBKIT;
goog.uri.utils.phishingProtection_ = function() {
  if (goog.uri.utils.needsPhishingProtection_) {
    goog.uri.utils.needsPhishingProtection_ = false;
    var location = goog.global["location"];
    if (location) {
      var href = location["href"];
      if (href) {
        var domain = goog.uri.utils.getDomain(href);
        if (domain && domain != location["hostname"]) {
          goog.uri.utils.needsPhishingProtection_ = true;
          throw Error();
        }
      }
    }
  }
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.forwardDeclare("goog.Uri");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.net.XhrIo.base(this, "constructor");
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
  this.active_ = false;
  this.xhr_ = null;
  this.xhrOptions_ = null;
  this.lastUri_ = "";
  this.lastMethod_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastError_ = "";
  this.errorDispatched_ = false;
  this.inSend_ = false;
  this.inOpen_ = false;
  this.inAbort_ = false;
  this.timeoutInterval_ = 0;
  this.timeoutId_ = null;
  this.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
  this.withCredentials_ = false;
  this.useXhr2Timeout_ = false;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.log.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.METHODS_WITH_FORM_DATA = ["POST", "PUT"];
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.XHR2_TIMEOUT_ = "timeout";
goog.net.XhrIo.XHR2_ON_TIMEOUT_ = "ontimeout";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    x.listen(goog.net.EventType.COMPLETE, opt_callback);
  }
  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
  return x;
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.prototype.cleanupSend_ = function() {
  this.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, this);
};
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    goog.log.fine(this.logger_, this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, String(url), true);
    this.inOpen_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentTypeKey = goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) && !contentTypeKey && !contentIsFormData) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  headers.forEach(function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    this.cleanUpTimeoutTimer_();
    if (this.timeoutInterval_ > 0) {
      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);
      goog.log.fine(this.logger_, this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete, xhr2 " + this.useXhr2Timeout_));
      if (this.useXhr2Timeout_) {
        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;
        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = goog.bind(this.timeout_, this);
      } else {
        this.timeoutId_ = goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);
      }
    }
    goog.log.fine(this.logger_, this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {
  return goog.userAgent.IE && goog.userAgent.isVersionOrHigher(9) && goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) && goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_]);
};
goog.net.XhrIo.isContentTypeHeader_ = function(header) {
  return goog.string.caseInsensitiveEquals(goog.net.XhrIo.CONTENT_TYPE_HEADER, header);
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    goog.log.fine(this.logger_, this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.base(this, "disposeInternal");
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (this.isDisposed()) {
    return;
  }
  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2) {
      goog.log.fine(this.logger_, this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.callOnce(this.onReadyStateChange_, 0, this);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        goog.log.fine(this.logger_, this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    this.cleanUpTimeoutTimer_();
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      goog.log.error(this.logger_, "Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {
  if (this.xhr_ && this.useXhr2Timeout_) {
    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;
  }
  if (goog.isNumber(this.timeoutId_)) {
    goog.Timer.clear(this.timeoutId_);
    this.timeoutId_ = null;
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    goog.log.error(this.logger_, "Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getResponseHeaders = function() {
  var headersObject = {};
  var headersArray = this.getAllResponseHeaders().split("\r\n");
  for (var i = 0;i < headersArray.length;i++) {
    if (goog.string.isEmpty(headersArray[i])) {
      continue;
    }
    var keyValue = goog.string.splitLimit(headersArray[i], ": ", 2);
    if (headersObject[keyValue[0]]) {
      headersObject[keyValue[0]] += ", " + keyValue[1];
    } else {
      headersObject[keyValue[0]] = keyValue[1];
    }
  }
  return headersObject;
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.crypt");
goog.require("goog.array");
goog.require("goog.asserts");
goog.crypt.stringToByteArray = function(str) {
  var output = [], p = 0;
  for (var i = 0;i < str.length;i++) {
    var c = str.charCodeAt(i);
    while (c > 255) {
      output[p++] = c & 255;
      c >>= 8;
    }
    output[p++] = c;
  }
  return output;
};
goog.crypt.byteArrayToString = function(bytes) {
  var CHUNK_SIZE = 8192;
  if (bytes.length < CHUNK_SIZE) {
    return String.fromCharCode.apply(null, bytes);
  }
  var str = "";
  for (var i = 0;i < bytes.length;i += CHUNK_SIZE) {
    var chunk = goog.array.slice(bytes, i, i + CHUNK_SIZE);
    str += String.fromCharCode.apply(null, chunk);
  }
  return str;
};
goog.crypt.byteArrayToHex = function(array) {
  return goog.array.map(array, function(numByte) {
    var hexByte = numByte.toString(16);
    return hexByte.length > 1 ? hexByte : "0" + hexByte;
  }).join("");
};
goog.crypt.hexToByteArray = function(hexString) {
  goog.asserts.assert(hexString.length % 2 == 0, "Key string length must be multiple of 2");
  var arr = [];
  for (var i = 0;i < hexString.length;i += 2) {
    arr.push(parseInt(hexString.substring(i, i + 2), 16));
  }
  return arr;
};
goog.crypt.stringToUtf8ByteArray = function(str) {
  str = str.replace(/\r\n/g, "\n");
  var out = [], p = 0;
  for (var i = 0;i < str.length;i++) {
    var c = str.charCodeAt(i);
    if (c < 128) {
      out[p++] = c;
    } else {
      if (c < 2048) {
        out[p++] = c >> 6 | 192;
        out[p++] = c & 63 | 128;
      } else {
        out[p++] = c >> 12 | 224;
        out[p++] = c >> 6 & 63 | 128;
        out[p++] = c & 63 | 128;
      }
    }
  }
  return out;
};
goog.crypt.utf8ByteArrayToString = function(bytes) {
  var out = [], pos = 0, c = 0;
  while (pos < bytes.length) {
    var c1 = bytes[pos++];
    if (c1 < 128) {
      out[c++] = String.fromCharCode(c1);
    } else {
      if (c1 > 191 && c1 < 224) {
        var c2 = bytes[pos++];
        out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
      } else {
        var c2 = bytes[pos++];
        var c3 = bytes[pos++];
        out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
      }
    }
  }
  return out.join("");
};
goog.crypt.xorByteArray = function(bytes1, bytes2) {
  goog.asserts.assert(bytes1.length == bytes2.length, "XOR array lengths must match");
  var result = [];
  for (var i = 0;i < bytes1.length;i++) {
    result.push(bytes1[i] ^ bytes2[i]);
  }
  return result;
};
goog.provide("goog.crypt.base64");
goog.require("goog.crypt");
goog.require("goog.userAgent");
goog.crypt.base64.byteToCharMap_ = null;
goog.crypt.base64.charToByteMap_ = null;
goog.crypt.base64.byteToCharMapWebSafe_ = null;
goog.crypt.base64.charToByteMapWebSafe_ = null;
goog.crypt.base64.ENCODED_VALS_BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" + "abcdefghijklmnopqrstuvwxyz" + "0123456789";
goog.crypt.base64.ENCODED_VALS = goog.crypt.base64.ENCODED_VALS_BASE + "+/\x3d";
goog.crypt.base64.ENCODED_VALS_WEBSAFE = goog.crypt.base64.ENCODED_VALS_BASE + "-_.";
goog.crypt.base64.HAS_NATIVE_SUPPORT = goog.userAgent.GECKO || goog.userAgent.WEBKIT || goog.userAgent.OPERA || typeof goog.global.atob == "function";
goog.crypt.base64.encodeByteArray = function(input, opt_webSafe) {
  if (!goog.isArrayLike(input)) {
    throw Error("encodeByteArray takes an array as a parameter");
  }
  goog.crypt.base64.init_();
  var byteToCharMap = opt_webSafe ? goog.crypt.base64.byteToCharMapWebSafe_ : goog.crypt.base64.byteToCharMap_;
  var output = [];
  for (var i = 0;i < input.length;i += 3) {
    var byte1 = input[i];
    var haveByte2 = i + 1 < input.length;
    var byte2 = haveByte2 ? input[i + 1] : 0;
    var haveByte3 = i + 2 < input.length;
    var byte3 = haveByte3 ? input[i + 2] : 0;
    var outByte1 = byte1 >> 2;
    var outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
    var outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
    var outByte4 = byte3 & 63;
    if (!haveByte3) {
      outByte4 = 64;
      if (!haveByte2) {
        outByte3 = 64;
      }
    }
    output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
  }
  return output.join("");
};
goog.crypt.base64.encodeString = function(input, opt_webSafe) {
  if (goog.crypt.base64.HAS_NATIVE_SUPPORT && !opt_webSafe) {
    return goog.global.btoa(input);
  }
  return goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(input), opt_webSafe);
};
goog.crypt.base64.decodeString = function(input, opt_webSafe) {
  if (goog.crypt.base64.HAS_NATIVE_SUPPORT && !opt_webSafe) {
    return goog.global.atob(input);
  }
  return goog.crypt.byteArrayToString(goog.crypt.base64.decodeStringToByteArray(input, opt_webSafe));
};
goog.crypt.base64.decodeStringToByteArray = function(input, opt_webSafe) {
  goog.crypt.base64.init_();
  var charToByteMap = opt_webSafe ? goog.crypt.base64.charToByteMapWebSafe_ : goog.crypt.base64.charToByteMap_;
  var output = [];
  for (var i = 0;i < input.length;) {
    var byte1 = charToByteMap[input.charAt(i++)];
    var haveByte2 = i < input.length;
    var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
    ++i;
    var haveByte3 = i < input.length;
    var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
    ++i;
    var haveByte4 = i < input.length;
    var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
    ++i;
    if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
      throw Error();
    }
    var outByte1 = byte1 << 2 | byte2 >> 4;
    output.push(outByte1);
    if (byte3 != 64) {
      var outByte2 = byte2 << 4 & 240 | byte3 >> 2;
      output.push(outByte2);
      if (byte4 != 64) {
        var outByte3 = byte3 << 6 & 192 | byte4;
        output.push(outByte3);
      }
    }
  }
  return output;
};
goog.crypt.base64.init_ = function() {
  if (!goog.crypt.base64.byteToCharMap_) {
    goog.crypt.base64.byteToCharMap_ = {};
    goog.crypt.base64.charToByteMap_ = {};
    goog.crypt.base64.byteToCharMapWebSafe_ = {};
    goog.crypt.base64.charToByteMapWebSafe_ = {};
    for (var i = 0;i < goog.crypt.base64.ENCODED_VALS.length;i++) {
      goog.crypt.base64.byteToCharMap_[i] = goog.crypt.base64.ENCODED_VALS.charAt(i);
      goog.crypt.base64.charToByteMap_[goog.crypt.base64.byteToCharMap_[i]] = i;
      goog.crypt.base64.byteToCharMapWebSafe_[i] = goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(i);
      goog.crypt.base64.charToByteMapWebSafe_[goog.crypt.base64.byteToCharMapWebSafe_[i]] = i;
    }
  }
};
goog.provide("no.en.core");
goog.require("cljs.core");
goog.require("goog.crypt.base64");
goog.require("cljs.reader");
goog.require("clojure.string");
no.en.core.port_number = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "http", "http", 382524695), 80, new cljs.core.Keyword(null, "https", "https", -1983909665), 443, new cljs.core.Keyword(null, "mysql", "mysql", -1431590210), 3306, new cljs.core.Keyword(null, "postgresql", "postgresql", -1568339962), 5432, new cljs.core.Keyword(null, "rabbitmq", "rabbitmq", 1046897371), 5672], null);
no.en.core.url_regex = /([^:]+):\/\/(([^:]+):([^@]+)@)?(([^:\/]+)(:([0-9]+))?((\/[^?]*)(\?([^#]*))?)?)(\#(.*))?/;
no.en.core.split_by_regex = function split_by_regex(s, pattern) {
  if (cljs.core.sequential_QMARK_.call(null, s)) {
    return s;
  } else {
    if (cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, s))) {
      return clojure.string.split.call(null, s, pattern);
    } else {
      return null;
    }
  }
};
no.en.core.split_by_comma = function split_by_comma(s) {
  return no.en.core.split_by_regex.call(null, s, /\s*,\s*/);
};
no.en.core.utf8_string = function utf8_string(bytes) {
  throw cljs.core.ex_info.call(null, "utf8-string not implemented yet", bytes);
};
no.en.core.base64_encode = function base64_encode(bytes) {
  if (cljs.core.truth_(bytes)) {
    return goog.crypt.base64.encodeString(bytes, false);
  } else {
    return null;
  }
};
no.en.core.base64_decode = function base64_decode(s) {
  if (cljs.core.truth_(s)) {
    return goog.crypt.base64.decodeString(s, false);
  } else {
    return null;
  }
};
no.en.core.compact_map = function compact_map(m) {
  return cljs.core.reduce.call(null, function(m__$1, k) {
    var v = cljs.core.get.call(null, m__$1, k);
    if (v == null || (cljs.core.map_QMARK_.call(null, v) || cljs.core.sequential_QMARK_.call(null, v)) && cljs.core.empty_QMARK_.call(null, v)) {
      return cljs.core.dissoc.call(null, m__$1, k);
    } else {
      return m__$1;
    }
  }, m, cljs.core.keys.call(null, m));
};
no.en.core.url_encode = function() {
  var url_encode__delegate = function(s, p__18328) {
    var vec__18330 = p__18328;
    var encoding = cljs.core.nth.call(null, vec__18330, 0, null);
    if (cljs.core.truth_(s)) {
      return clojure.string.replace.call(null, encodeURIComponent([cljs.core.str(s)].join("")), "*", "%2A");
    } else {
      return null;
    }
  };
  var url_encode = function(s, var_args) {
    var p__18328 = null;
    if (arguments.length > 1) {
      var G__18331__i = 0, G__18331__a = new Array(arguments.length - 1);
      while (G__18331__i < G__18331__a.length) {
        G__18331__a[G__18331__i] = arguments[G__18331__i + 1];
        ++G__18331__i;
      }
      p__18328 = new cljs.core.IndexedSeq(G__18331__a, 0);
    }
    return url_encode__delegate.call(this, s, p__18328);
  };
  url_encode.cljs$lang$maxFixedArity = 1;
  url_encode.cljs$lang$applyTo = function(arglist__18332) {
    var s = cljs.core.first(arglist__18332);
    var p__18328 = cljs.core.rest(arglist__18332);
    return url_encode__delegate(s, p__18328);
  };
  url_encode.cljs$core$IFn$_invoke$arity$variadic = url_encode__delegate;
  return url_encode;
}();
no.en.core.url_decode = function() {
  var url_decode__delegate = function(s, p__18333) {
    var vec__18335 = p__18333;
    var encoding = cljs.core.nth.call(null, vec__18335, 0, null);
    if (cljs.core.truth_(s)) {
      return decodeURIComponent(s);
    } else {
      return null;
    }
  };
  var url_decode = function(s, var_args) {
    var p__18333 = null;
    if (arguments.length > 1) {
      var G__18336__i = 0, G__18336__a = new Array(arguments.length - 1);
      while (G__18336__i < G__18336__a.length) {
        G__18336__a[G__18336__i] = arguments[G__18336__i + 1];
        ++G__18336__i;
      }
      p__18333 = new cljs.core.IndexedSeq(G__18336__a, 0);
    }
    return url_decode__delegate.call(this, s, p__18333);
  };
  url_decode.cljs$lang$maxFixedArity = 1;
  url_decode.cljs$lang$applyTo = function(arglist__18337) {
    var s = cljs.core.first(arglist__18337);
    var p__18333 = cljs.core.rest(arglist__18337);
    return url_decode__delegate(s, p__18333);
  };
  url_decode.cljs$core$IFn$_invoke$arity$variadic = url_decode__delegate;
  return url_decode;
}();
no.en.core.pow = function pow(n, x) {
  return Math.pow(n, x);
};
no.en.core.byte_scale = cljs.core.PersistentHashMap.fromArrays(["T", "K", "G", "M", "Y", "Z", "E", "B", "P"], [no.en.core.pow.call(null, 1024, 4), no.en.core.pow.call(null, 1024, 1), no.en.core.pow.call(null, 1024, 3), no.en.core.pow.call(null, 1024, 2), no.en.core.pow.call(null, 1024, 8), no.en.core.pow.call(null, 1024, 7), no.en.core.pow.call(null, 1024, 6), no.en.core.pow.call(null, 1024, 0), no.en.core.pow.call(null, 1024, 5)]);
no.en.core.apply_unit = function apply_unit(number, unit) {
  if (typeof unit === "string") {
    var G__18340 = clojure.string.upper_case.call(null, unit);
    switch(G__18340) {
      default:
        var G__18341 = unit;
        switch(G__18341) {
          case "M":
            return number * 1E6;
            break;
          case "B":
            return number * 1E9;
            break;
          default:
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(unit)].join(""));;
        }
      ;
    }
  } else {
    return number;
  }
};
no.en.core.parse_number = function parse_number(s, parse_fn) {
  var temp__4124__auto__ = cljs.core.re_matches.call(null, /\s*([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)(M|B)?.*/, [cljs.core.str(s)].join(""));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var matches = temp__4124__auto__;
    var number = parse_fn.call(null, cljs.core.nth.call(null, matches, 1));
    var unit = cljs.core.nth.call(null, matches, 3);
    if (cljs.core.not.call(null, isNaN(number))) {
      return no.en.core.apply_unit.call(null, number, unit);
    } else {
      return null;
    }
  } else {
    return null;
  }
};
no.en.core.parse_bytes = function parse_bytes(s) {
  var temp__4124__auto__ = cljs.core.re_matches.call(null, /\s*([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)(B|K|M|G|T|P|E|Z|Y)?.*/, [cljs.core.str(s)].join(""));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var matches = temp__4124__auto__;
    var number = cljs.reader.read_string.call(null, cljs.core.nth.call(null, matches, 1));
    var unit = cljs.core.nth.call(null, matches, 3);
    return cljs.core.long$.call(null, cljs.core.long$.call(null, cljs.reader.read_string.call(null, [cljs.core.str(cljs.core.nth.call(null, matches, 1))].join(""))) * cljs.core.get.call(null, no.en.core.byte_scale, clojure.string.upper_case.call(null, function() {
      var or__3829__auto__ = unit;
      if (cljs.core.truth_(or__3829__auto__)) {
        return or__3829__auto__;
      } else {
        return "";
      }
    }()), 1));
  } else {
    return null;
  }
};
no.en.core.parse_integer = function parse_integer(s) {
  return no.en.core.parse_number.call(null, s, function(p1__18344_SHARP_) {
    return parseInt(p1__18344_SHARP_);
  });
};
no.en.core.parse_long = function parse_long(s) {
  return no.en.core.parse_number.call(null, s, function(p1__18345_SHARP_) {
    return parseInt(p1__18345_SHARP_);
  });
};
no.en.core.parse_double = function parse_double(s) {
  return no.en.core.parse_number.call(null, s, function(p1__18346_SHARP_) {
    return parseFloat(p1__18346_SHARP_);
  });
};
no.en.core.parse_float = function parse_float(s) {
  return no.en.core.parse_number.call(null, s, function(p1__18347_SHARP_) {
    return parseFloat(p1__18347_SHARP_);
  });
};
no.en.core.format_query_params = function format_query_params(m) {
  var params = clojure.string.join.call(null, "\x26", cljs.core.map.call(null, function(p1__18350_SHARP_) {
    return clojure.string.join.call(null, "\x3d", p1__18350_SHARP_);
  }, cljs.core.map.call(null, function(p1__18349_SHARP_) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [no.en.core.url_encode.call(null, cljs.core.name.call(null, cljs.core.first.call(null, p1__18349_SHARP_))), no.en.core.url_encode.call(null, cljs.core.second.call(null, p1__18349_SHARP_))], null);
  }, cljs.core.remove.call(null, function(p1__18348_SHARP_) {
    return clojure.string.blank_QMARK_.call(null, [cljs.core.str(cljs.core.second.call(null, p1__18348_SHARP_))].join(""));
  }, cljs.core.sort_by.call(null, cljs.core.first, cljs.core.seq.call(null, m))))));
  if (cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, params))) {
    return params;
  } else {
    return null;
  }
};
no.en.core.format_url = function format_url(m) {
  if (!cljs.core.empty_QMARK_.call(null, m)) {
    var query_params = (new cljs.core.Keyword(null, "query-params", "query-params", 900640534)).cljs$core$IFn$_invoke$arity$1(m);
    return[cljs.core.str(cljs.core.truth_((new cljs.core.Keyword(null, "scheme", "scheme", 90199613)).cljs$core$IFn$_invoke$arity$1(m)) ? [cljs.core.str(cljs.core.name.call(null, (new cljs.core.Keyword(null, "scheme", "scheme", 90199613)).cljs$core$IFn$_invoke$arity$1(m))), cljs.core.str("://")].join("") : null), cljs.core.str(function() {
      var map__18352 = m;
      var map__18352__$1 = cljs.core.seq_QMARK_.call(null, map__18352) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18352) : map__18352;
      var password = cljs.core.get.call(null, map__18352__$1, new cljs.core.Keyword(null, "password", "password", 417022471));
      var user = cljs.core.get.call(null, map__18352__$1, new cljs.core.Keyword(null, "user", "user", 1532431356));
      if (cljs.core.truth_(user)) {
        return[cljs.core.str(cljs.core.truth_(user) ? user : null), cljs.core.str(cljs.core.truth_(password) ? [cljs.core.str(":"), cljs.core.str(password)].join("") : null), cljs.core.str("@")].join("");
      } else {
        return null;
      }
    }()), cljs.core.str((new cljs.core.Keyword(null, "server-name", "server-name", -1012104295)).cljs$core$IFn$_invoke$arity$1(m)), cljs.core.str(function() {
      var temp__4124__auto__ = (new cljs.core.Keyword(null, "server-port", "server-port", 663745648)).cljs$core$IFn$_invoke$arity$1(m);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var port = temp__4124__auto__;
        if (!cljs.core._EQ_.call(null, port, no.en.core.port_number.call(null, (new cljs.core.Keyword(null, "scheme", "scheme", 90199613)).cljs$core$IFn$_invoke$arity$1(m)))) {
          return[cljs.core.str(":"), cljs.core.str(port)].join("");
        } else {
          return null;
        }
      } else {
        return null;
      }
    }()), cljs.core.str((new cljs.core.Keyword(null, "uri", "uri", -774711847)).cljs$core$IFn$_invoke$arity$1(m) == null && !cljs.core.empty_QMARK_.call(null, query_params) ? "/" : (new cljs.core.Keyword(null, "uri", "uri", -774711847)).cljs$core$IFn$_invoke$arity$1(m)), cljs.core.str(!cljs.core.empty_QMARK_.call(null, query_params) ? [cljs.core.str("?"), cljs.core.str(no.en.core.format_query_params.call(null, query_params))].join("") : null), cljs.core.str(cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, 
    (new cljs.core.Keyword(null, "fragment", "fragment", 826775688)).cljs$core$IFn$_invoke$arity$1(m))) ? [cljs.core.str("#"), cljs.core.str((new cljs.core.Keyword(null, "fragment", "fragment", 826775688)).cljs$core$IFn$_invoke$arity$1(m))].join("") : null)].join("");
  } else {
    return null;
  }
};
no.en.core.parse_percent = function parse_percent(s) {
  return no.en.core.parse_double.call(null, clojure.string.replace.call(null, s, "%", ""));
};
no.en.core.pattern_quote = function pattern_quote(s) {
  return clojure.string.replace.call(null, cljs.core.name.call(null, s), /([\[\]\^\$\|\(\)\\\+\*\?\{\}\=\!.])/, "\\\\$1");
};
no.en.core.separator = function separator(s) {
  var temp__4124__auto__ = cljs.core.re_matches.call(null, /([a-z0-9_-]+)([^a-z0-9_-]+).*/i, s);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var matches = temp__4124__auto__;
    return cljs.core.nth.call(null, matches, 2);
  } else {
    return null;
  }
};
no.en.core.parse_query_params = function parse_query_params(s) {
  if (cljs.core.truth_(s)) {
    return cljs.core.apply.call(null, cljs.core.hash_map, cljs.core.mapcat.call(null, function(p1__18355_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, no.en.core.url_decode.call(null, cljs.core.first.call(null, p1__18355_SHARP_))), no.en.core.url_decode.call(null, cljs.core.second.call(null, p1__18355_SHARP_))], null);
    }, cljs.core.filter.call(null, function(p1__18354_SHARP_) {
      return cljs.core._EQ_.call(null, 2, cljs.core.count.call(null, p1__18354_SHARP_));
    }, cljs.core.map.call(null, function(p1__18353_SHARP_) {
      return clojure.string.split.call(null, p1__18353_SHARP_, /=/);
    }, clojure.string.split.call(null, [cljs.core.str(s)].join(""), /&/)))));
  } else {
    return null;
  }
};
no.en.core.parse_url = function parse_url(s) {
  var temp__4124__auto__ = cljs.core.re_matches.call(null, no.en.core.url_regex, [cljs.core.str(s)].join(""));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var matches = temp__4124__auto__;
    var scheme = cljs.core.keyword.call(null, cljs.core.nth.call(null, matches, 1));
    return no.en.core.compact_map.call(null, cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "password", "password", 417022471), new cljs.core.Keyword(null, "fragment", "fragment", 826775688), new cljs.core.Keyword(null, "server-port", "server-port", 663745648), new cljs.core.Keyword(null, "query-params", "query-params", 900640534), new cljs.core.Keyword(null, "uri", "uri", -774711847), new cljs.core.Keyword(null, "server-name", "server-name", -1012104295), new cljs.core.Keyword(null, 
    "query-string", "query-string", -1018845061), new cljs.core.Keyword(null, "user", "user", 1532431356), new cljs.core.Keyword(null, "scheme", "scheme", 90199613)], [cljs.core.nth.call(null, matches, 4), cljs.core.nth.call(null, matches, 14), function() {
      var or__3829__auto__ = no.en.core.parse_integer.call(null, cljs.core.nth.call(null, matches, 8));
      if (cljs.core.truth_(or__3829__auto__)) {
        return or__3829__auto__;
      } else {
        return no.en.core.port_number.call(null, scheme);
      }
    }(), no.en.core.parse_query_params.call(null, cljs.core.nth.call(null, matches, 12)), cljs.core.nth.call(null, matches, 10), cljs.core.nth.call(null, matches, 6), cljs.core.nth.call(null, matches, 12), cljs.core.nth.call(null, matches, 3), scheme]));
  } else {
    return null;
  }
};
no.en.core.with_retries_STAR_ = function with_retries_STAR_(n, thunk) {
  var n__$1 = n;
  while (true) {
    var temp__4124__auto__ = function() {
      try {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [thunk.call(null)], null);
      } catch (e18357) {
        if (e18357 instanceof Error) {
          var e = e18357;
          if (n__$1 === 0) {
            throw e;
          } else {
            return null;
          }
        } else {
          throw e18357;
        }
      }
    }();
    if (cljs.core.truth_(temp__4124__auto__)) {
      var result = temp__4124__auto__;
      return result.call(null, 0);
    } else {
      var G__18358 = n__$1 - 1;
      n__$1 = G__18358;
      continue;
    }
    break;
  }
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(value, key) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("com.cognitect.transit.util");
goog.require("goog.object");
goog.scope(function() {
  var util = com.cognitect.transit.util, gobject = goog.object;
  if (typeof Object.keys != "undefined") {
    util.objectKeys = function(obj) {
      return Object.keys(obj);
    };
  } else {
    util.objectKeys = function(obj) {
      return gobject.getKeys(obj);
    };
  }
  if (typeof Array.isArray != "undefined") {
    util.isArray = function(obj) {
      return Array.isArray(obj);
    };
  } else {
    util.isArray = function(obj) {
      return goog.typeOf(obj) === "array";
    };
  }
  util.chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\x3d";
  util.randInt = function(ub) {
    return Math.round(Math.random() * ub);
  };
  util.randHex = function() {
    return util.randInt(15).toString(16);
  };
  util.randomUUID = function() {
    var rhex = (8 | 3 & util.randInt(14)).toString(16), ret = util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + "4" + util.randHex() + util.randHex() + util.randHex() + "-" + rhex + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + 
    util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex();
    return ret;
  };
  util.btoa = function(input) {
    if (typeof btoa != "undefined") {
      return btoa(input);
    } else {
      var str = String(input);
      for (var block, charCode, idx = 0, map = util.chars, output = "";str.charAt(idx | 0) || (map = "\x3d", idx % 1);output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
        charCode = str.charCodeAt(idx += 3 / 4);
        if (charCode > 255) {
          throw new Error("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
        }
        block = block << 8 | charCode;
      }
      return output;
    }
  };
  util.atob = function(input) {
    if (typeof atob != "undefined") {
      return atob(input);
    } else {
      var str = String(input).replace(/=+$/, "");
      if (str.length % 4 == 1) {
        throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
      }
      for (var bc = 0, bs, buffer, idx = 0, output = "";buffer = str.charAt(idx++);~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
        buffer = util.chars.indexOf(buffer);
      }
      return output;
    }
  };
  util.Uint8ToBase64 = function(u8Arr) {
    var CHUNK_SIZE = 32768, index = 0, length = u8Arr.length, result = "", slice = null;
    while (index < length) {
      slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));
      result += String.fromCharCode.apply(null, slice);
      index += CHUNK_SIZE;
    }
    return util.btoa(result);
  };
  util.Base64ToUint8 = function(base64) {
    var binary_string = util.atob(base64), len = binary_string.length, bytes = new Uint8Array(len);
    for (var i = 0;i < len;i++) {
      var ascii = binary_string.charCodeAt(i);
      bytes[i] = ascii;
    }
    return bytes;
  };
});
goog.provide("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.util");
goog.scope(function() {
  var eq = com.cognitect.transit.eq, util = com.cognitect.transit.util;
  eq.hashCodeProperty = "transit$hashCode$";
  eq.hashCodeCounter = 1;
  eq.equals = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      if (x === y) {
        return true;
      } else {
        if (typeof x === "object") {
          if (util.isArray(x)) {
            if (util.isArray(y)) {
              if (x.length === y.length) {
                for (var i = 0;i < x.length;i++) {
                  if (!eq.equals(x[i], y[i])) {
                    return false;
                  }
                }
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          } else {
            if (x.com$cognitect$transit$equals) {
              return x.com$cognitect$transit$equals(y);
            } else {
              if (y != null && typeof y === "object") {
                if (y.com$cognitect$transit$equals) {
                  return y.com$cognitect$transit$equals(x);
                } else {
                  var xklen = 0, yklen = util.objectKeys(y).length;
                  for (var p in x) {
                    if (!x.hasOwnProperty(p)) {
                      continue;
                    }
                    xklen++;
                    if (!y.hasOwnProperty(p)) {
                      return false;
                    } else {
                      if (!eq.equals(x[p], y[p])) {
                        return false;
                      }
                    }
                  }
                  return xklen === yklen;
                }
              } else {
                return false;
              }
            }
          }
        } else {
          return false;
        }
      }
    }
  };
  eq.hashCombine = function(seed, hash) {
    return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
  };
  eq.stringCodeCache = {};
  eq.stringCodeCacheSize = 0;
  eq.STR_CACHE_MAX = 256;
  eq.hashString = function(str) {
    var cached = eq.stringCodeCache[str];
    if (cached != null) {
      return cached;
    }
    var code = 0;
    for (var i = 0;i < str.length;++i) {
      code = 31 * code + str.charCodeAt(i);
      code %= 4294967296;
    }
    eq.stringCodeCacheSize++;
    if (eq.stringCodeCacheSize >= eq.STR_CACHE_MAX) {
      eq.stringCodeCache = {};
      eq.stringCodeCacheSize = 1;
    }
    eq.stringCodeCache[str] = code;
    return code;
  };
  eq.hashMapLike = function(m) {
    var code = 0;
    if (m.forEach != null) {
      m.forEach(function(val, key, m) {
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      });
    } else {
      var keys = util.objectKeys(m);
      for (var i = 0;i < keys.length;i++) {
        var key = keys[i];
        var val = m[key];
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      }
    }
    return code;
  };
  eq.hashArrayLike = function(arr) {
    var code = 0;
    if (util.isArray(arr)) {
      for (var i = 0;i < arr.length;i++) {
        code = eq.hashCombine(code, eq.hashCode(arr[i]));
      }
    } else {
      if (arr.forEach) {
        arr.forEach(function(x, i) {
          code = eq.hashCombine(code, eq.hashCode(x));
        });
      }
    }
    return code;
  };
  eq.hashCode = function(x) {
    if (x == null) {
      return 0;
    } else {
      switch(typeof x) {
        case "number":
          return x;
          break;
        case "boolean":
          return x === true ? 1 : 0;
          break;
        case "string":
          return eq.hashString(x);
          break;
        case "function":
          var code = x[eq.hashCodeProperty];
          if (code) {
            return code;
          } else {
            code = eq.hashCodeCounter;
            if (typeof Object.defineProperty != "undefined") {
              Object.defineProperty(x, eq.hashCodeProperty, {value:code, enumerable:false});
            } else {
              x[eq.hashCodeProperty] = code;
            }
            eq.hashCodeCounter++;
            return code;
          }
          break;
        default:
          if (x instanceof Date) {
            return x.valueOf();
          } else {
            if (util.isArray(x)) {
              return eq.hashArrayLike(x);
            }
          }
          if (x.com$cognitect$transit$hashCode) {
            return x.com$cognitect$transit$hashCode();
          } else {
            return eq.hashMapLike(x);
          }
          break;
      }
    }
  };
  eq.extendToEQ = function(obj, opts) {
    obj.com$cognitect$transit$hashCode = opts["hashCode"];
    obj.com$cognitect$transit$equals = opts["equals"];
    return obj;
  };
});
goog.provide("goog.math.Long");
goog.math.Long = function(low, high) {
  this.low_ = low | 0;
  this.high_ = high | 0;
};
goog.math.Long.IntCache_ = {};
goog.math.Long.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    var cachedObj = goog.math.Long.IntCache_[value];
    if (cachedObj) {
      return cachedObj;
    }
  }
  var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
  if (-128 <= value && value < 128) {
    goog.math.Long.IntCache_[value] = obj;
  }
  return obj;
};
goog.math.Long.fromNumber = function(value) {
  if (isNaN(value) || !isFinite(value)) {
    return goog.math.Long.ZERO;
  } else {
    if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else {
      if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
        return goog.math.Long.MAX_VALUE;
      } else {
        if (value < 0) {
          return goog.math.Long.fromNumber(-value).negate();
        } else {
          return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0);
        }
      }
    }
  }
};
goog.math.Long.fromBits = function(lowBits, highBits) {
  return new goog.math.Long(lowBits, highBits);
};
goog.math.Long.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw Error("number format error: empty string");
  }
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (str.charAt(0) == "-") {
    return goog.math.Long.fromString(str.substring(1), radix).negate();
  } else {
    if (str.indexOf("-") >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
  var result = goog.math.Long.ZERO;
  for (var i = 0;i < str.length;i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Long.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Long.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Long.fromNumber(value));
    }
  }
  return result;
};
goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_31_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ / 2;
goog.math.Long.TWO_PWR_48_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;
goog.math.Long.ZERO = goog.math.Long.fromInt(0);
goog.math.Long.ONE = goog.math.Long.fromInt(1);
goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
goog.math.Long.MAX_VALUE = goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 2147483648 | 0);
goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
goog.math.Long.prototype.toInt = function() {
  return this.low_;
};
goog.math.Long.prototype.toNumber = function() {
  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
};
goog.math.Long.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (this.isZero()) {
    return "0";
  }
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      var radixLong = goog.math.Long.fromNumber(radix);
      var div = this.div(radixLong);
      var rem = div.multiply(radixLong).subtract(this);
      return div.toString(radix) + rem.toInt().toString(radix);
    } else {
      return "-" + this.negate().toString(radix);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
  var rem = this;
  var result = "";
  while (true) {
    var remDiv = rem.div(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
    var digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = "0" + digits;
      }
      result = "" + digits + result;
    }
  }
};
goog.math.Long.prototype.getHighBits = function() {
  return this.high_;
};
goog.math.Long.prototype.getLowBits = function() {
  return this.low_;
};
goog.math.Long.prototype.getLowBitsUnsigned = function() {
  return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
};
goog.math.Long.prototype.getNumBitsAbs = function() {
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return 64;
    } else {
      return this.negate().getNumBitsAbs();
    }
  } else {
    var val = this.high_ != 0 ? this.high_ : this.low_;
    for (var bit = 31;bit > 0;bit--) {
      if ((val & 1 << bit) != 0) {
        break;
      }
    }
    return this.high_ != 0 ? bit + 33 : bit + 1;
  }
};
goog.math.Long.prototype.isZero = function() {
  return this.high_ == 0 && this.low_ == 0;
};
goog.math.Long.prototype.isNegative = function() {
  return this.high_ < 0;
};
goog.math.Long.prototype.isOdd = function() {
  return(this.low_ & 1) == 1;
};
goog.math.Long.prototype.equals = function(other) {
  return this.high_ == other.high_ && this.low_ == other.low_;
};
goog.math.Long.prototype.notEquals = function(other) {
  return this.high_ != other.high_ || this.low_ != other.low_;
};
goog.math.Long.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};
goog.math.Long.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};
goog.math.Long.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};
goog.math.Long.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};
goog.math.Long.prototype.compare = function(other) {
  if (this.equals(other)) {
    return 0;
  }
  var thisNeg = this.isNegative();
  var otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) {
    return-1;
  }
  if (!thisNeg && otherNeg) {
    return 1;
  }
  if (this.subtract(other).isNegative()) {
    return-1;
  } else {
    return 1;
  }
};
goog.math.Long.prototype.negate = function() {
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return goog.math.Long.MIN_VALUE;
  } else {
    return this.not().add(goog.math.Long.ONE);
  }
};
goog.math.Long.prototype.add = function(other) {
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 + b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.subtract = function(other) {
  return this.add(other.negate());
};
goog.math.Long.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Long.ZERO;
  } else {
    if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
  } else {
    if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
  }
  if (this.lessThan(goog.math.Long.TWO_PWR_24_) && other.lessThan(goog.math.Long.TWO_PWR_24_)) {
    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
  }
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.div = function(other) {
  if (other.isZero()) {
    throw Error("division by zero");
  } else {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    if (other.equals(goog.math.Long.ONE) || other.equals(goog.math.Long.NEG_ONE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    }
  } else {
    if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().div(other.negate());
    } else {
      return this.negate().div(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
  }
  var res = goog.math.Long.ZERO;
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
    var approxRes = goog.math.Long.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Long.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }
    if (approxRes.isZero()) {
      approxRes = goog.math.Long.ONE;
    }
    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return res;
};
goog.math.Long.prototype.modulo = function(other) {
  return this.subtract(this.div(other).multiply(other));
};
goog.math.Long.prototype.not = function() {
  return goog.math.Long.fromBits(~this.low_, ~this.high_);
};
goog.math.Long.prototype.and = function(other) {
  return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
};
goog.math.Long.prototype.or = function(other) {
  return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
};
goog.math.Long.prototype.xor = function(other) {
  return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
};
goog.math.Long.prototype.shiftLeft = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var low = this.low_;
    if (numBits < 32) {
      var high = this.high_;
      return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
    } else {
      return goog.math.Long.fromBits(0, low << numBits - 32);
    }
  }
};
goog.math.Long.prototype.shiftRight = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
    } else {
      return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
    }
  }
};
goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
    } else {
      if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> numBits - 32, 0);
      }
    }
  }
};
goog.provide("com.cognitect.transit.types");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.eq");
goog.require("goog.math.Long");
goog.scope(function() {
  var types = com.cognitect.transit.types, util = com.cognitect.transit.util, eq = com.cognitect.transit.eq, Long = goog.math.Long;
  types.TaggedValue = function(tag, rep) {
    this.tag = tag;
    this.rep = rep;
    this.hashCode = -1;
  };
  types.TaggedValue.prototype.toString = function() {
    return "[TaggedValue: " + this.tag + ", " + this.rep + "]";
  };
  types.TaggedValue.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.TaggedValue.prototype["equiv"] = types.TaggedValue.prototype.equiv;
  types.TaggedValue.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TaggedValue) {
      return this.tag === other.tag && eq.equals(this.rep, other.rep);
    } else {
      return false;
    }
  };
  types.TaggedValue.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCombine(eq.hashCode(this.tag), eq.hashCode(this.rep));
    }
    return this.hashCode;
  };
  types.taggedValue = function(tag, rep) {
    return new types.TaggedValue(tag, rep);
  };
  types.isTaggedValue = function(x) {
    return x instanceof types.TaggedValue;
  };
  types.nullValue = function() {
    return null;
  };
  types.boolValue = function(s) {
    return s === "t";
  };
  types.MAX_INT = Long.fromString("9007199254740992");
  types.MIN_INT = Long.fromString("-9007199254740992");
  types.intValue = function(s) {
    if (typeof s === "number") {
      return s;
    } else {
      if (s instanceof Long) {
        return s;
      } else {
        var n = Long.fromString(s, 10);
        if (n.greaterThan(types.MAX_INT) || n.lessThan(types.MIN_INT)) {
          return n;
        } else {
          return n.toNumber();
        }
      }
    }
  };
  Long.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  Long.prototype["equiv"] = Long.prototype.equiv;
  Long.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof Long && this.equals(other);
  };
  Long.prototype.com$cognitect$transit$hashCode = function() {
    return this.toInt();
  };
  types.isInteger = function(x) {
    if (x instanceof Long) {
      return true;
    } else {
      return typeof x === "number" && !isNaN(x) && !(x === Infinity) && parseFloat(x) === parseInt(x);
    }
  };
  types.floatValue = function(s) {
    return parseFloat(s);
  };
  types.bigInteger = function(s) {
    return types.taggedValue("n", s);
  };
  types.isBigInteger = function(x) {
    return x instanceof types.TaggedValue && x.tag === "n";
  };
  types.bigDecimalValue = function(s) {
    return types.taggedValue("f", s);
  };
  types.isBigDecimal = function(x) {
    return x instanceof types.TaggedValue && x.tag === "f";
  };
  types.charValue = function(s) {
    return s;
  };
  types.Keyword = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Keyword.prototype.toString = function() {
    return ":" + this.name;
  };
  types.Keyword.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Keyword.prototype["equiv"] = types.Keyword.prototype.equiv;
  types.Keyword.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Keyword && this.name == other.name;
  };
  types.Keyword.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.keyword = function(s) {
    return new types.Keyword(s);
  };
  types.isKeyword = function(x) {
    return x instanceof types.Keyword;
  };
  types.Symbol = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Symbol.prototype.toString = function() {
    return "[Symbol: " + this.name + "]";
  };
  types.Symbol.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Symbol.prototype["equiv"] = types.Symbol.prototype.equiv;
  types.Symbol.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Symbol && this.name == other.name;
  };
  types.Symbol.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.symbol = function(s) {
    return new types.Symbol(s);
  };
  types.isSymbol = function(x) {
    return x instanceof types.Symbol;
  };
  types.hexFor = function(aLong, sidx, eidx) {
    var ret = "", eidx = eidx || sidx + 1;
    for (var i = sidx, shift = (7 - i) * 8, mask = Long.fromInt(255).shiftLeft(shift);i < eidx;i++, shift -= 8, mask = mask.shiftRightUnsigned(8)) {
      var s = aLong.and(mask).shiftRightUnsigned(shift).toString(16);
      if (s.length == 1) {
        s = "0" + s;
      }
      ret += s;
    }
    return ret;
  };
  types.UUID = function(high, low) {
    this.high = high;
    this.low = low;
    this.hashCode = -1;
  };
  types.UUID.prototype.getLeastSignificantBits = function() {
    return this.low;
  };
  types.UUID.prototype.getMostSignificantBits = function() {
    return this.high;
  };
  types.UUID.prototype.toString = function(s) {
    var s = "", hi64 = this.high, lo64 = this.low;
    s += types.hexFor(hi64, 0, 4) + "-";
    s += types.hexFor(hi64, 4, 6) + "-";
    s += types.hexFor(hi64, 6, 8) + "-";
    s += types.hexFor(lo64, 0, 2) + "-";
    s += types.hexFor(lo64, 2, 8);
    return s;
  };
  types.UUID.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.UUID.prototype["equiv"] = types.UUID.prototype.equiv;
  types.UUID.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.UUID && this.high.equals(other.high) && this.low.equals(other.low);
  };
  types.UUID.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.toString());
    }
    return this.hashCode;
  };
  types.UUIDfromString = function uuidFromString(s) {
    var s = s.replace(/-/g, ""), hi64 = null, lo64 = null, hi32 = 0, lo32 = 0, off = 24, i = 0;
    for (hi32 = 0, i = 0, off = 24;i < 8;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 8, off = 24;i < 16;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    hi64 = Long.fromBits(lo32, hi32);
    for (hi32 = 0, i = 16, off = 24;i < 24;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 24, off = 24;i < 32;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    lo64 = Long.fromBits(lo32, hi32);
    return new types.UUID(hi64, lo64);
  };
  types.uuid = function(s) {
    return types.UUIDfromString(s);
  };
  types.isUUID = function(x) {
    return x instanceof types.UUID;
  };
  types.date = function(s) {
    s = typeof s === "number" ? s : parseInt(s, 10);
    return new Date(s);
  };
  types.verboseDate = function(s) {
    return new Date(s);
  };
  Date.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof Date) {
      return this.valueOf() === other.valueOf();
    } else {
      return false;
    }
  };
  Date.prototype.com$cognitect$transit$hashCode = function() {
    return this.valueOf();
  };
  types.binary = function(str, decoder) {
    if ((!decoder || decoder.preferBuffers !== false) && typeof Buffer != "undefined") {
      return new Buffer(str, "base64");
    } else {
      if (typeof Uint8Array != "undefined") {
        return util.Base64ToUint8(str);
      } else {
        return types.taggedValue("b", str);
      }
    }
  };
  types.isBinary = function(x) {
    if (typeof Buffer != "undefined" && x instanceof Buffer) {
      return true;
    } else {
      if (typeof Uint8Array != "undefined" && x instanceof Uint8Array) {
        return true;
      } else {
        return x instanceof types.TaggedValue && x.tag === "b";
      }
    }
  };
  types.uri = function(s) {
    return types.taggedValue("r", s);
  };
  types.isURI = function(x) {
    return x instanceof types.TaggedValue && x.tag === "r";
  };
  types.KEYS = 0;
  types.VALUES = 1;
  types.ENTRIES = 2;
  types.TransitArrayMapIterator = function(entries, type) {
    this.entries = entries;
    this.type = type || types.KEYS;
    this.idx = 0;
  };
  types.TransitArrayMapIterator.prototype.next = function(map, type) {
    if (this.idx < this.entries.length) {
      var value = null;
      if (this.type === types.KEYS) {
        value = this.entries[this.idx];
      } else {
        if (this.type === types.VALUES) {
          value = this.entries[this.idx + 1];
        } else {
          value = [this.entries[this.idx], this.entries[this.idx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx += 2;
      return ret;
    } else {
      return{"value":null, "done":true};
    }
  };
  types.TransitArrayMapIterator.prototype["next"] = types.TransitArrayMapIterator.prototype.next;
  types.TransitMapIterator = function(map, type) {
    this.map = map;
    this.type = type || types.KEYS;
    this.keys = this.map.getKeys();
    this.idx = 0;
    this.bucket = null;
    this.bucketIdx = 0;
  };
  types.TransitMapIterator.prototype.next = function() {
    if (this.idx < this.map.size) {
      if (this.bucket == null || !(this.bucketIdx < this.bucket.length)) {
        this.bucket = this.map.map[this.keys[this.idx]];
        this.bucketIdx = 0;
      }
      var value = null;
      if (this.type === types.KEYS) {
        value = this.bucket[this.bucketIdx];
      } else {
        if (this.type === types.VALUES) {
          value = this.bucket[this.bucketIdx + 1];
        } else {
          value = [this.bucket[this.bucketIdx], this.bucket[this.bucketIdx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx++;
      this.bucketIdx += 2;
      return ret;
    } else {
      return{"value":null, "done":true};
    }
  };
  types.TransitMapIterator.prototype["next"] = types.TransitMapIterator.prototype.next;
  types.mapEquals = function(me, you) {
    if ((you instanceof types.TransitMap || you instanceof types.TransitArrayMap) && me.size === you.size) {
      for (var code in me.map) {
        var bucket = me.map[code];
        for (var j = 0;j < bucket.length;j += 2) {
          if (!eq.equals(bucket[j + 1], you.get(bucket[j]))) {
            return false;
          }
        }
      }
      return true;
    } else {
      if (you != null && typeof you === "object") {
        var ks = util.objectKeys(you), kslen = ks.length;
        if (me.size === kslen) {
          for (var i = 0;i < kslen;i++) {
            var k = ks[i];
            if (!me.has(k) || !eq.equals(you[k], me.get(k))) {
              return false;
            }
          }
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  };
  types.SMALL_ARRAY_MAP_THRESHOLD = 8;
  types.ARRAY_MAP_THRESHOLD = 32;
  types.ARRAY_MAP_ACCESS_THRESHOLD = 32;
  types.TransitArrayMap = function(entries) {
    this._entries = entries;
    this.backingMap = null;
    this.hashCode = -1;
    this.size = entries.length / 2;
    this.accesses = 0;
  };
  types.TransitArrayMap.prototype.toString = function() {
    return "[TransitArrayMap]";
  };
  types.TransitArrayMap.prototype.convert = function() {
    if (this.backingMap) {
      throw Error("Invalid operation, already converted");
    }
    if (this.size < types.SMALL_ARRAY_MAP_THRESHOLD) {
      return false;
    }
    this.accesses++;
    if (this.accesses > types.ARRAY_MAP_ACCESS_THRESHOLD) {
      this.backingMap = types.map(this._entries, false, true);
      this._entries = [];
      return true;
    } else {
      return false;
    }
  };
  types.TransitArrayMap.prototype.clear = function() {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.clear();
      this.size = 0;
    } else {
      this._entries = [];
      this.size = 0;
    }
  };
  types.TransitArrayMap.prototype["clear"] = types.TransitArrayMap.prototype.clear;
  types.TransitArrayMap.prototype.keys = function() {
    if (this.backingMap) {
      return this.backingMap.keys();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.KEYS);
    }
  };
  types.TransitArrayMap.prototype["keys"] = types.TransitArrayMap.prototype.keys;
  types.TransitArrayMap.prototype.keySet = function() {
    if (this.backingMap) {
      return this.backingMap.keySet();
    } else {
      var ret = [];
      for (var i = 0, j = 0;j < this._entries.length;i++, j += 2) {
        ret[i] = this._entries[j];
      }
      return ret;
    }
  };
  types.TransitArrayMap.prototype["keySet"] = types.TransitArrayMap.prototype.keySet;
  types.TransitArrayMap.prototype.entries = function() {
    if (this.backingMap) {
      return this.backingMap.entries();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.ENTRIES);
    }
  };
  types.TransitArrayMap.prototype["entries"] = types.TransitArrayMap.prototype.entries;
  types.TransitArrayMap.prototype.values = function() {
    if (this.backingMap) {
      return this.backingMap.values();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.VALUES);
    }
  };
  types.TransitArrayMap.prototype["values"] = types.TransitArrayMap.prototype.values;
  types.TransitArrayMap.prototype.forEach = function(f) {
    if (this.backingMap) {
      this.backingMap.forEach(f);
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        f(this._entries[i + 1], this._entries[i]);
      }
    }
  };
  types.TransitArrayMap.prototype["forEach"] = types.TransitArrayMap.prototype.forEach;
  types.TransitArrayMap.prototype.get = function(k, notFound) {
    if (this.backingMap) {
      return this.backingMap.get(k);
    } else {
      if (this.convert()) {
        return this.get(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return this._entries[i + 1];
          }
        }
        return notFound;
      }
    }
  };
  types.TransitArrayMap.prototype["get"] = types.TransitArrayMap.prototype.get;
  types.TransitArrayMap.prototype.has = function(k) {
    if (this.backingMap) {
      return this.backingMap.has(k);
    } else {
      if (this.convert()) {
        return this.has(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return true;
          }
        }
        return false;
      }
    }
  };
  types.TransitArrayMap.prototype["has"] = types.TransitArrayMap.prototype.has;
  types.TransitArrayMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.set(k, v);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries[i + 1] = v;
          return;
        }
      }
      this._entries.push(k);
      this._entries.push(v);
      this.size++;
      if (this.size > types.ARRAY_MAP_THRESHOLD) {
        this.backingMap = types.map(this._entries, false, true);
        this._entries = null;
      }
    }
  };
  types.TransitArrayMap.prototype["set"] = types.TransitArrayMap.prototype.set;
  types.TransitArrayMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap["delete"](k);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries.splice(i, 2);
          this.size--;
          return;
        }
      }
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.backingMap) {
      return this.backingMap.com$cognitect$transit$hashCode();
    } else {
      if (this.hashCode === -1) {
        this.hashCode = eq.hashMapLike(this);
      }
      return this.hashCode;
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$equals = function(other) {
    if (this.backingMap) {
      return types.mapEquals(this.backingMap, other);
    } else {
      return types.mapEquals(this, other);
    }
  };
  types.TransitMap = function(keys, map, size) {
    this.map = map || {};
    this._keys = keys || [];
    this.size = size || 0;
    this.hashCode = -1;
  };
  types.TransitMap.prototype.toString = function() {
    return "[TransitMap]";
  };
  types.TransitMap.prototype.clear = function() {
    this.hashCode = -1;
    this.map = {};
    this._keys = [];
    this.size = 0;
  };
  types.TransitMap.prototype["clear"] = types.TransitMap.prototype.clear;
  types.TransitMap.prototype.getKeys = function() {
    if (this._keys != null) {
      return this._keys;
    } else {
      return util.objectKeys(this.map);
    }
  };
  types.TransitMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    this._keys = null;
    var code = eq.hashCode(k), bucket = this.map[code];
    for (var i = 0;i < bucket.length;i += 2) {
      if (eq.equals(k, bucket[i])) {
        bucket.splice(i, 2);
        if (bucket.length === 0) {
          delete this.map[code];
        }
        this.size--;
        break;
      }
    }
  };
  types.TransitMap.prototype.entries = function() {
    return new types.TransitMapIterator(this, types.ENTRIES);
  };
  types.TransitMap.prototype["entries"] = types.TransitMap.prototype.entries;
  types.TransitMap.prototype.forEach = function(callback) {
    var ks = this.getKeys();
    for (var i = 0;i < ks.length;i++) {
      var bucket = this.map[ks[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        callback(bucket[j + 1], bucket[j], this);
      }
    }
  };
  types.TransitMap.prototype["forEach"] = types.TransitMap.prototype.forEach;
  types.TransitMap.prototype.get = function(k, notFound) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return bucket[i + 1];
        }
      }
    } else {
      return notFound;
    }
  };
  types.TransitMap.prototype["get"] = types.TransitMap.prototype.get;
  types.TransitMap.prototype.has = function(k) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return true;
        }
      }
      return false;
    } else {
      return false;
    }
  };
  types.TransitMap.prototype["has"] = types.TransitMap.prototype.has;
  types.TransitMap.prototype.keys = function() {
    return new types.TransitMapIterator(this, types.KEYS);
  };
  types.TransitMap.prototype["keys"] = types.TransitMap.prototype.keys;
  types.TransitMap.prototype.keySet = function() {
    var keys = this.getKeys(), ret = [];
    for (var i = 0;i < keys.length;i++) {
      var bucket = this.map[keys[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        ret.push(bucket[j]);
      }
    }
    return ret;
  };
  types.TransitMap.prototype["keySet"] = types.TransitMap.prototype.keySet;
  types.TransitMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket == null) {
      if (this._keys) {
        this._keys.push(code);
      }
      this.map[code] = [k, v];
      this.size++;
    } else {
      var newEntry = true;
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(v, bucket[i])) {
          newEntry = false;
          bucket[i] = v;
          break;
        }
      }
      if (newEntry) {
        bucket.push(k);
        bucket.push(v);
        this.size++;
      }
    }
  };
  types.TransitMap.prototype["set"] = types.TransitMap.prototype.set;
  types.TransitMap.prototype.values = function() {
    return new types.TransitMapIterator(this, types.VALUES);
  };
  types.TransitMap.prototype["values"] = types.TransitMap.prototype.values;
  types.TransitMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashMapLike(this);
    }
    return this.hashCode;
  };
  types.TransitMap.prototype.com$cognitect$transit$equals = function(other) {
    return types.mapEquals(this, other);
  };
  types.map = function(arr, checkDups, hashMap) {
    arr = arr || [];
    checkDups = checkDups === false ? checkDups : true;
    hashMap = hashMap === true ? hashMap : false;
    if (!hashMap && arr.length <= types.ARRAY_MAP_THRESHOLD * 2) {
      if (checkDups) {
        var t = arr;
        arr = [];
        for (var i = 0;i < t.length;i += 2) {
          var seen = false;
          for (var j = 0;j < arr.length;j += 2) {
            if (eq.equals(arr[j], t[i])) {
              arr[j + 1] = t[i + 1];
              seen = true;
              break;
            }
          }
          if (!seen) {
            arr.push(t[i]);
            arr.push(t[i + 1]);
          }
        }
      }
      return new types.TransitArrayMap(arr);
    } else {
      var map = {}, keys = [], size = 0;
      for (var i = 0;i < arr.length;i += 2) {
        var code = eq.hashCode(arr[i]), bucket = map[code];
        if (bucket == null) {
          keys.push(code);
          map[code] = [arr[i], arr[i + 1]];
          size++;
        } else {
          var newEntry = true;
          for (var j = 0;j < bucket.length;j += 2) {
            if (eq.equals(bucket[j], arr[i])) {
              bucket[j + 1] = arr[i + 1];
              newEntry = false;
              break;
            }
          }
          if (newEntry) {
            bucket.push(arr[i]);
            bucket.push(arr[i + 1]);
            size++;
          }
        }
      }
      return new types.TransitMap(keys, map, size);
    }
  };
  types.isArrayMap = function(x) {
    return x instanceof types.TransitArrayMap;
  };
  types.isMap = function(x) {
    return x instanceof types.TransitArrayMap || x instanceof types.TransitMap;
  };
  types.TransitSet = function(map) {
    this.map = map;
    this.size = map.size;
  };
  types.TransitSet.prototype.toString = function() {
    return "[TransitSet]";
  };
  types.TransitSet.prototype.add = function(value) {
    this.map.set(value, value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype["add"] = types.TransitSet.prototype.add;
  types.TransitSet.prototype.clear = function() {
    this.map = new types.TransitMap;
    this.size = 0;
  };
  types.TransitSet.prototype["clear"] = types.TransitSet.prototype.clear;
  types.TransitSet.prototype["delete"] = function(value) {
    this.map["delete"](value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype.entries = function() {
    return this.map.entries();
  };
  types.TransitSet.prototype["entries"] = types.TransitSet.prototype.entries;
  types.TransitSet.prototype.forEach = function(iterator, thisArg) {
    var self = this;
    this.map.forEach(function(v, k, m) {
      iterator(k, self);
    });
  };
  types.TransitSet.prototype["forEach"] = types.TransitSet.prototype.forEach;
  types.TransitSet.prototype.has = function(value) {
    return this.map.has(value);
  };
  types.TransitSet.prototype["has"] = types.TransitSet.prototype.has;
  types.TransitSet.prototype.keys = function() {
    return this.map.keys();
  };
  types.TransitSet.prototype["keys"] = types.TransitSet.prototype.keys;
  types.TransitSet.prototype.keySet = function() {
    return this.map.keySet();
  };
  types.TransitSet.prototype["keySet"] = types.TransitSet.prototype.keySet;
  types.TransitSet.prototype.values = function() {
    return this.map.values();
  };
  types.TransitSet.prototype["values"] = types.TransitSet.prototype.values;
  types.TransitSet.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TransitSet) {
      if (this.size === other.size) {
        return eq.equals(this.map, other.map);
      }
    } else {
      return false;
    }
  };
  types.TransitSet.prototype.com$cognitect$transit$hashCode = function(other) {
    return eq.hashCode(this.map);
  };
  types.set = function(arr) {
    arr = arr || [];
    var map = {}, keys = [], size = 0;
    for (var i = 0;i < arr.length;i++) {
      var code = eq.hashCode(arr[i]), vals = map[code];
      if (vals == null) {
        keys.push(code);
        map[code] = [arr[i], arr[i]];
        size++;
      } else {
        var newEntry = true;
        for (var j = 0;j < vals.length;j += 2) {
          if (eq.equals(vals[j], arr[i])) {
            newEntry = false;
            break;
          }
        }
        if (newEntry) {
          vals.push(arr[i]);
          vals.push(arr[i]);
          size++;
        }
      }
    }
    return new types.TransitSet(new types.TransitMap(keys, map, size));
  };
  types.isSet = function(x) {
    return x instanceof types.TransitSet;
  };
  types.quoted = function(obj) {
    return types.taggedValue("'", obj);
  };
  types.isQuoted = function(x) {
    return x instanceof types.TaggedValue && x.tag === "'";
  };
  types.list = function(xs) {
    return types.taggedValue("list", xs);
  };
  types.isList = function(x) {
    return x instanceof types.List && x.tag === "list";
  };
  types.link = function(rep) {
    return types.taggedValue("link", rep);
  };
  types.isLink = function(x) {
    return x instanceof types.TaggedValue && x.tag === "link";
  };
  types.specialDouble = function(v) {
    switch(v) {
      case "-INF":
        return-Infinity;
      case "INF":
        return Infinity;
      case "NaN":
        return NaN;
      default:
        throw new Error("Invalid special double value " + v);break;
    }
  };
});
goog.provide("com.cognitect.transit.delimiters");
goog.scope(function() {
  var delimiters = com.cognitect.transit.delimiters;
  delimiters.ESC = "~";
  delimiters.TAG = "#";
  delimiters.SUB = "^";
  delimiters.RES = "`";
  delimiters.ESC_TAG = "~#";
});
goog.provide("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.delimiters");
goog.scope(function() {
  var caching = com.cognitect.transit.caching, d = com.cognitect.transit.delimiters;
  caching.MIN_SIZE_CACHEABLE = 3;
  caching.BASE_CHAR_IDX = 48;
  caching.CACHE_CODE_DIGITS = 44;
  caching.MAX_CACHE_ENTRIES = caching.CACHE_CODE_DIGITS * caching.CACHE_CODE_DIGITS;
  caching.MAX_CACHE_SIZE = 4096;
  caching.isCacheable = function(string, asMapKey) {
    if (string.length > caching.MIN_SIZE_CACHEABLE) {
      if (asMapKey) {
        return true;
      } else {
        var c0 = string.charAt(0), c1 = string.charAt(1);
        if (c0 === d.ESC) {
          return c1 === ":" || c1 === "$" || c1 === "#";
        } else {
          return false;
        }
      }
    } else {
      return false;
    }
  };
  caching.idxToCode = function(idx) {
    var hi = Math.floor(idx / caching.CACHE_CODE_DIGITS), lo = idx % caching.CACHE_CODE_DIGITS, loc = String.fromCharCode(lo + caching.BASE_CHAR_IDX);
    if (hi === 0) {
      return d.SUB + loc;
    } else {
      return d.SUB + String.fromCharCode(hi + caching.BASE_CHAR_IDX) + loc;
    }
  };
  caching.WriteCache = function() {
    this.idx = 0;
    this.gen = 0;
    this.cacheSize = 0;
    this.cache = {};
  };
  caching.WriteCache.prototype.write = function(string, asMapKey) {
    if (caching.isCacheable(string, asMapKey)) {
      if (this.cacheSize === caching.MAX_CACHE_SIZE) {
        this.clear();
        this.gen = 0;
        this.cache = {};
      } else {
        if (this.idx === caching.MAX_CACHE_ENTRIES) {
          this.clear();
        }
      }
      var entry = this.cache[string];
      if (entry == null) {
        this.cache[string] = [caching.idxToCode(this.idx), this.gen];
        this.idx++;
        return string;
      } else {
        if (entry[1] != this.gen) {
          entry[1] = this.gen;
          entry[0] = caching.idxToCode(this.idx);
          this.idx++;
          return string;
        } else {
          return entry[0];
        }
      }
    } else {
      return string;
    }
  };
  caching.WriteCache.prototype.clear = function() {
    this.idx = 0;
    this.gen++;
  };
  caching.writeCache = function() {
    return new caching.WriteCache;
  };
  caching.isCacheCode = function(string) {
    return string.charAt(0) === d.SUB && string.charAt(1) !== " ";
  };
  caching.codeToIdx = function(code) {
    if (code.length === 2) {
      return code.charCodeAt(1) - caching.BASE_CHAR_IDX;
    } else {
      var hi = (code.charCodeAt(1) - caching.BASE_CHAR_IDX) * caching.CACHE_CODE_DIGITS, lo = code.charCodeAt(2) - caching.BASE_CHAR_IDX;
      return hi + lo;
    }
  };
  caching.ReadCache = function() {
    this.idx = 0;
    this.cache = [];
  };
  caching.ReadCache.prototype.write = function(obj, asMapKey) {
    if (this.idx == caching.MAX_CACHE_ENTRIES) {
      this.idx = 0;
    }
    this.cache[this.idx] = obj;
    this.idx++;
    return obj;
  };
  caching.ReadCache.prototype.read = function(string, asMapKey) {
    return this.cache[caching.codeToIdx(string)];
  };
  caching.ReadCache.prototype.clear = function() {
    this.idx = 0;
  };
  caching.readCache = function() {
    return new caching.ReadCache;
  };
});
goog.provide("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.delimiters");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.types");
goog.scope(function() {
  var decoder = com.cognitect.transit.impl.decoder, util = com.cognitect.transit.util, d = com.cognitect.transit.delimiters, caching = com.cognitect.transit.caching, types = com.cognitect.transit.types;
  decoder.Tag = function(s) {
    this.str = s;
  };
  decoder.tag = function(s) {
    return new decoder.Tag(s);
  };
  decoder.isTag = function(x) {
    return x && x instanceof decoder.Tag;
  };
  decoder.isGroundHandler = function(handler) {
    switch(handler) {
      case "_":
      ;
      case "s":
      ;
      case "?":
      ;
      case "i":
      ;
      case "d":
      ;
      case "b":
      ;
      case "'":
      ;
      case "array":
      ;
      case "map":
        return true;
    }
    return false;
  };
  decoder.Decoder = function(options) {
    this.options = options || {};
    this.handlers = {};
    for (var h in this.defaults.handlers) {
      this.handlers[h] = this.defaults.handlers[h];
    }
    for (var h in this.options["handlers"]) {
      if (decoder.isGroundHandler(h)) {
        throw new Error('Cannot override handler for ground type "' + h + '"');
      }
      this.handlers[h] = this.options["handlers"][h];
    }
    this.preferStrings = this.options["preferStrings"] != null ? this.options["preferStrings"] : this.defaults.preferStrings;
    this.preferBuffers = this.options["preferBuffers"] != null ? this.options["preferBuffers"] : this.defaults.preferBuffers;
    this.defaultHandler = this.options["defaultHandler"] || this.defaults.defaultHandler;
    this.mapBuilder = this.options["mapBuilder"];
    this.arrayBuilder = this.options["arrayBuilder"];
  };
  decoder.Decoder.prototype.defaults = {handlers:{"_":function(v, d) {
    return types.nullValue();
  }, "?":function(v, d) {
    return types.boolValue(v);
  }, "b":function(v, d) {
    return types.binary(v, d);
  }, "i":function(v, d) {
    return types.intValue(v);
  }, "n":function(v, d) {
    return types.bigInteger(v);
  }, "d":function(v, d) {
    return types.floatValue(v);
  }, "f":function(v, d) {
    return types.bigDecimalValue(v);
  }, "c":function(v, d) {
    return types.charValue(v);
  }, ":":function(v, d) {
    return types.keyword(v);
  }, "$":function(v, d) {
    return types.symbol(v);
  }, "r":function(v, d) {
    return types.uri(v);
  }, "z":function(v, d) {
    return types.specialDouble(v);
  }, "'":function(v, d) {
    return v;
  }, "m":function(v, d) {
    return types.date(v);
  }, "t":function(v, d) {
    return types.verboseDate(v);
  }, "u":function(v, d) {
    return types.uuid(v);
  }, "set":function(v, d) {
    return types.set(v);
  }, "list":function(v, d) {
    return types.list(v);
  }, "link":function(v, d) {
    return types.link(v);
  }, "cmap":function(v, d) {
    return types.map(v, false);
  }}, defaultHandler:function(c, val) {
    return types.taggedValue(c, val);
  }, preferStrings:true, preferBuffers:true};
  decoder.Decoder.prototype.decode = function(node, cache, asMapKey, tagValue) {
    if (node == null) {
      return null;
    }
    var t = typeof node;
    switch(t) {
      case "string":
        return this.decodeString(node, cache, asMapKey, tagValue);
        break;
      case "object":
        if (util.isArray(node)) {
          if (node[0] === "^ ") {
            return this.decodeArrayHash(node, cache, asMapKey, tagValue);
          } else {
            return this.decodeArray(node, cache, asMapKey, tagValue);
          }
        } else {
          return this.decodeHash(node, cache, asMapKey, tagValue);
        }
        break;
    }
    return node;
  };
  decoder.Decoder.prototype["decode"] = decoder.Decoder.prototype.decode;
  decoder.Decoder.prototype.decodeString = function(string, cache, asMapKey, tagValue) {
    if (caching.isCacheable(string, asMapKey)) {
      var val = this.parseString(string, cache, false);
      if (cache) {
        cache.write(val, asMapKey);
      }
      return val;
    } else {
      if (caching.isCacheCode(string)) {
        return cache.read(string, asMapKey);
      } else {
        return this.parseString(string, cache, asMapKey);
      }
    }
  };
  decoder.Decoder.prototype.decodeHash = function(hash, cache, asMapKey, tagValue) {
    var ks = util.objectKeys(hash), key = ks[0], tag = ks.length == 1 ? this.decode(key, cache, false, false) : null;
    if (decoder.isTag(tag)) {
      var val = hash[key], handler = this.handlers[tag.str];
      if (handler != null) {
        return handler(this.decode(val, cache, false, true), this);
      } else {
        return types.taggedValue(tag.str, this.decode(val, cache, false, false));
      }
    } else {
      if (this.mapBuilder) {
        if (ks.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 && this.mapBuilder.fromArray) {
          var nodep = [];
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            nodep.push(this.decode(strKey, cache, true, false));
            nodep.push(this.decode(hash[strKey], cache, false, false));
          }
          return this.mapBuilder.fromArray(nodep, hash);
        } else {
          var ret = this.mapBuilder.init(hash);
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            ret = this.mapBuilder.add(ret, this.decode(strKey, cache, true, false), this.decode(hash[strKey], cache, false, false), hash);
          }
          return this.mapBuilder.finalize(ret, hash);
        }
      } else {
        var nodep = [];
        for (var i = 0;i < ks.length;i++) {
          var strKey = ks[i];
          nodep.push(this.decode(strKey, cache, true, false));
          nodep.push(this.decode(hash[strKey], cache, false, false));
        }
        return types.map(nodep, false);
      }
    }
  };
  decoder.Decoder.prototype.decodeArrayHash = function(node, cache, asMapKey, tagValue) {
    if (this.mapBuilder) {
      if (node.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 + 1 && this.mapBuilder.fromArray) {
        var nodep = [];
        for (var i = 1;i < node.length;i += 2) {
          nodep.push(this.decode(node[i], cache, true, false));
          nodep.push(this.decode(node[i + 1], cache, false, false));
        }
        return this.mapBuilder.fromArray(nodep, node);
      } else {
        var ret = this.mapBuilder.init(node);
        for (var i = 1;i < node.length;i += 2) {
          ret = this.mapBuilder.add(ret, this.decode(node[i], cache, true, false), this.decode(node[i + 1], cache, false, false), node);
        }
        return this.mapBuilder.finalize(ret, node);
      }
    } else {
      var nodep = [];
      for (var i = 1;i < node.length;i += 2) {
        nodep.push(this.decode(node[i], cache, true, false));
        nodep.push(this.decode(node[i + 1], cache, false, false));
      }
      return types.map(nodep, false);
    }
  };
  decoder.Decoder.prototype.decodeArray = function(node, cache, asMapKey, tagValue) {
    if (tagValue) {
      var ret = [];
      for (var i = 0;i < node.length;i++) {
        ret.push(this.decode(node[i], cache, asMapKey, false));
      }
      return ret;
    } else {
      var cacheIdx = cache && cache.idx;
      if (node.length === 2 && typeof node[0] === "string") {
        var tag = this.decode(node[0], cache, false, false);
        if (decoder.isTag(tag)) {
          var val = node[1], handler = this.handlers[tag.str];
          if (handler != null) {
            var ret = handler(this.decode(val, cache, asMapKey, true), this);
            return ret;
          } else {
            return types.taggedValue(tag.str, this.decode(val, cache, asMapKey, false));
          }
        }
      }
      if (cache && cacheIdx != cache.idx) {
        cache.idx = cacheIdx;
      }
      if (this.arrayBuilder) {
        if (node.length <= 32 && this.arrayBuilder.fromArray) {
          var arr = [];
          for (var i = 0;i < node.length;i++) {
            arr.push(this.decode(node[i], cache, asMapKey, false));
          }
          return this.arrayBuilder.fromArray(arr, node);
        } else {
          var ret = this.arrayBuilder.init();
          for (var i = 0;i < node.length;i++) {
            ret = this.arrayBuilder.add(ret, this.decode(node[i], cache, asMapKey, false), node);
          }
          return this.arrayBuilder.finalize(ret, node);
        }
      } else {
        var ret = [];
        for (var i = 0;i < node.length;i++) {
          ret.push(this.decode(node[i], cache, asMapKey, false));
        }
        return ret;
      }
    }
  };
  decoder.Decoder.prototype.parseString = function(string, cache, asMapKey) {
    if (string.charAt(0) === d.ESC) {
      var c = string.charAt(1);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return string.substring(1);
      } else {
        if (c === d.TAG) {
          return decoder.tag(string.substring(2));
        } else {
          var handler = this.handlers[c];
          if (handler == null) {
            return this.defaultHandler(c, string.substring(2));
          } else {
            return handler(string.substring(2), this);
          }
        }
      }
    } else {
      return string;
    }
  };
  decoder.decoder = function(options) {
    return new decoder.Decoder(options);
  };
});
goog.provide("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
goog.scope(function() {
  var reader = com.cognitect.transit.impl.reader, decoder = com.cognitect.transit.impl.decoder, caching = com.cognitect.transit.caching;
  reader.JSONUnmarshaller = function(opts) {
    this.decoder = new decoder.Decoder(opts);
  };
  reader.JSONUnmarshaller.prototype.unmarshal = function(str, cache) {
    return this.decoder.decode(JSON.parse(str), cache);
  };
  reader.Reader = function(unmarshaller, options) {
    this.unmarshaller = unmarshaller;
    this.options = options || {};
    this.cache = this.options["cache"] ? this.options["cache"] : new caching.ReadCache;
  };
  reader.Reader.prototype.read = function(str) {
    var ret = this.unmarshaller.unmarshal(str, this.cache);
    this.cache.clear();
    return ret;
  };
  reader.Reader.prototype["read"] = reader.Reader.prototype.read;
});
goog.provide("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.types");
goog.require("goog.math.Long");
goog.scope(function() {
  var handlers = com.cognitect.transit.handlers, util = com.cognitect.transit.util, types = com.cognitect.transit.types, Long = goog.math.Long;
  handlers.ctorGuid = 0;
  handlers.ctorGuidProperty = "transit$guid$" + util.randomUUID();
  handlers.typeTag = function(ctor) {
    if (ctor == null) {
      return "null";
    } else {
      if (ctor === String) {
        return "string";
      } else {
        if (ctor === Boolean) {
          return "boolean";
        } else {
          if (ctor === Number) {
            return "number";
          } else {
            if (ctor === Array) {
              return "array";
            } else {
              if (ctor === Object) {
                return "map";
              } else {
                var tag = ctor[handlers.ctorGuidProperty];
                if (tag == null) {
                  if (typeof Object.defineProperty != "undefined") {
                    tag = ++handlers.ctorGuid;
                    Object.defineProperty(ctor, handlers.ctorGuidProperty, {value:tag, enumerable:false});
                  } else {
                    ctor[handlers.ctorGuidProperty] = tag = ++handlers.ctorGuid;
                  }
                }
                return tag;
              }
            }
          }
        }
      }
    }
  };
  handlers.constructor = function(x) {
    if (x == null) {
      return null;
    } else {
      return x.constructor;
    }
  };
  handlers.padZeros = function(n, m) {
    var s = n.toString();
    for (var i = s.length;i < m;i++) {
      s = "0" + s;
    }
    return s;
  };
  handlers.stringableKeys = function(m) {
    var stringable = false, ks = util.objectKeys(m);
    for (var i = 0;i < ks.length;i++) {
    }
    return true;
  };
  handlers.NilHandler = function() {
  };
  handlers.NilHandler.prototype.tag = function(v) {
    return "_";
  };
  handlers.NilHandler.prototype.rep = function(v) {
    return null;
  };
  handlers.NilHandler.prototype.stringRep = function(v) {
    return "null";
  };
  handlers.StringHandler = function() {
  };
  handlers.StringHandler.prototype.tag = function(v) {
    return "s";
  };
  handlers.StringHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.StringHandler.prototype.stringRep = function(v) {
    return v;
  };
  handlers.NumberHandler = function() {
  };
  handlers.NumberHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.NumberHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.NumberHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler = function() {
  };
  handlers.IntegerHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.IntegerHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.BooleanHandler = function() {
  };
  handlers.BooleanHandler.prototype.tag = function(v) {
    return "?";
  };
  handlers.BooleanHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.BooleanHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.ArrayHandler = function() {
  };
  handlers.ArrayHandler.prototype.tag = function(v) {
    return "array";
  };
  handlers.ArrayHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.ArrayHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.MapHandler = function() {
  };
  handlers.MapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.MapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.MapHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.VerboseDateHandler = function() {
  };
  handlers.VerboseDateHandler.prototype.tag = function(v) {
    return "t";
  };
  handlers.VerboseDateHandler.prototype.rep = function(v) {
    return v.getUTCFullYear() + "-" + handlers.padZeros(v.getUTCMonth() + 1, 2) + "-" + handlers.padZeros(v.getUTCDate(), 2) + "T" + handlers.padZeros(v.getUTCHours(), 2) + ":" + handlers.padZeros(v.getUTCMinutes(), 2) + ":" + handlers.padZeros(v.getUTCSeconds(), 2) + "." + handlers.padZeros(v.getUTCMilliseconds(), 3) + "Z";
  };
  handlers.VerboseDateHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.DateHandler = function() {
  };
  handlers.DateHandler.prototype.tag = function(v) {
    return "m";
  };
  handlers.DateHandler.prototype.rep = function(v) {
    return v.valueOf();
  };
  handlers.DateHandler.prototype.stringRep = function(v) {
    return v.valueOf().toString();
  };
  handlers.DateHandler.prototype.getVerboseHandler = function(v) {
    return new handlers.VerboseDateHandler;
  };
  handlers.UUIDHandler = function() {
  };
  handlers.UUIDHandler.prototype.tag = function(v) {
    return "u";
  };
  handlers.UUIDHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.UUIDHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.KeywordHandler = function() {
  };
  handlers.KeywordHandler.prototype.tag = function(v) {
    return ":";
  };
  handlers.KeywordHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.KeywordHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.SymbolHandler = function() {
  };
  handlers.SymbolHandler.prototype.tag = function(v) {
    return "$";
  };
  handlers.SymbolHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.SymbolHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.TaggedHandler = function() {
  };
  handlers.TaggedHandler.prototype.tag = function(v) {
    return v.tag;
  };
  handlers.TaggedHandler.prototype.rep = function(v) {
    return v.rep;
  };
  handlers.TaggedHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitSetHandler = function() {
  };
  handlers.TransitSetHandler.prototype.tag = function(v) {
    return "set";
  };
  handlers.TransitSetHandler.prototype.rep = function(v) {
    var arr = [];
    v.forEach(function(key, set) {
      arr.push(key);
    });
    return types.taggedValue("array", arr);
  };
  handlers.TransitSetHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitArrayMapHandler = function() {
  };
  handlers.TransitArrayMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitArrayMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitArrayMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitMapHandler = function() {
  };
  handlers.TransitMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.BufferHandler = function() {
  };
  handlers.BufferHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.BufferHandler.prototype.rep = function(v) {
    return v.toString("base64");
  };
  handlers.BufferHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.Uint8ArrayHandler = function() {
  };
  handlers.Uint8ArrayHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.Uint8ArrayHandler.prototype.rep = function(v) {
    return util.Uint8ToBase64(v);
  };
  handlers.Uint8ArrayHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.defaultHandlers = function(hs) {
    hs.set(null, new handlers.NilHandler);
    hs.set(String, new handlers.StringHandler);
    hs.set(Number, new handlers.NumberHandler);
    hs.set(Long, new handlers.IntegerHandler);
    hs.set(Boolean, new handlers.BooleanHandler);
    hs.set(Array, new handlers.ArrayHandler);
    hs.set(Object, new handlers.MapHandler);
    hs.set(Date, new handlers.DateHandler);
    hs.set(types.UUID, new handlers.UUIDHandler);
    hs.set(types.Keyword, new handlers.KeywordHandler);
    hs.set(types.Symbol, new handlers.SymbolHandler);
    hs.set(types.TaggedValue, new handlers.TaggedHandler);
    hs.set(types.TransitSet, new handlers.TransitSetHandler);
    hs.set(types.TransitArrayMap, new handlers.TransitArrayMapHandler);
    hs.set(types.TransitMap, new handlers.TransitMapHandler);
    if (typeof Buffer != "undefined") {
      hs.set(Buffer, new handlers.BufferHandler);
    }
    if (typeof Uint8Array != "undefined") {
      hs.set(Uint8Array, new handlers.Uint8ArrayHandler);
    }
    return hs;
  };
  handlers.Handlers = function() {
    this.handlers = {};
    handlers.defaultHandlers(this);
  };
  handlers.Handlers.prototype.get = function(ctor) {
    var h = null;
    if (typeof ctor === "string") {
      h = this.handlers[ctor];
    } else {
      h = this.handlers[handlers.typeTag(ctor)];
    }
    if (h != null) {
      return h;
    } else {
      return this.handlers["default"];
    }
  };
  handlers.validTag = function(tag) {
    switch(tag) {
      case "null":
      ;
      case "string":
      ;
      case "boolean":
      ;
      case "number":
      ;
      case "array":
      ;
      case "map":
        return false;
        break;
    }
    return true;
  };
  handlers.Handlers.prototype.set = function(ctor, handler) {
    if (typeof ctor === "string" && handlers.validTag(ctor)) {
      this.handlers[ctor] = handler;
    } else {
      this.handlers[handlers.typeTag(ctor)] = handler;
    }
  };
});
goog.provide("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.delimiters");
goog.require("goog.math.Long");
goog.scope(function() {
  var writer = com.cognitect.transit.impl.writer, util = com.cognitect.transit.util, caching = com.cognitect.transit.caching, handlers = com.cognitect.transit.handlers, types = com.cognitect.transit.types, d = com.cognitect.transit.delimiters, Long = goog.math.Long;
  writer.escape = function(string) {
    if (string.length > 0) {
      var c = string.charAt(0);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return d.ESC + string;
      } else {
        return string;
      }
    } else {
      return string;
    }
  };
  writer.JSONMarshaller = function(opts) {
    this.opts = opts || {};
    this.preferStrings = this.opts["preferStrings"] != null ? this.opts["preferStrings"] : true;
    this.objectBuilder = this.opts["objectBuilder"] || null;
    this.handlers = new handlers.Handlers;
    var optsHandlers = this.opts["handlers"];
    if (optsHandlers) {
      if (util.isArray(optsHandlers) || !optsHandlers.forEach) {
        throw new Error('transit writer "handlers" option must be a map');
      }
      var self = this;
      optsHandlers.forEach(function(v, k) {
        self.handlers.set(k, v);
      });
    }
    this.unpack = this.opts["unpack"] || function(x) {
      if (types.isArrayMap(x) && x.backingMap === null) {
        return x._entries;
      } else {
        return false;
      }
    };
    this.verbose = this.opts && this.opts["verbose"] || false;
  };
  writer.JSONMarshaller.prototype.handler = function(obj) {
    var h = this.handlers.get(handlers.constructor(obj));
    if (h != null) {
      return h;
    } else {
      var tag = obj && obj["transitTag"];
      if (tag) {
        return this.handlers.get(tag);
      } else {
        return null;
      }
    }
  };
  writer.JSONMarshaller.prototype.registerHandler = function(ctor, handler) {
    this.handlers.set(ctor, handler);
  };
  writer.JSONMarshaller.prototype.emitNil = function(asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "_", "", asMapKey, cache);
    } else {
      return null;
    }
  };
  writer.JSONMarshaller.prototype.emitString = function(prefix, tag, s, asMapKey, cache) {
    var string = prefix + tag + s;
    if (cache) {
      return cache.write(string, asMapKey);
    } else {
      return string;
    }
  };
  writer.JSONMarshaller.prototype.emitBoolean = function(b, asMapKey, cache) {
    if (asMapKey) {
      var s = b.toString();
      return this.emitString(d.ESC, "?", s[0], asMapKey, cache);
    } else {
      return b;
    }
  };
  writer.JSONMarshaller.prototype.emitInteger = function(i, asMapKey, cache) {
    if (i === Infinity) {
      return this.emitString(d.ESC, "z", "INF", asMapKey, cache);
    } else {
      if (i === -Infinity) {
        return this.emitString(d.ESC, "z", "-INF", asMapKey, cache);
      } else {
        if (isNaN(i)) {
          return this.emitString(d.ESC, "z", "NaN", asMapKey, cache);
        } else {
          if (asMapKey || typeof i === "string" || i instanceof Long) {
            return this.emitString(d.ESC, "i", i.toString(), asMapKey, cache);
          } else {
            return i;
          }
        }
      }
    }
  };
  writer.JSONMarshaller.prototype.emitDouble = function(d, asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "d", d, asMapKey, cache);
    } else {
      return d;
    }
  };
  writer.JSONMarshaller.prototype.emitBinary = function(b, asMapKey, cache) {
    return this.emitString(d.ESC, "b", b, asMapKey, cache);
  };
  writer.JSONMarshaller.prototype.emitQuoted = function(em, obj, cache) {
    if (em.verbose) {
      var ret = {}, k = this.emitString(d.ESC_TAG, "'", "", true, cache);
      ret[k] = writer.marshal(this, obj, false, cache);
      return ret;
    } else {
      return[this.emitString(d.ESC_TAG, "'", "", true, cache), writer.marshal(this, obj, false, cache)];
    }
  };
  writer.emitObjects = function(em, iterable, cache) {
    var ret = [];
    if (util.isArray(iterable)) {
      for (var i = 0;i < iterable.length;i++) {
        ret.push(writer.marshal(em, iterable[i], false, cache));
      }
    } else {
      iterable.forEach(function(v, i) {
        ret.push(writer.marshal(em, v, false, cache));
      });
    }
    return ret;
  };
  writer.emitArray = function(em, iterable, skip, cache) {
    return writer.emitObjects(em, iterable, cache);
  };
  writer.isStringableKey = function(em, k) {
    if (typeof k !== "string") {
      var h = em.handler(k);
      return h && h.tag(k).length === 1;
    } else {
      return true;
    }
  };
  writer.stringableKeys = function(em, obj) {
    var arr = em.unpack(obj), stringableKeys = true;
    if (arr) {
      for (var i = 0;i < arr.length;i += 2) {
        stringableKeys = writer.isStringableKey(em, arr[i]);
        if (!stringableKeys) {
          break;
        }
      }
      return stringableKeys;
    } else {
      if (obj.keys) {
        var iter = obj.keys();
        if (iter.next) {
          step = iter.next();
          while (!step.done) {
            stringableKeys = writer.isStringableKey(em, step.value);
            if (!stringableKeys) {
              break;
            }
            step = iter.next();
          }
          return stringableKeys;
        }
      }
    }
    if (obj.forEach) {
      obj.forEach(function(v, k) {
        stringableKeys = stringableKeys && writer.isStringableKey(em, k);
      });
      return stringableKeys;
    } else {
      throw new Error("Cannot walk keys of object type " + handlers.constructor(obj).name);
    }
  };
  writer.emitMap = function(em, obj, skip, cache) {
    if (obj.constructor === Object || obj.forEach != null) {
      if (em.verbose) {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var ret = {};
            obj.forEach(function(v, k) {
              ret[writer.marshal(em, k, true, false)] = writer.marshal(em, v, false, cache);
            });
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, false));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, false));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            var ret = {};
            ret[tag] = rep;
            return ret;
          }
        } else {
          var ret = {}, ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret[writer.marshal(em, ks[i], true, false)] = writer.marshal(em, obj[ks[i]], false, cache);
          }
          return ret;
        }
      } else {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var arr = em.unpack(obj), ret = ["^ "];
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                ret.push(writer.marshal(em, arr[i], true, cache));
                ret.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                ret.push(writer.marshal(em, k, true, cache));
                ret.push(writer.marshal(em, v, false, cache));
              });
            }
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, cache));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, cache));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            return[tag, rep];
          }
        } else {
          var ret = ["^ "], ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret.push(writer.marshal(em, ks[i], true, cache));
            ret.push(writer.marshal(em, obj[ks[i]], false, cache));
          }
          return ret;
        }
      }
    } else {
      if (em.objectBuilder != null) {
        return em.objectBuilder(obj, function(k) {
          return writer.marshal(em, k, true, cache);
        }, function(v) {
          return writer.marshal(em, v, false, cache);
        });
      } else {
        var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
        err.data = {obj:obj, type:name};
        throw err;
      }
    }
  };
  writer.emitTaggedMap = function(em, tag, rep, skip, cache) {
    if (em.verbose) {
      var ret = {};
      ret[em.emitString(d.ESC_TAG, tag, "", true, cache)] = writer.marshal(em, rep, false, cache);
      return ret;
    } else {
      return[em.emitString(d.ESC_TAG, tag, "", true, cache), writer.marshal(em, rep, false, cache)];
    }
  };
  writer.emitEncoded = function(em, h, tag, rep, obj, asMapKey, cache) {
    if (tag.length === 1) {
      if (typeof rep === "string") {
        return em.emitString(d.ESC, tag, rep, asMapKey, cache);
      } else {
        if (asMapKey || em.preferStrings) {
          var vh = em.verbose && h.getVerboseHandler();
          if (vh) {
            tag = vh.tag(obj);
            rep = vh.stringRep(obj, vh);
          } else {
            rep = h.stringRep(obj, h);
          }
          if (rep !== null) {
            return em.emitString(d.ESC, tag, rep, asMapKey, cache);
          } else {
            var err = new Error('Tag "' + tag + '" cannot be encoded as string');
            err.data = {tag:tag, rep:rep, obj:obj};
            throw err;
          }
        } else {
          return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
        }
      }
    } else {
      return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
    }
  };
  writer.marshal = function(em, obj, asMapKey, cache) {
    var h = em.handler(obj), tag = h ? h.tag(obj) : null, rep = h ? h.rep(obj) : null;
    if (h != null && tag != null) {
      switch(tag) {
        case "_":
          return em.emitNil(asMapKey, cache);
          break;
        case "s":
          return em.emitString("", "", writer.escape(rep), asMapKey, cache);
          break;
        case "?":
          return em.emitBoolean(rep, asMapKey, cache);
          break;
        case "i":
          return em.emitInteger(rep, asMapKey, cache);
          break;
        case "d":
          return em.emitDouble(rep, asMapKey, cache);
          break;
        case "b":
          return em.emitBinary(rep, asMapKey, cache);
          break;
        case "'":
          return em.emitQuoted(em, rep, cache);
          break;
        case "array":
          return writer.emitArray(em, rep, asMapKey, cache);
          break;
        case "map":
          return writer.emitMap(em, rep, asMapKey, cache);
          break;
        default:
          return writer.emitEncoded(em, h, tag, rep, obj, asMapKey, cache);
          break;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.maybeQuoted = function(em, obj) {
    var h = em.handler(obj);
    if (h != null) {
      if (h.tag(obj).length === 1) {
        return types.quoted(obj);
      } else {
        return obj;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.marshalTop = function(em, obj, asMapKey, cache) {
    return JSON.stringify(writer.marshal(em, writer.maybeQuoted(em, obj), asMapKey, cache));
  };
  writer.Writer = function(marshaller, options) {
    this._marshaller = marshaller;
    this.options = options || {};
    if (this.options["cache"] === false) {
      this.cache = null;
    } else {
      this.cache = this.options["cache"] ? this.options["cache"] : new caching.WriteCache;
    }
  };
  writer.Writer.prototype.marshaller = function() {
    return this._marshaller;
  };
  writer.Writer.prototype["marshaller"] = writer.Writer.prototype.marshaller;
  writer.Writer.prototype.write = function(obj, opts) {
    var ret = null, ropts = opts || {}, asMapKey = ropts["asMapKey"] || false, cache = this._marshaller.verbose ? false : this.cache;
    if (ropts["marshalTop"] === false) {
      ret = writer.marshal(this._marshaller, obj, asMapKey, cache);
    } else {
      ret = writer.marshalTop(this._marshaller, obj, asMapKey, cache);
    }
    if (this.cache != null) {
      this.cache.clear();
    }
    return ret;
  };
  writer.Writer.prototype["write"] = writer.Writer.prototype.write;
  writer.Writer.prototype.register = function(type, handler) {
    this._marshaller.registerHandler(type, handler);
  };
  writer.Writer.prototype["register"] = writer.Writer.prototype.register;
});
goog.provide("com.cognitect.transit");
goog.require("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
var TRANSIT_DEV = true;
var TRANSIT_NODE_TARGET = false;
var TRANSIT_BROWSER_TARGET = false;
var TRANSIT_BROWSER_AMD_TARGET = false;
goog.scope(function() {
  var transit = com.cognitect.transit;
  var reader = com.cognitect.transit.impl.reader, writer = com.cognitect.transit.impl.writer, decoder = com.cognitect.transit.impl.decoder, types = com.cognitect.transit.types, eq = com.cognitect.transit.eq, caching = com.cognitect.transit.caching;
  transit.reader = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      type = "json";
      var unmarshaller = new reader.JSONUnmarshaller(opts);
      return new reader.Reader(unmarshaller, opts);
    } else {
      throw new Error("Cannot create reader of type " + type);
    }
  };
  transit.writer = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      if (type === "json-verbose") {
        if (opts == null) {
          opts = {};
        }
        opts["verbose"] = true;
      }
      type = "json";
      var marshaller = new writer.JSONMarshaller(opts);
      return new writer.Writer(marshaller, opts);
    } else {
      var err = new Error('Type must be "json"');
      err.data = {type:type};
      throw err;
    }
  };
  transit.makeWriteHandler = function(obj) {
    var Handler = function() {
    };
    Handler.prototype.tag = obj["tag"];
    Handler.prototype.rep = obj["rep"];
    Handler.prototype.stringRep = obj["stringRep"];
    Handler.prototype.getVerboseHandler = obj["getVerboseHandler"];
    return new Handler;
  };
  transit.makeBuilder = function(obj) {
    var Builder = function() {
    };
    Builder.prototype.init = obj["init"];
    Builder.prototype.add = obj["add"];
    Builder.prototype.finalize = obj["finalize"];
    Builder.prototype.fromArray = obj["fromArray"];
    return new Builder;
  };
  transit.date = types.date;
  transit.integer = types.intValue;
  transit.isInteger = types.isInteger;
  transit.uuid = types.uuid;
  transit.isUUID = types.isUUID;
  transit.bigInt = types.bigInteger;
  transit.isBigInt = types.isBigInteger;
  transit.bigDec = types.bigDecimalValue;
  transit.isBigDec = types.isBigDecimal;
  transit.keyword = types.keyword;
  transit.isKeyword = types.isKeyword;
  transit.symbol = types.symbol;
  transit.isSymbol = types.isSymbol;
  transit.binary = types.binary;
  transit.isBinary = types.isBinary;
  transit.uri = types.uri;
  transit.isURI = types.isURI;
  transit.map = types.map;
  transit.isMap = types.isMap;
  transit.set = types.set;
  transit.isSet = types.isSet;
  transit.list = types.list;
  transit.isList = types.isList;
  transit.quoted = types.quoted;
  transit.isQuoted = types.isQuoted;
  transit.tagged = types.taggedValue;
  transit.isTaggedValue = types.isTaggedValue;
  transit.link = types.link;
  transit.isLink = types.isLink;
  transit.hash = eq.hashCode;
  transit.hashMapLike = eq.hashMapLike;
  transit.hashMapLike = eq.hashArrayLike;
  transit.equals = eq.equals;
  transit.extendToEQ = eq.extendToEQ;
  transit.mapToObject = function(m) {
    var ret = {};
    m.forEach(function(v, k) {
      if (typeof k !== "string") {
        throw Error("Cannot convert map with non-string keys");
      } else {
        ret[k] = v;
      }
    });
    return ret;
  };
  transit.decoder = decoder.decoder;
  transit.readCache = caching.readCache;
  transit.writeCache = caching.writeCache;
  transit.UUIDfromString = types.UUIDfromString;
  transit.randomUUID = types.randomUUID;
  transit.stringableKeys = writer.stringableKeys;
  if (TRANSIT_BROWSER_TARGET) {
    goog.exportSymbol("transit.reader", transit.reader);
    goog.exportSymbol("transit.writer", transit.writer);
    goog.exportSymbol("transit.makeBuilder", transit.makeBuilder);
    goog.exportSymbol("transit.makeWriteHandler", transit.makeWriteHandler);
    goog.exportSymbol("transit.date", types.date);
    goog.exportSymbol("transit.integer", types.intValue);
    goog.exportSymbol("transit.isInteger", types.isInteger);
    goog.exportSymbol("transit.uuid", types.uuid);
    goog.exportSymbol("transit.isUUID", types.isUUID);
    goog.exportSymbol("transit.bigInt", types.bigInteger);
    goog.exportSymbol("transit.isBigInt", types.isBigInteger);
    goog.exportSymbol("transit.bigDec", types.bigDecimalValue);
    goog.exportSymbol("transit.isBigDec", types.isBigDecimal);
    goog.exportSymbol("transit.keyword", types.keyword);
    goog.exportSymbol("transit.isKeyword", types.isKeyword);
    goog.exportSymbol("transit.symbol", types.symbol);
    goog.exportSymbol("transit.isSymbol", types.isSymbol);
    goog.exportSymbol("transit.binary", types.binary);
    goog.exportSymbol("transit.isBinary", types.isBinary);
    goog.exportSymbol("transit.uri", types.uri);
    goog.exportSymbol("transit.isURI", types.isURI);
    goog.exportSymbol("transit.map", types.map);
    goog.exportSymbol("transit.isMap", types.isMap);
    goog.exportSymbol("transit.set", types.set);
    goog.exportSymbol("transit.isSet", types.isSet);
    goog.exportSymbol("transit.list", types.list);
    goog.exportSymbol("transit.isList", types.isList);
    goog.exportSymbol("transit.quoted", types.quoted);
    goog.exportSymbol("transit.isQuoted", types.isQuoted);
    goog.exportSymbol("transit.tagged", types.taggedValue);
    goog.exportSymbol("transit.isTaggedValue", types.isTaggedValue);
    goog.exportSymbol("transit.link", types.link);
    goog.exportSymbol("transit.isLink", types.isLink);
    goog.exportSymbol("transit.hash", eq.hashCode);
    goog.exportSymbol("transit.hashMapLike", eq.hashMapLike);
    goog.exportSymbol("transit.hashArrayLike", eq.hashArrayLike);
    goog.exportSymbol("transit.equals", eq.equals);
    goog.exportSymbol("transit.extendToEQ", eq.extendToEQ);
    goog.exportSymbol("transit.mapToObject", transit.mapToObject);
    goog.exportSymbol("transit.decoder", decoder.decoder);
    goog.exportSymbol("transit.UUIDfromString", types.UUIDfromString);
    goog.exportSymbol("transit.randomUUID", types.randomUUID);
    goog.exportSymbol("transit.stringableKeys", writer.stringableKeys);
    goog.exportSymbol("transit.readCache", caching.readCache);
    goog.exportSymbol("transit.writeCache", caching.writeCache);
  }
  if (TRANSIT_NODE_TARGET) {
    module.exports = {reader:transit.reader, writer:transit.writer, makeBuilder:transit.makeBuilder, makeWriteHandler:transit.makeWriteHandler, date:types.date, integer:types.intValue, isInteger:types.isInteger, uuid:types.uuid, isUUID:types.isUUID, bigInt:types.bigInteger, isBigInt:types.isBigInteger, bigDec:types.bigDecimalValue, isBigDec:types.isBigDecimal, keyword:types.keyword, isKeyword:types.isKeyword, symbol:types.symbol, isSymbol:types.isSymbol, binary:types.binary, isBinary:types.isBinary, 
    uri:types.uri, isURI:types.isURI, map:types.map, isMap:types.isMap, set:types.set, isSet:types.isSet, list:types.list, isList:types.isList, quoted:types.quoted, isQuoted:types.isQuoted, tagged:types.taggedValue, isTaggedValue:types.isTaggedValue, link:types.link, isLink:types.isLink, hash:eq.hashCode, hashArrayLike:eq.hashArrayLike, hashMapLike:eq.hashMapLike, equals:eq.equals, extendToEQ:eq.extendToEQ, mapToObject:transit.mapToObject, decoder:decoder.decoder, UUIDfromString:types.UUIDfromString, 
    randomUUID:types.randomUUID, stringableKeys:writer.stringableKeys, readCache:caching.readCache, writeCache:caching.writeCache};
  }
});
goog.provide("cognitect.transit");
goog.require("cljs.core");
goog.require("goog.math.Long");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit");
cljs.core.UUID.prototype.cljs$core$IEquiv$ = true;
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return this$__$1.uuid === other.uuid;
  } else {
    if (other instanceof com.cognitect.transit.types.UUID) {
      return this$__$1.uuid === other.toString();
    } else {
      return false;
    }
  }
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return cljs.core._equiv.call(null, other, this$__$1);
  } else {
    return this$__$1.equiv(other);
  }
};
goog.math.Long.prototype.cljs$core$IEquiv$ = true;
goog.math.Long.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
goog.math.Long.prototype.cljs$core$IHash$ = true;
goog.math.Long.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
cognitect.transit.opts_merge = function opts_merge(a, b) {
  var seq__18188_18192 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, b));
  var chunk__18189_18193 = null;
  var count__18190_18194 = 0;
  var i__18191_18195 = 0;
  while (true) {
    if (i__18191_18195 < count__18190_18194) {
      var k_18196 = cljs.core._nth.call(null, chunk__18189_18193, i__18191_18195);
      var v_18197 = b[k_18196];
      a[k_18196] = v_18197;
      var G__18198 = seq__18188_18192;
      var G__18199 = chunk__18189_18193;
      var G__18200 = count__18190_18194;
      var G__18201 = i__18191_18195 + 1;
      seq__18188_18192 = G__18198;
      chunk__18189_18193 = G__18199;
      count__18190_18194 = G__18200;
      i__18191_18195 = G__18201;
      continue;
    } else {
      var temp__4126__auto___18202 = cljs.core.seq.call(null, seq__18188_18192);
      if (temp__4126__auto___18202) {
        var seq__18188_18203__$1 = temp__4126__auto___18202;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__18188_18203__$1)) {
          var c__4616__auto___18204 = cljs.core.chunk_first.call(null, seq__18188_18203__$1);
          var G__18205 = cljs.core.chunk_rest.call(null, seq__18188_18203__$1);
          var G__18206 = c__4616__auto___18204;
          var G__18207 = cljs.core.count.call(null, c__4616__auto___18204);
          var G__18208 = 0;
          seq__18188_18192 = G__18205;
          chunk__18189_18193 = G__18206;
          count__18190_18194 = G__18207;
          i__18191_18195 = G__18208;
          continue;
        } else {
          var k_18209 = cljs.core.first.call(null, seq__18188_18203__$1);
          var v_18210 = b[k_18209];
          a[k_18209] = v_18210;
          var G__18211 = cljs.core.next.call(null, seq__18188_18203__$1);
          var G__18212 = null;
          var G__18213 = 0;
          var G__18214 = 0;
          seq__18188_18192 = G__18211;
          chunk__18189_18193 = G__18212;
          count__18190_18194 = G__18213;
          i__18191_18195 = G__18214;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return a;
};
cognitect.transit.MapBuilder = function() {
};
cognitect.transit.MapBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.MapBuilder.prototype.add = function(m, k, v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.assoc_BANG_.call(null, m, k, v);
};
cognitect.transit.MapBuilder.prototype.finalize = function(m, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, m);
};
cognitect.transit.MapBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentArrayMap.fromArray.call(null, arr, true, true);
};
cognitect.transit.MapBuilder.cljs$lang$type = true;
cognitect.transit.MapBuilder.cljs$lang$ctorStr = "cognitect.transit/MapBuilder";
cognitect.transit.MapBuilder.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write.call(null, writer__4417__auto__, "cognitect.transit/MapBuilder");
};
cognitect.transit.__GT_MapBuilder = function __GT_MapBuilder() {
  return new cognitect.transit.MapBuilder;
};
cognitect.transit.VectorBuilder = function() {
};
cognitect.transit.VectorBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
};
cognitect.transit.VectorBuilder.prototype.add = function(v, x, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.conj_BANG_.call(null, v, x);
};
cognitect.transit.VectorBuilder.prototype.finalize = function(v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, v);
};
cognitect.transit.VectorBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentVector.fromArray.call(null, arr, true);
};
cognitect.transit.VectorBuilder.cljs$lang$type = true;
cognitect.transit.VectorBuilder.cljs$lang$ctorStr = "cognitect.transit/VectorBuilder";
cognitect.transit.VectorBuilder.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write.call(null, writer__4417__auto__, "cognitect.transit/VectorBuilder");
};
cognitect.transit.__GT_VectorBuilder = function __GT_VectorBuilder() {
  return new cognitect.transit.VectorBuilder;
};
cognitect.transit.reader = function() {
  var reader = null;
  var reader__1 = function(type) {
    return reader.call(null, type, null);
  };
  var reader__2 = function(type, opts) {
    return com.cognitect.transit.reader.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"prefersStrings":false, "arrayBuilder":new cognitect.transit.VectorBuilder, "mapBuilder":new cognitect.transit.MapBuilder, "handlers":cljs.core.clj__GT_js.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, ["$", function(v) {
      return cljs.core.symbol.call(null, v);
    }, ":", function(v) {
      return cljs.core.keyword.call(null, v);
    }, "set", function(v) {
      return cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, v);
    }, "list", function(v) {
      return cljs.core.into.call(null, cljs.core.List.EMPTY, v.reverse());
    }, "cmap", function(v) {
      var i = 0;
      var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
      while (true) {
        if (i < v.length) {
          var G__18215 = i + 2;
          var G__18216 = cljs.core.assoc_BANG_.call(null, ret, v[i], v[i + 1]);
          i = G__18215;
          ret = G__18216;
          continue;
        } else {
          return cljs.core.persistent_BANG_.call(null, ret);
        }
        break;
      }
    }], null), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts)))}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
  };
  reader = function(type, opts) {
    switch(arguments.length) {
      case 1:
        return reader__1.call(this, type);
      case 2:
        return reader__2.call(this, type, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reader.cljs$core$IFn$_invoke$arity$1 = reader__1;
  reader.cljs$core$IFn$_invoke$arity$2 = reader__2;
  return reader;
}();
cognitect.transit.read = function read(r, str) {
  return r.read(str);
};
cognitect.transit.KeywordHandler = function() {
};
cognitect.transit.KeywordHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return ":";
};
cognitect.transit.KeywordHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.cljs$lang$type = true;
cognitect.transit.KeywordHandler.cljs$lang$ctorStr = "cognitect.transit/KeywordHandler";
cognitect.transit.KeywordHandler.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write.call(null, writer__4417__auto__, "cognitect.transit/KeywordHandler");
};
cognitect.transit.__GT_KeywordHandler = function __GT_KeywordHandler() {
  return new cognitect.transit.KeywordHandler;
};
cognitect.transit.SymbolHandler = function() {
};
cognitect.transit.SymbolHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "$";
};
cognitect.transit.SymbolHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.cljs$lang$type = true;
cognitect.transit.SymbolHandler.cljs$lang$ctorStr = "cognitect.transit/SymbolHandler";
cognitect.transit.SymbolHandler.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write.call(null, writer__4417__auto__, "cognitect.transit/SymbolHandler");
};
cognitect.transit.__GT_SymbolHandler = function __GT_SymbolHandler() {
  return new cognitect.transit.SymbolHandler;
};
cognitect.transit.ListHandler = function() {
};
cognitect.transit.ListHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "list";
};
cognitect.transit.ListHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__18217_18221 = cljs.core.seq.call(null, v);
  var chunk__18218_18222 = null;
  var count__18219_18223 = 0;
  var i__18220_18224 = 0;
  while (true) {
    if (i__18220_18224 < count__18219_18223) {
      var x_18225 = cljs.core._nth.call(null, chunk__18218_18222, i__18220_18224);
      ret.push(x_18225);
      var G__18226 = seq__18217_18221;
      var G__18227 = chunk__18218_18222;
      var G__18228 = count__18219_18223;
      var G__18229 = i__18220_18224 + 1;
      seq__18217_18221 = G__18226;
      chunk__18218_18222 = G__18227;
      count__18219_18223 = G__18228;
      i__18220_18224 = G__18229;
      continue;
    } else {
      var temp__4126__auto___18230 = cljs.core.seq.call(null, seq__18217_18221);
      if (temp__4126__auto___18230) {
        var seq__18217_18231__$1 = temp__4126__auto___18230;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__18217_18231__$1)) {
          var c__4616__auto___18232 = cljs.core.chunk_first.call(null, seq__18217_18231__$1);
          var G__18233 = cljs.core.chunk_rest.call(null, seq__18217_18231__$1);
          var G__18234 = c__4616__auto___18232;
          var G__18235 = cljs.core.count.call(null, c__4616__auto___18232);
          var G__18236 = 0;
          seq__18217_18221 = G__18233;
          chunk__18218_18222 = G__18234;
          count__18219_18223 = G__18235;
          i__18220_18224 = G__18236;
          continue;
        } else {
          var x_18237 = cljs.core.first.call(null, seq__18217_18231__$1);
          ret.push(x_18237);
          var G__18238 = cljs.core.next.call(null, seq__18217_18231__$1);
          var G__18239 = null;
          var G__18240 = 0;
          var G__18241 = 0;
          seq__18217_18221 = G__18238;
          chunk__18218_18222 = G__18239;
          count__18219_18223 = G__18240;
          i__18220_18224 = G__18241;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.ListHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.ListHandler.cljs$lang$type = true;
cognitect.transit.ListHandler.cljs$lang$ctorStr = "cognitect.transit/ListHandler";
cognitect.transit.ListHandler.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write.call(null, writer__4417__auto__, "cognitect.transit/ListHandler");
};
cognitect.transit.__GT_ListHandler = function __GT_ListHandler() {
  return new cognitect.transit.ListHandler;
};
cognitect.transit.MapHandler = function() {
};
cognitect.transit.MapHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "map";
};
cognitect.transit.MapHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v;
};
cognitect.transit.MapHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.MapHandler.cljs$lang$type = true;
cognitect.transit.MapHandler.cljs$lang$ctorStr = "cognitect.transit/MapHandler";
cognitect.transit.MapHandler.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write.call(null, writer__4417__auto__, "cognitect.transit/MapHandler");
};
cognitect.transit.__GT_MapHandler = function __GT_MapHandler() {
  return new cognitect.transit.MapHandler;
};
cognitect.transit.SetHandler = function() {
};
cognitect.transit.SetHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "set";
};
cognitect.transit.SetHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__18242_18246 = cljs.core.seq.call(null, v);
  var chunk__18243_18247 = null;
  var count__18244_18248 = 0;
  var i__18245_18249 = 0;
  while (true) {
    if (i__18245_18249 < count__18244_18248) {
      var x_18250 = cljs.core._nth.call(null, chunk__18243_18247, i__18245_18249);
      ret.push(x_18250);
      var G__18251 = seq__18242_18246;
      var G__18252 = chunk__18243_18247;
      var G__18253 = count__18244_18248;
      var G__18254 = i__18245_18249 + 1;
      seq__18242_18246 = G__18251;
      chunk__18243_18247 = G__18252;
      count__18244_18248 = G__18253;
      i__18245_18249 = G__18254;
      continue;
    } else {
      var temp__4126__auto___18255 = cljs.core.seq.call(null, seq__18242_18246);
      if (temp__4126__auto___18255) {
        var seq__18242_18256__$1 = temp__4126__auto___18255;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__18242_18256__$1)) {
          var c__4616__auto___18257 = cljs.core.chunk_first.call(null, seq__18242_18256__$1);
          var G__18258 = cljs.core.chunk_rest.call(null, seq__18242_18256__$1);
          var G__18259 = c__4616__auto___18257;
          var G__18260 = cljs.core.count.call(null, c__4616__auto___18257);
          var G__18261 = 0;
          seq__18242_18246 = G__18258;
          chunk__18243_18247 = G__18259;
          count__18244_18248 = G__18260;
          i__18245_18249 = G__18261;
          continue;
        } else {
          var x_18262 = cljs.core.first.call(null, seq__18242_18256__$1);
          ret.push(x_18262);
          var G__18263 = cljs.core.next.call(null, seq__18242_18256__$1);
          var G__18264 = null;
          var G__18265 = 0;
          var G__18266 = 0;
          seq__18242_18246 = G__18263;
          chunk__18243_18247 = G__18264;
          count__18244_18248 = G__18265;
          i__18245_18249 = G__18266;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.SetHandler.prototype.stringRep = function() {
  var self__ = this;
  var v = this;
  return null;
};
cognitect.transit.SetHandler.cljs$lang$type = true;
cognitect.transit.SetHandler.cljs$lang$ctorStr = "cognitect.transit/SetHandler";
cognitect.transit.SetHandler.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write.call(null, writer__4417__auto__, "cognitect.transit/SetHandler");
};
cognitect.transit.__GT_SetHandler = function __GT_SetHandler() {
  return new cognitect.transit.SetHandler;
};
cognitect.transit.VectorHandler = function() {
};
cognitect.transit.VectorHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "array";
};
cognitect.transit.VectorHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__18267_18271 = cljs.core.seq.call(null, v);
  var chunk__18268_18272 = null;
  var count__18269_18273 = 0;
  var i__18270_18274 = 0;
  while (true) {
    if (i__18270_18274 < count__18269_18273) {
      var x_18275 = cljs.core._nth.call(null, chunk__18268_18272, i__18270_18274);
      ret.push(x_18275);
      var G__18276 = seq__18267_18271;
      var G__18277 = chunk__18268_18272;
      var G__18278 = count__18269_18273;
      var G__18279 = i__18270_18274 + 1;
      seq__18267_18271 = G__18276;
      chunk__18268_18272 = G__18277;
      count__18269_18273 = G__18278;
      i__18270_18274 = G__18279;
      continue;
    } else {
      var temp__4126__auto___18280 = cljs.core.seq.call(null, seq__18267_18271);
      if (temp__4126__auto___18280) {
        var seq__18267_18281__$1 = temp__4126__auto___18280;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__18267_18281__$1)) {
          var c__4616__auto___18282 = cljs.core.chunk_first.call(null, seq__18267_18281__$1);
          var G__18283 = cljs.core.chunk_rest.call(null, seq__18267_18281__$1);
          var G__18284 = c__4616__auto___18282;
          var G__18285 = cljs.core.count.call(null, c__4616__auto___18282);
          var G__18286 = 0;
          seq__18267_18271 = G__18283;
          chunk__18268_18272 = G__18284;
          count__18269_18273 = G__18285;
          i__18270_18274 = G__18286;
          continue;
        } else {
          var x_18287 = cljs.core.first.call(null, seq__18267_18281__$1);
          ret.push(x_18287);
          var G__18288 = cljs.core.next.call(null, seq__18267_18281__$1);
          var G__18289 = null;
          var G__18290 = 0;
          var G__18291 = 0;
          seq__18267_18271 = G__18288;
          chunk__18268_18272 = G__18289;
          count__18269_18273 = G__18290;
          i__18270_18274 = G__18291;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return ret;
};
cognitect.transit.VectorHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.VectorHandler.cljs$lang$type = true;
cognitect.transit.VectorHandler.cljs$lang$ctorStr = "cognitect.transit/VectorHandler";
cognitect.transit.VectorHandler.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write.call(null, writer__4417__auto__, "cognitect.transit/VectorHandler");
};
cognitect.transit.__GT_VectorHandler = function __GT_VectorHandler() {
  return new cognitect.transit.VectorHandler;
};
cognitect.transit.UUIDHandler = function() {
};
cognitect.transit.UUIDHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "u";
};
cognitect.transit.UUIDHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.uuid;
};
cognitect.transit.UUIDHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var this$ = this;
  return this$.rep(v);
};
cognitect.transit.UUIDHandler.cljs$lang$type = true;
cognitect.transit.UUIDHandler.cljs$lang$ctorStr = "cognitect.transit/UUIDHandler";
cognitect.transit.UUIDHandler.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
  return cljs.core._write.call(null, writer__4417__auto__, "cognitect.transit/UUIDHandler");
};
cognitect.transit.__GT_UUIDHandler = function __GT_UUIDHandler() {
  return new cognitect.transit.UUIDHandler;
};
cognitect.transit.writer = function() {
  var writer = null;
  var writer__1 = function(type) {
    return writer.call(null, type, null);
  };
  var writer__2 = function(type, opts) {
    var keyword_handler = new cognitect.transit.KeywordHandler;
    var symbol_handler = new cognitect.transit.SymbolHandler;
    var list_handler = new cognitect.transit.ListHandler;
    var map_handler = new cognitect.transit.MapHandler;
    var set_handler = new cognitect.transit.SetHandler;
    var vector_handler = new cognitect.transit.VectorHandler;
    var uuid_handler = new cognitect.transit.UUIDHandler;
    var handlers = cljs.core.merge.call(null, cljs.core.PersistentHashMap.fromArrays([cljs.core.PersistentHashMap, cljs.core.Cons, cljs.core.PersistentArrayMap, cljs.core.NodeSeq, cljs.core.PersistentQueue, cljs.core.IndexedSeq, cljs.core.Keyword, cljs.core.EmptyList, cljs.core.LazySeq, cljs.core.Subvec, cljs.core.PersistentQueueSeq, cljs.core.ArrayNodeSeq, cljs.core.ValSeq, cljs.core.PersistentArrayMapSeq, cljs.core.PersistentVector, cljs.core.List, cljs.core.RSeq, cljs.core.PersistentHashSet, cljs.core.PersistentTreeMap, 
    cljs.core.KeySeq, cljs.core.ChunkedSeq, cljs.core.PersistentTreeSet, cljs.core.ChunkedCons, cljs.core.Symbol, cljs.core.UUID, cljs.core.Range, cljs.core.PersistentTreeMapSeq], [map_handler, list_handler, map_handler, list_handler, list_handler, list_handler, keyword_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, set_handler, map_handler, list_handler, list_handler, set_handler, list_handler, 
    symbol_handler, uuid_handler, list_handler, list_handler]), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts));
    return com.cognitect.transit.writer.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"unpack":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
      return function(x) {
        if (x instanceof cljs.core.PersistentArrayMap) {
          return x.arr;
        } else {
          return false;
        }
      };
    }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), "handlers":function() {
      var x18301 = cljs.core.clone.call(null, handlers);
      x18301.forEach = function(x18301, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
        return function(f) {
          var coll = this;
          var seq__18302 = cljs.core.seq.call(null, coll);
          var chunk__18303 = null;
          var count__18304 = 0;
          var i__18305 = 0;
          while (true) {
            if (i__18305 < count__18304) {
              var vec__18306 = cljs.core._nth.call(null, chunk__18303, i__18305);
              var k = cljs.core.nth.call(null, vec__18306, 0, null);
              var v = cljs.core.nth.call(null, vec__18306, 1, null);
              f.call(null, v, k);
              var G__18308 = seq__18302;
              var G__18309 = chunk__18303;
              var G__18310 = count__18304;
              var G__18311 = i__18305 + 1;
              seq__18302 = G__18308;
              chunk__18303 = G__18309;
              count__18304 = G__18310;
              i__18305 = G__18311;
              continue;
            } else {
              var temp__4126__auto__ = cljs.core.seq.call(null, seq__18302);
              if (temp__4126__auto__) {
                var seq__18302__$1 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__18302__$1)) {
                  var c__4616__auto__ = cljs.core.chunk_first.call(null, seq__18302__$1);
                  var G__18312 = cljs.core.chunk_rest.call(null, seq__18302__$1);
                  var G__18313 = c__4616__auto__;
                  var G__18314 = cljs.core.count.call(null, c__4616__auto__);
                  var G__18315 = 0;
                  seq__18302 = G__18312;
                  chunk__18303 = G__18313;
                  count__18304 = G__18314;
                  i__18305 = G__18315;
                  continue;
                } else {
                  var vec__18307 = cljs.core.first.call(null, seq__18302__$1);
                  var k = cljs.core.nth.call(null, vec__18307, 0, null);
                  var v = cljs.core.nth.call(null, vec__18307, 1, null);
                  f.call(null, v, k);
                  var G__18316 = cljs.core.next.call(null, seq__18302__$1);
                  var G__18317 = null;
                  var G__18318 = 0;
                  var G__18319 = 0;
                  seq__18302 = G__18316;
                  chunk__18303 = G__18317;
                  count__18304 = G__18318;
                  i__18305 = G__18319;
                  continue;
                }
              } else {
                return null;
              }
            }
            break;
          }
        };
      }(x18301, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers);
      return x18301;
    }(), "objectBuilder":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
      return function(m, kfn, vfn) {
        return cljs.core.reduce_kv.call(null, function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
          return function(obj, k, v) {
            var G__18300 = obj;
            G__18300.push(kfn.call(null, k), vfn.call(null, v));
            return G__18300;
          };
        }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), ["^ "], m);
      };
    }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers)}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
  };
  writer = function(type, opts) {
    switch(arguments.length) {
      case 1:
        return writer__1.call(this, type);
      case 2:
        return writer__2.call(this, type, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  writer.cljs$core$IFn$_invoke$arity$1 = writer__1;
  writer.cljs$core$IFn$_invoke$arity$2 = writer__2;
  return writer;
}();
cognitect.transit.write = function write(w, o) {
  return w.write(o);
};
cognitect.transit.read_handler = function read_handler(from_rep) {
  return from_rep;
};
cognitect.transit.write_handler = function() {
  var write_handler = null;
  var write_handler__2 = function(tag_fn, rep_fn) {
    return write_handler.call(null, tag_fn, rep_fn, null, null);
  };
  var write_handler__3 = function(tag_fn, rep_fn, str_rep_fn) {
    return write_handler.call(null, tag_fn, rep_fn, str_rep_fn, null);
  };
  var write_handler__4 = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
    if (typeof cognitect.transit.t18323 !== "undefined") {
    } else {
      cognitect.transit.t18323 = function(verbose_handler_fn, str_rep_fn, rep_fn, tag_fn, write_handler, meta18324) {
        this.verbose_handler_fn = verbose_handler_fn;
        this.str_rep_fn = str_rep_fn;
        this.rep_fn = rep_fn;
        this.tag_fn = tag_fn;
        this.write_handler = write_handler;
        this.meta18324 = meta18324;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cognitect.transit.t18323.prototype.tag = function(o) {
        var self__ = this;
        var _ = this;
        return self__.tag_fn.call(null, o);
      };
      cognitect.transit.t18323.prototype.rep = function(o) {
        var self__ = this;
        var _ = this;
        return self__.rep_fn.call(null, o);
      };
      cognitect.transit.t18323.prototype.stringRep = function(o) {
        var self__ = this;
        var _ = this;
        if (cljs.core.truth_(self__.str_rep_fn)) {
          return self__.str_rep_fn.call(null, o);
        } else {
          return null;
        }
      };
      cognitect.transit.t18323.prototype.getVerboseHandler = function() {
        var self__ = this;
        var _ = this;
        if (cljs.core.truth_(self__.verbose_handler_fn)) {
          return self__.verbose_handler_fn.call(null);
        } else {
          return null;
        }
      };
      cognitect.transit.t18323.prototype.cljs$core$IMeta$_meta$arity$1 = function(_18325) {
        var self__ = this;
        var _18325__$1 = this;
        return self__.meta18324;
      };
      cognitect.transit.t18323.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_18325, meta18324__$1) {
        var self__ = this;
        var _18325__$1 = this;
        return new cognitect.transit.t18323(self__.verbose_handler_fn, self__.str_rep_fn, self__.rep_fn, self__.tag_fn, self__.write_handler, meta18324__$1);
      };
      cognitect.transit.t18323.cljs$lang$type = true;
      cognitect.transit.t18323.cljs$lang$ctorStr = "cognitect.transit/t18323";
      cognitect.transit.t18323.cljs$lang$ctorPrWriter = function(this__4416__auto__, writer__4417__auto__, opt__4418__auto__) {
        return cljs.core._write.call(null, writer__4417__auto__, "cognitect.transit/t18323");
      };
      cognitect.transit.__GT_t18323 = function __GT_t18323(verbose_handler_fn__$1, str_rep_fn__$1, rep_fn__$1, tag_fn__$1, write_handler__$1, meta18324) {
        return new cognitect.transit.t18323(verbose_handler_fn__$1, str_rep_fn__$1, rep_fn__$1, tag_fn__$1, write_handler__$1, meta18324);
      };
    }
    return new cognitect.transit.t18323(verbose_handler_fn, str_rep_fn, rep_fn, tag_fn, write_handler, cljs.core.PersistentArrayMap.EMPTY);
  };
  write_handler = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
    switch(arguments.length) {
      case 2:
        return write_handler__2.call(this, tag_fn, rep_fn);
      case 3:
        return write_handler__3.call(this, tag_fn, rep_fn, str_rep_fn);
      case 4:
        return write_handler__4.call(this, tag_fn, rep_fn, str_rep_fn, verbose_handler_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  write_handler.cljs$core$IFn$_invoke$arity$2 = write_handler__2;
  write_handler.cljs$core$IFn$_invoke$arity$3 = write_handler__3;
  write_handler.cljs$core$IFn$_invoke$arity$4 = write_handler__4;
  return write_handler;
}();
cognitect.transit.tagged_value = function tagged_value(tag, rep) {
  return com.cognitect.transit.types.taggedValue.call(null, tag, rep);
};
cognitect.transit.tagged_value_QMARK_ = function tagged_value_QMARK_(x) {
  return com.cognitect.transit.types.isTaggedValue.call(null, x);
};
cognitect.transit.integer = function integer(s) {
  return com.cognitect.transit.types.integer.call(null, s);
};
cognitect.transit.integer_QMARK_ = function integer_QMARK_(x) {
  return com.cognitect.transit.types.isInteger.call(null, x);
};
cognitect.transit.bigint = function bigint(s) {
  return com.cognitect.transit.types.bigInteger.call(null, s);
};
cognitect.transit.bigint_QMARK_ = function bigint_QMARK_(x) {
  return com.cognitect.transit.types.isBigInteger.call(null, x);
};
cognitect.transit.bigdec = function bigdec(s) {
  return com.cognitect.transit.types.bigDecimalValue.call(null, s);
};
cognitect.transit.bigdec_QMARK_ = function bigdec_QMARK_(x) {
  return com.cognitect.transit.types.isBigDecimal.call(null, x);
};
cognitect.transit.uri = function uri(s) {
  return com.cognitect.transit.types.uri.call(null, s);
};
cognitect.transit.uri_QMARK_ = function uri_QMARK_(x) {
  return com.cognitect.transit.types.isURI.call(null, x);
};
cognitect.transit.uuid = function uuid(s) {
  return com.cognitect.transit.types.uuid.call(null, s);
};
cognitect.transit.uuid_QMARK_ = function uuid_QMARK_(x) {
  return com.cognitect.transit.types.isUUID.call(null, x);
};
cognitect.transit.binary = function binary(s) {
  return com.cognitect.transit.types.binary.call(null, s);
};
cognitect.transit.binary_QMARK_ = function binary_QMARK_(x) {
  return com.cognitect.transit.types.isBinary.call(null, x);
};
cognitect.transit.quoted = function quoted(x) {
  return com.cognitect.transit.types.quoted.call(null, x);
};
cognitect.transit.quoted_QMARK_ = function quoted_QMARK_(x) {
  return com.cognitect.transit.types.isQuoted.call(null, x);
};
cognitect.transit.link = function link(x) {
  return com.cognitect.transit.types.link.call(null, x);
};
cognitect.transit.link_QMARK_ = function link_QMARK_(x) {
  return com.cognitect.transit.types.isLink.call(null, x);
};
goog.provide("cljs_http.util");
goog.require("cljs.core");
goog.require("no.en.core");
goog.require("goog.userAgent");
goog.require("cognitect.transit");
goog.require("clojure.string");
goog.require("goog.Uri");
cljs_http.util.basic_auth = function basic_auth(credentials) {
  if (cljs.core.truth_(credentials)) {
    var vec__18172 = cljs.core.map_QMARK_.call(null, credentials) ? cljs.core.map.call(null, credentials, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "username", "username", 1605666410), new cljs.core.Keyword(null, "password", "password", 417022471)], null)) : credentials;
    var username = cljs.core.nth.call(null, vec__18172, 0, null);
    var password = cljs.core.nth.call(null, vec__18172, 1, null);
    return[cljs.core.str("Basic "), cljs.core.str(no.en.core.base64_encode.call(null, [cljs.core.str(username), cljs.core.str(":"), cljs.core.str(password)].join("")))].join("");
  } else {
    return null;
  }
};
cljs_http.util.build_url = function build_url(p__18173) {
  var map__18176 = p__18173;
  var map__18176__$1 = cljs.core.seq_QMARK_.call(null, map__18176) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18176) : map__18176;
  var query_string = cljs.core.get.call(null, map__18176__$1, new cljs.core.Keyword(null, "query-string", "query-string", -1018845061));
  var uri = cljs.core.get.call(null, map__18176__$1, new cljs.core.Keyword(null, "uri", "uri", -774711847));
  var server_port = cljs.core.get.call(null, map__18176__$1, new cljs.core.Keyword(null, "server-port", "server-port", 663745648));
  var server_name = cljs.core.get.call(null, map__18176__$1, new cljs.core.Keyword(null, "server-name", "server-name", -1012104295));
  var scheme = cljs.core.get.call(null, map__18176__$1, new cljs.core.Keyword(null, "scheme", "scheme", 90199613));
  return[cljs.core.str(function() {
    var G__18177 = new goog.Uri;
    G__18177.setScheme(cljs.core.name.call(null, function() {
      var or__3829__auto__ = scheme;
      if (cljs.core.truth_(or__3829__auto__)) {
        return or__3829__auto__;
      } else {
        return new cljs.core.Keyword(null, "http", "http", 382524695);
      }
    }()));
    G__18177.setDomain(server_name);
    G__18177.setPort(server_port);
    G__18177.setPath(uri);
    G__18177.setQuery(query_string, true);
    return G__18177;
  }())].join("");
};
cljs_http.util.camelize = function camelize(s) {
  return clojure.string.join.call(null, "-", cljs.core.map.call(null, clojure.string.capitalize, clojure.string.split.call(null, [cljs.core.str(s)].join(""), /-/)));
};
cljs_http.util.build_headers = function build_headers(m) {
  return cljs.core.clj__GT_js.call(null, cljs.core.zipmap.call(null, cljs.core.map.call(null, cljs_http.util.camelize, cljs.core.keys.call(null, m)), cljs.core.vals.call(null, m)));
};
cljs_http.util.user_agent = function user_agent() {
  return goog.userAgent.getUserAgentString();
};
cljs_http.util.android_QMARK_ = function android_QMARK_() {
  return cljs.core.re_matches.call(null, /.*android.*/i, cljs_http.util.user_agent.call(null));
};
cljs_http.util.transit_decode = function transit_decode(s, type, opts) {
  var rdr = cognitect.transit.reader.call(null, type, opts);
  return cognitect.transit.read.call(null, rdr, s);
};
cljs_http.util.transit_encode = function transit_encode(x, type, opts) {
  var wrtr = cognitect.transit.writer.call(null, type, opts);
  return cognitect.transit.write.call(null, wrtr, x);
};
cljs_http.util.json_decode = function json_decode(s) {
  var temp__4124__auto__ = cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, s)) ? JSON.parse(s) : null;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var v = temp__4124__auto__;
    return cljs.core.js__GT_clj.call(null, v, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), true);
  } else {
    return null;
  }
};
cljs_http.util.json_encode = function json_encode(x) {
  return JSON.stringify(cljs.core.clj__GT_js.call(null, x));
};
cljs_http.util.parse_headers = function parse_headers(headers) {
  return cljs.core.reduce.call(null, function(p1__18179_SHARP_, p2__18178_SHARP_) {
    var vec__18181 = clojure.string.split.call(null, p2__18178_SHARP_, /:\s+/);
    var k = cljs.core.nth.call(null, vec__18181, 0, null);
    var v = cljs.core.nth.call(null, vec__18181, 1, null);
    if (cljs.core.truth_(function() {
      var or__3829__auto__ = clojure.string.blank_QMARK_.call(null, k);
      if (cljs.core.truth_(or__3829__auto__)) {
        return or__3829__auto__;
      } else {
        return clojure.string.blank_QMARK_.call(null, v);
      }
    }())) {
      return p1__18179_SHARP_;
    } else {
      return cljs.core.assoc.call(null, p1__18179_SHARP_, clojure.string.lower_case.call(null, k), v);
    }
  }, cljs.core.PersistentArrayMap.EMPTY, clojure.string.split.call(null, function() {
    var or__3829__auto__ = headers;
    if (cljs.core.truth_(or__3829__auto__)) {
      return or__3829__auto__;
    } else {
      return "";
    }
  }(), /(\n)|(\r)|(\r\n)|(\n\r)/));
};
goog.provide("cljs_http.core");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs_http.util");
goog.require("goog.net.EventType");
goog.require("goog.net.XhrIo");
cljs_http.core.pending_requests = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cljs_http.core.abort_BANG_ = function abort_BANG_(channel) {
  var temp__4126__auto__ = cljs.core.deref.call(null, cljs_http.core.pending_requests).call(null, channel);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var xhr = temp__4126__auto__;
    cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.dissoc, channel);
    cljs.core.async.close_BANG_.call(null, channel);
    return xhr.abort();
  } else {
    return null;
  }
};
cljs_http.core.aborted_QMARK_ = function aborted_QMARK_(xhr) {
  return cljs.core._EQ_.call(null, xhr.getLastErrorCode(), goog.net.ErrorCode.ABORT);
};
cljs_http.core.request = function request(p__18361) {
  var map__18388 = p__18361;
  var map__18388__$1 = cljs.core.seq_QMARK_.call(null, map__18388) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18388) : map__18388;
  var request__$1 = map__18388__$1;
  var cancel = cljs.core.get.call(null, map__18388__$1, new cljs.core.Keyword(null, "cancel", "cancel", -1964088360));
  var with_credentials_QMARK_ = cljs.core.get.call(null, map__18388__$1, new cljs.core.Keyword(null, "with-credentials?", "with-credentials?", -1773202222));
  var body = cljs.core.get.call(null, map__18388__$1, new cljs.core.Keyword(null, "body", "body", -2049205669));
  var headers = cljs.core.get.call(null, map__18388__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
  var request_method = cljs.core.get.call(null, map__18388__$1, new cljs.core.Keyword(null, "request-method", "request-method", 1764796830));
  var channel = cljs.core.async.chan.call(null);
  var request_url = cljs_http.util.build_url.call(null, request__$1);
  var method = cljs.core.name.call(null, function() {
    var or__3829__auto__ = request_method;
    if (cljs.core.truth_(or__3829__auto__)) {
      return or__3829__auto__;
    } else {
      return new cljs.core.Keyword(null, "get", "get", 1683182755);
    }
  }());
  var timeout = function() {
    var or__3829__auto__ = (new cljs.core.Keyword(null, "timeout", "timeout", -318625318)).cljs$core$IFn$_invoke$arity$1(request__$1);
    if (cljs.core.truth_(or__3829__auto__)) {
      return or__3829__auto__;
    } else {
      return 0;
    }
  }();
  var headers__$1 = cljs_http.util.build_headers.call(null, headers);
  var send_credentials = with_credentials_QMARK_ == null ? true : with_credentials_QMARK_;
  var xhr = function() {
    var G__18389 = new goog.net.XhrIo;
    G__18389.setTimeoutInterval(timeout);
    G__18389.setWithCredentials(send_credentials);
    return G__18389;
  }();
  cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.assoc, channel, xhr);
  xhr.listen(goog.net.EventType.COMPLETE, function(channel, request_url, method, timeout, headers__$1, send_credentials, xhr, map__18388, map__18388__$1, request__$1, cancel, with_credentials_QMARK_, body, headers, request_method) {
    return function(evt) {
      var target = evt.target;
      var response = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "status", "status", -1997798413), target.getStatus(), new cljs.core.Keyword(null, "success", "success", 1890645906), target.isSuccess(), new cljs.core.Keyword(null, "body", "body", -2049205669), target.getResponseText(), new cljs.core.Keyword(null, "headers", "headers", -835030129), cljs_http.util.parse_headers.call(null, target.getAllResponseHeaders()), new cljs.core.Keyword(null, "trace-redirects", "trace-redirects", 
      -1149427907), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [request_url, target.getLastUri()], null)], null);
      if (!cljs_http.core.aborted_QMARK_.call(null, xhr)) {
        cljs.core.async.put_BANG_.call(null, channel, response);
      } else {
      }
      cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.dissoc, channel);
      if (cljs.core.truth_(cancel)) {
        cljs.core.async.close_BANG_.call(null, cancel);
      } else {
      }
      return cljs.core.async.close_BANG_.call(null, channel);
    };
  }(channel, request_url, method, timeout, headers__$1, send_credentials, xhr, map__18388, map__18388__$1, request__$1, cancel, with_credentials_QMARK_, body, headers, request_method));
  xhr.send(request_url, method, body, headers__$1);
  if (cljs.core.truth_(cancel)) {
    var c__6607__auto___18414 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6607__auto___18414, channel, request_url, method, timeout, headers__$1, send_credentials, xhr, map__18388, map__18388__$1, request__$1, cancel, with_credentials_QMARK_, body, headers, request_method) {
      return function() {
        var f__6608__auto__ = function() {
          var switch__6551__auto__ = function(c__6607__auto___18414, channel, request_url, method, timeout, headers__$1, send_credentials, xhr, map__18388, map__18388__$1, request__$1, cancel, with_credentials_QMARK_, body, headers, request_method) {
            return function(state_18400) {
              var state_val_18401 = state_18400[1];
              if (state_val_18401 === 5) {
                var inst_18398 = state_18400[2];
                var state_18400__$1 = state_18400;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18400__$1, inst_18398);
              } else {
                if (state_val_18401 === 4) {
                  var state_18400__$1 = state_18400;
                  var statearr_18402_18415 = state_18400__$1;
                  statearr_18402_18415[2] = null;
                  statearr_18402_18415[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_18401 === 3) {
                    var inst_18395 = xhr.abort();
                    var state_18400__$1 = state_18400;
                    var statearr_18403_18416 = state_18400__$1;
                    statearr_18403_18416[2] = inst_18395;
                    statearr_18403_18416[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_18401 === 2) {
                      var inst_18391 = state_18400[2];
                      var inst_18392 = xhr.isComplete();
                      var inst_18393 = cljs.core.not.call(null, inst_18392);
                      var state_18400__$1 = function() {
                        var statearr_18404 = state_18400;
                        statearr_18404[7] = inst_18391;
                        return statearr_18404;
                      }();
                      if (inst_18393) {
                        var statearr_18405_18417 = state_18400__$1;
                        statearr_18405_18417[1] = 3;
                      } else {
                        var statearr_18406_18418 = state_18400__$1;
                        statearr_18406_18418[1] = 4;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_18401 === 1) {
                        var state_18400__$1 = state_18400;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_18400__$1, 2, cancel);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(c__6607__auto___18414, channel, request_url, method, timeout, headers__$1, send_credentials, xhr, map__18388, map__18388__$1, request__$1, cancel, with_credentials_QMARK_, body, headers, request_method);
          return function(switch__6551__auto__, c__6607__auto___18414, channel, request_url, method, timeout, headers__$1, send_credentials, xhr, map__18388, map__18388__$1, request__$1, cancel, with_credentials_QMARK_, body, headers, request_method) {
            return function() {
              var state_machine__6552__auto__ = null;
              var state_machine__6552__auto____0 = function() {
                var statearr_18410 = [null, null, null, null, null, null, null, null];
                statearr_18410[0] = state_machine__6552__auto__;
                statearr_18410[1] = 1;
                return statearr_18410;
              };
              var state_machine__6552__auto____1 = function(state_18400) {
                while (true) {
                  var ret_value__6553__auto__ = function() {
                    try {
                      while (true) {
                        var result__6554__auto__ = switch__6551__auto__.call(null, state_18400);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6554__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__6554__auto__;
                        }
                        break;
                      }
                    } catch (e18411) {
                      if (e18411 instanceof Object) {
                        var ex__6555__auto__ = e18411;
                        var statearr_18412_18419 = state_18400;
                        statearr_18412_18419[5] = ex__6555__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18400);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e18411;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6553__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__18420 = state_18400;
                    state_18400 = G__18420;
                    continue;
                  } else {
                    return ret_value__6553__auto__;
                  }
                  break;
                }
              };
              state_machine__6552__auto__ = function(state_18400) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6552__auto____0.call(this);
                  case 1:
                    return state_machine__6552__auto____1.call(this, state_18400);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6552__auto____0;
              state_machine__6552__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6552__auto____1;
              return state_machine__6552__auto__;
            }();
          }(switch__6551__auto__, c__6607__auto___18414, channel, request_url, method, timeout, headers__$1, send_credentials, xhr, map__18388, map__18388__$1, request__$1, cancel, with_credentials_QMARK_, body, headers, request_method);
        }();
        var state__6609__auto__ = function() {
          var statearr_18413 = f__6608__auto__.call(null);
          statearr_18413[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6607__auto___18414;
          return statearr_18413;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6609__auto__);
      };
    }(c__6607__auto___18414, channel, request_url, method, timeout, headers__$1, send_credentials, xhr, map__18388, map__18388__$1, request__$1, cancel, with_credentials_QMARK_, body, headers, request_method));
  } else {
  }
  return channel;
};
goog.provide("cljs_http.client");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("cljs_http.core");
goog.require("cljs.core.async");
goog.require("no.en.core");
goog.require("cljs_http.util");
goog.require("clojure.string");
goog.require("cljs.reader");
cljs_http.client.if_pos = function if_pos(v) {
  if (cljs.core.truth_(function() {
    var and__3817__auto__ = v;
    if (cljs.core.truth_(and__3817__auto__)) {
      return v > 0;
    } else {
      return and__3817__auto__;
    }
  }())) {
    return v;
  } else {
    return null;
  }
};
cljs_http.client.parse_query_params = function parse_query_params(s) {
  if (cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, s))) {
    return cljs.core.reduce.call(null, function(p1__18043_SHARP_, p2__18042_SHARP_) {
      var vec__18045 = clojure.string.split.call(null, p2__18042_SHARP_, /=/);
      var k = cljs.core.nth.call(null, vec__18045, 0, null);
      var v = cljs.core.nth.call(null, vec__18045, 1, null);
      return cljs.core.assoc.call(null, p1__18043_SHARP_, cljs.core.keyword.call(null, no.en.core.url_decode.call(null, k)), no.en.core.url_decode.call(null, v));
    }, cljs.core.PersistentArrayMap.EMPTY, clojure.string.split.call(null, [cljs.core.str(s)].join(""), /&/));
  } else {
    return null;
  }
};
cljs_http.client.parse_url = function parse_url(url) {
  if (cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, url))) {
    var uri = goog.Uri.parse(url);
    var query_data = uri.getQueryData();
    return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "scheme", "scheme", 90199613), cljs.core.keyword.call(null, uri.getScheme()), new cljs.core.Keyword(null, "server-name", "server-name", -1012104295), uri.getDomain(), new cljs.core.Keyword(null, "server-port", "server-port", 663745648), cljs_http.client.if_pos.call(null, uri.getPort()), new cljs.core.Keyword(null, "uri", "uri", -774711847), uri.getPath(), new cljs.core.Keyword(null, "query-string", "query-string", -1018845061), 
    cljs.core.not.call(null, query_data.isEmpty()) ? [cljs.core.str(query_data)].join("") : null, new cljs.core.Keyword(null, "query-params", "query-params", 900640534), cljs.core.not.call(null, query_data.isEmpty()) ? cljs_http.client.parse_query_params.call(null, [cljs.core.str(query_data)].join("")) : null], null);
  } else {
    return null;
  }
};
cljs_http.client.unexceptional_status_QMARK_ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [205, null, 206, null, 300, null, 204, null, 307, null, 303, null, 301, null, 201, null, 302, null, 202, null, 200, null, 203, null, 207, null], null), null);
cljs_http.client.encode_val = function encode_val(k, v) {
  return[cljs.core.str(no.en.core.url_encode.call(null, cljs.core.name.call(null, k))), cljs.core.str("\x3d"), cljs.core.str(no.en.core.url_encode.call(null, [cljs.core.str(v)].join("")))].join("");
};
cljs_http.client.encode_vals = function encode_vals(k, vs) {
  return clojure.string.join.call(null, "\x26", cljs.core.map.call(null, function(p1__18046_SHARP_) {
    return cljs_http.client.encode_val.call(null, k, p1__18046_SHARP_);
  }, vs));
};
cljs_http.client.encode_param = function encode_param(p__18047) {
  var vec__18049 = p__18047;
  var k = cljs.core.nth.call(null, vec__18049, 0, null);
  var v = cljs.core.nth.call(null, vec__18049, 1, null);
  if (cljs.core.coll_QMARK_.call(null, v)) {
    return cljs_http.client.encode_vals.call(null, k, v);
  } else {
    return cljs_http.client.encode_val.call(null, k, v);
  }
};
cljs_http.client.generate_query_string = function generate_query_string(params) {
  return clojure.string.join.call(null, "\x26", cljs.core.map.call(null, cljs_http.client.encode_param, params));
};
cljs_http.client.regex_char_esc_smap = function() {
  var esc_chars = "()*\x26^%$#!+";
  return cljs.core.zipmap.call(null, esc_chars, cljs.core.map.call(null, function(esc_chars) {
    return function(p1__18050_SHARP_) {
      return[cljs.core.str("\\"), cljs.core.str(p1__18050_SHARP_)].join("");
    };
  }(esc_chars), esc_chars));
}();
cljs_http.client.escape_special = function escape_special(string) {
  return cljs.core.reduce.call(null, cljs.core.str, cljs.core.replace.call(null, cljs_http.client.regex_char_esc_smap, string));
};
cljs_http.client.decode_body = function decode_body(response, decode_fn, content_type, request_method) {
  if (cljs.core.truth_(function() {
    var and__3817__auto__ = cljs.core.not_EQ_.call(null, new cljs.core.Keyword(null, "head", "head", -771383919), request_method);
    if (and__3817__auto__) {
      return cljs.core.re_find.call(null, cljs.core.re_pattern.call(null, [cljs.core.str("(?i)"), cljs.core.str(cljs_http.client.escape_special.call(null, content_type))].join("")), [cljs.core.str(cljs.core.get.call(null, (new cljs.core.Keyword(null, "headers", "headers", -835030129)).cljs$core$IFn$_invoke$arity$1(response), "content-type", ""))].join(""));
    } else {
      return and__3817__auto__;
    }
  }())) {
    return cljs.core.update_in.call(null, response, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "body", "body", -2049205669)], null), decode_fn);
  } else {
    return response;
  }
};
cljs_http.client.wrap_edn_params = function wrap_edn_params(client) {
  return function(request) {
    var temp__4124__auto__ = (new cljs.core.Keyword(null, "edn-params", "edn-params", 894273052)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var params = temp__4124__auto__;
      return client.call(null, cljs.core.assoc_in.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "edn-params", "edn-params", 894273052)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs.core.pr_str.call(null, params)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "content-type"], null), "application/edn"));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_edn_response = function wrap_edn_response(client) {
  return function(request) {
    return cljs.core.async.map.call(null, function(p1__18051_SHARP_) {
      return cljs_http.client.decode_body.call(null, p1__18051_SHARP_, cljs.reader.read_string, "application/edn", (new cljs.core.Keyword(null, "request-method", "request-method", 1764796830)).cljs$core$IFn$_invoke$arity$1(request));
    }, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [client.call(null, request)], null));
  };
};
cljs_http.client.wrap_accept = function() {
  var wrap_accept__delegate = function(client, p__18052) {
    var vec__18054 = p__18052;
    var accept = cljs.core.nth.call(null, vec__18054, 0, null);
    return function(vec__18054, accept) {
      return function(request) {
        var temp__4124__auto__ = function() {
          var or__3829__auto__ = (new cljs.core.Keyword(null, "accept", "accept", 1874130431)).cljs$core$IFn$_invoke$arity$1(request);
          if (cljs.core.truth_(or__3829__auto__)) {
            return or__3829__auto__;
          } else {
            return accept;
          }
        }();
        if (cljs.core.truth_(temp__4124__auto__)) {
          var accept__$1 = temp__4124__auto__;
          return client.call(null, cljs.core.assoc_in.call(null, request, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "accept"], null), accept__$1));
        } else {
          return client.call(null, request);
        }
      };
    }(vec__18054, accept);
  };
  var wrap_accept = function(client, var_args) {
    var p__18052 = null;
    if (arguments.length > 1) {
      var G__18055__i = 0, G__18055__a = new Array(arguments.length - 1);
      while (G__18055__i < G__18055__a.length) {
        G__18055__a[G__18055__i] = arguments[G__18055__i + 1];
        ++G__18055__i;
      }
      p__18052 = new cljs.core.IndexedSeq(G__18055__a, 0);
    }
    return wrap_accept__delegate.call(this, client, p__18052);
  };
  wrap_accept.cljs$lang$maxFixedArity = 1;
  wrap_accept.cljs$lang$applyTo = function(arglist__18056) {
    var client = cljs.core.first(arglist__18056);
    var p__18052 = cljs.core.rest(arglist__18056);
    return wrap_accept__delegate(client, p__18052);
  };
  wrap_accept.cljs$core$IFn$_invoke$arity$variadic = wrap_accept__delegate;
  return wrap_accept;
}();
cljs_http.client.wrap_content_type = function() {
  var wrap_content_type__delegate = function(client, p__18057) {
    var vec__18059 = p__18057;
    var content_type = cljs.core.nth.call(null, vec__18059, 0, null);
    return function(vec__18059, content_type) {
      return function(request) {
        var temp__4124__auto__ = function() {
          var or__3829__auto__ = (new cljs.core.Keyword(null, "content-type", "content-type", -508222634)).cljs$core$IFn$_invoke$arity$1(request);
          if (cljs.core.truth_(or__3829__auto__)) {
            return or__3829__auto__;
          } else {
            return content_type;
          }
        }();
        if (cljs.core.truth_(temp__4124__auto__)) {
          var content_type__$1 = temp__4124__auto__;
          return client.call(null, cljs.core.assoc_in.call(null, request, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "content-type"], null), content_type__$1));
        } else {
          return client.call(null, request);
        }
      };
    }(vec__18059, content_type);
  };
  var wrap_content_type = function(client, var_args) {
    var p__18057 = null;
    if (arguments.length > 1) {
      var G__18060__i = 0, G__18060__a = new Array(arguments.length - 1);
      while (G__18060__i < G__18060__a.length) {
        G__18060__a[G__18060__i] = arguments[G__18060__i + 1];
        ++G__18060__i;
      }
      p__18057 = new cljs.core.IndexedSeq(G__18060__a, 0);
    }
    return wrap_content_type__delegate.call(this, client, p__18057);
  };
  wrap_content_type.cljs$lang$maxFixedArity = 1;
  wrap_content_type.cljs$lang$applyTo = function(arglist__18061) {
    var client = cljs.core.first(arglist__18061);
    var p__18057 = cljs.core.rest(arglist__18061);
    return wrap_content_type__delegate(client, p__18057);
  };
  wrap_content_type.cljs$core$IFn$_invoke$arity$variadic = wrap_content_type__delegate;
  return wrap_content_type;
}();
cljs_http.client.default_transit_opts = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "encoding", "encoding", 1728578272), new cljs.core.Keyword(null, "json", "json", 1279968570), new cljs.core.Keyword(null, "encoding-opts", "encoding-opts", -1805664631), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "decoding", "decoding", -568180903), new cljs.core.Keyword(null, "json", "json", 1279968570), new cljs.core.Keyword(null, "decoding-opts", "decoding-opts", 
1050289140), cljs.core.PersistentArrayMap.EMPTY], null);
cljs_http.client.wrap_transit_params = function wrap_transit_params(client) {
  return function(request) {
    var temp__4124__auto__ = (new cljs.core.Keyword(null, "transit-params", "transit-params", 357261095)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var params = temp__4124__auto__;
      var map__18063 = cljs.core.merge.call(null, cljs_http.client.default_transit_opts, (new cljs.core.Keyword(null, "transit-opts", "transit-opts", 1104386010)).cljs$core$IFn$_invoke$arity$1(request));
      var map__18063__$1 = cljs.core.seq_QMARK_.call(null, map__18063) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18063) : map__18063;
      var encoding_opts = cljs.core.get.call(null, map__18063__$1, new cljs.core.Keyword(null, "encoding-opts", "encoding-opts", -1805664631));
      var encoding = cljs.core.get.call(null, map__18063__$1, new cljs.core.Keyword(null, "encoding", "encoding", 1728578272));
      return client.call(null, cljs.core.assoc_in.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "transit-params", "transit-params", 357261095)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.util.transit_encode.call(null, params, encoding, encoding_opts)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "content-type"], null), 
      "application/transit+json"));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_transit_response = function wrap_transit_response(client) {
  return function(request) {
    var map__18067 = cljs.core.merge.call(null, cljs_http.client.default_transit_opts, (new cljs.core.Keyword(null, "transit-opts", "transit-opts", 1104386010)).cljs$core$IFn$_invoke$arity$1(request));
    var map__18067__$1 = cljs.core.seq_QMARK_.call(null, map__18067) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18067) : map__18067;
    var decoding_opts = cljs.core.get.call(null, map__18067__$1, new cljs.core.Keyword(null, "decoding-opts", "decoding-opts", 1050289140));
    var decoding = cljs.core.get.call(null, map__18067__$1, new cljs.core.Keyword(null, "decoding", "decoding", -568180903));
    var transit_decode = function(map__18067, map__18067__$1, decoding_opts, decoding) {
      return function(p1__18064_SHARP_) {
        return cljs_http.util.transit_decode.call(null, p1__18064_SHARP_, decoding, decoding_opts);
      };
    }(map__18067, map__18067__$1, decoding_opts, decoding);
    return cljs.core.async.map.call(null, function(map__18067, map__18067__$1, decoding_opts, decoding, transit_decode) {
      return function(p1__18065_SHARP_) {
        return cljs_http.client.decode_body.call(null, p1__18065_SHARP_, transit_decode, "application/transit+json", (new cljs.core.Keyword(null, "request-method", "request-method", 1764796830)).cljs$core$IFn$_invoke$arity$1(request));
      };
    }(map__18067, map__18067__$1, decoding_opts, decoding, transit_decode), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [client.call(null, request)], null));
  };
};
cljs_http.client.wrap_json_params = function wrap_json_params(client) {
  return function(request) {
    var temp__4124__auto__ = (new cljs.core.Keyword(null, "json-params", "json-params", -1112693596)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var params = temp__4124__auto__;
      return client.call(null, cljs.core.assoc_in.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "json-params", "json-params", -1112693596)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.util.json_encode.call(null, params)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "content-type"], null), "application/json"));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_json_response = function wrap_json_response(client) {
  return function(request) {
    return cljs.core.async.map.call(null, function(p1__18068_SHARP_) {
      return cljs_http.client.decode_body.call(null, p1__18068_SHARP_, cljs_http.util.json_decode, "application/json", (new cljs.core.Keyword(null, "request-method", "request-method", 1764796830)).cljs$core$IFn$_invoke$arity$1(request));
    }, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [client.call(null, request)], null));
  };
};
cljs_http.client.wrap_query_params = function wrap_query_params(client) {
  return function(p__18071) {
    var map__18072 = p__18071;
    var map__18072__$1 = cljs.core.seq_QMARK_.call(null, map__18072) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18072) : map__18072;
    var req = map__18072__$1;
    var query_params = cljs.core.get.call(null, map__18072__$1, new cljs.core.Keyword(null, "query-params", "query-params", 900640534));
    if (cljs.core.truth_(query_params)) {
      return client.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "query-params", "query-params", 900640534)), new cljs.core.Keyword(null, "query-string", "query-string", -1018845061), cljs_http.client.generate_query_string.call(null, query_params)));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_form_params = function wrap_form_params(client) {
  return function(p__18075) {
    var map__18076 = p__18075;
    var map__18076__$1 = cljs.core.seq_QMARK_.call(null, map__18076) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18076) : map__18076;
    var request = map__18076__$1;
    var request_method = cljs.core.get.call(null, map__18076__$1, new cljs.core.Keyword(null, "request-method", "request-method", 1764796830));
    var form_params = cljs.core.get.call(null, map__18076__$1, new cljs.core.Keyword(null, "form-params", "form-params", 1884296467));
    if (cljs.core.truth_(function() {
      var and__3817__auto__ = form_params;
      if (cljs.core.truth_(and__3817__auto__)) {
        return(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "patch", "patch", 380775109), null, new cljs.core.Keyword(null, "delete", "delete", -1768633620), null, new cljs.core.Keyword(null, "post", "post", 269697687), null, new cljs.core.Keyword(null, "put", "put", 1299772570), null], null), null)).call(null, request_method);
      } else {
        return and__3817__auto__;
      }
    }())) {
      return client.call(null, cljs.core.assoc_in.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "form-params", "form-params", 1884296467)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.client.generate_query_string.call(null, form_params)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "content-type"], null), "application/x-www-form-urlencoded"))
      ;
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.generate_form_data = function generate_form_data(params) {
  var form_data = new FormData;
  var seq__18083_18089 = cljs.core.seq.call(null, params);
  var chunk__18084_18090 = null;
  var count__18085_18091 = 0;
  var i__18086_18092 = 0;
  while (true) {
    if (i__18086_18092 < count__18085_18091) {
      var vec__18087_18093 = cljs.core._nth.call(null, chunk__18084_18090, i__18086_18092);
      var k_18094 = cljs.core.nth.call(null, vec__18087_18093, 0, null);
      var v_18095 = cljs.core.nth.call(null, vec__18087_18093, 1, null);
      form_data.append(cljs.core.name.call(null, k_18094), v_18095);
      var G__18096 = seq__18083_18089;
      var G__18097 = chunk__18084_18090;
      var G__18098 = count__18085_18091;
      var G__18099 = i__18086_18092 + 1;
      seq__18083_18089 = G__18096;
      chunk__18084_18090 = G__18097;
      count__18085_18091 = G__18098;
      i__18086_18092 = G__18099;
      continue;
    } else {
      var temp__4126__auto___18100 = cljs.core.seq.call(null, seq__18083_18089);
      if (temp__4126__auto___18100) {
        var seq__18083_18101__$1 = temp__4126__auto___18100;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__18083_18101__$1)) {
          var c__4616__auto___18102 = cljs.core.chunk_first.call(null, seq__18083_18101__$1);
          var G__18103 = cljs.core.chunk_rest.call(null, seq__18083_18101__$1);
          var G__18104 = c__4616__auto___18102;
          var G__18105 = cljs.core.count.call(null, c__4616__auto___18102);
          var G__18106 = 0;
          seq__18083_18089 = G__18103;
          chunk__18084_18090 = G__18104;
          count__18085_18091 = G__18105;
          i__18086_18092 = G__18106;
          continue;
        } else {
          var vec__18088_18107 = cljs.core.first.call(null, seq__18083_18101__$1);
          var k_18108 = cljs.core.nth.call(null, vec__18088_18107, 0, null);
          var v_18109 = cljs.core.nth.call(null, vec__18088_18107, 1, null);
          form_data.append(cljs.core.name.call(null, k_18108), v_18109);
          var G__18110 = cljs.core.next.call(null, seq__18083_18101__$1);
          var G__18111 = null;
          var G__18112 = 0;
          var G__18113 = 0;
          seq__18083_18089 = G__18110;
          chunk__18084_18090 = G__18111;
          count__18085_18091 = G__18112;
          i__18086_18092 = G__18113;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return form_data;
};
cljs_http.client.wrap_multipart_params = function wrap_multipart_params(client) {
  return function(p__18116) {
    var map__18117 = p__18116;
    var map__18117__$1 = cljs.core.seq_QMARK_.call(null, map__18117) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18117) : map__18117;
    var request = map__18117__$1;
    var request_method = cljs.core.get.call(null, map__18117__$1, new cljs.core.Keyword(null, "request-method", "request-method", 1764796830));
    var multipart_params = cljs.core.get.call(null, map__18117__$1, new cljs.core.Keyword(null, "multipart-params", "multipart-params", -1033508707));
    if (cljs.core.truth_(function() {
      var and__3817__auto__ = multipart_params;
      if (cljs.core.truth_(and__3817__auto__)) {
        return(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "patch", "patch", 380775109), null, new cljs.core.Keyword(null, "delete", "delete", -1768633620), null, new cljs.core.Keyword(null, "post", "post", 269697687), null, new cljs.core.Keyword(null, "put", "put", 1299772570), null], null), null)).call(null, request_method);
      } else {
        return and__3817__auto__;
      }
    }())) {
      return client.call(null, cljs.core.assoc_in.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "multipart-params", "multipart-params", -1033508707)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.client.generate_form_data.call(null, multipart_params)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "content-type"], null), 
      "multipart/form-data"));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_method = function wrap_method(client) {
  return function(req) {
    var temp__4124__auto__ = (new cljs.core.Keyword(null, "method", "method", 55703592)).cljs$core$IFn$_invoke$arity$1(req);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var m = temp__4124__auto__;
      return client.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "method", "method", 55703592)), new cljs.core.Keyword(null, "request-method", "request-method", 1764796830), m));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_server_name = function wrap_server_name(client, server_name) {
  return function(p1__18118_SHARP_) {
    return client.call(null, cljs.core.assoc.call(null, p1__18118_SHARP_, new cljs.core.Keyword(null, "server-name", "server-name", -1012104295), server_name));
  };
};
cljs_http.client.wrap_url = function wrap_url(client) {
  return function(p__18122) {
    var map__18123 = p__18122;
    var map__18123__$1 = cljs.core.seq_QMARK_.call(null, map__18123) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18123) : map__18123;
    var req = map__18123__$1;
    var query_params = cljs.core.get.call(null, map__18123__$1, new cljs.core.Keyword(null, "query-params", "query-params", 900640534));
    var temp__4124__auto__ = cljs_http.client.parse_url.call(null, (new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(req));
    if (cljs.core.truth_(temp__4124__auto__)) {
      var spec = temp__4124__auto__;
      return client.call(null, cljs.core.update_in.call(null, cljs.core.dissoc.call(null, cljs.core.merge.call(null, req, spec), new cljs.core.Keyword(null, "url", "url", 276297046)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "query-params", "query-params", 900640534)], null), function(spec, temp__4124__auto__, map__18123, map__18123__$1, req, query_params) {
        return function(p1__18119_SHARP_) {
          return cljs.core.merge.call(null, p1__18119_SHARP_, query_params);
        };
      }(spec, temp__4124__auto__, map__18123, map__18123__$1, req, query_params)));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_basic_auth = function() {
  var wrap_basic_auth__delegate = function(client, p__18124) {
    var vec__18126 = p__18124;
    var credentials = cljs.core.nth.call(null, vec__18126, 0, null);
    return function(vec__18126, credentials) {
      return function(req) {
        var credentials__$1 = function() {
          var or__3829__auto__ = (new cljs.core.Keyword(null, "basic-auth", "basic-auth", -673163332)).cljs$core$IFn$_invoke$arity$1(req);
          if (cljs.core.truth_(or__3829__auto__)) {
            return or__3829__auto__;
          } else {
            return credentials;
          }
        }();
        if (!cljs.core.empty_QMARK_.call(null, credentials__$1)) {
          return client.call(null, cljs.core.assoc_in.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "basic-auth", "basic-auth", -673163332)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "authorization"], null), cljs_http.util.basic_auth.call(null, credentials__$1)));
        } else {
          return client.call(null, req);
        }
      };
    }(vec__18126, credentials);
  };
  var wrap_basic_auth = function(client, var_args) {
    var p__18124 = null;
    if (arguments.length > 1) {
      var G__18127__i = 0, G__18127__a = new Array(arguments.length - 1);
      while (G__18127__i < G__18127__a.length) {
        G__18127__a[G__18127__i] = arguments[G__18127__i + 1];
        ++G__18127__i;
      }
      p__18124 = new cljs.core.IndexedSeq(G__18127__a, 0);
    }
    return wrap_basic_auth__delegate.call(this, client, p__18124);
  };
  wrap_basic_auth.cljs$lang$maxFixedArity = 1;
  wrap_basic_auth.cljs$lang$applyTo = function(arglist__18128) {
    var client = cljs.core.first(arglist__18128);
    var p__18124 = cljs.core.rest(arglist__18128);
    return wrap_basic_auth__delegate(client, p__18124);
  };
  wrap_basic_auth.cljs$core$IFn$_invoke$arity$variadic = wrap_basic_auth__delegate;
  return wrap_basic_auth;
}();
cljs_http.client.wrap_oauth = function wrap_oauth(client) {
  return function(req) {
    var temp__4124__auto__ = (new cljs.core.Keyword(null, "oauth-token", "oauth-token", 311415191)).cljs$core$IFn$_invoke$arity$1(req);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var oauth_token = temp__4124__auto__;
      return client.call(null, cljs.core.assoc_in.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "oauth-token", "oauth-token", 311415191)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "authorization"], null), [cljs.core.str("Bearer "), cljs.core.str(oauth_token)].join("")));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_channel_from_request_map = function wrap_channel_from_request_map(client) {
  return function(request) {
    var temp__4124__auto__ = (new cljs.core.Keyword(null, "channel", "channel", 734187692)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var custom_channel = temp__4124__auto__;
      return cljs.core.async.pipe.call(null, client.call(null, request), custom_channel);
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_request = function wrap_request(request) {
  return cljs_http.client.wrap_channel_from_request_map.call(null, cljs_http.client.wrap_url.call(null, cljs_http.client.wrap_method.call(null, cljs_http.client.wrap_oauth.call(null, cljs_http.client.wrap_basic_auth.call(null, cljs_http.client.wrap_query_params.call(null, cljs_http.client.wrap_json_response.call(null, cljs_http.client.wrap_json_params.call(null, cljs_http.client.wrap_transit_response.call(null, cljs_http.client.wrap_transit_params.call(null, cljs_http.client.wrap_edn_response.call(null, 
  cljs_http.client.wrap_edn_params.call(null, cljs_http.client.wrap_content_type.call(null, cljs_http.client.wrap_multipart_params.call(null, cljs_http.client.wrap_form_params.call(null, cljs_http.client.wrap_accept.call(null, request))))))))))))))));
};
cljs_http.client.request = cljs_http.client.wrap_request.call(null, cljs_http.core.request);
cljs_http.client.delete$ = function() {
  var delete$__delegate = function(url, p__18129) {
    var vec__18131 = p__18129;
    var req = cljs.core.nth.call(null, vec__18131, 0, null);
    return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "delete", "delete", -1768633620), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
  };
  var delete$ = function(url, var_args) {
    var p__18129 = null;
    if (arguments.length > 1) {
      var G__18132__i = 0, G__18132__a = new Array(arguments.length - 1);
      while (G__18132__i < G__18132__a.length) {
        G__18132__a[G__18132__i] = arguments[G__18132__i + 1];
        ++G__18132__i;
      }
      p__18129 = new cljs.core.IndexedSeq(G__18132__a, 0);
    }
    return delete$__delegate.call(this, url, p__18129);
  };
  delete$.cljs$lang$maxFixedArity = 1;
  delete$.cljs$lang$applyTo = function(arglist__18133) {
    var url = cljs.core.first(arglist__18133);
    var p__18129 = cljs.core.rest(arglist__18133);
    return delete$__delegate(url, p__18129);
  };
  delete$.cljs$core$IFn$_invoke$arity$variadic = delete$__delegate;
  return delete$;
}();
cljs_http.client.get = function() {
  var get__delegate = function(url, p__18134) {
    var vec__18136 = p__18134;
    var req = cljs.core.nth.call(null, vec__18136, 0, null);
    return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "get", "get", 1683182755), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
  };
  var get = function(url, var_args) {
    var p__18134 = null;
    if (arguments.length > 1) {
      var G__18137__i = 0, G__18137__a = new Array(arguments.length - 1);
      while (G__18137__i < G__18137__a.length) {
        G__18137__a[G__18137__i] = arguments[G__18137__i + 1];
        ++G__18137__i;
      }
      p__18134 = new cljs.core.IndexedSeq(G__18137__a, 0);
    }
    return get__delegate.call(this, url, p__18134);
  };
  get.cljs$lang$maxFixedArity = 1;
  get.cljs$lang$applyTo = function(arglist__18138) {
    var url = cljs.core.first(arglist__18138);
    var p__18134 = cljs.core.rest(arglist__18138);
    return get__delegate(url, p__18134);
  };
  get.cljs$core$IFn$_invoke$arity$variadic = get__delegate;
  return get;
}();
cljs_http.client.head = function() {
  var head__delegate = function(url, p__18139) {
    var vec__18141 = p__18139;
    var req = cljs.core.nth.call(null, vec__18141, 0, null);
    return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "head", "head", -771383919), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
  };
  var head = function(url, var_args) {
    var p__18139 = null;
    if (arguments.length > 1) {
      var G__18142__i = 0, G__18142__a = new Array(arguments.length - 1);
      while (G__18142__i < G__18142__a.length) {
        G__18142__a[G__18142__i] = arguments[G__18142__i + 1];
        ++G__18142__i;
      }
      p__18139 = new cljs.core.IndexedSeq(G__18142__a, 0);
    }
    return head__delegate.call(this, url, p__18139);
  };
  head.cljs$lang$maxFixedArity = 1;
  head.cljs$lang$applyTo = function(arglist__18143) {
    var url = cljs.core.first(arglist__18143);
    var p__18139 = cljs.core.rest(arglist__18143);
    return head__delegate(url, p__18139);
  };
  head.cljs$core$IFn$_invoke$arity$variadic = head__delegate;
  return head;
}();
cljs_http.client.move = function() {
  var move__delegate = function(url, p__18144) {
    var vec__18146 = p__18144;
    var req = cljs.core.nth.call(null, vec__18146, 0, null);
    return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "move", "move", -2110884309), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
  };
  var move = function(url, var_args) {
    var p__18144 = null;
    if (arguments.length > 1) {
      var G__18147__i = 0, G__18147__a = new Array(arguments.length - 1);
      while (G__18147__i < G__18147__a.length) {
        G__18147__a[G__18147__i] = arguments[G__18147__i + 1];
        ++G__18147__i;
      }
      p__18144 = new cljs.core.IndexedSeq(G__18147__a, 0);
    }
    return move__delegate.call(this, url, p__18144);
  };
  move.cljs$lang$maxFixedArity = 1;
  move.cljs$lang$applyTo = function(arglist__18148) {
    var url = cljs.core.first(arglist__18148);
    var p__18144 = cljs.core.rest(arglist__18148);
    return move__delegate(url, p__18144);
  };
  move.cljs$core$IFn$_invoke$arity$variadic = move__delegate;
  return move;
}();
cljs_http.client.options = function() {
  var options__delegate = function(url, p__18149) {
    var vec__18151 = p__18149;
    var req = cljs.core.nth.call(null, vec__18151, 0, null);
    return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "options", "options", 99638489), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
  };
  var options = function(url, var_args) {
    var p__18149 = null;
    if (arguments.length > 1) {
      var G__18152__i = 0, G__18152__a = new Array(arguments.length - 1);
      while (G__18152__i < G__18152__a.length) {
        G__18152__a[G__18152__i] = arguments[G__18152__i + 1];
        ++G__18152__i;
      }
      p__18149 = new cljs.core.IndexedSeq(G__18152__a, 0);
    }
    return options__delegate.call(this, url, p__18149);
  };
  options.cljs$lang$maxFixedArity = 1;
  options.cljs$lang$applyTo = function(arglist__18153) {
    var url = cljs.core.first(arglist__18153);
    var p__18149 = cljs.core.rest(arglist__18153);
    return options__delegate(url, p__18149);
  };
  options.cljs$core$IFn$_invoke$arity$variadic = options__delegate;
  return options;
}();
cljs_http.client.patch = function() {
  var patch__delegate = function(url, p__18154) {
    var vec__18156 = p__18154;
    var req = cljs.core.nth.call(null, vec__18156, 0, null);
    return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "patch", "patch", 380775109), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
  };
  var patch = function(url, var_args) {
    var p__18154 = null;
    if (arguments.length > 1) {
      var G__18157__i = 0, G__18157__a = new Array(arguments.length - 1);
      while (G__18157__i < G__18157__a.length) {
        G__18157__a[G__18157__i] = arguments[G__18157__i + 1];
        ++G__18157__i;
      }
      p__18154 = new cljs.core.IndexedSeq(G__18157__a, 0);
    }
    return patch__delegate.call(this, url, p__18154);
  };
  patch.cljs$lang$maxFixedArity = 1;
  patch.cljs$lang$applyTo = function(arglist__18158) {
    var url = cljs.core.first(arglist__18158);
    var p__18154 = cljs.core.rest(arglist__18158);
    return patch__delegate(url, p__18154);
  };
  patch.cljs$core$IFn$_invoke$arity$variadic = patch__delegate;
  return patch;
}();
cljs_http.client.post = function() {
  var post__delegate = function(url, p__18159) {
    var vec__18161 = p__18159;
    var req = cljs.core.nth.call(null, vec__18161, 0, null);
    return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "post", "post", 269697687), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
  };
  var post = function(url, var_args) {
    var p__18159 = null;
    if (arguments.length > 1) {
      var G__18162__i = 0, G__18162__a = new Array(arguments.length - 1);
      while (G__18162__i < G__18162__a.length) {
        G__18162__a[G__18162__i] = arguments[G__18162__i + 1];
        ++G__18162__i;
      }
      p__18159 = new cljs.core.IndexedSeq(G__18162__a, 0);
    }
    return post__delegate.call(this, url, p__18159);
  };
  post.cljs$lang$maxFixedArity = 1;
  post.cljs$lang$applyTo = function(arglist__18163) {
    var url = cljs.core.first(arglist__18163);
    var p__18159 = cljs.core.rest(arglist__18163);
    return post__delegate(url, p__18159);
  };
  post.cljs$core$IFn$_invoke$arity$variadic = post__delegate;
  return post;
}();
cljs_http.client.put = function() {
  var put__delegate = function(url, p__18164) {
    var vec__18166 = p__18164;
    var req = cljs.core.nth.call(null, vec__18166, 0, null);
    return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "put", "put", 1299772570), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
  };
  var put = function(url, var_args) {
    var p__18164 = null;
    if (arguments.length > 1) {
      var G__18167__i = 0, G__18167__a = new Array(arguments.length - 1);
      while (G__18167__i < G__18167__a.length) {
        G__18167__a[G__18167__i] = arguments[G__18167__i + 1];
        ++G__18167__i;
      }
      p__18164 = new cljs.core.IndexedSeq(G__18167__a, 0);
    }
    return put__delegate.call(this, url, p__18164);
  };
  put.cljs$lang$maxFixedArity = 1;
  put.cljs$lang$applyTo = function(arglist__18168) {
    var url = cljs.core.first(arglist__18168);
    var p__18164 = cljs.core.rest(arglist__18168);
    return put__delegate(url, p__18164);
  };
  put.cljs$core$IFn$_invoke$arity$variadic = put__delegate;
  return put;
}();
goog.provide("speicher.client");
goog.require("cljs.core");
goog.require("speicher.render");
goog.require("cljs_http.client");
goog.require("cljs.core.async");
goog.require("cljs.reader");
cljs.core.enable_console_print_BANG_.call(null);
speicher.client.fetch_list = function fetch_list(state, kw) {
  var c__6120__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6120__auto__) {
    return function() {
      var f__6121__auto__ = function() {
        var switch__6064__auto__ = function(c__6120__auto__) {
          return function(state_21632) {
            var state_val_21633 = state_21632[1];
            if (state_val_21633 === 3) {
              var inst_21630 = state_21632[2];
              var state_21632__$1 = state_21632;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21632__$1, inst_21630);
            } else {
              if (state_val_21633 === 2) {
                var inst_21621 = state_21632[7];
                var inst_21625 = state_21632[2];
                var inst_21626 = cljs.core.PersistentVector.EMPTY_NODE;
                var inst_21627 = [new cljs.core.Keyword(null, "response", "response", -1068424192), inst_21625];
                var inst_21628 = new cljs.core.PersistentVector(null, 2, 5, inst_21626, inst_21627, null);
                var state_21632__$1 = state_21632;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21632__$1, 3, inst_21621, inst_21628);
              } else {
                if (state_val_21633 === 1) {
                  var inst_21621 = (new cljs.core.Keyword(null, "input-chan", "input-chan", -1487255360)).cljs$core$IFn$_invoke$arity$1(state);
                  var inst_21622 = [cljs.core.str("/list/"), cljs.core.str(kw)].join("");
                  var inst_21623 = cljs_http.client.get.call(null, inst_21622);
                  var state_21632__$1 = function() {
                    var statearr_21634 = state_21632;
                    statearr_21634[7] = inst_21621;
                    return statearr_21634;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21632__$1, 2, inst_21623);
                } else {
                  return null;
                }
              }
            }
          };
        }(c__6120__auto__);
        return function(switch__6064__auto__, c__6120__auto__) {
          return function() {
            var state_machine__6065__auto__ = null;
            var state_machine__6065__auto____0 = function() {
              var statearr_21638 = [null, null, null, null, null, null, null, null];
              statearr_21638[0] = state_machine__6065__auto__;
              statearr_21638[1] = 1;
              return statearr_21638;
            };
            var state_machine__6065__auto____1 = function(state_21632) {
              while (true) {
                var ret_value__6066__auto__ = function() {
                  try {
                    while (true) {
                      var result__6067__auto__ = switch__6064__auto__.call(null, state_21632);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6067__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6067__auto__;
                      }
                      break;
                    }
                  } catch (e21639) {
                    if (e21639 instanceof Object) {
                      var ex__6068__auto__ = e21639;
                      var statearr_21640_21642 = state_21632;
                      statearr_21640_21642[5] = ex__6068__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21632);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e21639;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6066__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__21643 = state_21632;
                  state_21632 = G__21643;
                  continue;
                } else {
                  return ret_value__6066__auto__;
                }
                break;
              }
            };
            state_machine__6065__auto__ = function(state_21632) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6065__auto____0.call(this);
                case 1:
                  return state_machine__6065__auto____1.call(this, state_21632);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6065__auto____0;
            state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6065__auto____1;
            return state_machine__6065__auto__;
          }();
        }(switch__6064__auto__, c__6120__auto__);
      }();
      var state__6122__auto__ = function() {
        var statearr_21641 = f__6121__auto__.call(null);
        statearr_21641[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6120__auto__;
        return statearr_21641;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6122__auto__);
    };
  }(c__6120__auto__));
  return c__6120__auto__;
};
speicher.client.level_limit = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "daily", "daily", -697831483), 6, new cljs.core.Keyword(null, "weekly", "weekly", 319200344), 6, new cljs.core.Keyword(null, "monthly", "monthly", 1596693261), 11, new cljs.core.Keyword(null, "yearly", "yearly", 1010642817), 6], null);
speicher.client.next_level = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "daily", "daily", -697831483), new cljs.core.Keyword(null, "weekly", "weekly", 319200344), new cljs.core.Keyword(null, "weekly", "weekly", 319200344), new cljs.core.Keyword(null, "monthly", "monthly", 1596693261), new cljs.core.Keyword(null, "monthly", "monthly", 1596693261), new cljs.core.Keyword(null, "yearly", "yearly", 1010642817)], null);
speicher.client.save_lists_BANG_ = function save_lists_BANG_(p__21644) {
  var map__21670 = p__21644;
  var map__21670__$1 = cljs.core.seq_QMARK_.call(null, map__21670) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21670) : map__21670;
  var state = map__21670__$1;
  var input_chan = cljs.core.get.call(null, map__21670__$1, new cljs.core.Keyword(null, "input-chan", "input-chan", -1487255360));
  var current_list = cljs.core.get.call(null, map__21670__$1, new cljs.core.Keyword(null, "current-list", "current-list", 1594473864));
  var next_list = cljs.core.get.call(null, map__21670__$1, new cljs.core.Keyword(null, "next-list", "next-list", 138818716));
  var words = cljs.core.get.call(null, map__21670__$1, new cljs.core.Keyword(null, "words", "words", 1924933001));
  var c__6120__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6120__auto__, map__21670, map__21670__$1, state, input_chan, current_list, next_list, words) {
    return function() {
      var f__6121__auto__ = function() {
        var switch__6064__auto__ = function(c__6120__auto__, map__21670, map__21670__$1, state, input_chan, current_list, next_list, words) {
          return function(state_21686) {
            var state_val_21687 = state_21686[1];
            if (state_val_21687 === 3) {
              var inst_21684 = state_21686[2];
              var state_21686__$1 = state_21686;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21686__$1, inst_21684);
            } else {
              if (state_val_21687 === 2) {
                var inst_21679 = state_21686[2];
                var inst_21680 = cljs.core.PersistentVector.EMPTY_NODE;
                var inst_21681 = [new cljs.core.Keyword(null, "saved-list", "saved-list", 1333944303), inst_21679];
                var inst_21682 = new cljs.core.PersistentVector(null, 2, 5, inst_21680, inst_21681, null);
                var state_21686__$1 = state_21686;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21686__$1, 3, input_chan, inst_21682);
              } else {
                if (state_val_21687 === 1) {
                  var inst_21671 = [new cljs.core.Keyword(null, "edn-params", "edn-params", 894273052)];
                  var inst_21672 = [new cljs.core.Keyword(null, "current-list", "current-list", 1594473864), new cljs.core.Keyword(null, "answered", "answered", -1524147020), new cljs.core.Keyword(null, "next-list", "next-list", 138818716)];
                  var inst_21673 = [current_list, words, next_list];
                  var inst_21674 = cljs.core.PersistentHashMap.fromArrays(inst_21672, inst_21673);
                  var inst_21675 = [inst_21674];
                  var inst_21676 = cljs.core.PersistentHashMap.fromArrays(inst_21671, inst_21675);
                  var inst_21677 = cljs_http.client.post.call(null, "/save", inst_21676);
                  var state_21686__$1 = state_21686;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21686__$1, 2, inst_21677);
                } else {
                  return null;
                }
              }
            }
          };
        }(c__6120__auto__, map__21670, map__21670__$1, state, input_chan, current_list, next_list, words);
        return function(switch__6064__auto__, c__6120__auto__, map__21670, map__21670__$1, state, input_chan, current_list, next_list, words) {
          return function() {
            var state_machine__6065__auto__ = null;
            var state_machine__6065__auto____0 = function() {
              var statearr_21691 = [null, null, null, null, null, null, null];
              statearr_21691[0] = state_machine__6065__auto__;
              statearr_21691[1] = 1;
              return statearr_21691;
            };
            var state_machine__6065__auto____1 = function(state_21686) {
              while (true) {
                var ret_value__6066__auto__ = function() {
                  try {
                    while (true) {
                      var result__6067__auto__ = switch__6064__auto__.call(null, state_21686);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6067__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6067__auto__;
                      }
                      break;
                    }
                  } catch (e21692) {
                    if (e21692 instanceof Object) {
                      var ex__6068__auto__ = e21692;
                      var statearr_21693_21695 = state_21686;
                      statearr_21693_21695[5] = ex__6068__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21686);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e21692;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6066__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__21696 = state_21686;
                  state_21686 = G__21696;
                  continue;
                } else {
                  return ret_value__6066__auto__;
                }
                break;
              }
            };
            state_machine__6065__auto__ = function(state_21686) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6065__auto____0.call(this);
                case 1:
                  return state_machine__6065__auto____1.call(this, state_21686);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6065__auto____0;
            state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6065__auto____1;
            return state_machine__6065__auto__;
          }();
        }(switch__6064__auto__, c__6120__auto__, map__21670, map__21670__$1, state, input_chan, current_list, next_list, words);
      }();
      var state__6122__auto__ = function() {
        var statearr_21694 = f__6121__auto__.call(null);
        statearr_21694[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6120__auto__;
        return statearr_21694;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6122__auto__);
    };
  }(c__6120__auto__, map__21670, map__21670__$1, state, input_chan, current_list, next_list, words));
  return c__6120__auto__;
};
speicher.client.finished = function finished(state) {
  (new cljs.core.Keyword(null, "swiper", "swiper", -1506069648)).cljs$core$IFn$_invoke$arity$1(state).destroy();
  speicher.client.save_lists_BANG_.call(null, state);
  return cljs.core.assoc.call(null, cljs.core.dissoc.call(null, state, new cljs.core.Keyword(null, "words", "words", 1924933001), new cljs.core.Keyword(null, "next-list", "next-list", 138818716), new cljs.core.Keyword(null, "swiper", "swiper", -1506069648)), new cljs.core.Keyword(null, "mode", "mode", 654403691), new cljs.core.Keyword(null, "next", "next", -117701485));
};
speicher.client.level_complete_QMARK_ = function level_complete_QMARK_(level, count) {
  return cljs.core._EQ_.call(null, cljs.core.get.call(null, speicher.client.level_limit, level), count);
};
speicher.client.level_up = function level_up(state, p__21697) {
  var vec__21699 = p__21697;
  var ger = cljs.core.nth.call(null, vec__21699, 0, null);
  var eng = cljs.core.nth.call(null, vec__21699, 1, null);
  var c = cljs.core.nth.call(null, vec__21699, 2, null);
  var d = cljs.core.nth.call(null, vec__21699, 3, null);
  var next_l = cljs.core.get.call(null, speicher.client.next_level, d);
  return cljs.core.update_in.call(null, cljs.core.assoc_in.call(null, state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "words", "words", 1924933001), 0], null), null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "next-list", "next-list", 138818716)], null), cljs.core.conj, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [ger, eng, 
  0, next_l], null));
};
speicher.client.correct = function correct(state, idx) {
  var vec__21701 = cljs.core.get_in.call(null, state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "words", "words", 1924933001), idx], null));
  var ger = cljs.core.nth.call(null, vec__21701, 0, null);
  var eng = cljs.core.nth.call(null, vec__21701, 1, null);
  var c = cljs.core.nth.call(null, vec__21701, 2, null);
  var list_kw = cljs.core.nth.call(null, vec__21701, 3, null);
  (new cljs.core.Keyword(null, "swiper", "swiper", -1506069648)).cljs$core$IFn$_invoke$arity$1(state).slideNext();
  if (speicher.client.level_complete_QMARK_.call(null, list_kw, c)) {
    return speicher.client.level_up.call(null, state, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [ger, eng, c, list_kw], null));
  } else {
    return cljs.core.assoc_in.call(null, state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "words", "words", 1924933001), idx], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [ger, eng, c + 1, list_kw], null));
  }
};
speicher.client.init_swiper = function init_swiper(state, _) {
  var swiper = (new cljs.core.Keyword(null, "f7", "f7", 356150168)).cljs$core$IFn$_invoke$arity$1(state).swiper(".swiper-container", {"prevButton":".swiper-prev-button", "nextButton":".swiper-next-button"});
  var html = '\x3cdiv class\x3d\'swiper-slide\'\x3e\x3cspan\x3eAll Done? \x3cbr\x3e\x3ca href\x3d"next.html" class\x3d"button"} \x3eSave\x3c/a\x3e\n        \x3c/span\x3e\x3c/div\x3e';
  Dom7(".swiper-wrapper").append(html);
  swiper.update();
  return cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "swiper-init?", "swiper-init?", 65165134), true, new cljs.core.Keyword(null, "swiper", "swiper", -1506069648), swiper);
};
speicher.client.review_list = function review_list(state, list_kw) {
  speicher.client.fetch_list.call(null, state, list_kw);
  return cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "mode", "mode", 654403691), new cljs.core.Keyword(null, "review-list", "review-list", -2126749986), new cljs.core.Keyword(null, "swiper-init?", "swiper-init?", 65165134), false, new cljs.core.Keyword(null, "current-list", "current-list", 1594473864), list_kw, new cljs.core.Keyword(null, "answered", "answered", -1524147020), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "next-list", "next-list", 138818716), cljs.core.PersistentVector.EMPTY);
};
speicher.client.show_list = function show_list(state, kw) {
  speicher.client.fetch_list.call(null, state, kw);
  return cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "mode", "mode", 654403691), new cljs.core.Keyword(null, "show-list", "show-list", -483536849));
};
speicher.client.show_search = function show_search(state, _) {
  return cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "mode", "mode", 654403691), new cljs.core.Keyword(null, "search-page", "search-page", -705609891));
};
speicher.client.show_enter = function show_enter(state, _) {
  return cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "mode", "mode", 654403691), new cljs.core.Keyword(null, "enter-page", "enter-page", -519644705));
};
speicher.client.lookup = function lookup(state, word) {
  var c__6120__auto___21744 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6120__auto___21744) {
    return function() {
      var f__6121__auto__ = function() {
        var switch__6064__auto__ = function(c__6120__auto___21744) {
          return function(state_21734) {
            var state_val_21735 = state_21734[1];
            if (state_val_21735 === 3) {
              var inst_21732 = state_21734[2];
              var state_21734__$1 = state_21734;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21734__$1, inst_21732);
            } else {
              if (state_val_21735 === 2) {
                var inst_21723 = state_21734[7];
                var inst_21727 = state_21734[2];
                var inst_21728 = cljs.core.PersistentVector.EMPTY_NODE;
                var inst_21729 = [new cljs.core.Keyword(null, "definitions", "definitions", 167529986), inst_21727];
                var inst_21730 = new cljs.core.PersistentVector(null, 2, 5, inst_21728, inst_21729, null);
                var state_21734__$1 = state_21734;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21734__$1, 3, inst_21723, inst_21730);
              } else {
                if (state_val_21735 === 1) {
                  var inst_21723 = (new cljs.core.Keyword(null, "input-chan", "input-chan", -1487255360)).cljs$core$IFn$_invoke$arity$1(state);
                  var inst_21724 = [cljs.core.str("/search/"), cljs.core.str(word)].join("");
                  var inst_21725 = cljs_http.client.get.call(null, inst_21724);
                  var state_21734__$1 = function() {
                    var statearr_21736 = state_21734;
                    statearr_21736[7] = inst_21723;
                    return statearr_21736;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21734__$1, 2, inst_21725);
                } else {
                  return null;
                }
              }
            }
          };
        }(c__6120__auto___21744);
        return function(switch__6064__auto__, c__6120__auto___21744) {
          return function() {
            var state_machine__6065__auto__ = null;
            var state_machine__6065__auto____0 = function() {
              var statearr_21740 = [null, null, null, null, null, null, null, null];
              statearr_21740[0] = state_machine__6065__auto__;
              statearr_21740[1] = 1;
              return statearr_21740;
            };
            var state_machine__6065__auto____1 = function(state_21734) {
              while (true) {
                var ret_value__6066__auto__ = function() {
                  try {
                    while (true) {
                      var result__6067__auto__ = switch__6064__auto__.call(null, state_21734);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6067__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6067__auto__;
                      }
                      break;
                    }
                  } catch (e21741) {
                    if (e21741 instanceof Object) {
                      var ex__6068__auto__ = e21741;
                      var statearr_21742_21745 = state_21734;
                      statearr_21742_21745[5] = ex__6068__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21734);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e21741;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6066__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__21746 = state_21734;
                  state_21734 = G__21746;
                  continue;
                } else {
                  return ret_value__6066__auto__;
                }
                break;
              }
            };
            state_machine__6065__auto__ = function(state_21734) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6065__auto____0.call(this);
                case 1:
                  return state_machine__6065__auto____1.call(this, state_21734);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6065__auto____0;
            state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6065__auto____1;
            return state_machine__6065__auto__;
          }();
        }(switch__6064__auto__, c__6120__auto___21744);
      }();
      var state__6122__auto__ = function() {
        var statearr_21743 = f__6121__auto__.call(null);
        statearr_21743[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6120__auto___21744;
        return statearr_21743;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6122__auto__);
    };
  }(c__6120__auto___21744));
  return cljs.core.dissoc.call(null, state, new cljs.core.Keyword(null, "dictionary", "dictionary", -2013643865));
};
speicher.client.add_new_word = function add_new_word(state, entry) {
  var c__6120__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6120__auto__) {
    return function() {
      var f__6121__auto__ = function() {
        var switch__6064__auto__ = function(c__6120__auto__) {
          return function(state_21789) {
            var state_val_21790 = state_21789[1];
            if (state_val_21790 === 3) {
              var inst_21787 = state_21789[2];
              var state_21789__$1 = state_21789;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21789__$1, inst_21787);
            } else {
              if (state_val_21790 === 2) {
                var inst_21773 = state_21789[7];
                var inst_21782 = state_21789[2];
                var inst_21783 = cljs.core.PersistentVector.EMPTY_NODE;
                var inst_21784 = [new cljs.core.Keyword(null, "definition-added", "definition-added", 195281834), inst_21782];
                var inst_21785 = new cljs.core.PersistentVector(null, 2, 5, inst_21783, inst_21784, null);
                var state_21789__$1 = state_21789;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21789__$1, 3, inst_21773, inst_21785);
              } else {
                if (state_val_21790 === 1) {
                  var inst_21773 = (new cljs.core.Keyword(null, "input-chan", "input-chan", -1487255360)).cljs$core$IFn$_invoke$arity$1(state);
                  var inst_21774 = [new cljs.core.Keyword(null, "form-params", "form-params", 1884296467)];
                  var inst_21775 = [new cljs.core.Keyword(null, "entry", "entry", 505168823)];
                  var inst_21776 = [entry];
                  var inst_21777 = cljs.core.PersistentHashMap.fromArrays(inst_21775, inst_21776);
                  var inst_21778 = [inst_21777];
                  var inst_21779 = cljs.core.PersistentHashMap.fromArrays(inst_21774, inst_21778);
                  var inst_21780 = cljs_http.client.post.call(null, "/add", inst_21779);
                  var state_21789__$1 = function() {
                    var statearr_21791 = state_21789;
                    statearr_21791[7] = inst_21773;
                    return statearr_21791;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21789__$1, 2, inst_21780);
                } else {
                  return null;
                }
              }
            }
          };
        }(c__6120__auto__);
        return function(switch__6064__auto__, c__6120__auto__) {
          return function() {
            var state_machine__6065__auto__ = null;
            var state_machine__6065__auto____0 = function() {
              var statearr_21795 = [null, null, null, null, null, null, null, null];
              statearr_21795[0] = state_machine__6065__auto__;
              statearr_21795[1] = 1;
              return statearr_21795;
            };
            var state_machine__6065__auto____1 = function(state_21789) {
              while (true) {
                var ret_value__6066__auto__ = function() {
                  try {
                    while (true) {
                      var result__6067__auto__ = switch__6064__auto__.call(null, state_21789);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6067__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6067__auto__;
                      }
                      break;
                    }
                  } catch (e21796) {
                    if (e21796 instanceof Object) {
                      var ex__6068__auto__ = e21796;
                      var statearr_21797_21799 = state_21789;
                      statearr_21797_21799[5] = ex__6068__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21789);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e21796;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6066__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__21800 = state_21789;
                  state_21789 = G__21800;
                  continue;
                } else {
                  return ret_value__6066__auto__;
                }
                break;
              }
            };
            state_machine__6065__auto__ = function(state_21789) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6065__auto____0.call(this);
                case 1:
                  return state_machine__6065__auto____1.call(this, state_21789);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6065__auto____0;
            state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6065__auto____1;
            return state_machine__6065__auto__;
          }();
        }(switch__6064__auto__, c__6120__auto__);
      }();
      var state__6122__auto__ = function() {
        var statearr_21798 = f__6121__auto__.call(null);
        statearr_21798[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6120__auto__;
        return statearr_21798;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6122__auto__);
    };
  }(c__6120__auto__));
  return c__6120__auto__;
};
speicher.client.submit_selected = function submit_selected(state, entry_index) {
  var c__6120__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6120__auto__) {
    return function() {
      var f__6121__auto__ = function() {
        var switch__6064__auto__ = function(c__6120__auto__) {
          return function(state_21831) {
            var state_val_21832 = state_21831[1];
            if (state_val_21832 === 1) {
              var inst_21821 = (new cljs.core.Keyword(null, "dictionary", "dictionary", -2013643865)).cljs$core$IFn$_invoke$arity$1(state);
              var inst_21822 = cljs.core.vec.call(null, inst_21821);
              var inst_21823 = (new cljs.core.Keyword(null, "entry", "entry", 505168823)).cljs$core$IFn$_invoke$arity$1(entry_index);
              var inst_21824 = cljs.reader.read_string.call(null, inst_21823);
              var inst_21825 = cljs.core.get.call(null, inst_21822, inst_21824);
              var inst_21826 = speicher.render.format_entry.call(null, inst_21825);
              var inst_21827 = cljs.core.first.call(null, inst_21826);
              var inst_21828 = speicher.client.add_new_word.call(null, state, inst_21827);
              var inst_21829 = cljs.core.dissoc.call(null, state, new cljs.core.Keyword(null, "dictionary", "dictionary", -2013643865));
              var state_21831__$1 = function() {
                var statearr_21833 = state_21831;
                statearr_21833[7] = inst_21828;
                return statearr_21833;
              }();
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21831__$1, inst_21829);
            } else {
              return null;
            }
          };
        }(c__6120__auto__);
        return function(switch__6064__auto__, c__6120__auto__) {
          return function() {
            var state_machine__6065__auto__ = null;
            var state_machine__6065__auto____0 = function() {
              var statearr_21837 = [null, null, null, null, null, null, null, null];
              statearr_21837[0] = state_machine__6065__auto__;
              statearr_21837[1] = 1;
              return statearr_21837;
            };
            var state_machine__6065__auto____1 = function(state_21831) {
              while (true) {
                var ret_value__6066__auto__ = function() {
                  try {
                    while (true) {
                      var result__6067__auto__ = switch__6064__auto__.call(null, state_21831);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6067__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6067__auto__;
                      }
                      break;
                    }
                  } catch (e21838) {
                    if (e21838 instanceof Object) {
                      var ex__6068__auto__ = e21838;
                      var statearr_21839_21841 = state_21831;
                      statearr_21839_21841[5] = ex__6068__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21831);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e21838;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6066__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__21842 = state_21831;
                  state_21831 = G__21842;
                  continue;
                } else {
                  return ret_value__6066__auto__;
                }
                break;
              }
            };
            state_machine__6065__auto__ = function(state_21831) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6065__auto____0.call(this);
                case 1:
                  return state_machine__6065__auto____1.call(this, state_21831);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6065__auto____0;
            state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6065__auto____1;
            return state_machine__6065__auto__;
          }();
        }(switch__6064__auto__, c__6120__auto__);
      }();
      var state__6122__auto__ = function() {
        var statearr_21840 = f__6121__auto__.call(null);
        statearr_21840[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6120__auto__;
        return statearr_21840;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6122__auto__);
    };
  }(c__6120__auto__));
  return c__6120__auto__;
};
speicher.client.submit_entered = function submit_entered(state, entered) {
  speicher.client.add_new_word.call(null, state, entered);
  return state;
};
speicher.client.handle_response = function handle_response(state, p__21843) {
  var map__21845 = p__21843;
  var map__21845__$1 = cljs.core.seq_QMARK_.call(null, map__21845) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21845) : map__21845;
  var body = cljs.core.get.call(null, map__21845__$1, new cljs.core.Keyword(null, "body", "body", -2049205669));
  var status = cljs.core.get.call(null, map__21845__$1, new cljs.core.Keyword(null, "status", "status", -1997798413));
  return cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "words", "words", 1924933001), body);
};
speicher.client.show_definitions = function show_definitions(state, p__21846) {
  var map__21848 = p__21846;
  var map__21848__$1 = cljs.core.seq_QMARK_.call(null, map__21848) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21848) : map__21848;
  var body = cljs.core.get.call(null, map__21848__$1, new cljs.core.Keyword(null, "body", "body", -2049205669));
  return cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "dictionary", "dictionary", -2013643865), body);
};
speicher.client.print_entry = function print_entry(state, data) {
  cljs.core.println.call(null, "print entry", data);
  return state;
};
speicher.client.init_updates = function init_updates(p__21849) {
  var map__21887 = p__21849;
  var map__21887__$1 = cljs.core.seq_QMARK_.call(null, map__21887) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21887) : map__21887;
  var functions = cljs.core.get.call(null, map__21887__$1, new cljs.core.Keyword(null, "functions", "functions", 184951466));
  var state = cljs.core.get.call(null, map__21887__$1, new cljs.core.Keyword(null, "state", "state", -1988618099));
  var input_chan = (new cljs.core.Keyword(null, "input-chan", "input-chan", -1487255360)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state));
  var c__6120__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6120__auto__, input_chan, map__21887, map__21887__$1, functions, state) {
    return function() {
      var f__6121__auto__ = function() {
        var switch__6064__auto__ = function(c__6120__auto__, input_chan, map__21887, map__21887__$1, functions, state) {
          return function(state_21908) {
            var state_val_21909 = state_21908[1];
            if (state_val_21909 === 7) {
              var inst_21892 = state_21908[2];
              var inst_21893 = cljs.core.nth.call(null, inst_21892, 0, null);
              var inst_21894 = cljs.core.nth.call(null, inst_21892, 1, null);
              var inst_21895 = [cljs.core.str("on channel ["), cljs.core.str(inst_21893), cljs.core.str("], received value ["), cljs.core.str(inst_21894), cljs.core.str("]")].join("");
              var inst_21896 = console.log(inst_21895);
              var inst_21897 = cljs.core.get.call(null, functions, inst_21893);
              var inst_21898 = cljs.core.swap_BANG_.call(null, state, inst_21897, inst_21894);
              var inst_21899 = cljs.core.deref.call(null, state);
              var inst_21900 = speicher.render.request_render.call(null, inst_21899);
              var state_21908__$1 = function() {
                var statearr_21910 = state_21908;
                statearr_21910[7] = inst_21900;
                statearr_21910[8] = inst_21896;
                statearr_21910[9] = inst_21898;
                return statearr_21910;
              }();
              var statearr_21911_21924 = state_21908__$1;
              statearr_21911_21924[2] = null;
              statearr_21911_21924[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_21909 === 6) {
                var inst_21904 = state_21908[2];
                var state_21908__$1 = state_21908;
                var statearr_21912_21925 = state_21908__$1;
                statearr_21912_21925[2] = inst_21904;
                statearr_21912_21925[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21909 === 5) {
                  var state_21908__$1 = state_21908;
                  var statearr_21913_21926 = state_21908__$1;
                  statearr_21913_21926[2] = null;
                  statearr_21913_21926[1] = 6;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21909 === 4) {
                    var state_21908__$1 = state_21908;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21908__$1, 7, input_chan);
                  } else {
                    if (state_val_21909 === 3) {
                      var inst_21906 = state_21908[2];
                      var state_21908__$1 = state_21908;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21908__$1, inst_21906);
                    } else {
                      if (state_val_21909 === 2) {
                        var state_21908__$1 = state_21908;
                        var statearr_21914_21927 = state_21908__$1;
                        statearr_21914_21927[1] = 4;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_21909 === 1) {
                          var state_21908__$1 = state_21908;
                          var statearr_21916_21928 = state_21908__$1;
                          statearr_21916_21928[2] = null;
                          statearr_21916_21928[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6120__auto__, input_chan, map__21887, map__21887__$1, functions, state);
        return function(switch__6064__auto__, c__6120__auto__, input_chan, map__21887, map__21887__$1, functions, state) {
          return function() {
            var state_machine__6065__auto__ = null;
            var state_machine__6065__auto____0 = function() {
              var statearr_21920 = [null, null, null, null, null, null, null, null, null, null];
              statearr_21920[0] = state_machine__6065__auto__;
              statearr_21920[1] = 1;
              return statearr_21920;
            };
            var state_machine__6065__auto____1 = function(state_21908) {
              while (true) {
                var ret_value__6066__auto__ = function() {
                  try {
                    while (true) {
                      var result__6067__auto__ = switch__6064__auto__.call(null, state_21908);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6067__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__6067__auto__;
                      }
                      break;
                    }
                  } catch (e21921) {
                    if (e21921 instanceof Object) {
                      var ex__6068__auto__ = e21921;
                      var statearr_21922_21929 = state_21908;
                      statearr_21922_21929[5] = ex__6068__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21908);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e21921;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6066__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__21930 = state_21908;
                  state_21908 = G__21930;
                  continue;
                } else {
                  return ret_value__6066__auto__;
                }
                break;
              }
            };
            state_machine__6065__auto__ = function(state_21908) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6065__auto____0.call(this);
                case 1:
                  return state_machine__6065__auto____1.call(this, state_21908);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6065__auto____0;
            state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6065__auto____1;
            return state_machine__6065__auto__;
          }();
        }(switch__6064__auto__, c__6120__auto__, input_chan, map__21887, map__21887__$1, functions, state);
      }();
      var state__6122__auto__ = function() {
        var statearr_21923 = f__6121__auto__.call(null);
        statearr_21923[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6120__auto__;
        return statearr_21923;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6122__auto__);
    };
  }(c__6120__auto__, input_chan, map__21887, map__21887__$1, functions, state));
  return c__6120__auto__;
};
speicher.client.load_app = function load_app() {
  var ch = cljs.core.async.chan.call(null);
  var f7 = new Framework7({"onPageInit":function(ch) {
    return function init_callback(app, page) {
      var G__22120 = page.name;
      switch(G__22120) {
        case "index":
          return console.log("index page called");
          break;
        case "review":
          var c__6120__auto__ = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(c__6120__auto__, G__22120, ch) {
            return function() {
              var f__6121__auto__ = function() {
                var switch__6064__auto__ = function(c__6120__auto__, G__22120, ch) {
                  return function(state_22129) {
                    var state_val_22130 = state_22129[1];
                    if (state_val_22130 === 2) {
                      var inst_22127 = state_22129[2];
                      var state_22129__$1 = state_22129;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22129__$1, inst_22127);
                    } else {
                      if (state_val_22130 === 1) {
                        var inst_22121 = page["query"]["list"];
                        var inst_22122 = cljs.core.keyword.call(null, inst_22121);
                        var inst_22123 = cljs.core.PersistentVector.EMPTY_NODE;
                        var inst_22124 = [new cljs.core.Keyword(null, "review-list", "review-list", -2126749986), inst_22122];
                        var inst_22125 = new cljs.core.PersistentVector(null, 2, 5, inst_22123, inst_22124, null);
                        var state_22129__$1 = state_22129;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22129__$1, 2, ch, inst_22125);
                      } else {
                        return null;
                      }
                    }
                  };
                }(c__6120__auto__, G__22120, ch);
                return function(switch__6064__auto__, c__6120__auto__, G__22120, ch) {
                  return function() {
                    var state_machine__6065__auto__ = null;
                    var state_machine__6065__auto____0 = function() {
                      var statearr_22134 = [null, null, null, null, null, null, null];
                      statearr_22134[0] = state_machine__6065__auto__;
                      statearr_22134[1] = 1;
                      return statearr_22134;
                    };
                    var state_machine__6065__auto____1 = function(state_22129) {
                      while (true) {
                        var ret_value__6066__auto__ = function() {
                          try {
                            while (true) {
                              var result__6067__auto__ = switch__6064__auto__.call(null, state_22129);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__6067__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__6067__auto__;
                              }
                              break;
                            }
                          } catch (e22135) {
                            if (e22135 instanceof Object) {
                              var ex__6068__auto__ = e22135;
                              var statearr_22136_22184 = state_22129;
                              statearr_22136_22184[5] = ex__6068__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22129);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e22135;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6066__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__22185 = state_22129;
                          state_22129 = G__22185;
                          continue;
                        } else {
                          return ret_value__6066__auto__;
                        }
                        break;
                      }
                    };
                    state_machine__6065__auto__ = function(state_22129) {
                      switch(arguments.length) {
                        case 0:
                          return state_machine__6065__auto____0.call(this);
                        case 1:
                          return state_machine__6065__auto____1.call(this, state_22129);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6065__auto____0;
                    state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6065__auto____1;
                    return state_machine__6065__auto__;
                  }();
                }(switch__6064__auto__, c__6120__auto__, G__22120, ch);
              }();
              var state__6122__auto__ = function() {
                var statearr_22137 = f__6121__auto__.call(null);
                statearr_22137[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6120__auto__;
                return statearr_22137;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6122__auto__);
            };
          }(c__6120__auto__, G__22120, ch));
          return c__6120__auto__;
          break;
        case "next":
          var c__6120__auto__ = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(c__6120__auto__, G__22120, ch) {
            return function() {
              var f__6121__auto__ = function() {
                var switch__6064__auto__ = function(c__6120__auto__, G__22120, ch) {
                  return function(state_22144) {
                    var state_val_22145 = state_22144[1];
                    if (state_val_22145 === 2) {
                      var inst_22142 = state_22144[2];
                      var state_22144__$1 = state_22144;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22144__$1, inst_22142);
                    } else {
                      if (state_val_22145 === 1) {
                        var inst_22138 = cljs.core.PersistentVector.EMPTY_NODE;
                        var inst_22139 = [new cljs.core.Keyword(null, "review-done", "review-done", 1000388706), null];
                        var inst_22140 = new cljs.core.PersistentVector(null, 2, 5, inst_22138, inst_22139, null);
                        var state_22144__$1 = state_22144;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22144__$1, 2, ch, inst_22140);
                      } else {
                        return null;
                      }
                    }
                  };
                }(c__6120__auto__, G__22120, ch);
                return function(switch__6064__auto__, c__6120__auto__, G__22120, ch) {
                  return function() {
                    var state_machine__6065__auto__ = null;
                    var state_machine__6065__auto____0 = function() {
                      var statearr_22149 = [null, null, null, null, null, null, null];
                      statearr_22149[0] = state_machine__6065__auto__;
                      statearr_22149[1] = 1;
                      return statearr_22149;
                    };
                    var state_machine__6065__auto____1 = function(state_22144) {
                      while (true) {
                        var ret_value__6066__auto__ = function() {
                          try {
                            while (true) {
                              var result__6067__auto__ = switch__6064__auto__.call(null, state_22144);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__6067__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__6067__auto__;
                              }
                              break;
                            }
                          } catch (e22150) {
                            if (e22150 instanceof Object) {
                              var ex__6068__auto__ = e22150;
                              var statearr_22151_22186 = state_22144;
                              statearr_22151_22186[5] = ex__6068__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22144);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e22150;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6066__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__22187 = state_22144;
                          state_22144 = G__22187;
                          continue;
                        } else {
                          return ret_value__6066__auto__;
                        }
                        break;
                      }
                    };
                    state_machine__6065__auto__ = function(state_22144) {
                      switch(arguments.length) {
                        case 0:
                          return state_machine__6065__auto____0.call(this);
                        case 1:
                          return state_machine__6065__auto____1.call(this, state_22144);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6065__auto____0;
                    state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6065__auto____1;
                    return state_machine__6065__auto__;
                  }();
                }(switch__6064__auto__, c__6120__auto__, G__22120, ch);
              }();
              var state__6122__auto__ = function() {
                var statearr_22152 = f__6121__auto__.call(null);
                statearr_22152[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6120__auto__;
                return statearr_22152;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6122__auto__);
            };
          }(c__6120__auto__, G__22120, ch));
          return c__6120__auto__;
          break;
        case "show":
          var c__6120__auto__ = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(c__6120__auto__, G__22120, ch) {
            return function() {
              var f__6121__auto__ = function() {
                var switch__6064__auto__ = function(c__6120__auto__, G__22120, ch) {
                  return function(state_22159) {
                    var state_val_22160 = state_22159[1];
                    if (state_val_22160 === 2) {
                      var inst_22157 = state_22159[2];
                      var state_22159__$1 = state_22159;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22159__$1, inst_22157);
                    } else {
                      if (state_val_22160 === 1) {
                        var inst_22153 = cljs.core.PersistentVector.EMPTY_NODE;
                        var inst_22154 = [new cljs.core.Keyword(null, "show-list", "show-list", -483536849), new cljs.core.Keyword(null, "daily", "daily", -697831483)];
                        var inst_22155 = new cljs.core.PersistentVector(null, 2, 5, inst_22153, inst_22154, null);
                        var state_22159__$1 = state_22159;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22159__$1, 2, ch, inst_22155);
                      } else {
                        return null;
                      }
                    }
                  };
                }(c__6120__auto__, G__22120, ch);
                return function(switch__6064__auto__, c__6120__auto__, G__22120, ch) {
                  return function() {
                    var state_machine__6065__auto__ = null;
                    var state_machine__6065__auto____0 = function() {
                      var statearr_22164 = [null, null, null, null, null, null, null];
                      statearr_22164[0] = state_machine__6065__auto__;
                      statearr_22164[1] = 1;
                      return statearr_22164;
                    };
                    var state_machine__6065__auto____1 = function(state_22159) {
                      while (true) {
                        var ret_value__6066__auto__ = function() {
                          try {
                            while (true) {
                              var result__6067__auto__ = switch__6064__auto__.call(null, state_22159);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__6067__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__6067__auto__;
                              }
                              break;
                            }
                          } catch (e22165) {
                            if (e22165 instanceof Object) {
                              var ex__6068__auto__ = e22165;
                              var statearr_22166_22188 = state_22159;
                              statearr_22166_22188[5] = ex__6068__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22159);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e22165;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6066__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__22189 = state_22159;
                          state_22159 = G__22189;
                          continue;
                        } else {
                          return ret_value__6066__auto__;
                        }
                        break;
                      }
                    };
                    state_machine__6065__auto__ = function(state_22159) {
                      switch(arguments.length) {
                        case 0:
                          return state_machine__6065__auto____0.call(this);
                        case 1:
                          return state_machine__6065__auto____1.call(this, state_22159);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6065__auto____0;
                    state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6065__auto____1;
                    return state_machine__6065__auto__;
                  }();
                }(switch__6064__auto__, c__6120__auto__, G__22120, ch);
              }();
              var state__6122__auto__ = function() {
                var statearr_22167 = f__6121__auto__.call(null);
                statearr_22167[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6120__auto__;
                return statearr_22167;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6122__auto__);
            };
          }(c__6120__auto__, G__22120, ch));
          return c__6120__auto__;
          break;
        case "search":
          var c__6120__auto__ = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(c__6120__auto__, G__22120, ch) {
            return function() {
              var f__6121__auto__ = function() {
                var switch__6064__auto__ = function(c__6120__auto__, G__22120, ch) {
                  return function(state_22174) {
                    var state_val_22175 = state_22174[1];
                    if (state_val_22175 === 2) {
                      var inst_22172 = state_22174[2];
                      var state_22174__$1 = state_22174;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22174__$1, inst_22172);
                    } else {
                      if (state_val_22175 === 1) {
                        var inst_22168 = cljs.core.PersistentVector.EMPTY_NODE;
                        var inst_22169 = [new cljs.core.Keyword(null, "search-page", "search-page", -705609891), null];
                        var inst_22170 = new cljs.core.PersistentVector(null, 2, 5, inst_22168, inst_22169, null);
                        var state_22174__$1 = state_22174;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22174__$1, 2, ch, inst_22170);
                      } else {
                        return null;
                      }
                    }
                  };
                }(c__6120__auto__, G__22120, ch);
                return function(switch__6064__auto__, c__6120__auto__, G__22120, ch) {
                  return function() {
                    var state_machine__6065__auto__ = null;
                    var state_machine__6065__auto____0 = function() {
                      var statearr_22179 = [null, null, null, null, null, null, null];
                      statearr_22179[0] = state_machine__6065__auto__;
                      statearr_22179[1] = 1;
                      return statearr_22179;
                    };
                    var state_machine__6065__auto____1 = function(state_22174) {
                      while (true) {
                        var ret_value__6066__auto__ = function() {
                          try {
                            while (true) {
                              var result__6067__auto__ = switch__6064__auto__.call(null, state_22174);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__6067__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__6067__auto__;
                              }
                              break;
                            }
                          } catch (e22180) {
                            if (e22180 instanceof Object) {
                              var ex__6068__auto__ = e22180;
                              var statearr_22181_22190 = state_22174;
                              statearr_22181_22190[5] = ex__6068__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22174);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e22180;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6066__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__22191 = state_22174;
                          state_22174 = G__22191;
                          continue;
                        } else {
                          return ret_value__6066__auto__;
                        }
                        break;
                      }
                    };
                    state_machine__6065__auto__ = function(state_22174) {
                      switch(arguments.length) {
                        case 0:
                          return state_machine__6065__auto____0.call(this);
                        case 1:
                          return state_machine__6065__auto____1.call(this, state_22174);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6065__auto____0;
                    state_machine__6065__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6065__auto____1;
                    return state_machine__6065__auto__;
                  }();
                }(switch__6064__auto__, c__6120__auto__, G__22120, ch);
              }();
              var state__6122__auto__ = function() {
                var statearr_22182 = f__6121__auto__.call(null);
                statearr_22182[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6120__auto__;
                return statearr_22182;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6122__auto__);
            };
          }(c__6120__auto__, G__22120, ch));
          return c__6120__auto__;
          break;
        default:
          return cljs.core.println.call(null, "Nothing found ");
      }
    };
  }(ch)});
  var main = f7.addView(".view-main");
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "state", "state", -1988618099), cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "input-chan", "input-chan", -1487255360), ch, new cljs.core.Keyword(null, "mode", "mode", 654403691), new cljs.core.Keyword(null, "start", "start", -355208981), new cljs.core.Keyword(null, "current-list", "current-list", 1594473864), new cljs.core.Keyword(null, "daily", "daily", -697831483), 
  new cljs.core.Keyword(null, "f7", "f7", 356150168), f7, new cljs.core.Keyword(null, "main-view", "main-view", 343997885), main], null)), new cljs.core.Keyword(null, "functions", "functions", 184951466), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "response", "response", -1068424192), new cljs.core.Keyword(null, "review-done", "review-done", 1000388706), new cljs.core.Keyword(null, "definitions", "definitions", 167529986), new cljs.core.Keyword(null, "submit-selected", "submit-selected", 
  -548982554), new cljs.core.Keyword(null, "search-term", "search-term", 356193544), new cljs.core.Keyword(null, "definition-added", "definition-added", 195281834), new cljs.core.Keyword(null, "show-list", "show-list", -483536849), new cljs.core.Keyword(null, "init-swiper", "init-swiper", 998548847), new cljs.core.Keyword(null, "saved-list", "saved-list", 1333944303), new cljs.core.Keyword(null, "nav", "nav", 719540477), new cljs.core.Keyword(null, "search-page", "search-page", -705609891), new cljs.core.Keyword(null, 
  "submit-entered", "submit-entered", -1080659330), new cljs.core.Keyword(null, "review-list", "review-list", -2126749986), new cljs.core.Keyword(null, "correct", "correct", 984806334), new cljs.core.Keyword(null, "enter-page", "enter-page", -519644705)], [speicher.client.handle_response, speicher.client.finished, speicher.client.show_definitions, speicher.client.submit_selected, speicher.client.lookup, speicher.client.print_entry, speicher.client.show_list, speicher.client.init_swiper, speicher.client.print_entry, 
  speicher.client.print_entry, speicher.client.show_search, speicher.client.submit_entered, speicher.client.review_list, speicher.client.correct, speicher.client.show_enter])], null);
};
speicher.client.main = function main() {
  var app = speicher.client.load_app.call(null);
  var state = cljs.core.deref.call(null, (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(app));
  speicher.client.init_updates.call(null, app);
  return speicher.render.request_render.call(null, state);
};
goog.exportSymbol("speicher.client.main", speicher.client.main);
goog.provide("cemerick.cljs.test");
goog.require("cljs.core");
goog.require("clojure.string");
cemerick.cljs.test._STAR_test_print_fn_STAR_ = null;
cemerick.cljs.test._STAR_entry_point_STAR_ = true;
cemerick.cljs.test._STAR_test_ctx_STAR_ = null;
cemerick.cljs.test.init_test_environment_STAR_ = function init_test_environment_STAR_(aux_data) {
  return cljs.core.atom.call(null, cljs.core.merge.call(null, cljs.core.assoc.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "test", "test", 577538877), 0, new cljs.core.Keyword(null, "pass", "pass", 1574159993), 0, new cljs.core.Keyword(null, "fail", "fail", 1706214930), 0, new cljs.core.Keyword(null, "error", "error", -978969032), 0], null), cljs.core.truth_(cemerick.cljs.test._STAR_test_print_fn_STAR_) ? new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143), cemerick.cljs.test._STAR_test_print_fn_STAR_], null) : null), new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128), cljs.core.List.EMPTY), aux_data));
};
cemerick.cljs.test.init_test_environment = function init_test_environment() {
  var G__27250 = cemerick.cljs.test.init_test_environment_STAR_.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", -1547551786), cljs.core.List.EMPTY], null));
  cljs.core.swap_BANG_.call(null, G__27250, cljs.core.assoc, new cljs.core.Keyword(null, "async", "async", 1050769601), cemerick.cljs.test.init_test_environment_STAR_.call(null, cljs.core.PersistentArrayMap.EMPTY));
  return G__27250;
};
cemerick.cljs.test.registered_tests = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cemerick.cljs.test.registered_test_hooks = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cemerick.cljs.test.registered_fixtures = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cemerick.cljs.test.register_test_BANG_ = function register_test_BANG_(ns, name, fn) {
  return cljs.core.swap_BANG_.call(null, cemerick.cljs.test.registered_tests, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns], null), cljs.core.assoc, name, fn);
};
cemerick.cljs.test.register_test_ns_hook_BANG_ = function register_test_ns_hook_BANG_(ns, name) {
  return cljs.core.swap_BANG_.call(null, cemerick.cljs.test.registered_test_hooks, cljs.core.assoc, ns, name);
};
cemerick.cljs.test.TestContext = function(test_env, test_name, __meta, __extmap, __hash) {
  this.test_env = test_env;
  this.test_name = test_name;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__8107__auto__, k__8108__auto__) {
  var self__ = this;
  var this__8107__auto____$1 = this;
  return cljs.core._lookup.call(null, this__8107__auto____$1, k__8108__auto__, null);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__8109__auto__, k27252, else__8110__auto__) {
  var self__ = this;
  var this__8109__auto____$1 = this;
  var G__27254 = k27252 instanceof cljs.core.Keyword ? k27252.fqn : null;
  switch(G__27254) {
    case "test-name":
      return self__.test_name;
      break;
    case "test-env":
      return self__.test_env;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k27252, else__8110__auto__);
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__8121__auto__, writer__8122__auto__, opts__8123__auto__) {
  var self__ = this;
  var this__8121__auto____$1 = this;
  var pr_pair__8124__auto__ = function(this__8121__auto____$1) {
    return function(keyval__8125__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__8122__auto__, cljs.core.pr_writer, "", " ", "", opts__8123__auto__, keyval__8125__auto__);
    };
  }(this__8121__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__8122__auto__, pr_pair__8124__auto__, "#cemerick.cljs.test.TestContext{", ", ", "}", opts__8123__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test-env", "test-env", -540228992), self__.test_env], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "test-name", "test-name", -675595913), self__.test_name], null)], null), self__.__extmap));
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__8105__auto__) {
  var self__ = this;
  var this__8105__auto____$1 = this;
  return self__.__meta;
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__8101__auto__) {
  var self__ = this;
  var this__8101__auto____$1 = this;
  return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, self__.__meta, self__.__extmap, self__.__hash);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ICounted$_count$arity$1 = function(this__8111__auto__) {
  var self__ = this;
  var this__8111__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IHash$_hash$arity$1 = function(this__8102__auto__) {
  var self__ = this;
  var this__8102__auto____$1 = this;
  var h__7925__auto__ = self__.__hash;
  if (!(h__7925__auto__ == null)) {
    return h__7925__auto__;
  } else {
    var h__7925__auto____$1 = cljs.core.hash_imap.call(null, this__8102__auto____$1);
    self__.__hash = h__7925__auto____$1;
    return h__7925__auto____$1;
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__8103__auto__, other__8104__auto__) {
  var self__ = this;
  var this__8103__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__7492__auto__ = other__8104__auto__;
    if (cljs.core.truth_(and__7492__auto__)) {
      return this__8103__auto____$1.constructor === other__8104__auto__.constructor && cljs.core.equiv_map.call(null, this__8103__auto____$1, other__8104__auto__);
    } else {
      return and__7492__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__8116__auto__, k__8117__auto__) {
  var self__ = this;
  var this__8116__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "test-env", "test-env", -540228992), null, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), null], null), null), k__8117__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__8116__auto____$1), self__.__meta), k__8117__auto__);
  } else {
    return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__8117__auto__)), null);
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__8114__auto__, k__8115__auto__, G__27251) {
  var self__ = this;
  var this__8114__auto____$1 = this;
  var pred__27255 = cljs.core.keyword_identical_QMARK_;
  var expr__27256 = k__8115__auto__;
  if (cljs.core.truth_(pred__27255.call(null, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), expr__27256))) {
    return new cemerick.cljs.test.TestContext(G__27251, self__.test_name, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__27255.call(null, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), expr__27256))) {
      return new cemerick.cljs.test.TestContext(self__.test_env, G__27251, self__.__meta, self__.__extmap, null);
    } else {
      return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__8115__auto__, G__27251), null);
    }
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__8119__auto__) {
  var self__ = this;
  var this__8119__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test-env", "test-env", -540228992), self__.test_env], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test-name", "test-name", -675595913), self__.test_name], null)], null), 
  self__.__extmap));
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__8106__auto__, G__27251) {
  var self__ = this;
  var this__8106__auto____$1 = this;
  return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, G__27251, self__.__extmap, self__.__hash);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__8112__auto__, entry__8113__auto__) {
  var self__ = this;
  var this__8112__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__8113__auto__)) {
    return cljs.core._assoc.call(null, this__8112__auto____$1, cljs.core._nth.call(null, entry__8113__auto__, 0), cljs.core._nth.call(null, entry__8113__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__8112__auto____$1, entry__8113__auto__);
  }
};
cemerick.cljs.test.TestContext.cljs$lang$type = true;
cemerick.cljs.test.TestContext.cljs$lang$ctorPrSeq = function(this__8141__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cemerick.cljs.test/TestContext");
};
cemerick.cljs.test.TestContext.cljs$lang$ctorPrWriter = function(this__8141__auto__, writer__8142__auto__) {
  return cljs.core._write.call(null, writer__8142__auto__, "cemerick.cljs.test/TestContext");
};
cemerick.cljs.test.__GT_TestContext = function __GT_TestContext(test_env, test_name) {
  return new cemerick.cljs.test.TestContext(test_env, test_name, null, null, null);
};
cemerick.cljs.test.map__GT_TestContext = function map__GT_TestContext(G__27253) {
  return new cemerick.cljs.test.TestContext((new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(G__27253), (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(G__27253), null, cljs.core.dissoc.call(null, G__27253, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), new cljs.core.Keyword(null, "test-name", "test-name", -675595913)), null);
};
cemerick.cljs.test.maybe_deref = function maybe_deref(x) {
  if (function() {
    var G__27260 = x;
    if (G__27260) {
      var bit__8185__auto__ = G__27260.cljs$lang$protocol_mask$partition0$ & 32768;
      if (bit__8185__auto__ || G__27260.cljs$core$IDeref$) {
        return true;
      } else {
        if (!G__27260.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__27260);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__27260);
    }
  }()) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cemerick.cljs.test.testing_complete_QMARK_ = function testing_complete_QMARK_(test_env) {
  var map__27262 = cemerick.cljs.test.maybe_deref.call(null, test_env);
  var map__27262__$1 = cljs.core.seq_QMARK_.call(null, map__27262) ? cljs.core.apply.call(null, cljs.core.hash_map, map__27262) : map__27262;
  var remaining = cljs.core.get.call(null, map__27262__$1, new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312));
  var running = cljs.core.get.call(null, map__27262__$1, new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558));
  var async = cljs.core.get.call(null, map__27262__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
  var and__7492__auto__ = cljs.core.empty_QMARK_.call(null, remaining);
  if (and__7492__auto__) {
    var and__7492__auto____$1 = cljs.core.empty_QMARK_.call(null, running);
    if (and__7492__auto____$1) {
      var or__7504__auto__ = async == null;
      if (or__7504__auto__) {
        return or__7504__auto__;
      } else {
        return testing_complete_QMARK_.call(null, async);
      }
    } else {
      return and__7492__auto____$1;
    }
  } else {
    return and__7492__auto__;
  }
};
cemerick.cljs.test.on_async_progress = function on_async_progress(test_env, callback) {
  if (cljs.core.truth_(cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env))) {
    setTimeout(function() {
      return callback.call(null, test_env);
    }, 1);
  } else {
    cljs.core.add_watch.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cemerick.cljs.test.maybe_deref.call(null, test_env)), cljs.core.gensym.call(null, "on-progress"), function(key, ref, old, new$) {
      var vec__27265 = cljs.core.map.call(null, function(p1__27263_SHARP_) {
        return cljs.core.select_keys.call(null, p1__27263_SHARP_, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test", "test", 577538877), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "error", "error", -978969032)], null));
      }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [old, new$], null));
      var oldv = cljs.core.nth.call(null, vec__27265, 0, null);
      var newv = cljs.core.nth.call(null, vec__27265, 1, null);
      var complete_QMARK_ = cemerick.cljs.test.testing_complete_QMARK_.call(null, new$);
      if (cljs.core.truth_(function() {
        var or__7504__auto__ = complete_QMARK_;
        if (cljs.core.truth_(or__7504__auto__)) {
          return or__7504__auto__;
        } else {
          return cljs.core.not_EQ_.call(null, oldv, newv);
        }
      }())) {
        callback.call(null, cemerick.cljs.test.maybe_deref.call(null, test_env));
      } else {
      }
      if (cljs.core.truth_(complete_QMARK_)) {
        return cljs.core.remove_watch.call(null, ref, key);
      } else {
        return null;
      }
    });
  }
  return test_env;
};
goog.exportSymbol("cemerick.cljs.test.on_async_progress", cemerick.cljs.test.on_async_progress);
cemerick.cljs.test.on_testing_complete = function on_testing_complete(test_env, callback) {
  return cemerick.cljs.test.on_async_progress.call(null, test_env, function(test_env__$1) {
    if (cljs.core.truth_(cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env__$1))) {
      return callback.call(null, test_env__$1);
    } else {
      return null;
    }
  });
};
goog.exportSymbol("cemerick.cljs.test.on_testing_complete", cemerick.cljs.test.on_testing_complete);
cemerick.cljs.test.testing_vars_str = function testing_vars_str(p__27266) {
  var map__27268 = p__27266;
  var map__27268__$1 = cljs.core.seq_QMARK_.call(null, map__27268) ? cljs.core.apply.call(null, cljs.core.hash_map, map__27268) : map__27268;
  var m = map__27268__$1;
  var test_name = cljs.core.get.call(null, map__27268__$1, new cljs.core.Keyword(null, "test-name", "test-name", -675595913));
  var test_env = cljs.core.get.call(null, map__27268__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var line = cljs.core.get.call(null, map__27268__$1, new cljs.core.Keyword(null, "line", "line", 212345235));
  var file = cljs.core.get.call(null, map__27268__$1, new cljs.core.Keyword(null, "file", "file", -1269645878));
  return[cljs.core.str(cljs.core.pr_str.call(null, function() {
    var or__7504__auto__ = cljs.core.seq.call(null, cljs.core.reverse.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", -1547551786)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env))));
    if (or__7504__auto__) {
      return or__7504__auto__;
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, test_name);
    }
  }())), cljs.core.str(" ("), cljs.core.str(file), cljs.core.str(":"), cljs.core.str(line), cljs.core.str(")")].join("");
};
cemerick.cljs.test.testing_contexts_str = function testing_contexts_str(test_env) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " ", cljs.core.reverse.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))));
};
cemerick.cljs.test.inc_report_counter = function inc_report_counter(test_env, name) {
  return cljs.core.swap_BANG_.call(null, test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [name], null), cljs.core.fnil.call(null, cljs.core.inc, 0));
};
cemerick.cljs.test.report = function() {
  var method_table__8401__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__8402__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__8403__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__8404__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__8405__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cemerick.cljs.test", "report"), new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__8405__auto__, method_table__8401__auto__, prefer_table__8402__auto__, method_cache__8403__auto__, cached_hierarchy__8404__auto__);
}();
cemerick.cljs.test.file_and_line = function file_and_line(error) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "file", "file", -1269645878), error.fileName, new cljs.core.Keyword(null, "line", "line", 212345235), error.lineNumber], null);
};
cemerick.cljs.test.do_report = function() {
  var do_report = null;
  var do_report__1 = function(m) {
    return cemerick.cljs.test.report.call(null, function() {
      var G__27273 = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(m) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(m).fqn : null;
      switch(G__27273) {
        case "error":
          return cljs.core.merge.call(null, cemerick.cljs.test.file_and_line.call(null, (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m)), m);
          break;
        case "fail":
          return cljs.core.merge.call(null, cemerick.cljs.test.file_and_line.call(null, Error()), m);
          break;
        default:
          return m;
      }
    }());
  };
  var do_report__2 = function(p__27269, m) {
    var map__27272 = p__27269;
    var map__27272__$1 = cljs.core.seq_QMARK_.call(null, map__27272) ? cljs.core.apply.call(null, cljs.core.hash_map, map__27272) : map__27272;
    var test_ctx = map__27272__$1;
    var test_name = cljs.core.get.call(null, map__27272__$1, new cljs.core.Keyword(null, "test-name", "test-name", -675595913));
    var test_env = cljs.core.get.call(null, map__27272__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
    if (test_ctx instanceof cemerick.cljs.test.TestContext) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "instance?", "instance?", 1075939923, null), new cljs.core.Symbol(null, "TestContext", "TestContext", -1631381989, null), new cljs.core.Symbol(null, "test-ctx", "test-ctx", -185362578, null))))].join(""));
    }
    return do_report.call(null, cljs.core.merge.call(null, m, test_ctx));
  };
  do_report = function(p__27269, m) {
    switch(arguments.length) {
      case 1:
        return do_report__1.call(this, p__27269);
      case 2:
        return do_report__2.call(this, p__27269, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  do_report.cljs$core$IFn$_invoke$arity$1 = do_report__1;
  do_report.cljs$core$IFn$_invoke$arity$2 = do_report__2;
  return do_report;
}();
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "default", "default", -1987822328), function(p__27275) {
  var map__27276 = p__27275;
  var map__27276__$1 = cljs.core.seq_QMARK_.call(null, map__27276) ? cljs.core.apply.call(null, cljs.core.hash_map, map__27276) : map__27276;
  var m = map__27276__$1;
  var test_env = cljs.core.get.call(null, map__27276__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_27277 = cljs.core._STAR_print_fn_STAR_;
  cljs.core._STAR_print_fn_STAR_ = function() {
    var or__7504__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
    if (cljs.core.truth_(or__7504__auto__)) {
      return or__7504__auto__;
    } else {
      return cljs.core._STAR_print_fn_STAR_;
    }
  }();
  try {
    return cljs.core.prn.call(null, m);
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_27277;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "pass", "pass", 1574159993), function(p__27278) {
  var map__27279 = p__27278;
  var map__27279__$1 = cljs.core.seq_QMARK_.call(null, map__27279) ? cljs.core.apply.call(null, cljs.core.hash_map, map__27279) : map__27279;
  var m = map__27279__$1;
  var test_env = cljs.core.get.call(null, map__27279__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_27280 = cljs.core._STAR_print_fn_STAR_;
  cljs.core._STAR_print_fn_STAR_ = function() {
    var or__7504__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
    if (cljs.core.truth_(or__7504__auto__)) {
      return or__7504__auto__;
    } else {
      return cljs.core._STAR_print_fn_STAR_;
    }
  }();
  try {
    return cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "pass", "pass", 1574159993));
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_27280;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "fail", "fail", 1706214930), function(p__27281) {
  var map__27282 = p__27281;
  var map__27282__$1 = cljs.core.seq_QMARK_.call(null, map__27282) ? cljs.core.apply.call(null, cljs.core.hash_map, map__27282) : map__27282;
  var m = map__27282__$1;
  var test_env = cljs.core.get.call(null, map__27282__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_27283 = cljs.core._STAR_print_fn_STAR_;
  cljs.core._STAR_print_fn_STAR_ = function() {
    var or__7504__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
    if (cljs.core.truth_(or__7504__auto__)) {
      return or__7504__auto__;
    } else {
      return cljs.core._STAR_print_fn_STAR_;
    }
  }();
  try {
    cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "fail", "fail", 1706214930));
    cljs.core.println.call(null, "\nFAIL in", cemerick.cljs.test.testing_vars_str.call(null, m));
    if (cljs.core.seq.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))) {
      cljs.core.println.call(null, cemerick.cljs.test.testing_contexts_str.call(null, test_env));
    } else {
    }
    var temp__4126__auto___27284 = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4126__auto___27284)) {
      var message_27285 = temp__4126__auto___27284;
      cljs.core.println.call(null, message_27285);
    } else {
    }
    cljs.core.println.call(null, "expected:", cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "expected", "expected", 1583670997)).cljs$core$IFn$_invoke$arity$1(m)));
    return cljs.core.println.call(null, "  actual:", cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m)));
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_27283;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "error", "error", -978969032), function(p__27286) {
  var map__27287 = p__27286;
  var map__27287__$1 = cljs.core.seq_QMARK_.call(null, map__27287) ? cljs.core.apply.call(null, cljs.core.hash_map, map__27287) : map__27287;
  var m = map__27287__$1;
  var test_env = cljs.core.get.call(null, map__27287__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_27288 = cljs.core._STAR_print_fn_STAR_;
  cljs.core._STAR_print_fn_STAR_ = function() {
    var or__7504__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
    if (cljs.core.truth_(or__7504__auto__)) {
      return or__7504__auto__;
    } else {
      return cljs.core._STAR_print_fn_STAR_;
    }
  }();
  try {
    cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "error", "error", -978969032));
    cljs.core.println.call(null, "\nERROR in", cemerick.cljs.test.testing_vars_str.call(null, m));
    if (cljs.core.seq.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))) {
      cljs.core.println.call(null, cemerick.cljs.test.testing_contexts_str.call(null, test_env));
    } else {
    }
    var temp__4126__auto___27289 = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4126__auto___27289)) {
      var message_27290 = temp__4126__auto___27289;
      cljs.core.println.call(null, message_27290);
    } else {
    }
    cljs.core.println.call(null, "expected:", cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "expected", "expected", 1583670997)).cljs$core$IFn$_invoke$arity$1(m)));
    cljs.core.print.call(null, "  actual: ");
    var actual = (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m);
    if (actual instanceof Error) {
      return cljs.core.println.call(null, actual.stack);
    } else {
      return cljs.core.prn.call(null, actual);
    }
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_27288;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "multiple-async-done", "multiple-async-done", 910410709), function(p__27291) {
  var map__27292 = p__27291;
  var map__27292__$1 = cljs.core.seq_QMARK_.call(null, map__27292) ? cljs.core.apply.call(null, cljs.core.hash_map, map__27292) : map__27292;
  var m = map__27292__$1;
  var test_env = cljs.core.get.call(null, map__27292__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var _STAR_print_fn_STAR_27293 = cljs.core._STAR_print_fn_STAR_;
  cljs.core._STAR_print_fn_STAR_ = function() {
    var or__7504__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
    if (cljs.core.truth_(or__7504__auto__)) {
      return or__7504__auto__;
    } else {
      return cljs.core._STAR_print_fn_STAR_;
    }
  }();
  try {
    cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "multiple-async-done", "multiple-async-done", 910410709));
    cljs.core.println.call(null, "\nWARNING in", cemerick.cljs.test.testing_vars_str.call(null, m));
    if (cljs.core.seq.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))) {
      cljs.core.println.call(null, cemerick.cljs.test.testing_contexts_str.call(null, test_env));
    } else {
    }
    var temp__4126__auto__ = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var message = temp__4126__auto__;
      return cljs.core.println.call(null, message);
    } else {
      return null;
    }
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_27293;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "summary", "summary", 380847952), function(p__27294) {
  var map__27295 = p__27294;
  var map__27295__$1 = cljs.core.seq_QMARK_.call(null, map__27295) ? cljs.core.apply.call(null, cljs.core.hash_map, map__27295) : map__27295;
  var test_env = map__27295__$1;
  var error = cljs.core.get.call(null, map__27295__$1, new cljs.core.Keyword(null, "error", "error", -978969032));
  var fail = cljs.core.get.call(null, map__27295__$1, new cljs.core.Keyword(null, "fail", "fail", 1706214930));
  var pass = cljs.core.get.call(null, map__27295__$1, new cljs.core.Keyword(null, "pass", "pass", 1574159993));
  var test = cljs.core.get.call(null, map__27295__$1, new cljs.core.Keyword(null, "test", "test", 577538877));
  var _STAR_print_fn_STAR_27296 = cljs.core._STAR_print_fn_STAR_;
  cljs.core._STAR_print_fn_STAR_ = function() {
    var or__7504__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
    if (cljs.core.truth_(or__7504__auto__)) {
      return or__7504__auto__;
    } else {
      return cljs.core._STAR_print_fn_STAR_;
    }
  }();
  try {
    cljs.core.println.call(null, "\nRan", test, "tests containing", pass + fail + error, "assertions.");
    cljs.core.println.call(null, "Testing complete:", fail, "failures,", error, "errors.");
    var temp__4126__auto__ = function() {
      var and__7492__auto__ = cljs.core.not.call(null, cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env));
      if (and__7492__auto__) {
        return cljs.core.apply.call(null, cljs.core._PLUS_, cljs.core.map.call(null, cljs.core.count, cljs.core.juxt.call(null, new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312), new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558)).call(null, cljs.core.deref.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(test_env)))));
      } else {
        return and__7492__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4126__auto__)) {
      var pending_count = temp__4126__auto__;
      return cljs.core.println.call(null, "Waiting on", pending_count, [cljs.core.str("asynchronous test"), cljs.core.str(pending_count > 1 ? "s" : null), cljs.core.str(" to complete.")].join(""));
    } else {
      return null;
    }
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_27296;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033), function(p__27297) {
  var map__27298 = p__27297;
  var map__27298__$1 = cljs.core.seq_QMARK_.call(null, map__27298) ? cljs.core.apply.call(null, cljs.core.hash_map, map__27298) : map__27298;
  var m = map__27298__$1;
  var async = cljs.core.get.call(null, map__27298__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
  var test_env = cljs.core.get.call(null, map__27298__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  var ns = cljs.core.get.call(null, map__27298__$1, new cljs.core.Keyword(null, "ns", "ns", 441598760));
  var _STAR_print_fn_STAR_27299 = cljs.core._STAR_print_fn_STAR_;
  cljs.core._STAR_print_fn_STAR_ = function() {
    var or__7504__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", -2097998143)).cljs$core$IFn$_invoke$arity$1(test_env);
    if (cljs.core.truth_(or__7504__auto__)) {
      return or__7504__auto__;
    } else {
      return cljs.core._STAR_print_fn_STAR_;
    }
  }();
  try {
    return cljs.core.println.call(null, "\nTesting", ns, cljs.core.truth_(async) ? "(async)" : "");
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_27299;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "end-test-ns", "end-test-ns", 1620675645), function(p__27300) {
  var map__27301 = p__27300;
  var map__27301__$1 = cljs.core.seq_QMARK_.call(null, map__27301) ? cljs.core.apply.call(null, cljs.core.hash_map, map__27301) : map__27301;
  var m = map__27301__$1;
  var test_env = cljs.core.get.call(null, map__27301__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  return null;
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100), function(p__27302) {
  var map__27303 = p__27302;
  var map__27303__$1 = cljs.core.seq_QMARK_.call(null, map__27303) ? cljs.core.apply.call(null, cljs.core.hash_map, map__27303) : map__27303;
  var m = map__27303__$1;
  var test_env = cljs.core.get.call(null, map__27303__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  return null;
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545), function(p__27304) {
  var map__27305 = p__27304;
  var map__27305__$1 = cljs.core.seq_QMARK_.call(null, map__27305) ? cljs.core.apply.call(null, cljs.core.hash_map, map__27305) : map__27305;
  var m = map__27305__$1;
  var test_env = cljs.core.get.call(null, map__27305__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
  return null;
});
cemerick.cljs.test.register_fixtures_BANG_ = function() {
  var register_fixtures_BANG___delegate = function(ns_sym, fixture_type, fixture_fns) {
    return cljs.core.swap_BANG_.call(null, cemerick.cljs.test.registered_fixtures, cljs.core.update_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns_sym, fixture_type], null), cljs.core.constantly.call(null, fixture_fns));
  };
  var register_fixtures_BANG_ = function(ns_sym, fixture_type, var_args) {
    var fixture_fns = null;
    if (arguments.length > 2) {
      var G__27306__i = 0, G__27306__a = new Array(arguments.length - 2);
      while (G__27306__i < G__27306__a.length) {
        G__27306__a[G__27306__i] = arguments[G__27306__i + 2];
        ++G__27306__i;
      }
      fixture_fns = new cljs.core.IndexedSeq(G__27306__a, 0);
    }
    return register_fixtures_BANG___delegate.call(this, ns_sym, fixture_type, fixture_fns);
  };
  register_fixtures_BANG_.cljs$lang$maxFixedArity = 2;
  register_fixtures_BANG_.cljs$lang$applyTo = function(arglist__27307) {
    var ns_sym = cljs.core.first(arglist__27307);
    arglist__27307 = cljs.core.next(arglist__27307);
    var fixture_type = cljs.core.first(arglist__27307);
    var fixture_fns = cljs.core.rest(arglist__27307);
    return register_fixtures_BANG___delegate(ns_sym, fixture_type, fixture_fns);
  };
  register_fixtures_BANG_.cljs$core$IFn$_invoke$arity$variadic = register_fixtures_BANG___delegate;
  return register_fixtures_BANG_;
}();
cemerick.cljs.test.default_fixture = function default_fixture(f) {
  return f.call(null);
};
cemerick.cljs.test.compose_fixtures = function compose_fixtures(f1, f2) {
  return function(g) {
    return f1.call(null, function() {
      return f2.call(null, g);
    });
  };
};
cemerick.cljs.test.join_fixtures = function join_fixtures(fixtures) {
  return cljs.core.reduce.call(null, cemerick.cljs.test.compose_fixtures, cemerick.cljs.test.default_fixture, fixtures);
};
cemerick.cljs.test.async_test_QMARK_ = function async_test_QMARK_(test_fn) {
  return cljs.core.boolean$.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, test_fn)));
};
cemerick.cljs.test.test_async_fn = function test_async_fn(async_test_env, test_name, test_fn) {
  cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100), new cljs.core.Keyword(null, "var", "var", -769682797), test_fn, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), async_test_env, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), test_name], null));
  cemerick.cljs.test.inc_report_counter.call(null, async_test_env, new cljs.core.Keyword(null, "test", "test", 577538877));
  return test_fn.call(null, new cemerick.cljs.test.TestContext(async_test_env, test_name, null, null, null));
};
cemerick.cljs.test.start_next_async_test = function start_next_async_test(async_test_env) {
  var next_test = cljs.core.atom.call(null, function() {
    return null;
  });
  cljs.core.swap_BANG_.call(null, async_test_env, function(next_test) {
    return function(env) {
      var temp__4124__auto__ = function() {
        var and__7492__auto__ = cljs.core.not.call(null, (new cljs.core.Keyword(null, "stop", "stop", -2140911342)).cljs$core$IFn$_invoke$arity$1(env));
        if (and__7492__auto__) {
          return cljs.core.first.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312)).cljs$core$IFn$_invoke$arity$1(env));
        } else {
          return and__7492__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4124__auto__)) {
        var vec__27309 = temp__4124__auto__;
        var name = cljs.core.nth.call(null, vec__27309, 0, null);
        var testfn = cljs.core.nth.call(null, vec__27309, 1, null);
        cljs.core.reset_BANG_.call(null, next_test, testfn);
        var ns_27310 = cljs.core.namespace.call(null, name);
        if (cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "namespaces", "namespaces", -1444157469)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, async_test_env)), ns_27310)) {
        } else {
          cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033), new cljs.core.Keyword(null, "ns", "ns", 441598760), ns_27310, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), async_test_env, new cljs.core.Keyword(null, "async", "async", 1050769601), true], null));
          cljs.core.alter_meta_BANG_.call(null, async_test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "namespaces", "namespaces", -1444157469)], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), ns_27310);
        }
        return cljs.core.update_in.call(null, cljs.core.update_in.call(null, env, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312)], null), cljs.core.dissoc, name), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558)], null), cljs.core.assoc, 
        name, new Date);
      } else {
        return env;
      }
    };
  }(next_test));
  setTimeout(function(next_test) {
    return function() {
      return cljs.core.deref.call(null, next_test).call(null);
    };
  }(next_test), 1);
  return async_test_env;
};
cemerick.cljs.test.squelch_internals = function squelch_internals(test_env) {
  var G__27315 = test_env;
  cljs.core.swap_BANG_.call(null, G__27315, function(G__27315) {
    return function(p1__27311_SHARP_) {
      return cljs.core.reduce.call(null, function(G__27315) {
        return function(env, p__27316) {
          var vec__27317 = p__27316;
          var k = cljs.core.nth.call(null, vec__27317, 0, null);
          var v = cljs.core.nth.call(null, vec__27317, 1, null);
          if (cljs.core._EQ_.call(null, cljs.core.namespace.call(null, k), cljs.core.namespace.call(null, new cljs.core.Keyword("cemerick.cljs.test", "foo", "cemerick.cljs.test/foo", -1669146357)))) {
            return env;
          } else {
            return cljs.core.assoc.call(null, env, k, v);
          }
        };
      }(G__27315), cljs.core.PersistentArrayMap.EMPTY, p1__27311_SHARP_);
    };
  }(G__27315));
  return G__27315;
};
cemerick.cljs.test.finish_test_entry_point = function finish_test_entry_point(entry_point_QMARK_, test_env) {
  if (cljs.core.truth_(entry_point_QMARK_)) {
    if (cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))))) {
      cljs.core.swap_BANG_.call(null, test_env, cljs.core.dissoc, new cljs.core.Keyword(null, "async", "async", 1050769601));
    } else {
      cemerick.cljs.test.start_next_async_test.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)));
    }
    return cljs.core.deref.call(null, cemerick.cljs.test.squelch_internals.call(null, test_env));
  } else {
    return test_env;
  }
};
cemerick.cljs.test.schedule_async_test = function schedule_async_test(async_test_env, test_name, test_fn) {
  cljs.core.swap_BANG_.call(null, async_test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", -1491651312)], null), cljs.core.fnil.call(null, cljs.core.assoc, cljs.core.sorted_map.call(null)), test_name, cljs.core.with_meta.call(null, function() {
    return cemerick.cljs.test.test_async_fn.call(null, async_test_env, test_name, test_fn);
  }, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), test_name], null)));
  return async_test_env;
};
cemerick.cljs.test.done_STAR_ = function() {
  var done_STAR_ = null;
  var done_STAR___1 = function(p__27319) {
    var map__27323 = p__27319;
    var map__27323__$1 = cljs.core.seq_QMARK_.call(null, map__27323) ? cljs.core.apply.call(null, cljs.core.hash_map, map__27323) : map__27323;
    var test_ctx = map__27323__$1;
    var test_name = cljs.core.get.call(null, map__27323__$1, new cljs.core.Keyword(null, "test-name", "test-name", -675595913));
    var async_test_env = cljs.core.get.call(null, map__27323__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
    if (test_ctx instanceof cemerick.cljs.test.TestContext) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "instance?", "instance?", 1075939923, null), new cljs.core.Symbol(null, "TestContext", "TestContext", -1631381989, null), new cljs.core.Symbol(null, "test-ctx", "test-ctx", -185362578, null))))].join(""));
    }
    var first_call_QMARK_ = cljs.core.atom.call(null, false);
    cljs.core.swap_BANG_.call(null, async_test_env, function(first_call_QMARK_, map__27323, map__27323__$1, test_ctx, test_name, async_test_env) {
      return function(env) {
        cljs.core.reset_BANG_.call(null, first_call_QMARK_, cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558)).cljs$core$IFn$_invoke$arity$1(env), test_name));
        return cljs.core.update_in.call(null, env, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", -1954037558)], null), cljs.core.dissoc, test_name);
      };
    }(first_call_QMARK_, map__27323, map__27323__$1, test_ctx, test_name, async_test_env));
    if (cljs.core.truth_(cljs.core.deref.call(null, first_call_QMARK_))) {
      cemerick.cljs.test.do_report.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545), new cljs.core.Keyword(null, "var", "var", -769682797), test_name], null), test_ctx));
      if (cljs.core.truth_(cemerick.cljs.test.testing_complete_QMARK_.call(null, async_test_env))) {
        cemerick.cljs.test.squelch_internals.call(null, async_test_env);
      } else {
        cemerick.cljs.test.start_next_async_test.call(null, async_test_env);
      }
    } else {
      cemerick.cljs.test.do_report.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "multiple-async-done", "multiple-async-done", 910410709), new cljs.core.Keyword(null, "message", "message", -406056002), "`(done)` called multiple times to signal end-of-test"], null), test_ctx));
    }
    return async_test_env;
  };
  var done_STAR___2 = function(p__27318, error) {
    var map__27322 = p__27318;
    var map__27322__$1 = cljs.core.seq_QMARK_.call(null, map__27322) ? cljs.core.apply.call(null, cljs.core.hash_map, map__27322) : map__27322;
    var test_ctx = map__27322__$1;
    var test_name = cljs.core.get.call(null, map__27322__$1, new cljs.core.Keyword(null, "test-name", "test-name", -675595913));
    var test_env = cljs.core.get.call(null, map__27322__$1, new cljs.core.Keyword(null, "test-env", "test-env", -540228992));
    if (test_ctx instanceof cemerick.cljs.test.TestContext) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "instance?", "instance?", 1075939923, null), new cljs.core.Symbol(null, "TestContext", "TestContext", -1631381989, null), new cljs.core.Symbol(null, "test-ctx", "test-ctx", -185362578, null))))].join(""));
    }
    cemerick.cljs.test.do_report.call(null, cemerick.cljs.test.do_report.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "message", "message", -406056002), "Uncaught exception, not in assertion.", new cljs.core.Keyword(null, "expected", "expected", 1583670997), null, new cljs.core.Keyword(null, "actual", "actual", 107306363), 
    error], null), test_ctx)));
    return done_STAR_.call(null, test_ctx);
  };
  done_STAR_ = function(p__27318, error) {
    switch(arguments.length) {
      case 1:
        return done_STAR___1.call(this, p__27318);
      case 2:
        return done_STAR___2.call(this, p__27318, error);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  done_STAR_.cljs$core$IFn$_invoke$arity$1 = done_STAR___1;
  done_STAR_.cljs$core$IFn$_invoke$arity$2 = done_STAR___2;
  return done_STAR_;
}();
cemerick.cljs.test.stop = function stop(async_test_env) {
  return cljs.core.swap_BANG_.call(null, async_test_env, cljs.core.assoc, new cljs.core.Keyword(null, "stop", "stop", -2140911342), true);
};
cemerick.cljs.test.test_function = function() {
  var test_function = null;
  var test_function__1 = function(v) {
    return test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), v);
  };
  var test_function__2 = function(test_env, v) {
    var entry_point_QMARK___15088__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_27327 = cemerick.cljs.test._STAR_entry_point_STAR_;
    cemerick.cljs.test._STAR_entry_point_STAR_ = false;
    try {
      if (cljs.core.fn_QMARK_.call(null, v)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("test-var must be passed the function to be tested (not a symbol naming it)"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "fn?", "fn?", 1820990818, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null))))].join(""));
      }
      var map__27328_27330 = cljs.core.meta.call(null, v);
      var map__27328_27331__$1 = cljs.core.seq_QMARK_.call(null, map__27328_27330) ? cljs.core.apply.call(null, cljs.core.hash_map, map__27328_27330) : map__27328_27330;
      var t_27332 = cljs.core.get.call(null, map__27328_27331__$1, new cljs.core.Keyword(null, "test", "test", 577538877));
      var test_name_27333 = cljs.core.get.call(null, map__27328_27331__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
      var async_QMARK__27334 = cljs.core.get.call(null, map__27328_27331__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
      if (cljs.core.truth_(t_27332)) {
        if (cljs.core.truth_(async_QMARK__27334)) {
          cemerick.cljs.test.schedule_async_test.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)), test_name_27333, t_27332);
        } else {
          try {
            cljs.core.swap_BANG_.call(null, test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", -1547551786)], null), cljs.core.conj, function() {
              var or__7504__auto__ = test_name_27333;
              if (cljs.core.truth_(or__7504__auto__)) {
                return or__7504__auto__;
              } else {
                return v;
              }
            }());
            cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100), new cljs.core.Keyword(null, "var", "var", -769682797), v, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), test_name_27333], null));
            cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "test", "test", 577538877));
            try {
              t_27332.call(null, new cemerick.cljs.test.TestContext(test_env, test_name_27333, null, null, null));
            } catch (e27329) {
              if (e27329 instanceof Error) {
                var e_27335 = e27329;
                cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "message", "message", -406056002), "Uncaught exception, not in assertion.", new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), test_name_27333, new cljs.core.Keyword(null, 
                "expected", "expected", 1583670997), null, new cljs.core.Keyword(null, "actual", "actual", 107306363), e_27335], null));
              } else {
                throw e27329;
              }
            }
            cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545), new cljs.core.Keyword(null, "var", "var", -769682797), v, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env, new cljs.core.Keyword(null, "test-name", "test-name", -675595913), test_name_27333], null));
          } finally {
            cljs.core.swap_BANG_.call(null, test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", -1547551786)], null), cljs.core.pop);
          }
        }
      } else {
      }
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___15088__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_27327;
    }
  };
  test_function = function(test_env, v) {
    switch(arguments.length) {
      case 1:
        return test_function__1.call(this, test_env);
      case 2:
        return test_function__2.call(this, test_env, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  test_function.cljs$core$IFn$_invoke$arity$1 = test_function__1;
  test_function.cljs$core$IFn$_invoke$arity$2 = test_function__2;
  return test_function;
}();
cemerick.cljs.test.test_all_vars = function() {
  var test_all_vars = null;
  var test_all_vars__1 = function(ns_sym) {
    return test_all_vars.call(null, cemerick.cljs.test.init_test_environment.call(null), ns_sym);
  };
  var test_all_vars__2 = function(test_env, ns_sym) {
    var entry_point_QMARK___15088__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_27344 = cemerick.cljs.test._STAR_entry_point_STAR_;
    cemerick.cljs.test._STAR_entry_point_STAR_ = false;
    try {
      var tests_27349 = cljs.core.filter.call(null, function(_STAR_entry_point_STAR_27344, entry_point_QMARK___15088__auto__) {
        return function(p1__27336_SHARP_) {
          return(new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, p1__27336_SHARP_));
        };
      }(_STAR_entry_point_STAR_27344, entry_point_QMARK___15088__auto__), cljs.core.vals.call(null, cljs.core.get.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_tests), ns_sym)));
      var once_fixture_fn_27350 = cemerick.cljs.test.join_fixtures.call(null, (new cljs.core.Keyword(null, "once", "once", -262568523)).cljs$core$IFn$_invoke$arity$1(ns_sym.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_fixtures))));
      var each_fixture_fn_27351 = cemerick.cljs.test.join_fixtures.call(null, (new cljs.core.Keyword(null, "each", "each", 940016129)).cljs$core$IFn$_invoke$arity$1(ns_sym.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_fixtures))));
      once_fixture_fn_27350.call(null, function(once_fixture_fn_27350, each_fixture_fn_27351, tests_27349, _STAR_entry_point_STAR_27344, entry_point_QMARK___15088__auto__) {
        return function() {
          var seq__27345 = cljs.core.seq.call(null, cljs.core.remove.call(null, cemerick.cljs.test.async_test_QMARK_, tests_27349));
          var chunk__27346 = null;
          var count__27347 = 0;
          var i__27348 = 0;
          while (true) {
            if (i__27348 < count__27347) {
              var v = cljs.core._nth.call(null, chunk__27346, i__27348);
              each_fixture_fn_27351.call(null, function(seq__27345, chunk__27346, count__27347, i__27348, v, once_fixture_fn_27350, each_fixture_fn_27351, tests_27349, _STAR_entry_point_STAR_27344, entry_point_QMARK___15088__auto__) {
                return function() {
                  return cemerick.cljs.test.test_function.call(null, test_env, v);
                };
              }(seq__27345, chunk__27346, count__27347, i__27348, v, once_fixture_fn_27350, each_fixture_fn_27351, tests_27349, _STAR_entry_point_STAR_27344, entry_point_QMARK___15088__auto__));
              var G__27352 = seq__27345;
              var G__27353 = chunk__27346;
              var G__27354 = count__27347;
              var G__27355 = i__27348 + 1;
              seq__27345 = G__27352;
              chunk__27346 = G__27353;
              count__27347 = G__27354;
              i__27348 = G__27355;
              continue;
            } else {
              var temp__4126__auto__ = cljs.core.seq.call(null, seq__27345);
              if (temp__4126__auto__) {
                var seq__27345__$1 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__27345__$1)) {
                  var c__8291__auto__ = cljs.core.chunk_first.call(null, seq__27345__$1);
                  var G__27356 = cljs.core.chunk_rest.call(null, seq__27345__$1);
                  var G__27357 = c__8291__auto__;
                  var G__27358 = cljs.core.count.call(null, c__8291__auto__);
                  var G__27359 = 0;
                  seq__27345 = G__27356;
                  chunk__27346 = G__27357;
                  count__27347 = G__27358;
                  i__27348 = G__27359;
                  continue;
                } else {
                  var v = cljs.core.first.call(null, seq__27345__$1);
                  each_fixture_fn_27351.call(null, function(seq__27345, chunk__27346, count__27347, i__27348, v, seq__27345__$1, temp__4126__auto__, once_fixture_fn_27350, each_fixture_fn_27351, tests_27349, _STAR_entry_point_STAR_27344, entry_point_QMARK___15088__auto__) {
                    return function() {
                      return cemerick.cljs.test.test_function.call(null, test_env, v);
                    };
                  }(seq__27345, chunk__27346, count__27347, i__27348, v, seq__27345__$1, temp__4126__auto__, once_fixture_fn_27350, each_fixture_fn_27351, tests_27349, _STAR_entry_point_STAR_27344, entry_point_QMARK___15088__auto__));
                  var G__27360 = cljs.core.next.call(null, seq__27345__$1);
                  var G__27361 = null;
                  var G__27362 = 0;
                  var G__27363 = 0;
                  seq__27345 = G__27360;
                  chunk__27346 = G__27361;
                  count__27347 = G__27362;
                  i__27348 = G__27363;
                  continue;
                }
              } else {
                return null;
              }
            }
            break;
          }
        };
      }(once_fixture_fn_27350, each_fixture_fn_27351, tests_27349, _STAR_entry_point_STAR_27344, entry_point_QMARK___15088__auto__));
      cljs.core.reduce.call(null, function(tests_27349, _STAR_entry_point_STAR_27344, entry_point_QMARK___15088__auto__) {
        return function(p1__27337_SHARP_, p2__27338_SHARP_) {
          return cljs.core.apply.call(null, cemerick.cljs.test.schedule_async_test, p1__27337_SHARP_, p2__27338_SHARP_);
        };
      }(tests_27349, _STAR_entry_point_STAR_27344, entry_point_QMARK___15088__auto__), (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)), cljs.core.map.call(null, cljs.core.comp.call(null, cljs.core.juxt.call(null, new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "test", "test", 577538877)), cljs.core.meta), cljs.core.filter.call(null, cemerick.cljs.test.async_test_QMARK_, tests_27349)));
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___15088__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_27344;
    }
  };
  test_all_vars = function(test_env, ns_sym) {
    switch(arguments.length) {
      case 1:
        return test_all_vars__1.call(this, test_env);
      case 2:
        return test_all_vars__2.call(this, test_env, ns_sym);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  test_all_vars.cljs$core$IFn$_invoke$arity$1 = test_all_vars__1;
  test_all_vars.cljs$core$IFn$_invoke$arity$2 = test_all_vars__2;
  return test_all_vars;
}();
cemerick.cljs.test.test_ns = function() {
  var test_ns = null;
  var test_ns__1 = function(ns_sym) {
    return test_ns.call(null, cemerick.cljs.test.init_test_environment.call(null), ns_sym);
  };
  var test_ns__2 = function(test_env, ns_sym) {
    var entry_point_QMARK___15088__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_27365 = cemerick.cljs.test._STAR_entry_point_STAR_;
    cemerick.cljs.test._STAR_entry_point_STAR_ = false;
    try {
      cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033), new cljs.core.Keyword(null, "ns", "ns", 441598760), ns_sym, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env], null));
      var temp__4124__auto___27366 = cljs.core.get.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_test_hooks), ns_sym);
      if (cljs.core.truth_(temp__4124__auto___27366)) {
        var test_hook_27367 = temp__4124__auto___27366;
        test_hook_27367.call(null, test_env);
      } else {
        cemerick.cljs.test.test_all_vars.call(null, test_env, ns_sym);
      }
      cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-ns", "end-test-ns", 1620675645), new cljs.core.Keyword(null, "ns", "ns", 441598760), ns_sym, new cljs.core.Keyword(null, "test-env", "test-env", -540228992), test_env], null));
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___15088__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_27365;
    }
  };
  test_ns = function(test_env, ns_sym) {
    switch(arguments.length) {
      case 1:
        return test_ns__1.call(this, test_env);
      case 2:
        return test_ns__2.call(this, test_env, ns_sym);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  test_ns.cljs$core$IFn$_invoke$arity$1 = test_ns__1;
  test_ns.cljs$core$IFn$_invoke$arity$2 = test_ns__2;
  return test_ns;
}();
cemerick.cljs.test.print_summary = function print_summary(env) {
  return cemerick.cljs.test.do_report.call(null, cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "summary", "summary", 380847952)));
};
cemerick.cljs.test.async_test_summary = function async_test_summary(test_env) {
  var async_test_env = cemerick.cljs.test.maybe_deref.call(null, (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(test_env));
  var tests = (new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(async_test_env);
  if (tests > 0) {
    return cemerick.cljs.test.print_summary.call(null, cljs.core.merge_with.call(null, cljs.core._PLUS_, test_env, async_test_env));
  } else {
    return null;
  }
};
cemerick.cljs.test.test_summary = function test_summary(test_env) {
  var test_env__$1 = cemerick.cljs.test.maybe_deref.call(null, test_env);
  cemerick.cljs.test.print_summary.call(null, test_env__$1);
  return cemerick.cljs.test.on_testing_complete.call(null, test_env__$1, cemerick.cljs.test.async_test_summary);
};
cemerick.cljs.test.run_tests_STAR_ = function() {
  var run_tests_STAR___delegate = function(namespaces) {
    var vec__27374 = cljs.core.first.call(null, namespaces) instanceof cljs.core.Atom ? namespaces : cljs.core.cons.call(null, cemerick.cljs.test.init_test_environment.call(null), namespaces);
    var test_env = cljs.core.nth.call(null, vec__27374, 0, null);
    var namespaces__$1 = cljs.core.nthnext.call(null, vec__27374, 1);
    var entry_point_QMARK___15088__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_27375 = cemerick.cljs.test._STAR_entry_point_STAR_;
    cemerick.cljs.test._STAR_entry_point_STAR_ = false;
    try {
      var seq__27376_27380 = cljs.core.seq.call(null, cljs.core.distinct.call(null, namespaces__$1));
      var chunk__27377_27381 = null;
      var count__27378_27382 = 0;
      var i__27379_27383 = 0;
      while (true) {
        if (i__27379_27383 < count__27378_27382) {
          var ns_27384 = cljs.core._nth.call(null, chunk__27377_27381, i__27379_27383);
          cemerick.cljs.test.test_ns.call(null, test_env, ns_27384);
          var G__27385 = seq__27376_27380;
          var G__27386 = chunk__27377_27381;
          var G__27387 = count__27378_27382;
          var G__27388 = i__27379_27383 + 1;
          seq__27376_27380 = G__27385;
          chunk__27377_27381 = G__27386;
          count__27378_27382 = G__27387;
          i__27379_27383 = G__27388;
          continue;
        } else {
          var temp__4126__auto___27389 = cljs.core.seq.call(null, seq__27376_27380);
          if (temp__4126__auto___27389) {
            var seq__27376_27390__$1 = temp__4126__auto___27389;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__27376_27390__$1)) {
              var c__8291__auto___27391 = cljs.core.chunk_first.call(null, seq__27376_27390__$1);
              var G__27392 = cljs.core.chunk_rest.call(null, seq__27376_27390__$1);
              var G__27393 = c__8291__auto___27391;
              var G__27394 = cljs.core.count.call(null, c__8291__auto___27391);
              var G__27395 = 0;
              seq__27376_27380 = G__27392;
              chunk__27377_27381 = G__27393;
              count__27378_27382 = G__27394;
              i__27379_27383 = G__27395;
              continue;
            } else {
              var ns_27396 = cljs.core.first.call(null, seq__27376_27390__$1);
              cemerick.cljs.test.test_ns.call(null, test_env, ns_27396);
              var G__27397 = cljs.core.next.call(null, seq__27376_27390__$1);
              var G__27398 = null;
              var G__27399 = 0;
              var G__27400 = 0;
              seq__27376_27380 = G__27397;
              chunk__27377_27381 = G__27398;
              count__27378_27382 = G__27399;
              i__27379_27383 = G__27400;
              continue;
            }
          } else {
          }
        }
        break;
      }
      cemerick.cljs.test.test_summary.call(null, test_env);
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___15088__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_27375;
    }
  };
  var run_tests_STAR_ = function(var_args) {
    var namespaces = null;
    if (arguments.length > 0) {
      var G__27401__i = 0, G__27401__a = new Array(arguments.length - 0);
      while (G__27401__i < G__27401__a.length) {
        G__27401__a[G__27401__i] = arguments[G__27401__i + 0];
        ++G__27401__i;
      }
      namespaces = new cljs.core.IndexedSeq(G__27401__a, 0);
    }
    return run_tests_STAR___delegate.call(this, namespaces);
  };
  run_tests_STAR_.cljs$lang$maxFixedArity = 0;
  run_tests_STAR_.cljs$lang$applyTo = function(arglist__27402) {
    var namespaces = cljs.core.seq(arglist__27402);
    return run_tests_STAR___delegate(namespaces);
  };
  run_tests_STAR_.cljs$core$IFn$_invoke$arity$variadic = run_tests_STAR___delegate;
  return run_tests_STAR_;
}();
goog.exportSymbol("cemerick.cljs.test.run_tests_STAR_", cemerick.cljs.test.run_tests_STAR_);
cemerick.cljs.test.run_all_tests = function() {
  var run_all_tests = null;
  var run_all_tests__0 = function() {
    return cljs.core.apply.call(null, cemerick.cljs.test.run_tests_STAR_, cljs.core.keys.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_tests)));
  };
  var run_all_tests__1 = function(re) {
    return cljs.core.apply.call(null, cemerick.cljs.test.run_tests_STAR_, cljs.core.filter.call(null, function(p1__27403_SHARP_) {
      return cljs.core.re_matches.call(null, re, cljs.core.name.call(null, p1__27403_SHARP_));
    }, cljs.core.keys.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_tests))));
  };
  run_all_tests = function(re) {
    switch(arguments.length) {
      case 0:
        return run_all_tests__0.call(this);
      case 1:
        return run_all_tests__1.call(this, re);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  run_all_tests.cljs$core$IFn$_invoke$arity$0 = run_all_tests__0;
  run_all_tests.cljs$core$IFn$_invoke$arity$1 = run_all_tests__1;
  return run_all_tests;
}();
goog.exportSymbol("cemerick.cljs.test.run_all_tests", cemerick.cljs.test.run_all_tests);
cemerick.cljs.test.successful_QMARK_ = function successful_QMARK_(test_env) {
  var map__27405 = cemerick.cljs.test.maybe_deref.call(null, test_env);
  var map__27405__$1 = cljs.core.seq_QMARK_.call(null, map__27405) ? cljs.core.apply.call(null, cljs.core.hash_map, map__27405) : map__27405;
  var async = cljs.core.get.call(null, map__27405__$1, new cljs.core.Keyword(null, "async", "async", 1050769601));
  var error = cljs.core.get.call(null, map__27405__$1, new cljs.core.Keyword(null, "error", "error", -978969032));
  var fail = cljs.core.get.call(null, map__27405__$1, new cljs.core.Keyword(null, "fail", "fail", 1706214930));
  var and__7492__auto__ = cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env);
  if (cljs.core.truth_(and__7492__auto__)) {
    var and__7492__auto____$1 = function() {
      var or__7504__auto__ = fail;
      if (cljs.core.truth_(or__7504__auto__)) {
        return or__7504__auto__;
      } else {
        return 0;
      }
    }() === 0;
    if (and__7492__auto____$1) {
      var and__7492__auto____$2 = function() {
        var or__7504__auto__ = error;
        if (cljs.core.truth_(or__7504__auto__)) {
          return or__7504__auto__;
        } else {
          return 0;
        }
      }() === 0;
      if (and__7492__auto____$2) {
        var or__7504__auto__ = async == null;
        if (or__7504__auto__) {
          return or__7504__auto__;
        } else {
          return successful_QMARK_.call(null, async);
        }
      } else {
        return and__7492__auto____$2;
      }
    } else {
      return and__7492__auto____$1;
    }
  } else {
    return and__7492__auto__;
  }
};
goog.exportSymbol("cemerick.cljs.test.successful_QMARK_", cemerick.cljs.test.successful_QMARK_);
cemerick.cljs.test.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
goog.exportSymbol("cemerick.cljs.test.set_print_fn_BANG_", cemerick.cljs.test.set_print_fn_BANG_);
goog.provide("speicher_test.client_test");
goog.require("cljs.core");
goog.require("speicher.client");
goog.require("cemerick.cljs.test");
speicher_test.client_test.level_complete_QMARK__test = function level_complete_QMARK__test() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), speicher_test.client_test.level_complete_QMARK__test);
};
speicher_test.client_test.level_complete_QMARK__test = cljs.core.with_meta.call(null, speicher_test.client_test.level_complete_QMARK__test, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 31, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 9, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 9, new cljs.core.Keyword(null, 
"file", "file", -1269645878), "/Users/monte/Developer/speicher/test/speicher_test/client_test.cljs"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("speicher-test.client-test", "level-complete?-test", "speicher-test.client-test/level-complete?-test", 1401817635, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 31, new cljs.core.Keyword(null, 
"end-line", "end-line", 1837326455), 9, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 9, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/monte/Developer/speicher/test/speicher_test/client_test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function level_complete_QMARK__test_test(test_ctx__11163__auto__) {
  var _test_ctx = test_ctx__11163__auto__;
  var async_QMARK___11078__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_21523 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11078__auto__) ? null : _test_ctx;
  try {
    try {
      try {
        cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(_test_ctx), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)], null), cljs.core.conj, "level-complete?");
        try {
          cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(_test_ctx), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)], null), cljs.core.conj, "Edge cases\n");
          try {
            cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(_test_ctx), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)], null), cljs.core.conj, "all upper bounds");
            var _test_ctx_21546__$1 = _test_ctx;
            var async_QMARK___11078__auto___21547__$1 = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx_21546__$1)));
            var _STAR_test_ctx_STAR_21525_21548 = cemerick.cljs.test._STAR_test_ctx_STAR_;
            cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11078__auto___21547__$1) ? null : _test_ctx_21546__$1;
            try {
              try {
                try {
                  var values__11098__auto___21549 = cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, speicher.client.level_complete_QMARK_.call(null, new cljs.core.Keyword(null, "daily", "daily", -697831483), 6)), true);
                  var result__11099__auto___21550 = cljs.core.apply.call(null, cljs.core._EQ_, values__11098__auto___21549);
                  if (result__11099__auto___21550 instanceof cemerick.cljs.test.TestContext) {
                    throw new Error("TestContext provided as [form] in `is` assertion. If using `is` with an explicit test context, use the 3-arg arity.");
                  } else {
                  }
                  if (cljs.core.truth_(result__11099__auto___21550)) {
                    cemerick.cljs.test.do_report.call(null, _test_ctx_21546__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), true, cljs.core.list(new cljs.core.Symbol(null, "level-complete?", "level-complete?", -337794226, null), new cljs.core.Keyword(null, 
                    "daily", "daily", -697831483), 6)), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core.cons.call(null, cljs.core._EQ_, values__11098__auto___21549), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
                  } else {
                    cemerick.cljs.test.do_report.call(null, _test_ctx_21546__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), true, cljs.core.list(new cljs.core.Symbol(null, "level-complete?", "level-complete?", -337794226, null), new cljs.core.Keyword(null, 
                    "daily", "daily", -697831483), 6)), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), values__11098__auto___21549)), new cljs.core.Symbol(null, "not", "not", 1044554643, null)), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
                  }
                } catch (e21527) {
                  if (e21527 instanceof Error) {
                    var t__11135__auto___21551 = e21527;
                    cemerick.cljs.test.do_report.call(null, _test_ctx_21546__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), true, cljs.core.list(new cljs.core.Symbol(null, "level-complete?", "level-complete?", -337794226, null), new cljs.core.Keyword(null, 
                    "daily", "daily", -697831483), 6)), new cljs.core.Keyword(null, "actual", "actual", 107306363), t__11135__auto___21551, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
                  } else {
                    throw e21527;
                  }
                }
              } catch (e21526) {
                if (e21526 instanceof Error) {
                  var e__11079__auto___21552 = e21526;
                  if (cljs.core.truth_(async_QMARK___11078__auto___21547__$1)) {
                    cemerick.cljs.test.done_STAR_.call(null, _test_ctx_21546__$1, e__11079__auto___21552);
                  } else {
                    throw e__11079__auto___21552;
                  }
                } else {
                  throw e21526;
                }
              }
            } finally {
              cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_21525_21548;
            }
            var _test_ctx_21553__$1 = _test_ctx;
            var async_QMARK___11078__auto___21554__$1 = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx_21553__$1)));
            var _STAR_test_ctx_STAR_21528_21555 = cemerick.cljs.test._STAR_test_ctx_STAR_;
            cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11078__auto___21554__$1) ? null : _test_ctx_21553__$1;
            try {
              try {
                try {
                  var values__11098__auto___21556 = cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, speicher.client.level_complete_QMARK_.call(null, new cljs.core.Keyword(null, "weekly", "weekly", 319200344), 6)), true);
                  var result__11099__auto___21557 = cljs.core.apply.call(null, cljs.core._EQ_, values__11098__auto___21556);
                  if (result__11099__auto___21557 instanceof cemerick.cljs.test.TestContext) {
                    throw new Error("TestContext provided as [form] in `is` assertion. If using `is` with an explicit test context, use the 3-arg arity.");
                  } else {
                  }
                  if (cljs.core.truth_(result__11099__auto___21557)) {
                    cemerick.cljs.test.do_report.call(null, _test_ctx_21553__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), true, cljs.core.list(new cljs.core.Symbol(null, "level-complete?", "level-complete?", -337794226, null), new cljs.core.Keyword(null, 
                    "weekly", "weekly", 319200344), 6)), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core.cons.call(null, cljs.core._EQ_, values__11098__auto___21556), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
                  } else {
                    cemerick.cljs.test.do_report.call(null, _test_ctx_21553__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), true, cljs.core.list(new cljs.core.Symbol(null, "level-complete?", "level-complete?", -337794226, null), new cljs.core.Keyword(null, 
                    "weekly", "weekly", 319200344), 6)), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), values__11098__auto___21556)), new cljs.core.Symbol(null, "not", "not", 1044554643, null)), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
                  }
                } catch (e21530) {
                  if (e21530 instanceof Error) {
                    var t__11135__auto___21558 = e21530;
                    cemerick.cljs.test.do_report.call(null, _test_ctx_21553__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), true, cljs.core.list(new cljs.core.Symbol(null, "level-complete?", "level-complete?", -337794226, null), new cljs.core.Keyword(null, 
                    "weekly", "weekly", 319200344), 6)), new cljs.core.Keyword(null, "actual", "actual", 107306363), t__11135__auto___21558, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
                  } else {
                    throw e21530;
                  }
                }
              } catch (e21529) {
                if (e21529 instanceof Error) {
                  var e__11079__auto___21559 = e21529;
                  if (cljs.core.truth_(async_QMARK___11078__auto___21554__$1)) {
                    cemerick.cljs.test.done_STAR_.call(null, _test_ctx_21553__$1, e__11079__auto___21559);
                  } else {
                    throw e__11079__auto___21559;
                  }
                } else {
                  throw e21529;
                }
              }
            } finally {
              cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_21528_21555;
            }
            var _test_ctx_21560__$1 = _test_ctx;
            var async_QMARK___11078__auto___21561__$1 = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx_21560__$1)));
            var _STAR_test_ctx_STAR_21531_21562 = cemerick.cljs.test._STAR_test_ctx_STAR_;
            cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11078__auto___21561__$1) ? null : _test_ctx_21560__$1;
            try {
              try {
                try {
                  var values__11098__auto___21563 = cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, speicher.client.level_complete_QMARK_.call(null, new cljs.core.Keyword(null, "monthly", "monthly", 1596693261), 11)), true);
                  var result__11099__auto___21564 = cljs.core.apply.call(null, cljs.core._EQ_, values__11098__auto___21563);
                  if (result__11099__auto___21564 instanceof cemerick.cljs.test.TestContext) {
                    throw new Error("TestContext provided as [form] in `is` assertion. If using `is` with an explicit test context, use the 3-arg arity.");
                  } else {
                  }
                  if (cljs.core.truth_(result__11099__auto___21564)) {
                    cemerick.cljs.test.do_report.call(null, _test_ctx_21560__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), true, cljs.core.list(new cljs.core.Symbol(null, "level-complete?", "level-complete?", -337794226, null), new cljs.core.Keyword(null, 
                    "monthly", "monthly", 1596693261), 11)), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core.cons.call(null, cljs.core._EQ_, values__11098__auto___21563), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
                  } else {
                    cemerick.cljs.test.do_report.call(null, _test_ctx_21560__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), true, cljs.core.list(new cljs.core.Symbol(null, "level-complete?", "level-complete?", -337794226, null), new cljs.core.Keyword(null, 
                    "monthly", "monthly", 1596693261), 11)), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), values__11098__auto___21563)), new cljs.core.Symbol(null, "not", "not", 1044554643, null)), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
                  }
                } catch (e21533) {
                  if (e21533 instanceof Error) {
                    var t__11135__auto___21565 = e21533;
                    cemerick.cljs.test.do_report.call(null, _test_ctx_21560__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), true, cljs.core.list(new cljs.core.Symbol(null, "level-complete?", "level-complete?", -337794226, null), new cljs.core.Keyword(null, 
                    "monthly", "monthly", 1596693261), 11)), new cljs.core.Keyword(null, "actual", "actual", 107306363), t__11135__auto___21565, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
                  } else {
                    throw e21533;
                  }
                }
              } catch (e21532) {
                if (e21532 instanceof Error) {
                  var e__11079__auto___21566 = e21532;
                  if (cljs.core.truth_(async_QMARK___11078__auto___21561__$1)) {
                    cemerick.cljs.test.done_STAR_.call(null, _test_ctx_21560__$1, e__11079__auto___21566);
                  } else {
                    throw e__11079__auto___21566;
                  }
                } else {
                  throw e21532;
                }
              }
            } finally {
              cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_21531_21562;
            }
            var _test_ctx_21567__$1 = _test_ctx;
            var async_QMARK___11078__auto___21568__$1 = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx_21567__$1)));
            var _STAR_test_ctx_STAR_21534_21569 = cemerick.cljs.test._STAR_test_ctx_STAR_;
            cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11078__auto___21568__$1) ? null : _test_ctx_21567__$1;
            try {
              try {
                try {
                  var values__11098__auto___21570 = cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, speicher.client.level_complete_QMARK_.call(null, new cljs.core.Keyword(null, "yearly", "yearly", 1010642817), 6)), true);
                  var result__11099__auto___21571 = cljs.core.apply.call(null, cljs.core._EQ_, values__11098__auto___21570);
                  if (result__11099__auto___21571 instanceof cemerick.cljs.test.TestContext) {
                    throw new Error("TestContext provided as [form] in `is` assertion. If using `is` with an explicit test context, use the 3-arg arity.");
                  } else {
                  }
                  if (cljs.core.truth_(result__11099__auto___21571)) {
                    cemerick.cljs.test.do_report.call(null, _test_ctx_21567__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), true, cljs.core.list(new cljs.core.Symbol(null, "level-complete?", "level-complete?", -337794226, null), new cljs.core.Keyword(null, 
                    "yearly", "yearly", 1010642817), 6)), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core.cons.call(null, cljs.core._EQ_, values__11098__auto___21570), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
                  } else {
                    cemerick.cljs.test.do_report.call(null, _test_ctx_21567__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), true, cljs.core.list(new cljs.core.Symbol(null, "level-complete?", "level-complete?", -337794226, null), new cljs.core.Keyword(null, 
                    "yearly", "yearly", 1010642817), 6)), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), values__11098__auto___21570)), new cljs.core.Symbol(null, "not", "not", 1044554643, null)), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
                  }
                } catch (e21536) {
                  if (e21536 instanceof Error) {
                    var t__11135__auto___21572 = e21536;
                    cemerick.cljs.test.do_report.call(null, _test_ctx_21567__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), true, cljs.core.list(new cljs.core.Symbol(null, "level-complete?", "level-complete?", -337794226, null), new cljs.core.Keyword(null, 
                    "yearly", "yearly", 1010642817), 6)), new cljs.core.Keyword(null, "actual", "actual", 107306363), t__11135__auto___21572, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
                  } else {
                    throw e21536;
                  }
                }
              } catch (e21535) {
                if (e21535 instanceof Error) {
                  var e__11079__auto___21573 = e21535;
                  if (cljs.core.truth_(async_QMARK___11078__auto___21568__$1)) {
                    cemerick.cljs.test.done_STAR_.call(null, _test_ctx_21567__$1, e__11079__auto___21573);
                  } else {
                    throw e__11079__auto___21573;
                  }
                } else {
                  throw e21535;
                }
              }
            } finally {
              cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_21534_21569;
            }
          } finally {
            cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(_test_ctx), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)], null), cljs.core.pop);
          }
        } finally {
          cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(_test_ctx), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)], null), cljs.core.pop);
        }
        try {
          cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(_test_ctx), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)], null), cljs.core.conj, "not complete");
        } finally {
          cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(_test_ctx), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)], null), cljs.core.pop);
        }
        var _test_ctx_21574__$1 = _test_ctx;
        var async_QMARK___11078__auto___21575__$1 = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx_21574__$1)));
        var _STAR_test_ctx_STAR_21537_21576 = cemerick.cljs.test._STAR_test_ctx_STAR_;
        cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11078__auto___21575__$1) ? null : _test_ctx_21574__$1;
        try {
          try {
            try {
              var values__11098__auto___21577 = cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, speicher.client.level_complete_QMARK_.call(null, new cljs.core.Keyword(null, "daily", "daily", -697831483), 1)), false);
              var result__11099__auto___21578 = cljs.core.apply.call(null, cljs.core._EQ_, values__11098__auto___21577);
              if (result__11099__auto___21578 instanceof cemerick.cljs.test.TestContext) {
                throw new Error("TestContext provided as [form] in `is` assertion. If using `is` with an explicit test context, use the 3-arg arity.");
              } else {
              }
              if (cljs.core.truth_(result__11099__auto___21578)) {
                cemerick.cljs.test.do_report.call(null, _test_ctx_21574__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), false, cljs.core.list(new cljs.core.Symbol(null, "level-complete?", "level-complete?", -337794226, null), new cljs.core.Keyword(null, 
                "daily", "daily", -697831483), 1)), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core.cons.call(null, cljs.core._EQ_, values__11098__auto___21577), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
              } else {
                cemerick.cljs.test.do_report.call(null, _test_ctx_21574__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), false, cljs.core.list(new cljs.core.Symbol(null, "level-complete?", "level-complete?", -337794226, null), new cljs.core.Keyword(null, 
                "daily", "daily", -697831483), 1)), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), values__11098__auto___21577)), new cljs.core.Symbol(null, "not", "not", 1044554643, null)), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
              }
            } catch (e21539) {
              if (e21539 instanceof Error) {
                var t__11135__auto___21579 = e21539;
                cemerick.cljs.test.do_report.call(null, _test_ctx_21574__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), false, cljs.core.list(new cljs.core.Symbol(null, "level-complete?", "level-complete?", -337794226, null), new cljs.core.Keyword(null, 
                "daily", "daily", -697831483), 1)), new cljs.core.Keyword(null, "actual", "actual", 107306363), t__11135__auto___21579, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
              } else {
                throw e21539;
              }
            }
          } catch (e21538) {
            if (e21538 instanceof Error) {
              var e__11079__auto___21580 = e21538;
              if (cljs.core.truth_(async_QMARK___11078__auto___21575__$1)) {
                cemerick.cljs.test.done_STAR_.call(null, _test_ctx_21574__$1, e__11079__auto___21580);
              } else {
                throw e__11079__auto___21580;
              }
            } else {
              throw e21538;
            }
          }
        } finally {
          cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_21537_21576;
        }
        var _test_ctx_21581__$1 = _test_ctx;
        var async_QMARK___11078__auto___21582__$1 = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx_21581__$1)));
        var _STAR_test_ctx_STAR_21540_21583 = cemerick.cljs.test._STAR_test_ctx_STAR_;
        cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11078__auto___21582__$1) ? null : _test_ctx_21581__$1;
        try {
          try {
            try {
              var values__11098__auto___21584 = cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, speicher.client.level_complete_QMARK_.call(null, new cljs.core.Keyword(null, "weekly", "weekly", 319200344), 1)), false);
              var result__11099__auto___21585 = cljs.core.apply.call(null, cljs.core._EQ_, values__11098__auto___21584);
              if (result__11099__auto___21585 instanceof cemerick.cljs.test.TestContext) {
                throw new Error("TestContext provided as [form] in `is` assertion. If using `is` with an explicit test context, use the 3-arg arity.");
              } else {
              }
              if (cljs.core.truth_(result__11099__auto___21585)) {
                cemerick.cljs.test.do_report.call(null, _test_ctx_21581__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), false, cljs.core.list(new cljs.core.Symbol(null, "level-complete?", "level-complete?", -337794226, null), new cljs.core.Keyword(null, 
                "weekly", "weekly", 319200344), 1)), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core.cons.call(null, cljs.core._EQ_, values__11098__auto___21584), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
              } else {
                cemerick.cljs.test.do_report.call(null, _test_ctx_21581__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), false, cljs.core.list(new cljs.core.Symbol(null, "level-complete?", "level-complete?", -337794226, null), new cljs.core.Keyword(null, 
                "weekly", "weekly", 319200344), 1)), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), values__11098__auto___21584)), new cljs.core.Symbol(null, "not", "not", 1044554643, null)), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
              }
            } catch (e21542) {
              if (e21542 instanceof Error) {
                var t__11135__auto___21586 = e21542;
                cemerick.cljs.test.do_report.call(null, _test_ctx_21581__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), false, cljs.core.list(new cljs.core.Symbol(null, "level-complete?", "level-complete?", -337794226, null), new cljs.core.Keyword(null, 
                "weekly", "weekly", 319200344), 1)), new cljs.core.Keyword(null, "actual", "actual", 107306363), t__11135__auto___21586, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
              } else {
                throw e21542;
              }
            }
          } catch (e21541) {
            if (e21541 instanceof Error) {
              var e__11079__auto___21587 = e21541;
              if (cljs.core.truth_(async_QMARK___11078__auto___21582__$1)) {
                cemerick.cljs.test.done_STAR_.call(null, _test_ctx_21581__$1, e__11079__auto___21587);
              } else {
                throw e__11079__auto___21587;
              }
            } else {
              throw e21541;
            }
          }
        } finally {
          cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_21540_21583;
        }
        var _test_ctx__$1 = _test_ctx;
        var async_QMARK___11078__auto____$1 = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx__$1)));
        var _STAR_test_ctx_STAR_21543 = cemerick.cljs.test._STAR_test_ctx_STAR_;
        cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11078__auto____$1) ? null : _test_ctx__$1;
        try {
          try {
            try {
              var values__11098__auto__ = cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, speicher.client.level_complete_QMARK_.call(null, new cljs.core.Keyword(null, "monthly", "monthly", 1596693261), 1)), false);
              var result__11099__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__11098__auto__);
              if (result__11099__auto__ instanceof cemerick.cljs.test.TestContext) {
                throw new Error("TestContext provided as [form] in `is` assertion. If using `is` with an explicit test context, use the 3-arg arity.");
              } else {
              }
              if (cljs.core.truth_(result__11099__auto__)) {
                cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), false, cljs.core.list(new cljs.core.Symbol(null, "level-complete?", "level-complete?", -337794226, null), new cljs.core.Keyword(null, 
                "monthly", "monthly", 1596693261), 1)), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core.cons.call(null, cljs.core._EQ_, values__11098__auto__), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
              } else {
                cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), false, cljs.core.list(new cljs.core.Symbol(null, "level-complete?", "level-complete?", -337794226, null), new cljs.core.Keyword(null, 
                "monthly", "monthly", 1596693261), 1)), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), values__11098__auto__)), new cljs.core.Symbol(null, "not", "not", 1044554643, null)), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
              }
              return result__11099__auto__;
            } catch (e21545) {
              if (e21545 instanceof Error) {
                var t__11135__auto__ = e21545;
                return cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), false, cljs.core.list(new cljs.core.Symbol(null, "level-complete?", "level-complete?", -337794226, null), new cljs.core.Keyword(null, 
                "monthly", "monthly", 1596693261), 1)), new cljs.core.Keyword(null, "actual", "actual", 107306363), t__11135__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
              } else {
                throw e21545;
              }
            }
          } catch (e21544) {
            if (e21544 instanceof Error) {
              var e__11079__auto__ = e21544;
              if (cljs.core.truth_(async_QMARK___11078__auto____$1)) {
                return cemerick.cljs.test.done_STAR_.call(null, _test_ctx__$1, e__11079__auto__);
              } else {
                throw e__11079__auto__;
              }
            } else {
              throw e21544;
            }
          }
        } finally {
          cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_21543;
        }
      } finally {
        cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(_test_ctx), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)], null), cljs.core.pop);
      }
    } catch (e21524) {
      if (e21524 instanceof Error) {
        var e__11079__auto__ = e21524;
        if (cljs.core.truth_(async_QMARK___11078__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__11079__auto__);
        } else {
          throw e__11079__auto__;
        }
      } else {
        throw e21524;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_21523;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "speicher-test.client-test", "speicher-test.client-test", -20854896, null), new cljs.core.Symbol("speicher-test.client-test", "level-complete?-test", "speicher-test.client-test/level-complete?-test", 1401817635, null), speicher_test.client_test.level_complete_QMARK__test);
speicher_test.client_test.simple_addition = function simple_addition() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), speicher_test.client_test.simple_addition);
};
speicher_test.client_test.simple_addition = cljs.core.with_meta.call(null, speicher_test.client_test.simple_addition, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 26, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), 22, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 22, new cljs.core.Keyword(null, "file", "file", -1269645878), 
"/Users/monte/Developer/speicher/test/speicher_test/client_test.cljs"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.with_meta.call(null, new cljs.core.Symbol("speicher-test.client-test", "simple-addition", "speicher-test.client-test/simple-addition", -1671366661, null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), 26, new cljs.core.Keyword(null, "end-line", "end-line", 
1837326455), 22, new cljs.core.Keyword(null, "column", "column", 2078222095), 10, new cljs.core.Keyword(null, "line", "line", 212345235), 22, new cljs.core.Keyword(null, "file", "file", -1269645878), "/Users/monte/Developer/speicher/test/speicher_test/client_test.cljs"], null)), new cljs.core.Keyword(null, "test", "test", 577538877), function simple_addition_test(test_ctx__11163__auto__) {
  var _test_ctx = test_ctx__11163__auto__;
  var async_QMARK___11078__auto__ = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_21593 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11078__auto__) ? null : _test_ctx;
  try {
    try {
      try {
        cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(_test_ctx), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)], null), cljs.core.conj, "simple-addition");
        var _test_ctx__$1 = _test_ctx;
        var async_QMARK___11078__auto____$1 = (new cljs.core.Keyword(null, "async", "async", 1050769601)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", -675595913)).cljs$core$IFn$_invoke$arity$1(_test_ctx__$1)));
        var _STAR_test_ctx_STAR_21595 = cemerick.cljs.test._STAR_test_ctx_STAR_;
        cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___11078__auto____$1) ? null : _test_ctx__$1;
        try {
          try {
            try {
              var values__11098__auto__ = cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, 11 + 6), 17);
              var result__11099__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__11098__auto__);
              if (result__11099__auto__ instanceof cemerick.cljs.test.TestContext) {
                throw new Error("TestContext provided as [form] in `is` assertion. If using `is` with an explicit test context, use the 3-arg arity.");
              } else {
              }
              if (cljs.core.truth_(result__11099__auto__)) {
                cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), 17, cljs.core.list(new cljs.core.Symbol(null, "+", "+", -740910886, null), 11, 6)), new cljs.core.Keyword(null, "actual", "actual", 
                107306363), cljs.core.cons.call(null, cljs.core._EQ_, values__11098__auto__), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
              } else {
                cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), 17, cljs.core.list(new cljs.core.Symbol(null, "+", "+", -740910886, null), 11, 6)), new cljs.core.Keyword(null, "actual", "actual", 
                107306363), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), values__11098__auto__)), new cljs.core.Symbol(null, "not", "not", 1044554643, null)), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
              }
              return result__11099__auto__;
            } catch (e21597) {
              if (e21597 instanceof Error) {
                var t__11135__auto__ = e21597;
                return cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), 17, cljs.core.list(new cljs.core.Symbol(null, "+", "+", -740910886, null), 11, 6)), new cljs.core.Keyword(null, "actual", 
                "actual", 107306363), t__11135__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
              } else {
                throw e21597;
              }
            }
          } catch (e21596) {
            if (e21596 instanceof Error) {
              var e__11079__auto__ = e21596;
              if (cljs.core.truth_(async_QMARK___11078__auto____$1)) {
                return cemerick.cljs.test.done_STAR_.call(null, _test_ctx__$1, e__11079__auto__);
              } else {
                throw e__11079__auto__;
              }
            } else {
              throw e21596;
            }
          }
        } finally {
          cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_21595;
        }
      } finally {
        cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "test-env", "test-env", -540228992)).cljs$core$IFn$_invoke$arity$1(_test_ctx), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1505935128)], null), cljs.core.pop);
      }
    } catch (e21594) {
      if (e21594 instanceof Error) {
        var e__11079__auto__ = e21594;
        if (cljs.core.truth_(async_QMARK___11078__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__11079__auto__);
        } else {
          throw e__11079__auto__;
        }
      } else {
        throw e21594;
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_21593;
  }
}], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "speicher-test.client-test", "speicher-test.client-test", -20854896, null), new cljs.core.Symbol("speicher-test.client-test", "simple-addition", "speicher-test.client-test/simple-addition", -1671366661, null), speicher_test.client_test.simple_addition);
