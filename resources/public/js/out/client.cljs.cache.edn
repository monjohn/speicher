;; Analyzed by ClojureScript 0.0-2674
{:defs {main {:protocol-inline nil, :name client/main, :variadic false, :file "src/client.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 83, :end-line 83, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Application entry point", :test true}, load-app {:protocol-inline nil, :name client/load-app, :variadic false, :file "src/client.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 0}), :line 70, :end-line 70, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Return a map containing the initial application", :test true}, print-entry {:protocol-inline nil, :name client/print-entry, :variadic false, :file "src/client.cljs", :end-column 19, :method-params ([state data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state data])), :test true}, init-updates {:protocol-inline nil, :name client/init-updates, :variadic false, :file "src/client.cljs", :end-column 20, :method-params ([p__10964]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1}), :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [state functions]}])), :doc "For every entry in a map of channel identifiers to consumers,\n  initiate a channel listener which will update the application state\n  using the appropriate function whenever a value is recieved, as\n  well as triggering a render.", :test true}, show-definitions {:protocol-inline nil, :name client/show-definitions, :variadic false, :file "src/client.cljs", :end-column 24, :method-params ([state p__10961]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state {:keys [body]}])), :test true}, handle-response {:protocol-inline nil, :name client/handle-response, :variadic false, :file "src/client.cljs", :end-column 23, :method-params ([state p__10958]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state {:keys [status body], :as resp}])), :test true}, lookup {:protocol-inline nil, :name client/lookup, :variadic false, :file "src/client.cljs", :end-column 14, :method-params ([state word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state word])), :test true}, get-list {:protocol-inline nil, :name client/get-list, :variadic false, :file "src/client.cljs", :end-column 16, :method-params ([state kw]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state kw])), :test true}}, :name client, :doc nil, :excludes #{}, :use-macros {go cljs.core.async.macros}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :uses {<! cljs.core.async, chan cljs.core.async, >! cljs.core.async, read-string cljs.reader}, :requires {clojure.browser.repl clojure.browser.repl, cljs-http.client cljs-http.client, goog.History goog.History, cljs.core.async cljs.core.async, e goog.events, render render, cljs.reader cljs.reader, repl clojure.browser.repl, goog.events goog.events, http cljs-http.client}, :imports nil}