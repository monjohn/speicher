;; Analyzed by ClojureScript 0.0-2665
{:defs {level-limit {:file "src/client.cljs", :line 51, :column 1, :end-line 51, :end-column 18, :test true, :name client/level-limit}, level-up {:protocol-inline nil, :name client/level-up, :variadic false, :file "src/client.cljs", :end-column 16, :method-params ([state p__24038]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 73, :end-line 73, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state [ger eng c d]])), :test true}, got-right {:protocol-inline nil, :name client/got-right, :variadic false, :file "src/client.cljs", :end-column 17, :method-params ([p__24044]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [words], :as state}])), :test true}, load-app {:protocol-inline nil, :name client/load-app, :variadic false, :file "src/client.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 0}), :line 175, :end-line 175, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Return a map containing the initial application", :test true}, main {:protocol-inline nil, :name client/main, :variadic false, :file "src/client.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 0}), :line 205, :end-line 205, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Application entry point", :test true}, submit-entered {:protocol-inline nil, :name client/submit-entered, :variadic false, :file "src/client.cljs", :end-column 22, :method-params ([state entered]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 143, :end-line 143, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state entered])), :test true}, review-list {:protocol-inline nil, :name client/review-list, :variadic false, :file "src/client.cljs", :end-column 19, :method-params ([state list-kw]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 106, :end-line 106, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state list-kw])), :test true}, fetch-list {:protocol-inline nil, :name client/fetch-list, :variadic false, :file "src/client.cljs", :end-column 18, :method-params ([state kw]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state kw])), :test true}, lookup {:protocol-inline nil, :name client/lookup, :variadic false, :file "src/client.cljs", :end-column 14, :method-params ([state word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{clj clj-nil}, :variadic false, :max-fixed-arity 2}), :line 125, :end-line 125, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state word])), :test true}, words->answered {:protocol-inline nil, :name client/words->answered, :variadic false, :file "src/client.cljs", :end-column 23, :method-params ([state entry]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state entry])), :test true}, submit-selected {:protocol-inline nil, :name client/submit-selected, :variadic false, :file "src/client.cljs", :end-column 23, :method-params ([state entry-index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 136, :end-line 136, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state entry-index])), :test true}, add-new-word {:protocol-inline nil, :name client/add-new-word, :variadic false, :file "src/client.cljs", :end-column 20, :method-params ([state entry]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 131, :end-line 131, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state entry])), :test true}, level-complete? {:protocol-inline nil, :name client/level-complete?, :variadic false, :file "src/client.cljs", :end-column 23, :method-params ([level count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([level count])), :test true}, show-search {:protocol-inline nil, :name client/show-search, :variadic false, :file "src/client.cljs", :end-column 19, :method-params ([state _]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 119, :end-line 119, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state _])), :test true}, init-updates {:protocol-inline nil, :name client/init-updates, :variadic false, :file "src/client.cljs", :end-column 20, :method-params ([p__24194]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1}), :line 156, :end-line 156, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [state functions]}])), :doc "For every entry in a map of channel identifiers to consumers,\n  initiate a channel listener which will update the application state\n  using the appropriate function whenever a value is recieved, as\n  well as triggering a render.", :test true}, handle-response {:protocol-inline nil, :name client/handle-response, :variadic false, :file "src/client.cljs", :end-column 23, :method-params ([state p__24188]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 147, :end-line 147, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state {:keys [status body]}])), :test true}, show-enter {:protocol-inline nil, :name client/show-enter, :variadic false, :file "src/client.cljs", :end-column 18, :method-params ([state _]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 122, :end-line 122, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state _])), :test true}, next-level {:file "src/client.cljs", :line 56, :column 1, :end-line 56, :end-column 17, :test true, :name client/next-level}, show-list {:protocol-inline nil, :name client/show-list, :variadic false, :file "src/client.cljs", :end-column 17, :method-params ([state kw]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 115, :end-line 115, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state kw])), :test true}, show-definitions {:protocol-inline nil, :name client/show-definitions, :variadic false, :file "src/client.cljs", :end-column 24, :method-params ([state p__24191]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 151, :end-line 151, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state {:keys [body]}])), :test true}, answer {:protocol-inline nil, :name client/answer, :variadic false, :file "src/client.cljs", :end-column 14, :method-params ([state r-or-w]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 96, :end-line 96, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state r-or-w])), :test true}, print-entry {:protocol-inline nil, :name client/print-entry, :variadic false, :file "src/client.cljs", :end-column 19, :method-params ([state data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 171, :end-line 171, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state data])), :test true}, finished? {:protocol-inline nil, :name client/finished?, :variadic false, :file "src/client.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :test true}, finished-list {:protocol-inline nil, :name client/finished-list, :variadic false, :file "src/client.cljs", :end-column 21, :method-params ([p__23985]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1}), :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [answered next-list current-list input-chan], :as state}])), :test true}, got-wrong {:protocol-inline nil, :name client/got-wrong, :variadic false, :file "src/client.cljs", :end-column 17, :method-params ([p__24041]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [words], :as state}])), :test true}}, :name client, :doc nil, :excludes #{}, :use-macros {go cljs.core.async.macros}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :uses {<! cljs.core.async, chan cljs.core.async, >! cljs.core.async, read-string cljs.reader}, :requires {clojure.browser.repl clojure.browser.repl, fw figwheel.client, cljs-http.client cljs-http.client, goog.History goog.History, cljs.core.async cljs.core.async, figwheel.client figwheel.client, e goog.events, render render, cljs.reader cljs.reader, repl clojure.browser.repl, goog.events goog.events, http cljs-http.client}, :imports nil}