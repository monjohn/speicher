;; Analyzed by ClojureScript 0.0-2674
{:defs {request {:protocol-inline nil, :name cljs-http.core/request, :variadic false, :file "resources/public/js/out/cljs_http/core.cljs", :end-column 15, :method-params ([p__10743]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [request-method headers body with-credentials? cancel], :as request}])), :doc "Execute the HTTP request corresponding to the given Ring request\n  map and return a core.async channel.", :test true}, aborted? {:protocol-inline nil, :private true, :name cljs-http.core/aborted?, :variadic false, :file "resources/public/js/out/cljs_http/core.cljs", :end-column 17, :method-params ([xhr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([xhr])), :test true}, abort! {:protocol-inline nil, :name cljs-http.core/abort!, :variadic false, :file "resources/public/js/out/cljs_http/core.cljs", :end-column 14, :method-params ([channel]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([channel])), :doc "Attempt to close the given channel and abort the pending HTTP request\n  with which it is associated.", :test true}, pending-requests {:file "resources/public/js/out/cljs_http/core.cljs", :line 7, :column 1, :end-line 7, :end-column 23, :test true, :name cljs-http.core/pending-requests}}, :name cljs-http.core, :doc nil, :excludes #{}, :use-macros {go cljs.core.async.macros}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :uses nil, :requires {async cljs.core.async, cljs.core.async cljs.core.async, util cljs-http.util, cljs-http.util cljs-http.util, EventType goog.net.EventType, XhrIo goog.net.XhrIo}, :imports {EventType goog.net.EventType, XhrIo goog.net.XhrIo}}