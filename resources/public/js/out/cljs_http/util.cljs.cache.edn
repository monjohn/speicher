;; Analyzed by ClojureScript 0.0-2850
{:defs {basic-auth {:protocol-inline nil, :name cljs-http.util/basic-auth, :variadic false, :file "resources/public/js/out/cljs_http/util.cljs", :end-column 18, :method-params ([credentials]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([credentials])), :doc "Returns the value of the HTTP basic authentication header for\n  `credentials`.", :test true}, transit-decode {:protocol-inline nil, :name cljs-http.util/transit-decode, :variadic false, :file "resources/public/js/out/cljs_http/util.cljs", :end-column 22, :method-params ([s type opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 48, :end-line 48, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s type opts])), :doc "Transit decode an object from `s`.", :test true}, user-agent {:protocol-inline nil, :name cljs-http.util/user-agent, :variadic false, :file "resources/public/js/out/cljs_http/util.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 40, :end-line 40, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns the user agent.", :test true}, json-encode {:protocol-inline nil, :name cljs-http.util/json-encode, :variadic false, :file "resources/public/js/out/cljs_http/util.cljs", :end-column 19, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "JSON encode `x` into a String.", :test true}, camelize {:protocol-inline nil, :name cljs-http.util/camelize, :variadic false, :file "resources/public/js/out/cljs_http/util.cljs", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns dash separeted string `s` in camel case.", :test true}, parse-headers {:protocol-inline nil, :name cljs-http.util/parse-headers, :variadic false, :file "resources/public/js/out/cljs_http/util.cljs", :end-column 21, :method-params ([headers]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([headers])), :test true}, transit-encode {:protocol-inline nil, :name cljs-http.util/transit-encode, :variadic false, :file "resources/public/js/out/cljs_http/util.cljs", :end-column 22, :method-params ([x type opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 54, :end-line 54, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x type opts])), :doc "Transit encode `x` into a String.", :test true}, android? {:protocol-inline nil, :name cljs-http.util/android?, :variadic false, :file "resources/public/js/out/cljs_http/util.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{clj any clj-nil}, :variadic false, :max-fixed-arity 0}), :line 44, :end-line 44, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns true if the user agent is an Android client.", :test true}, build-url {:protocol-inline nil, :name cljs-http.util/build-url, :variadic false, :file "resources/public/js/out/cljs_http/util.cljs", :end-column 17, :method-params ([p__23784]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [scheme server-name server-port uri query-string]}])), :doc "Build the url from the request map.", :test true}, json-decode {:protocol-inline nil, :name cljs-http.util/json-decode, :variadic false, :file "resources/public/js/out/cljs_http/util.cljs", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj any cljs.core/MetaFn clj-nil}, :variadic false, :max-fixed-arity 1}), :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "JSON decode an object from `s`.", :test true}, build-headers {:protocol-inline nil, :name cljs-http.util/build-headers, :variadic false, :file "resources/public/js/out/cljs_http/util.cljs", :end-column 21, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil object any array string clj-nil}, :variadic false, :max-fixed-arity 1}), :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Build the headers from the map.", :test true}}, :name cljs-http.util, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses {capitalize clojure.string, join clojure.string, lower-case clojure.string, split clojure.string, base64-encode no.en.core, blank? clojure.string}, :requires {no.en.core no.en.core, agent goog.userAgent, goog.userAgent goog.userAgent, t cognitect.transit, cognitect.transit cognitect.transit, clojure.string clojure.string, Uri goog.Uri}, :imports {Uri goog.Uri}}