;; Analyzed by ClojureScript 0.0-2850
{:defs {level-limit {:file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :line 31, :column 1, :end-line 31, :end-column 18, :test true, :name speicher.client/level-limit}, level-up {:protocol-inline nil, :name speicher.client/level-up, :variadic false, :file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :end-column 16, :method-params ([state p__6679]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state [ger eng c d]])), :test true}, load-app {:protocol-inline nil, :name speicher.client/load-app, :variadic false, :file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 0}), :line 187, :end-line 187, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Return a map containing the initial application", :test true}, main {:protocol-inline nil, :name speicher.client/main, :variadic false, :file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 0}), :line 228, :end-line 228, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Application entry point", :test true}, submit-entered {:protocol-inline nil, :name speicher.client/submit-entered, :variadic false, :file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :end-column 22, :method-params ([state entered]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 152, :end-line 152, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state entered])), :test true}, review-list {:protocol-inline nil, :name speicher.client/review-list, :variadic false, :file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :end-column 19, :method-params ([state list-kw]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 113, :end-line 113, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state list-kw])), :test true}, correct {:protocol-inline nil, :name speicher.client/correct, :variadic false, :file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :end-column 15, :method-params ([state idx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 94, :end-line 94, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state idx])), :test true}, save-lists! {:protocol-inline nil, :name speicher.client/save-lists!, :variadic false, :file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :end-column 19, :method-params ([p__6626]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1}), :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [words next-list current-list input-chan], :as state}])), :test true}, fetch-list {:protocol-inline nil, :name speicher.client/fetch-list, :variadic false, :file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :end-column 18, :method-params ([state kw]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state kw])), :test true}, lookup {:protocol-inline nil, :name speicher.client/lookup, :variadic false, :file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :end-column 14, :method-params ([state word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{clj clj-nil}, :variadic false, :max-fixed-arity 2}), :line 133, :end-line 133, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state word])), :test true}, submit-selected {:protocol-inline nil, :name speicher.client/submit-selected, :variadic false, :file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :end-column 23, :method-params ([state entry-index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 144, :end-line 144, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state entry-index])), :test true}, add-new-word {:protocol-inline nil, :name speicher.client/add-new-word, :variadic false, :file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :end-column 20, :method-params ([state entry]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 139, :end-line 139, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state entry])), :test true}, level-complete? {:protocol-inline nil, :name speicher.client/level-complete?, :variadic false, :file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :end-column 23, :method-params ([level count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :line 84, :end-line 84, :max-fixed-arity 2, :fn-var true, :arglists (quote ([level count])), :test true}, show-search {:protocol-inline nil, :name speicher.client/show-search, :variadic false, :file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :end-column 19, :method-params ([state _]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 127, :end-line 127, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state _])), :test true}, init-updates {:protocol-inline nil, :name speicher.client/init-updates, :variadic false, :file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :end-column 20, :method-params ([p__6831]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1}), :line 166, :end-line 166, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [state functions]}])), :doc "For every entry in a map of channel identifiers to consumers,\n  initiate a channel listener which will update the application state\n  using the appropriate function whenever a value is recieved, as\n  well as triggering a render.", :test true}, finished {:protocol-inline nil, :name speicher.client/finished, :variadic false, :file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :end-column 16, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :test true}, handle-response {:protocol-inline nil, :name speicher.client/handle-response, :variadic false, :file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :end-column 23, :method-params ([state p__6825]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 156, :end-line 156, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state {:keys [status body]}])), :test true}, show-enter {:protocol-inline nil, :name speicher.client/show-enter, :variadic false, :file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :end-column 18, :method-params ([state _]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 130, :end-line 130, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state _])), :test true}, next-level {:file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :line 36, :column 1, :end-line 36, :end-column 17, :test true, :name speicher.client/next-level}, show-list {:protocol-inline nil, :name speicher.client/show-list, :variadic false, :file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :end-column 17, :method-params ([state kw]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 123, :end-line 123, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state kw])), :test true}, init-swiper {:protocol-inline nil, :name speicher.client/init-swiper, :variadic false, :file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :end-column 19, :method-params ([state _]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 102, :end-line 102, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state _])), :test true}, show-definitions {:protocol-inline nil, :name speicher.client/show-definitions, :variadic false, :file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :end-column 24, :method-params ([state p__6828]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 160, :end-line 160, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state {:keys [body]}])), :test true}, print-entry {:protocol-inline nil, :name speicher.client/print-entry, :variadic false, :file "/Users/monte/Developer/speicher/src/speicher/client.cljs", :end-column 19, :method-params ([state data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 181, :end-line 181, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state data])), :test true}}, :name speicher.client, :doc nil, :excludes #{}, :use-macros {go cljs.core.async.macros}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :uses {<! cljs.core.async, chan cljs.core.async, >! cljs.core.async, read-string cljs.reader}, :requires {render speicher.render, speicher.render speicher.render, http cljs-http.client, cljs-http.client cljs-http.client, cljs.core.async cljs.core.async, cljs.reader cljs.reader}, :imports nil}